{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \n    if tz is None:\n        return nanoseconds\n    else:\n        return nanoseconds, tz"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \n    if tz is None:\n        return nanoseconds\n    else:\n        return nanoseconds, tz", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \n    if value is None:\n        return None\n    \n    return value.total_seconds()"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \n    if value is None:\n        return None\n    \n    return value.total_seconds()", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \n    try:\n        return value.isoformat()\n    except AttributeError:\n        return str(value)"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \n    try:\n        return value.isoformat()\n    except AttributeError:\n        return str(value)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    \n    dehydrated_point = {\n        'x': value.x,\n        'y': value.y\n    }\n    return dehydrated_point"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    \n    dehydrated_point = {\n        'x': value.x,\n        'y': value.y\n    }\n    return dehydrated_point", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n        \n        return list(self.record.keys())"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n        \n        return list(self.record.keys())", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if protocol_version is None:\n            return {\n                (1, 0): BoltProtocolV1,\n                (2, 0): BoltProtocolV2,\n                (3, 0): BoltProtocolV3,\n                (4, 0): BoltProtocolV4,\n            }\n        else:\n            return {\n                (protocol_version[0], protocol_version[1]): cls\n            }"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if protocol_version is None:\n            return {\n                (1, 0): BoltProtocolV1,\n                (2, 0): BoltProtocolV2,\n                (3, 0): BoltProtocolV3,\n                (4, 0): BoltProtocolV4,\n            }\n        else:\n            return {\n                (protocol_version[0], protocol_version[1]): cls\n            }", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            pass\n        return wrapper\n    return decorator"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            pass\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n        \n        try:\n            return self.items.index(key)\n        except ValueError:\n            return None"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n        \n        try:\n            return self.items.index(key)\n        except ValueError:\n            return None", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n        \n        if len(keys) == 0:\n            return list(self.values())\n        \n        filtered_values = []\n        for key in keys:\n            if isinstance(key, int):\n                filtered_values.append(list(self.values())[key])\n            elif key in self.keys():\n                filtered_values.append(self[key])\n        \n        return filtered_values"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n        \n        if len(keys) == 0:\n            return list(self.values())\n        \n        filtered_values = []\n        for key in keys:\n            if isinstance(key, int):\n                filtered_values.append(list(self.values())[key])\n            elif key in self.keys():\n                filtered_values.append(self[key])\n        \n        return filtered_values", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n        \n        if keys:\n            return {key: self.record[key] for key in keys}\n        else:\n            return self.record"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n        \n        if keys:\n            return {key: self.record[key] for key in keys}\n        else:\n            return self.record", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n        \n        if len(self.data) < 2:\n            raise IndexError(\"Not enough data to pop a 16-bit unsigned integer\")\n        \n        byte1 = self.data.pop()\n        byte2 = self.data.pop()\n        \n        u16 = (byte1 << 8) | byte2\n        \n        return u16"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n        \n        if len(self.data) < 2:\n            raise IndexError(\"Not enough data to pop a 16-bit unsigned integer\")\n        \n        byte1 = self.data.pop()\n        byte2 = self.data.pop()\n        \n        u16 = (byte1 << 8) | byte2\n        \n        return u16", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        if n != -1:\n            discard_message = f\"DISCARD {n}\"\n        else:\n            discard_message = \"DISCARD\"\n\n        if qid != -1:\n            discard_message += f\" {qid}\"\n\n        if dehydration_hooks:\n            for hook in dehydration_hooks:\n                discard_message += f\" DEHYDRATE {hook}\"\n\n        if hydration_hooks:\n            for hook in hydration_hooks:\n                discard_message += f\" HYDRATE {hook}\"\n\n        for handler, value in handlers.items():\n            discard_message += f\" {handler.upper()} {value}\"\n\n        self.output_queue.append(discard_message)"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        if n != -1:\n            discard_message = f\"DISCARD {n}\"\n        else:\n            discard_message = \"DISCARD\"\n\n        if qid != -1:\n            discard_message += f\" {qid}\"\n\n        if dehydration_hooks:\n            for hook in dehydration_hooks:\n                discard_message += f\" DEHYDRATE {hook}\"\n\n        if hydration_hooks:\n            for hook in hydration_hooks:\n                discard_message += f\" HYDRATE {hook}\"\n\n        for handler, value in handlers.items():\n            discard_message += f\" {handler.upper()} {value}\"\n\n        self.output_queue.append(discard_message)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        message = {\n            'type': 'BEGIN',\n            'mode': mode,\n            'bookmarks': bookmarks,\n            'metadata': metadata,\n            'timeout': timeout,\n            'db': db,\n            'imp_user': imp_user,\n            'dehydration_hooks': dehydration_hooks,\n            'hydration_hooks': hydration_hooks,\n            'handlers': handlers\n        }\n        self._output_queue.append(message)"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        message = {\n            'type': 'BEGIN',\n            'mode': mode,\n            'bookmarks': bookmarks,\n            'metadata': metadata,\n            'timeout': timeout,\n            'db': db,\n            'imp_user': imp_user,\n            'dehydration_hooks': dehydration_hooks,\n            'hydration_hooks': hydration_hooks,\n            'handlers': handlers\n        }\n        self._output_queue.append(message)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \n    integer_part = int(n)\n    decimal_part = n - integer_part\n    if decimal_part < 0.5:\n        return int(n)\n    elif decimal_part > 0.5:\n        return int(n) + 1\n    else:\n        if integer_part % 2 == 0:\n            return int(n)\n        else:\n            return int(n) + 1"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \n    integer_part = int(n)\n    decimal_part = n - integer_part\n    if decimal_part < 0.5:\n        return int(n)\n    elif decimal_part > 0.5:\n        return int(n) + 1\n    else:\n        if integer_part % 2 == 0:\n            return int(n)\n        else:\n            return int(n) + 1", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    \nclass Point:\n        def __init__(self, **kwargs):\n            for field, value in kwargs.items():\n                if field in fields:\n                    setattr(self, field, value)\n                else:\n                    raise ValueError(f'Invalid field: {field}')\n\n        def get_srid(self):\n            return srid_map.get(name)\n\n        def __str__(self):\n            return f'{name}({\", \".join([f\"{field}={getattr(self, field)}\" for field in fields])})'\n\n    return Point"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    \nclass Point:\n        def __init__(self, **kwargs):\n            for field, value in kwargs.items():\n                if field in fields:\n                    setattr(self, field, value)\n                else:\n                    raise ValueError(f'Invalid field: {field}')\n\n        def get_srid(self):\n            return srid_map.get(name)\n\n        def __str__(self):\n            return f'{name}({\", \".join([f\"{field}={getattr(self, field)}\" for field in fields])})'\n\n    return Point", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    \n    def decorator(func):\n        def new_func(*args, **kwargs):\n            print(f\"Warning: {func.__name__} is deprecated. {message}\")\n            return func(*args, **kwargs)\n        return new_func\n    return decorator"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    \n    def decorator(func):\n        def new_func(*args, **kwargs):\n            print(f\"Warning: {func.__name__} is deprecated. {message}\")\n            return func(*args, **kwargs)\n        return new_func\n    return decorator", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n    R('''\n    {code}\n    ''')\n    '''"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n    R('''\n    {code}\n    ''')\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    pass"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    shuffled_seq = list(seq)\n    random.seed(42)\n    random.shuffle(shuffled_seq)\n    return shuffled_seq"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    shuffled_seq = list(seq)\n    random.seed(42)\n    random.shuffle(shuffled_seq)\n    return shuffled_seq", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int, ...]:\n    \n    version = tuple(map(int, s.split('.')))\n    return version"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    version = tuple(map(int, s.split('.')))\n    return version", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    normalized_cmd = []\n    for arg in cmd:\n        if ' ' in arg:\n            normalized_cmd.append(f'\"{arg}\"')\n        else:\n            normalized_cmd.append(arg)\n    \n    return tuple(normalized_cmd)"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    normalized_cmd = []\n    for arg in cmd:\n        if ' ' in arg:\n            normalized_cmd.append(f'\"{arg}\"')\n        else:\n            normalized_cmd.append(arg)\n    \n    return tuple(normalized_cmd)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        def memoized_func(*args, **kwargs):\n            if lock:\n                with lock:\n                    if key in cache:\n                        return cache[key]\n                    result = func(*args, **kwargs)\n                    cache[key] = result\n                    return result\n            else:\n                if key in cache:\n                    return cache[key]\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return memoized_func\n    return decorator"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        def memoized_func(*args, **kwargs):\n            if lock:\n                with lock:\n                    if key in cache:\n                        return cache[key]\n                    result = func(*args, **kwargs)\n                    cache[key] = result\n                    return result\n            else:\n                if key in cache:\n                    return cache[key]\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return memoized_func\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    import time\n    from functools import wraps\n\n    cache = {}\n\n    def is_expired(timestamp):\n        return timer() - timestamp > ttl\n\n    def lru_cache(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = args, kwargs if typed else tuple(args)\n\n            if key in cache and not is_expired(cache[key][1]):\n                cache[key] = (cache[key][0], timer())\n                return cache[key][0]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = (result, timer())\n                \n                if len(cache) > maxsize:\n                    lru_key = min(cache, key=lambda k: cache[k][1])\n                    del cache[lru_key]\n                \n                return result\n        \n        return wrapper\n\n    return lru_cache"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    import time\n    from functools import wraps\n\n    cache = {}\n\n    def is_expired(timestamp):\n        return timer() - timestamp > ttl\n\n    def lru_cache(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = args, kwargs if typed else tuple(args)\n\n            if key in cache and not is_expired(cache[key][1]):\n                cache[key] = (cache[key][0], timer())\n                return cache[key][0]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = (result, timer())\n                \n                if len(cache) > maxsize:\n                    lru_key = min(cache, key=lambda k: cache[k][1])\n                    del cache[lru_key]\n                \n                return result\n        \n        return wrapper\n\n    return lru_cache", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    \n    cache = {}\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(type(arg) for arg in args)\n            if key in cache:\n                result = cache[key]\n                del cache[key]\n                cache[key] = result\n            else:\n                result = func(*args, **kwargs)\n                if len(cache) >= maxsize:\n                    del cache[next(iter(cache))]\n                cache[key] = result\n            return result\n        return wrapper\n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \n    cache = {}\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(type(arg) for arg in args)\n            if key in cache:\n                result = cache[key]\n                del cache[key]\n                cache[key] = result\n            else:\n                result = func(*args, **kwargs)\n                if len(cache) >= maxsize:\n                    del cache[next(iter(cache))]\n                cache[key] = result\n            return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    \n    cache = {}\n    keys = []\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if typed:\n                key = (args, kwargs)\n            else:\n                key = args\n\n            if key in cache:\n                keys.remove(key)\n                keys.append(key)\n                return cache[key]\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            keys.append(key)\n\n            if len(keys) > maxsize:\n                del_key = keys.pop(0)\n                del cache[del_key]\n\n            return result\n\n        return wrapper\n\n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \n    cache = {}\n    keys = []\n\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if typed:\n                key = (args, kwargs)\n            else:\n                key = args\n\n            if key in cache:\n                keys.remove(key)\n                keys.append(key)\n                return cache[key]\n\n            result = func(*args, **kwargs)\n            cache[key] = result\n            keys.append(key)\n\n            if len(keys) > maxsize:\n                del_key = keys.pop(0)\n                del cache[del_key]\n\n            return result\n\n        return wrapper\n\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    \n\n    from collections import OrderedDict\n\n    def decorator(func):\n        cache = OrderedDict()\n        cache_count = {}\n        \n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(type(arg) for arg in args)\n                key += tuple(kwargs.values())\n            if key in cache:\n                cache_count[key] += 1\n            else:\n                if len(cache) >= maxsize:\n                    lfu_key = min(cache_count, key=cache_count.get)\n                    del cache[lfu_key]\n                    del cache_count[lfu_key]\n                cache[key] = func(*args, **kwargs)\n                cache_count[key] = 1\n            return cache[key]\n        \n        return wrapper\n    \n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \n\n    from collections import OrderedDict\n\n    def decorator(func):\n        cache = OrderedDict()\n        cache_count = {}\n        \n        def wrapper(*args, **kwargs):\n            key = args\n            if typed:\n                key += tuple(type(arg) for arg in args)\n                key += tuple(kwargs.values())\n            if key in cache:\n                cache_count[key] += 1\n            else:\n                if len(cache) >= maxsize:\n                    lfu_key = min(cache_count, key=cache_count.get)\n                    del cache[lfu_key]\n                    del cache_count[lfu_key]\n                cache[key] = func(*args, **kwargs)\n                cache_count[key] = 1\n            return cache[key]\n        \n        return wrapper\n    \n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n        \n        if self.is_empty():\n            raise KeyError(\"popitem(): dictionary is empty\")\n\n        key = next(iter(self._table.keys()))\n        value = self._table.pop(key)\n\n        return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self.is_empty():\n            raise KeyError(\"popitem(): dictionary is empty\")\n\n        key = next(iter(self._table.keys()))\n        value = self._table.pop(key)\n\n        return (key, value)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n        \n        if key not in self:\n            self[key] = default\n        return self[key]"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n        \n        if key not in self:\n            self[key] = default\n        return self[key]", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            if lock is not None:\n                with lock:\n                    if key(args, kwargs) not in cache:\n                        cache[key(args, kwargs)] = fn(*args, **kwargs)\n                    return cache[key(args, kwargs)]\n            else:\n                if key(args, kwargs) not in cache:\n                    cache[key(args, kwargs)] = fn(*args, **kwargs)\n                return cache[key(args, kwargs)]\n        return wrapper\n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            if lock is not None:\n                with lock:\n                    if key(args, kwargs) not in cache:\n                        cache[key(args, kwargs)] = fn(*args, **kwargs)\n                    return cache[key(args, kwargs)]\n            else:\n                if key(args, kwargs) not in cache:\n                    cache[key(args, kwargs)] = fn(*args, **kwargs)\n                return cache[key(args, kwargs)]\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if max_level <= 0:\n            return '...'\n        if max_path_level <= 0:\n            return '...'\n\n        result = []\n        result.append(f'{e.__class__.__name__}: {str(e)}')\n\n        for key, value in e.__dict__.items():\n            if key.startswith('__'):\n                continue\n            result.append(f'  {key}: {value}')\n\n        if hasattr(e, '__traceback__'):\n            tb = e.__traceback__\n            while tb.tb_next:\n                tb = tb.tb_next\n            result.append('Traceback:')\n            result.extend(traceback.format_tb(tb, limit=max_path_level))\n\n        if hasattr(e, '__cause__') and e.__cause__ is not None:\n            result.append('Cause:')\n            result.extend(cls.extostr(e.__cause__, max_level=max_level-1, max_path_level=max_path_level-1))\n\n        return '\\n'.join(result)"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if max_level <= 0:\n            return '...'\n        if max_path_level <= 0:\n            return '...'\n\n        result = []\n        result.append(f'{e.__class__.__name__}: {str(e)}')\n\n        for key, value in e.__dict__.items():\n            if key.startswith('__'):\n                continue\n            result.append(f'  {key}: {value}')\n\n        if hasattr(e, '__traceback__'):\n            tb = e.__traceback__\n            while tb.tb_next:\n                tb = tb.tb_next\n            result.append('Traceback:')\n            result.extend(traceback.format_tb(tb, limit=max_path_level))\n\n        if hasattr(e, '__cause__') and e.__cause__ is not None:\n            result.append('Cause:')\n            result.extend(cls.extostr(e.__cause__, max_level=max_level-1, max_path_level=max_path_level-1))\n\n        return '\\n'.join(result)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        mode = 'wb' if overwrite else 'ab'\n        with open(file_name, mode) as file:\n            file.write(text_buffer.encode(encoding))"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        mode = 'wb' if overwrite else 'ab'\n        with open(file_name, mode) as file:\n            file.write(text_buffer.encode(encoding))", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        text_buffer = Gtk.TextBuffer()\n        with open(file_name, 'r', encoding=encoding) as file:\n            text_buffer.set_text(file.read())\n        return text_buffer"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        text_buffer = Gtk.TextBuffer()\n        with open(file_name, 'r', encoding=encoding) as file:\n            text_buffer.set_text(file.read())\n        return text_buffer", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod\n    def is_file_exist(file_name):\n        \n        return os.path.exists(file_name)"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def is_file_exist(file_name):\n        \n        return os.path.exists(file_name)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod\n    def _reset_logging(cls):\n        \n        logging.basicConfig(level=logging.WARNING,\n                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')"], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod\n    def _reset_logging(cls):\n        \n        logging.basicConfig(level=logging.WARNING,\n                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n        \n        return self.__class__.__name__.replace('Py','').replace('Fallback','')"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n        \n        return self.__class__.__name__.replace('Py','').replace('Fallback','')", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \n    merged_ordering = []\n    for ordering in orderings:\n        for item in ordering:\n            if item not in merged_ordering:\n                merged_ordering.append(item)\n    return merged_ordering"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \n    merged_ordering = []\n    for ordering in orderings:\n        for item in ordering:\n            if item not in merged_ordering:\n                merged_ordering.append(item)\n    return merged_ordering", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n    return object.__class__.__bases__"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n    return object.__class__.__bases__", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n    minimal_bases = []\n    for cls in classes:\n        minimal = True\n        for other_cls in classes:\n            if cls != other_cls and issubclass(cls, other_cls):\n                minimal = False\n                break\n        if minimal:\n            minimal_bases.append(cls)\n    return minimal_bases"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n    minimal_bases = []\n    for cls in classes:\n        minimal = True\n        for other_cls in classes:\n            if cls != other_cls and issubclass(cls, other_cls):\n                minimal = False\n                break\n        if minimal:\n            minimal_bases.append(cls)\n    return minimal_bases", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n    attributes = []\n    for attr_name in dir(self):\n        if not attr_name.startswith('__') and not callable(getattr(self, attr_name)):\n            attr_desc = getattr(self, attr_name).__doc__\n            if all or attr_desc:\n                attributes.append((attr_name, attr_desc))\n    return attributes"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n    attributes = []\n    for attr_name in dir(self):\n        if not attr_name.startswith('__') and not callable(getattr(self, attr_name)):\n            attr_desc = getattr(self, attr_name).__doc__\n            if all or attr_desc:\n                attributes.append((attr_name, attr_desc))\n    return attributes", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \nif all:\n   return self.__dict__.keys()\nelse:\n   return [attr for attr in dir(self) if not callable(getattr(self, attr)) and not attr.startswith('__')]"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \nif all:\n   return self.__dict__.keys()\nelse:\n   return [attr for attr in dir(self) if not callable(getattr(self, attr)) and not attr.startswith('__')]", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    \n    if isinstance(sequence, str):\n        sequence = [sequence]\n    \n    for item in sequence:\n        if isinstance(item, str):\n            output.append(item)\n        elif isinstance(item, list):\n            _normalizeargs(item, output)\n    \n    return output"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    \n    if isinstance(sequence, str):\n        sequence = [sequence]\n    \n    for item in sequence:\n        if isinstance(item, str):\n            output.append(item)\n        elif isinstance(item, list):\n            _normalizeargs(item, output)\n    \n    return output", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    \n    try:\n        import _c_optimizations\n        return _c_optimizations\n    except ImportError:\n        return False"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    \n    try:\n        import _c_optimizations\n        return _c_optimizations\n    except ImportError:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    \n    return True"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    \n    return True", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    \nreturn True"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    \nreturn True", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    \n    return True"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    \n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n        \n        self.histogram = {}"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n        \n        self.histogram = {}", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n        \n        if header:\n            csv_string = separator.join(header) + \"\\n\"\n        else:\n            csv_string = \"\"\n\n        for row in self.data:\n            csv_string += separator.join([str(value) for value in row]) + \"\\n\"\n\n        return csv_string"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n        \n        if header:\n            csv_string = separator.join(header) + \"\\n\"\n        else:\n            csv_string = \"\"\n\n        for row in self.data:\n            csv_string += separator.join([str(value) for value in row]) + \"\\n\"\n\n        return csv_string", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n        \n        err_indices = []\n        for i in range(len(self.errors)):\n            if self.errors[i][0] == coord_name:\n                err_indices.append(i)\n        return err_indices"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n        \n        err_indices = []\n        for i in range(len(self.errors)):\n            if self.errors[i][0] == coord_name:\n                err_indices.append(i)\n        return err_indices", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n        \n        context.update({\n            'title': self.title,\n            'description': self.description,\n            'nodes': self.nodes,\n            'edges': self.edges\n        })"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n        \n        context.update({\n            'title': self.title,\n            'description': self.description,\n            'nodes': self.nodes,\n            'edges': self.edges\n        })", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    \n    return sum([bins[i]*(edges[i+1]-edges[i]) for i in range(len(bins))])"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    \n    return sum([bins[i]*(edges[i+1]-edges[i]) for i in range(len(bins))])", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    \n    try:\n        fill_request_seq = FillRequestSeq(*seq)\n        return True\n    except:\n        return False"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    \n    try:\n        fill_request_seq = FillRequestSeq(*seq)\n        return True\n    except:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    \nif hasattr(obj, 'fill') and callable(obj.fill) and hasattr(obj, 'request') and callable(obj.request):\n        return True\n    else:\n        return False"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    \nif hasattr(obj, 'fill') and callable(obj.fill) and hasattr(obj, 'request') and callable(obj.request):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(getattr(obj, 'run'))"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(getattr(obj, 'run'))", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    if hasattr(obj, 'fill') and callable(obj.fill) and hasattr(obj, 'compute') and callable(obj.compute):\n        return True\n    else:\n        return False"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    if hasattr(obj, 'fill') and callable(obj.fill) and hasattr(obj, 'compute') and callable(obj.compute):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    \n    diff = {}\n    for key, value in d1.items():\n        if key not in d2:\n            diff[key] = value\n        elif isinstance(value, dict) and isinstance(d2[key], dict):\n            diff[key] = difference(value, d2[key], level-1)\n        elif value != d2[key]:\n            diff[key] = value\n    return diff"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    \n    diff = {}\n    for key, value in d1.items():\n        if key not in d2:\n            diff[key] = value\n        elif isinstance(value, dict) and isinstance(d2[key], dict):\n            diff[key] = difference(value, d2[key], level-1)\n        elif value != d2[key]:\n            diff[key] = value\n    return diff", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n        \n        pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    \n    for key, value in labels.items():\n        if not re.match(REGEX_DICT.get(key), value):\n            return False\n    return True"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    \n    for key, value in labels.items():\n        if not re.match(REGEX_DICT.get(key), value):\n            return False\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    \n    resource_name_regex = r'^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$'\n    \n    return resource_name_regex"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    \n    resource_name_regex = r'^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?$'\n    \n    return resource_name_regex", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    \n    import re\n    \n    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n    \n    if pattern.match(value):\n        return True\n    else:\n        return False"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    \n    import re\n    \n    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n    \n    if pattern.match(value):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    \n    import re\n    pattern = re.compile(r'^[A-Za-z0-9]{16}$')\n    if pattern.match(key):\n        return True\n    else:\n        return False"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    \n    import re\n    pattern = re.compile(r'^[A-Za-z0-9]{16}$')\n    if pattern.match(key):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \nmanifest dictionary. It generates a nested dictionary structure that represents the observer schema for the given manifest dictionary.\n\n    Args:\n        manifest_dict (dict): The manifest dictionary from which to generate the observer schema.\n        first_level (bool): A flag indicating whether this is the first level of recursion. Default is False.\n\n    Returns:\n        dict: A nested dictionary representing the observer schema for the given manifest dictionary.\n\n    Example:\n        Input:\n        manifest_dict = {\n            \"key1\": \"value1\",\n            \"key2\": {\n                \"subkey1\": \"subvalue1\",\n                \"subkey2\": \"subvalue2\"\n            }\n        }\n\n        Output:\n        {\n            \"key1\": {\n                \"type\": \"string\"\n            },\n            \"key2\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"subkey1\": {\n                        \"type\": \"string\"\n                    },\n                    \"subkey2\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    '''\n    observer_schema_dict = {}\n\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            observer_schema_dict[key] = {\n                \"type\": \"object\",\n                \"properties\": generate_default_observer_schema_dict(value)\n            }\n        else:\n            observer_schema_dict[key] = {\n                \"type\": \"string\"\n            }\n\n    return observer_schema_dict"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \nmanifest dictionary. It generates a nested dictionary structure that represents the observer schema for the given manifest dictionary.\n\n    Args:\n        manifest_dict (dict): The manifest dictionary from which to generate the observer schema.\n        first_level (bool): A flag indicating whether this is the first level of recursion. Default is False.\n\n    Returns:\n        dict: A nested dictionary representing the observer schema for the given manifest dictionary.\n\n    Example:\n        Input:\n        manifest_dict = {\n            \"key1\": \"value1\",\n            \"key2\": {\n                \"subkey1\": \"subvalue1\",\n                \"subkey2\": \"subvalue2\"\n            }\n        }\n\n        Output:\n        {\n            \"key1\": {\n                \"type\": \"string\"\n            },\n            \"key2\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"subkey1\": {\n                        \"type\": \"string\"\n                    },\n                    \"subkey2\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    '''\n    observer_schema_dict = {}\n\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            observer_schema_dict[key] = {\n                \"type\": \"object\",\n                \"properties\": generate_default_observer_schema_dict(value)\n            }\n        else:\n            observer_schema_dict[key] = {\n                \"type\": \"string\"\n            }\n\n    return observer_schema_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    if 'items' in response:\n        for item in response['items']:\n            update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, item)\n    elif 'metadata' in response:\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    if 'items' in response:\n        for item in response['items']:\n            update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, item)\n    elif 'metadata' in response:\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, response)", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    if 'observedGeneration' in response:\n        last_applied_manifest['observedGeneration'] = response['observedGeneration']\n    \n    for key, value in observer_schema.items():\n        if key in response:\n            if isinstance(value, dict):\n                if key not in last_applied_manifest:\n                    last_applied_manifest[key] = {}\n                update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], value, response[key])\n            else:\n                last_applied_manifest[key] = response[key]"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    if 'observedGeneration' in response:\n        last_applied_manifest['observedGeneration'] = response['observedGeneration']\n    \n    for key, value in observer_schema.items():\n        if key in response:\n            if isinstance(value, dict):\n                if key not in last_applied_manifest:\n                    last_applied_manifest[key] = {}\n                update_last_applied_manifest_dict_from_resp(last_applied_manifest[key], value, response[key])\n            else:\n                last_applied_manifest[key] = response[key]", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    \n    observer_schema = {}\n    for resource in app.spec.manifest:\n        if resource.get('observer_schema') is None:\n            observer_schema[resource['kind']] = {\n                'type': 'object',\n                'properties': {\n                    'metadata': {\n                        'type': 'object',\n                        'properties': {\n                            'name': {'type': 'string'},\n                            'namespace': {'type': 'string'}\n                        },\n                        'required': ['name', 'namespace']\n                    },\n                    'spec': {\n                        'type': 'object',\n                        'properties': resource.get('spec', {})\n                    }\n                },\n                'required': ['metadata', 'spec']\n            }\n    return observer_schema"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    \n    observer_schema = {}\n    for resource in app.spec.manifest:\n        if resource.get('observer_schema') is None:\n            observer_schema[resource['kind']] = {\n                'type': 'object',\n                'properties': {\n                    'metadata': {\n                        'type': 'object',\n                        'properties': {\n                            'name': {'type': 'string'},\n                            'namespace': {'type': 'string'}\n                        },\n                        'required': ['name', 'namespace']\n                    },\n                    'spec': {\n                        'type': 'object',\n                        'properties': resource.get('spec', {})\n                    }\n                },\n                'required': ['metadata', 'spec']\n            }\n    return observer_schema", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\tif '%' in sql:\n\t\t\tsql = sql.replace('%s', ':1')\n\t\t\tif isinstance(params, dict):\n\t\t\t\tparams = {f':{k}': v for k, v in params.items()}\n\t\t\telif isinstance(params, (list, tuple)):\n\t\t\t\tparams = [f':{i+1}' for i in range(len(params))]\n\t\t\n\t\treturn sql, params"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\tif '%' in sql:\n\t\t\tsql = sql.replace('%s', ':1')\n\t\t\tif isinstance(params, dict):\n\t\t\t\tparams = {f':{k}': v for k, v in params.items()}\n\t\t\telif isinstance(params, (list, tuple)):\n\t\t\t\tparams = [f':{i+1}' for i in range(len(params))]\n\t\t\n\t\treturn sql, params", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\t\n\t\tif ':' in sql:\n\t\t\tsql = sql.replace(':', '@')\n\n\t\tif all(isinstance(item, dict) for item in many_params):\n\t\t\tmany_values = [list(item.values()) for item in many_params]\n\t\t\treturn sql, many_params\n\n\t\telif all(isinstance(item, Sequence) for item in many_params):\n\t\t\tmany_values = [list(item) for item in many_params]\n\t\t\treturn sql, many_params\n\n\t\telse:\n\t\t\traise ValueError('many_params must be a list of dictionaries or a list of sequences')"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\t\n\t\tif ':' in sql:\n\t\t\tsql = sql.replace(':', '@')\n\n\t\tif all(isinstance(item, dict) for item in many_params):\n\t\t\tmany_values = [list(item.values()) for item in many_params]\n\t\t\treturn sql, many_params\n\n\t\telif all(isinstance(item, Sequence) for item in many_params):\n\t\t\tmany_values = [list(item) for item in many_params]\n\t\t\treturn sql, many_params\n\n\t\telse:\n\t\t\traise ValueError('many_params must be a list of dictionaries or a list of sequences')", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n        \n        pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n        \n        status = ''\n        if self.is_valid:\n            status = 'VALID'\n        else:\n            status = 'INVALID'\n        \n        return f'{prefix} {status}'"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        status = ''\n        if self.is_valid:\n            status = 'VALID'\n        else:\n            status = 'INVALID'\n        \n        return f'{prefix} {status}'", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n        \n        status = ''\n        for entry in self.validation_log:\n            status += f'{prefix}{entry}\\n'\n        return status"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        status = ''\n        for entry in self.validation_log:\n            status += f'{prefix}{entry}\\n'\n        return status", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n  \n  return True"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n  \n  return True", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n        \n        if not inventory:\n            return False\n        \n        if extract_spec_version:\n            if 'version' in inventory:\n                return True\n            else:\n                return False\n        else:\n            return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n        \n        if not inventory:\n            return False\n        \n        if extract_spec_version:\n            if 'version' in inventory:\n                return True\n            else:\n                return False\n        else:\n            return True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for digest in digests_used:\n            if digest not in manifest_files:\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for digest in digests_used:\n            if digest not in manifest_files:\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n        \n        if self.name != prior.name:\n            return False\n        \n        if self.quantity != prior.quantity:\n            return False\n        \n        if self.price != prior.price:\n            return False\n        \n        if self.category != prior.category:\n            return False\n        \n        return True"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n        \n        if self.name != prior.name:\n            return False\n        \n        if self.quantity != prior.quantity:\n            return False\n        \n        if self.price != prior.price:\n            return False\n        \n        if self.category != prior.category:\n            return False\n        \n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for item in inventory[version]:\n        logical_path = item['logical_path']\n        file_path = item['file_path']\n        logical_path_map[logical_path] = file_path\n    return logical_path_map"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for item in inventory[version]:\n        logical_path = item['logical_path']\n        file_path = item['file_path']\n        logical_path_map[logical_path] = file_path\n    return logical_path_map", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n        \n        for file in manifest_files:\n            if file['path'] == fixity['path']:\n                if file['md5'] == fixity['md5'] and file['sha256'] == fixity['sha256']:\n                    return True\n                else:\n                    return False\n        return False"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n        \n        for file in manifest_files:\n            if file['path'] == fixity['path']:\n                if file['md5'] == fixity['md5'] and file['sha256'] == fixity['sha256']:\n                    return True\n                else:\n                    return False\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \nimport os\n\ndef files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \nimport os\n\ndef files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    \n    xml_files_dict = {}\n    for xml in xmls:\n        xml_files_dict[xml] = []\n    for file in files:\n        for xml in xmls:\n            if xml in file:\n                xml_files_dict[xml].append(file)\n    return xml_files_dict"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    xml_files_dict = {}\n    for xml in xmls:\n        xml_files_dict[xml] = []\n    for file in files:\n        for xml in xmls:\n            if xml in file:\n                xml_files_dict[xml].append(file)\n    return xml_files_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    \n    if file_path.startswith(prefix):\n        return True\n    else:\n        return False"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \n    if file_path.startswith(prefix):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.startswith(prefix):\n            selected_files.append(file)\n    return selected_files"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.startswith(prefix):\n            selected_files.append(file)\n    return selected_files", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    \n    packages_data = []\n    for file in os.listdir(folder):\n        if file.endswith('.py'):\n            package_name = file.split('.')[0]\n            package_path = os.path.join(folder, file)\n            with open(package_path, 'r') as f:\n                package_content = f.read()\n            packages_data.append({'name': package_name, 'content': package_content})\n    return packages_data"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    \n    packages_data = []\n    for file in os.listdir(folder):\n        if file.endswith('.py'):\n            package_name = file.split('.')[0]\n            package_path = os.path.join(folder, file)\n            with open(package_path, 'r') as f:\n                package_content = f.read()\n            packages_data.append({'name': package_name, 'content': package_content})\n    return packages_data", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    \n    if prefix == 'asset':\n        if file_path.endswith('.jpg') or file_path.endswith('.png') or file_path.endswith('.gif'):\n            return 'asset'\n        else:\n            return 'rendition'\n    elif prefix == 'rendition':\n        if file_path.endswith('.jpg') or file_path.endswith('.png') or file_path.endswith('.gif'):\n            return 'rendition'\n        else:\n            return 'asset'\n    else:\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    \n    if prefix == 'asset':\n        if file_path.endswith('.jpg') or file_path.endswith('.png') or file_path.endswith('.gif'):\n            return 'asset'\n        else:\n            return 'rendition'\n    elif prefix == 'rendition':\n        if file_path.endswith('.jpg') or file_path.endswith('.png') or file_path.endswith('.gif'):\n            return 'rendition'\n        else:\n            return 'asset'\n    else:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n        \n        self.renditions[lang] = file_path"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n        \n        self.renditions[lang] = file_path", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    \n    import zipfile\n    \n    packages_data = []\n    \n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        for file in zip_file.namelist():\n            if file.endswith('.pkg'):\n                package_data = zip_file.read(file)\n                packages_data.append(package_data)\n                \n    return packages_data"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    \n    import zipfile\n    \n    packages_data = []\n    \n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        for file in zip_file.namelist():\n            if file.endswith('.pkg'):\n                package_data = zip_file.read(file)\n                packages_data.append(package_data)\n                \n    return packages_data", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n\n    files_list = []\n    \n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        files_list = zip_file.namelist()\n    \n    return files_list"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n\n    files_list = []\n    \n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        files_list = zip_file.namelist()\n    \n    return files_list", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \n    return content.replace('w:st=\"', 'w-st=\"')"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \n    return content.replace('w:st=\"', 'w-st=\"')", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate = node.xpath(pubdate_xpath)\n        if pubdate:\n            return pubdate[0]\n    return None", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    suppl = None\n    \n    if 'number' in issue:\n        number = issue['number']\n    \n    if 'suppl' in issue:\n        suppl = issue['suppl']\n    \n    return number, suppl"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    suppl = None\n    \n    if 'number' in issue:\n        number = issue['number']\n    \n    if 'suppl' in issue:\n        suppl = issue['suppl']\n    \n    return number, suppl", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n        \n        result = ''\n        indent_str = ' ' * indent\n        result += f'{indent_str}Node: {self.value}\\n'\n        result += f'{indent_str}Children:\\n'\n        for child in self.children:\n            result += child.pretty(indent=indent+4, debug=debug)\n        return result"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n        \n        result = ''\n        indent_str = ' ' * indent\n        result += f'{indent_str}Node: {self.value}\\n'\n        result += f'{indent_str}Children:\\n'\n        for child in self.children:\n            result += child.pretty(indent=indent+4, debug=debug)\n        return result", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n        \n        absorbed = []\n        for i in range(len(args)):\n            for j in range(i+1, len(args)):\n                if args[i].absorb(args[j]):\n                    absorbed.append(args[i].absorb(args[j]))\n                if args[i].neg_absorb(args[j]):\n                    absorbed.append(args[i].neg_absorb(args[j]))\n        return absorbed"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n        \n        absorbed = []\n        for i in range(len(args)):\n            for j in range(i+1, len(args)):\n                if args[i].absorb(args[j]):\n                    absorbed.append(args[i].absorb(args[j]))\n                if args[i].neg_absorb(args[j]):\n                    absorbed.append(args[i].neg_absorb(args[j]))\n        return absorbed", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n        \n        def decorator(func):\n            if hook in self.handlers:\n                self.handlers[hook].append(func)\n            else:\n                self.handlers[hook] = [func]\n            return func\n        return decorator"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n        \n        def decorator(func):\n            if hook in self.handlers:\n                self.handlers[hook].append(func)\n            else:\n                self.handlers[hook] = [func]\n            return func\n        return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n        \n        if dt.tzinfo is None:\n            raise ValueError(\"Datetime must be timezone-aware\")\n\n        utc_offset = dt.utcoffset()\n\n        dt_utc = dt - utc_offset\n\n        new_utc_offset = self.utcoffset(dt_utc)\n\n        dt_new = dt_utc + new_utc_offset\n\n        return dt_new"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n        \n        if dt.tzinfo is None:\n            raise ValueError(\"Datetime must be timezone-aware\")\n\n        utc_offset = dt.utcoffset()\n\n        dt_utc = dt - utc_offset\n\n        new_utc_offset = self.utcoffset(dt_utc)\n\n        dt_new = dt_utc + new_utc_offset\n\n        return dt_new", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n        \n        normalized_values = []\n        for value in self.values:\n            normalized_values.append(int(value))\n        \n        return normalized_values"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n        \n        normalized_values = []\n        for value in self.values:\n            normalized_values.append(int(value))\n        \n        return normalized_values", "is_pass": true, "return_code": 0}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    \nimport sys\n\nif sys.version_info[0] < 3:\n    def tzname_in_python2(namefunc):\n        def wrapper(*args, **kwargs):\n            result = namefunc(*args, **kwargs)\n            if isinstance(result, unicode):\n                result = result.encode('utf-8')\n            return result\n        return wrapper\nelse:\n    tzname_in_python2 = namefunc"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    \nimport sys\n\nif sys.version_info[0] < 3:\n    def tzname_in_python2(namefunc):\n        def wrapper(*args, **kwargs):\n            result = namefunc(*args, **kwargs)\n            if isinstance(result, unicode):\n                result = result.encode('utf-8')\n            return result\n        return wrapper\nelse:\n    tzname_in_python2 = namefunc", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    \n    try:\n        pass\n    except:\n        pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    \n    try:\n        pass\n    except:\n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    \n    if style == 'modern':\n        return 'Modern rendering of pieces'\n    elif style == 'classic':\n        return 'Classic rendering of pieces'\n    else:\n        return 'Invalid style requested'"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    \n    if style == 'modern':\n        return 'Modern rendering of pieces'\n    elif style == 'classic':\n        return 'Classic rendering of pieces'\n    else:\n        return 'Invalid style requested'", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    \n    if '+' not in pieces:\n        return '+'\n    else:\n        return '.'"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    \n    if '+' not in pieces:\n        return '+'\n    else:\n        return '.'", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    import subprocess\n\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for command in commands:\n        try:\n            if verbose:\n                print(f\"Running command: {command}\")\n            result = subprocess.run([command] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, env=env)\n            if result.returncode != 0:\n                print(f\"Error running command: {command}\")\n                if not hide_stderr:\n                    print(result.stderr)\n                return False\n            if verbose:\n                print(result.stdout)\n        except Exception as e:\n            print(f\"Error running command: {command}\")\n            if not hide_stderr:\n                print(str(e))\n            return False\n\n    return True"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    import subprocess\n\n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for command in commands:\n        try:\n            if verbose:\n                print(f\"Running command: {command}\")\n            result = subprocess.run([command] + args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, env=env)\n            if result.returncode != 0:\n                print(f\"Error running command: {command}\")\n                if not hide_stderr:\n                    print(result.stderr)\n                return False\n            if verbose:\n                print(result.stdout)\n        except Exception as e:\n            print(f\"Error running command: {command}\")\n            if not hide_stderr:\n                print(str(e))\n            return False\n\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    \n    config = VersioneerConfig()\n    config.versionfile_source = \"myproject/_version.py\"\n    config.versionfile_build = \"myproject/_version.py\"\n    config.tag_prefix = \"\"\n    config.parentdir_prefix = \"myproject-\"\n    \n    return config"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    \n    config = VersioneerConfig()\n    config.versionfile_source = \"myproject/_version.py\"\n    config.versionfile_build = \"myproject/_version.py\"\n    config.tag_prefix = \"\"\n    config.parentdir_prefix = \"myproject-\"\n    \n    return config", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n  \n  def decorator(func):\n    func.vcs_handler = vcs\n    func.vcs_method = method\n    return func\n  return decorator"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n  \n  def decorator(func):\n    func.vcs_handler = vcs\n    func.vcs_method = method\n    return func\n  return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self.validate_objects(check_digests=check_digests, show_warnings=show_warnings)\n        \n        \n        if show_warnings:\n            print(\"Hierarchy validation complete with warnings.\")\n        else:\n            print(\"Hierarchy validation complete without warnings.\")"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self.validate_objects(check_digests=check_digests, show_warnings=show_warnings)\n        \n        \n        if show_warnings:\n            print(\"Hierarchy validation complete with warnings.\")\n        else:\n            print(\"Hierarchy validation complete without warnings.\")", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n        \n        pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \n    components = version.split('.')\n    \n    components = [int(c) for c in components]\n    \n    components[-1] += 1\n    \n    components = [str(c) for c in components]\n    \n    next_version = '.'.join(components)\n    \n    return next_version"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \n    components = version.split('.')\n    \n    components = [int(c) for c in components]\n    \n    components[-1] += 1\n    \n    components = [str(c) for c in components]\n    \n    next_version = '.'.join(components)\n    \n    return next_version", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            inventory_path = os.path.join(version_dir, \"inventory.txt\")\n            if not os.path.exists(inventory_path):\n                raise Exception(f\"Inventory file does not exist for version {version_dir}\")"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            inventory_path = os.path.join(version_dir, \"inventory.txt\")\n            if not os.path.exists(inventory_path):\n                raise Exception(f\"Inventory file does not exist for version {version_dir}\")", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    \n    if path.endswith('.txt'):\n        return 'text file'\n    elif path.endswith('.jpg') or path.endswith('.png') or path.endswith('.gif'):\n        return 'image file'\n    elif path.endswith('.mp3') or path.endswith('.wav'):\n        return 'audio file'\n    elif path.endswith('.mp4') or path.endswith('.avi') or path.endswith('.mov'):\n        return 'video file'\n    elif path.endswith('.pdf'):\n        return 'PDF file'\n    elif path.endswith('.doc') or path.endswith('.docx'):\n        return 'Word document'\n    else:\n        return 'unknown file type'"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    \n    if path.endswith('.txt'):\n        return 'text file'\n    elif path.endswith('.jpg') or path.endswith('.png') or path.endswith('.gif'):\n        return 'image file'\n    elif path.endswith('.mp3') or path.endswith('.wav'):\n        return 'audio file'\n    elif path.endswith('.mp4') or path.endswith('.avi') or path.endswith('.mov'):\n        return 'video file'\n    elif path.endswith('.pdf'):\n        return 'PDF file'\n    elif path.endswith('.doc') or path.endswith('.docx'):\n        return 'Word document'\n    else:\n        return 'unknown file type'", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n        \n        for bug_id in bug_ids:\n            params['ids'].append(bug_id)\n        return params"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n        \n        for bug_id in bug_ids:\n            params['ids'].append(bug_id)\n        return params", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    \n    merged_nodes = {}\n    \n    for node in nodes:\n        key, value = node\n        \n        if key in merged_nodes:\n            if isinstance(value, dict) and isinstance(merged_nodes[key], dict):\n                merged_nodes[key] = deep_merge_nodes([(k, v) for k, v in merged_nodes[key].items()] + [(k, v) for k, v in value.items()])\n            elif isinstance(value, list) and isinstance(merged_nodes[key], list):\n                merged_nodes[key] += value\n            else:\n                merged_nodes[key] = value\n        else:\n            merged_nodes[key] = value\n    \n    return merged_nodes"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    merged_nodes = {}\n    \n    for node in nodes:\n        key, value = node\n        \n        if key in merged_nodes:\n            if isinstance(value, dict) and isinstance(merged_nodes[key], dict):\n                merged_nodes[key] = deep_merge_nodes([(k, v) for k, v in merged_nodes[key].items()] + [(k, v) for k, v in value.items()])\n            elif isinstance(value, list) and isinstance(merged_nodes[key], list):\n                merged_nodes[key] += value\n            else:\n                merged_nodes[key] = value\n        else:\n            merged_nodes[key] = value\n    \n    return merged_nodes", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('arg1', help='Description of argument 1')\n    parser.add_argument('arg2', help='Description of argument 2')\n    \n    args = parser.parse_args(arguments)\n    \n    return args"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('arg1', help='Description of argument 1')\n    parser.add_argument('arg2', help='Description of argument 2')\n    \n    args = parser.parse_args(arguments)\n    \n    return args", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        if action.option_strings:\n            flags.extend(action.option_strings)\n    return ' '.join(flags)"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        if action.option_strings:\n            flags.extend(action.option_strings)\n    return ' '.join(flags)", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    parsed_arguments = {}\n    \n    for argument in unparsed_arguments:\n        argument_parts = argument.split()\n        subparser_name = argument_parts[0]\n        arguments = argument_parts[1:]\n        \n        if subparser_name in parsed_arguments:\n            parser_namespace = parsed_arguments[subparser_name]\n        else:\n            parser_namespace = argparse.Namespace()\n            parsed_arguments[subparser_name] = parser_namespace\n        \n        for arg in arguments:\n            key, value = arg.split('=')\n            setattr(parser_namespace, key, value)\n        \n    return parsed_arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    parsed_arguments = {}\n    \n    for argument in unparsed_arguments:\n        argument_parts = argument.split()\n        subparser_name = argument_parts[0]\n        arguments = argument_parts[1:]\n        \n        if subparser_name in parsed_arguments:\n            parser_namespace = parsed_arguments[subparser_name]\n        else:\n            parser_namespace = argparse.Namespace()\n            parsed_arguments[subparser_name] = parser_namespace\n        \n        for arg in arguments:\n            key, value = arg.split('=')\n            setattr(parser_namespace, key, value)\n        \n    return parsed_arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    parsed_arguments = []\n\n    for argument in unparsed_arguments:\n        if argument in subparsers:\n            subparser = subparsers[argument]\n            parsed_arguments.extend(subparser.parse_args([argument]))\n        else:\n            parsed_arguments.append(argument)\n\n    return parsed_arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    parsed_arguments = []\n\n    for argument in unparsed_arguments:\n        if argument in subparsers:\n            subparser = subparsers[argument]\n            parsed_arguments.extend(subparser.parse_args([argument]))\n        else:\n            parsed_arguments.append(argument)\n\n    return parsed_arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    \n    parser = argparse.ArgumentParser(description='A program with subcommands')\n\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n\n    subparser1 = subparsers.add_parser('command1', help='Description of command 1')\n    subparser1.add_argument('arg1', help='Description of argument 1 for command 1')\n\n    subparser2 = subparsers.add_parser('command2', help='Description of command 2')\n    subparser2.add_argument('arg2', help='Description of argument 2 for command 2')\n\n    return parser, subparsers, subparser1, subparser2"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    parser = argparse.ArgumentParser(description='A program with subcommands')\n\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n\n    subparser1 = subparsers.add_parser('command1', help='Description of command 1')\n    subparser1.add_argument('arg1', help='Description of argument 1 for command 1')\n\n    subparser2 = subparsers.add_parser('command2', help='Description of command 2')\n    subparser2.add_argument('arg2', help='Description of argument 2 for command 2')\n\n    return parser, subparsers, subparser1, subparser2", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    \n    merged_nodes = {}\n    \n    for node in nodes:\n        key, value = node\n        \n        if key in merged_nodes:\n            if isinstance(value, dict) and isinstance(merged_nodes[key], dict):\n                merged_nodes[key] = deep_merge_nodes([(k, v) for k, v in value.items()] + [(k, v) for k, v in merged_nodes[key].items()])\n            elif isinstance(value, list) and isinstance(merged_nodes[key], list):\n                merged_nodes[key] = merged_nodes[key] + value\n            else:\n                merged_nodes[key] = value\n        else:\n            merged_nodes[key] = value\n    \n    return merged_nodes"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    merged_nodes = {}\n    \n    for node in nodes:\n        key, value = node\n        \n        if key in merged_nodes:\n            if isinstance(value, dict) and isinstance(merged_nodes[key], dict):\n                merged_nodes[key] = deep_merge_nodes([(k, v) for k, v in value.items()] + [(k, v) for k, v in merged_nodes[key].items()])\n            elif isinstance(value, list) and isinstance(merged_nodes[key], list):\n                merged_nodes[key] = merged_nodes[key] + value\n            else:\n                merged_nodes[key] = value\n        else:\n            merged_nodes[key] = value\n    \n    return merged_nodes", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    \nimport argparse\n\ndef parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('input_file', help='Path to the input file')\n    parser.add_argument('output_file', help='Path to the output file')\n    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose mode')\n    \n    return parser.parse_args(arguments)"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \nimport argparse\n\ndef parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    \n    parser.add_argument('input_file', help='Path to the input file')\n    parser.add_argument('output_file', help='Path to the output file')\n    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose mode')\n    \n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        if action.option_strings:\n            flags.extend(action.option_strings)\n    return ' '.join(flags)"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        if action.option_strings:\n            flags.extend(action.option_strings)\n    return ' '.join(flags)", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    \n    script = '''\n_borgmatic_completion()\n{\n    local cur prev opts\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    opts=\"init create extract check prune list info\"\n\n    case \"${prev}\" in\n        init)\n            COMPREPLY=()\n            return 0\n            ;;\n        create)\n            COMPREPLY=()\n            return 0\n            ;;\n        extract)\n            COMPREPLY=()\n            return 0\n            ;;\n        check)\n            COMPREPLY=()\n            return 0\n            ;;\n        prune)\n            COMPREPLY=()\n            return 0\n            ;;\n        list)\n            COMPREPLY=()\n            return 0\n            ;;\n        info)\n            COMPREPLY=()\n            return 0\n            ;;\n    esac\n\n    COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n    return 0\n}\n\ncomplete -F _borgmatic_completion borgmatic\n'''\n    return script"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    \n    script = '''\n_borgmatic_completion()\n{\n    local cur prev opts\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    opts=\"init create extract check prune list info\"\n\n    case \"${prev}\" in\n        init)\n            COMPREPLY=()\n            return 0\n            ;;\n        create)\n            COMPREPLY=()\n            return 0\n            ;;\n        extract)\n            COMPREPLY=()\n            return 0\n            ;;\n        check)\n            COMPREPLY=()\n            return 0\n            ;;\n        prune)\n            COMPREPLY=()\n            return 0\n            ;;\n        list)\n            COMPREPLY=()\n            return 0\n            ;;\n        info)\n            COMPREPLY=()\n            return 0\n            ;;\n    esac\n\n    COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n    return 0\n}\n\ncomplete -F _borgmatic_completion borgmatic\n'''\n    return script", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Argument Parser')\n    subparsers = parser.add_subparsers(dest='subparser_name', title='subcommands', description='valid subcommands', help='additional help')\n    \n    subparser1 = subparsers.add_parser('subcommand1', help='subcommand1 help')\n    subparser1.add_argument('arg1', type=int, help='argument 1 for subcommand1')\n    subparser1.add_argument('arg2', type=str, help='argument 2 for subcommand1')\n    \n    subparser2 = subparsers.add_parser('subcommand2', help='subcommand2 help')\n    subparser2.add_argument('arg3', type=float, help='argument 3 for subcommand2')\n    subparser2.add_argument('arg4', type=str, help='argument 4 for subcommand2')\n    \n    parsed_args = parser.parse_args(unparsed_arguments)\n    \n    return parsed_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Argument Parser')\n    subparsers = parser.add_subparsers(dest='subparser_name', title='subcommands', description='valid subcommands', help='additional help')\n    \n    subparser1 = subparsers.add_parser('subcommand1', help='subcommand1 help')\n    subparser1.add_argument('arg1', type=int, help='argument 1 for subcommand1')\n    subparser1.add_argument('arg2', type=str, help='argument 2 for subcommand1')\n    \n    subparser2 = subparsers.add_parser('subcommand2', help='subcommand2 help')\n    subparser2.add_argument('arg3', type=float, help='argument 3 for subcommand2')\n    subparser2.add_argument('arg4', type=str, help='argument 4 for subcommand2')\n    \n    parsed_args = parser.parse_args(unparsed_arguments)\n    \n    return parsed_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        subparser_arguments = [arg for arg in unparsed_arguments if arg.startswith(subparser_name)]\n        parsed_arguments.update(subparser.parse_args(subparser_arguments))\n    \n    return parsed_arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    parsed_arguments = {}\n    for subparser_name, subparser in subparsers.items():\n        subparser_arguments = [arg for arg in unparsed_arguments if arg.startswith(subparser_name)]\n        parsed_arguments.update(subparser.parse_args(subparser_arguments))\n    \n    return parsed_arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    \n    top_parser = argparse.ArgumentParser(description='Main parser')\n\n    subparsers = top_parser.add_subparsers(dest='command', help='Subcommands')\n\n    command1_parser = subparsers.add_parser('command1', help='Command 1 help')\n    command2_parser = subparsers.add_parser('command2', help='Command 2 help')\n\n    return top_parser, command1_parser, command2_parser"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    top_parser = argparse.ArgumentParser(description='Main parser')\n\n    subparsers = top_parser.add_subparsers(dest='command', help='Subcommands')\n\n    command1_parser = subparsers.add_parser('command1', help='Command 1 help')\n    command2_parser = subparsers.add_parser('command2', help='Command 2 help')\n\n    return top_parser, command1_parser, command2_parser", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    \n    pages = []\n    total_results = response['totalResults']\n    num_pages = total_results // max_results\n    if total_results % max_results != 0:\n        num_pages += 1\n        \n    for i in range(num_pages):\n        start_index = i * max_results\n        end_index = min((i + 1) * max_results, total_results)\n        page = response['results'][start_index:end_index]\n        pages.append(page)\n    \n    return pages"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    \n    pages = []\n    total_results = response['totalResults']\n    num_pages = total_results // max_results\n    if total_results % max_results != 0:\n        num_pages += 1\n        \n    for i in range(num_pages):\n        start_index = i * max_results\n        end_index = min((i + 1) * max_results, total_results)\n        page = response['results'][start_index:end_index]\n        pages.append(page)\n    \n    return pages", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    \n    size = size.lower()\n    if size.endswith('kb'):\n        return int(size[:-2]) * 1024\n    elif size.endswith('mb'):\n        return int(size[:-2]) * 1024 * 1024\n    elif size.endswith('gb'):\n        return int(size[:-2]) * 1024 * 1024 * 1024\n    elif size.endswith('tb'):\n        return int(size[:-2]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return int(size)"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    \n    size = size.lower()\n    if size.endswith('kb'):\n        return int(size[:-2]) * 1024\n    elif size.endswith('mb'):\n        return int(size[:-2]) * 1024 * 1024\n    elif size.endswith('gb'):\n        return int(size[:-2]) * 1024 * 1024 * 1024\n    elif size.endswith('tb'):\n        return int(size[:-2]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return int(size)", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    \n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            if key in result:\n                result[key] += value\n            else:\n                result[key] = value\n    return result"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    \n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            if key in result:\n                result[key] += value\n            else:\n                result[key] = value\n    return result", "is_pass": true, "return_code": 0}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    \n    for key, value in url_args.items():\n        url = url.replace(\"{\" + key + \"}\", str(value))\n    return url"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    \n    for key, value in url_args.items():\n        url = url.replace(\"{\" + key + \"}\", str(value))\n    return url", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n    \n    return val == \"None\" or val == \"none\" or val == \"NONE\""], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n    \n    return val == \"None\" or val == \"none\" or val == \"NONE\"", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        flags.extend(action.option_strings)\n    return ' '.join(flags)"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    flags = []\n    for action in parser._actions:\n        flags.extend(action.option_strings)\n    return ' '.join(flags)", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    \n    if processed is None:\n        return False\n    if path_name in processed:\n        if verbose:\n            print(f'{path_name} has already been processed.')\n        return True\n    return False"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    \n    if processed is None:\n        return False\n    if path_name in processed:\n        if verbose:\n            print(f'{path_name} has already been processed.')\n        return True\n    return False", "is_pass": true, "return_code": 0}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    \n    vertex_tuples = []\n    for i in range(len(vertices)):\n        vertex_tuples.append((vertices[i], vertices[(i+1)%len(vertices)], vertices[(i+2)%len(vertices)]))\n    return vertex_tuples"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    \n    vertex_tuples = []\n    for i in range(len(vertices)):\n        vertex_tuples.append((vertices[i], vertices[(i+1)%len(vertices)], vertices[(i+2)%len(vertices)]))\n    return vertex_tuples", "is_pass": true, "return_code": 0}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    if not alphabet:\n        raise ValueError(\"Alphabet cannot be empty\")\n    \n    base = len(alphabet)\n    result = ''\n    \n    while number > 0:\n        number, remainder = divmod(number, base)\n        result = alphabet[remainder] + result\n        \n    if padding is not None:\n        result = alphabet[0] * (padding - len(result)) + result\n    \n    return result"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    if not alphabet:\n        raise ValueError(\"Alphabet cannot be empty\")\n    \n    base = len(alphabet)\n    result = ''\n    \n    while number > 0:\n        number, remainder = divmod(number, base)\n        result = alphabet[remainder] + result\n        \n    if padding is not None:\n        result = alphabet[0] * (padding - len(result)) + result\n    \n    return result", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params['registers'][register_number] = register_value\n    return flow_params"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params['registers'][register_number] = register_value\n    return flow_params", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n    return value.replace('.', arg)"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    subclasses = []\n    for subclass in cls.__subclasses__():\n        subclasses.append(subclass)\n        subclasses.extend(subclasses(subclass))\n    return subclasses"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    subclasses = []\n    for subclass in cls.__subclasses__():\n        subclasses.append(subclass)\n        subclasses.extend(subclasses(subclass))\n    return subclasses", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    num = 0\n    base = len(alphabet)\n    for char in string:\n        num = num * base + alphabet.index(char)\n    return num"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    num = 0\n    base = len(alphabet)\n    for char in string:\n        num = num * base + alphabet.index(char)\n    return num", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        response = requests.get(url)\n        \n        if response.status_code == 200:\n            temp_file = destination_path / 'temp.tar.gz'\n            with open(temp_file, 'wb') as file:\n                file.write(response.content)\n            \n            with tarfile.open(temp_file, 'r:gz') as tar:\n                tar.extractall(destination_path)\n            \n            temp_file.unlink()\n            \n            return destination_path\n        else:\n            raise Exception(f\"Failed to download archive from {url}\")"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        response = requests.get(url)\n        \n        if response.status_code == 200:\n            temp_file = destination_path / 'temp.tar.gz'\n            with open(temp_file, 'wb') as file:\n                file.write(response.content)\n            \n            with tarfile.open(temp_file, 'r:gz') as tar:\n                tar.extractall(destination_path)\n            \n            temp_file.unlink()\n            \n            return destination_path\n        else:\n            raise Exception(f\"Failed to download archive from {url}\")", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    \n    import platform\n    return platform.system() == 'Darwin'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    \n    import platform\n    return platform.system() == 'Darwin'", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    \n    regex_dict = {}\n    for key in item.keys():\n        regex_key = key.replace('.cpp', '.*')\n        regex_dict[regex_key] = item[key]\n    return regex_dict"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    \n    regex_dict = {}\n    for key in item.keys():\n        regex_key = key.replace('.cpp', '.*')\n        regex_dict[regex_key] = item[key]\n    return regex_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    \n    return name.strip(\"'\").strip('\"')"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    \n    return name.strip(\"'\").strip('\"')", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    \n    import shlex\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'windows':\n        return shlex.split(s, posix=False)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    else:\n        raise ValueError(\"Invalid platform specified. Use 'this', 'windows', or 'posix'.\")"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    \n    import shlex\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'windows':\n        return shlex.split(s, posix=False)\n    elif platform == 'posix':\n        return shlex.split(s, posix=True)\n    else:\n        raise ValueError(\"Invalid platform specified. Use 'this', 'windows', or 'posix'.\")", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n1. Import the necessary modules:\n```python\nimport os\nimport shutil\nimport tarfile\n```\n\n2. Generate a temporary directory path to extract the contents of the archive:\n```python\nif isinstance(tmp_path, str):\n    tmp_path = Path(tmp_path)\ntmp_path = tmp_path.resolve()\ntmp_path.mkdir(parents=True, exist_ok=True)\n```\n\n3. Extract the contents of the archive to the temporary directory:\n```python\nwith tarfile.open(archive_path, 'r') as tar:\n    tar.extractall(path=tmp_path)\n```\n\n4. If a specific filename is provided, move the extracted contents to a new directory with that name:\n```python\nif filename:\n    destination_path = tmp_path / filename\n    shutil.move(tmp_path / archive_path.stem, destination_path)\n    return str(destination_path)\n```\n\n5. If no filename is provided, move the extracted contents to a new directory using the name of the archive:\n```python\ndestination_path = tmp_path / archive_path.stem\nshutil.move(tmp_path / archive_path.stem, destination_path)\nreturn str(destination_path)\n``` \n\nThis function will extract the contents of the archive located at `archive_path` to a temporary directory and then move the extracted contents to a new directory with the specified `filename` or the name of the archive if no filename is provided. The function will return the path to the extracted contents."], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n1. Import the necessary modules:\n```python\nimport os\nimport shutil\nimport tarfile\n```\n\n2. Generate a temporary directory path to extract the contents of the archive:\n```python\nif isinstance(tmp_path, str):\n    tmp_path = Path(tmp_path)\ntmp_path = tmp_path.resolve()\ntmp_path.mkdir(parents=True, exist_ok=True)\n```\n\n3. Extract the contents of the archive to the temporary directory:\n```python\nwith tarfile.open(archive_path, 'r') as tar:\n    tar.extractall(path=tmp_path)\n```\n\n4. If a specific filename is provided, move the extracted contents to a new directory with that name:\n```python\nif filename:\n    destination_path = tmp_path / filename\n    shutil.move(tmp_path / archive_path.stem, destination_path)\n    return str(destination_path)\n```\n\n5. If no filename is provided, move the extracted contents to a new directory using the name of the archive:\n```python\ndestination_path = tmp_path / archive_path.stem\nshutil.move(tmp_path / archive_path.stem, destination_path)\nreturn str(destination_path)\n``` \n\nThis function will extract the contents of the archive located at `archive_path` to a temporary directory and then move the extracted contents to a new directory with the specified `filename` or the name of the archive if no filename is provided. The function will return the path to the extracted contents.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):\n        \n        ignored_files = subprocess.check_output(['git', 'ls-files', '--others', '--ignored', '--exclude-standard'])\n        \n        ignored_files_list = ignored_files.splitlines()\n        \n        ignored_files_list = [file.decode('utf-8') for file in ignored_files_list]\n        \n        return ','.join(ignored_files_list)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):\n        \n        ignored_files = subprocess.check_output(['git', 'ls-files', '--others', '--ignored', '--exclude-standard'])\n        \n        ignored_files_list = ignored_files.splitlines()\n        \n        ignored_files_list = [file.decode('utf-8') for file in ignored_files_list]\n        \n        return ','.join(ignored_files_list)", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected is None:\n            collected = []\n        \n        for pattern in left:\n            if pattern.match(self.filename):\n                collected.append(pattern)\n                left.remove(pattern)\n        \n        if len(collected) == 0:\n            return False, left, collected\n        else:\n            return True, left, collected"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected is None:\n            collected = []\n        \n        for pattern in left:\n            if pattern.match(self.filename):\n                collected.append(pattern)\n                left.remove(pattern)\n        \n        if len(collected) == 0:\n            return False, left, collected\n        else:\n            return True, left, collected", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    \n    unit = frequency[-1]\n    amount = int(frequency[:-1])\n    \n    if unit == 's':\n        return datetime.timedelta(seconds=amount)\n    elif unit == 'm':\n        return datetime.timedelta(minutes=amount)\n    elif unit == 'h':\n        return datetime.timedelta(hours=amount)\n    elif unit == 'd':\n        return datetime.timedelta(days=amount)\n    elif unit == 'w':\n        return datetime.timedelta(weeks=amount)\n    elif unit == 'M':\n        return datetime.timedelta(days=amount*30)\n    elif unit == 'y':\n        return datetime.timedelta(days=amount*365)\n    else:\n        return None"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    \n    unit = frequency[-1]\n    amount = int(frequency[:-1])\n    \n    if unit == 's':\n        return datetime.timedelta(seconds=amount)\n    elif unit == 'm':\n        return datetime.timedelta(minutes=amount)\n    elif unit == 'h':\n        return datetime.timedelta(hours=amount)\n    elif unit == 'd':\n        return datetime.timedelta(days=amount)\n    elif unit == 'w':\n        return datetime.timedelta(weeks=amount)\n    elif unit == 'M':\n        return datetime.timedelta(days=amount*30)\n    elif unit == 'y':\n        return datetime.timedelta(days=amount*365)\n    else:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    \n    if host == 'localhost' or host == '127.0.0.1':\n        return True\n    else:\n        return False"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    \n    if host == 'localhost' or host == '127.0.0.1':\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    \n    find_paths = [f.replace('.', '\\\\.').replace('*', '.*').replace('?', '.') for f in find_paths]\n    return find_paths"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    \n    find_paths = [f.replace('.', '\\\\.').replace('*', '.*').replace('?', '.') for f in find_paths]\n    return find_paths", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    \n    import os\n    return os.name == 'nt'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    \n    import os\n    return os.name == 'nt'", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(f\"File {config_filename} already exists and overwrite is set to False\")\n\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n\n    os.chmod(config_filename, mode)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(f\"File {config_filename} already exists and overwrite is set to False\")\n\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n\n    os.chmod(config_filename, mode)", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n        \nreturn script.replace(\"\\n\", seperator)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n        \nreturn script.replace(\"\\n\", seperator)", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    import subprocess\n    import os\n\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    try:\n        result = subprocess.run(func, *args, timeout=timeout, env=env)\n        return result\n    except subprocess.TimeoutExpired:\n        return None"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    import subprocess\n    import os\n\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    try:\n        result = subprocess.run(func, *args, timeout=timeout, env=env)\n        return result\n    except subprocess.TimeoutExpired:\n        return None", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    \n    name = matcher.group(1)\n    default = matcher.group(2)\n    \n    value = os.getenv(name, default)\n    \n    return value"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    \n    name = matcher.group(1)\n    default = matcher.group(2)\n    \n    value = os.getenv(name, default)\n    \n    return value", "is_pass": true, "return_code": 0}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    parts = image_href.split('/')\n    \n    image_name = parts[-1]\n    image_parts = image_name.split('.')\n    image_ext = image_parts[-1]\n    \n    is_thumbnail = 'thumb' in image_name\n    \n    return image_name, image_ext, is_thumbnail"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    parts = image_href.split('/')\n    \n    image_name = parts[-1]\n    image_parts = image_name.split('.')\n    image_ext = image_parts[-1]\n    \n    is_thumbnail = 'thumb' in image_name\n    \n    return image_name, image_ext, is_thumbnail", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        while input_list[i].endswith('os.sep'):\n            input_list[i] = input_list[i][:-1]\n    \n    return input_list"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        while input_list[i].endswith('os.sep'):\n            input_list[i] = input_list[i][:-1]\n    \n    return input_list", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):\n        \n        if strip:\n            pattern = pattern.strip()\n        \n        pattern = re.escape(pattern)\n        \n        return pattern"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):\n        \n        if strip:\n            pattern = pattern.strip()\n        \n        pattern = re.escape(pattern)\n        \n        return pattern", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):\n        \n        if verbose:\n            print(f\"Running command: {cmd}\")\n        \n        try:\n            result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if verbose:\n                print(result.stdout.decode())\n            return result.stdout.decode()\n        except subprocess.CalledProcessError as e:\n            if verbose:\n                print(f\"Error running command: {e}\")\n            return None"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):\n        \n        if verbose:\n            print(f\"Running command: {cmd}\")\n        \n        try:\n            result = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if verbose:\n                print(result.stdout.decode())\n            return result.stdout.decode()\n        except subprocess.CalledProcessError as e:\n            if verbose:\n                print(f\"Error running command: {e}\")\n            return None", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    \n    parts = target.split('.')\n    if len(parts) != 4:\n        return False\n    \n    for part in parts:\n        if not part.isdigit():\n            return False\n        \n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        \n    return True"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    \n    parts = target.split('.')\n    if len(parts) != 4:\n        return False\n    \n    for part in parts:\n        if not part.isdigit():\n            return False\n        \n        num = int(part)\n        if num < 0 or num > 255:\n            return False\n        \n    return True", "is_pass": true, "return_code": 0}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    roots = roots or set()\n    for node in graph.nodes:\n        if not any(graph.has_edge(parent, node) for parent in graph.nodes):\n            roots.add(node)\n    return roots"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    roots = roots or set()\n    for node in graph.nodes:\n        if not any(graph.has_edge(parent, node) for parent in graph.nodes):\n            roots.add(node)\n    return roots", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):\n        \n        if isinstance(obj, str):\n            return obj\n        elif isinstance(obj, unicode):\n            return obj.encode('utf-8')\n        else:\n            raise TypeError(\"Object is not a string\")"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):\n        \n        if isinstance(obj, str):\n            return obj\n        elif isinstance(obj, unicode):\n            return obj.encode('utf-8')\n        else:\n            raise TypeError(\"Object is not a string\")", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \nimport logging\n\nlogger = logging.getLogger(name)\nlogger.setLevel(logging.DEBUG if debug else logging.INFO)\n\nfile_handler = logging.FileHandler(logfile)\nfile_handler.setLevel(logging.DEBUG)\n\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\nconsole_handler.setFormatter(formatter)\n\nlogger.addHandler(file_handler)\nlogger.addHandler(console_handler)\n\nreturn logger"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \nimport logging\n\nlogger = logging.getLogger(name)\nlogger.setLevel(logging.DEBUG if debug else logging.INFO)\n\nfile_handler = logging.FileHandler(logfile)\nfile_handler.setLevel(logging.DEBUG)\n\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\nconsole_handler.setFormatter(formatter)\n\nlogger.addHandler(file_handler)\nlogger.addHandler(console_handler)\n\nreturn logger", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n    return np.zeros(shape, dtype=dtype)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n    return np.zeros(shape, dtype=dtype)", "is_pass": true, "return_code": 0}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):\n        \n        return np.exp(-((x - 0.2)**2) / (2 * 0.1**2))"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):\n        \n        return np.exp(-((x - 0.2)**2) / (2 * 0.1**2))", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configurations = {}\n    \n    for filename in config_filenames:\n        config = load_configuration(filename)\n        configurations.update(config)\n    \n    if overrides:\n        configurations.update(overrides)\n    \n    if resolve_env:\n        configurations = resolve_environment_variables(configurations)\n    \n    return configurations"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configurations = {}\n    \n    for filename in config_filenames:\n        config = load_configuration(filename)\n        configurations.update(config)\n    \n    if overrides:\n        configurations.update(overrides)\n    \n    if resolve_env:\n        configurations = resolve_environment_variables(configurations)\n    \n    return configurations", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        seconds = ticks // 1e9\n        nanoseconds = ticks % 1e9\n        hours = seconds // 3600\n        minutes = (seconds % 3600) // 60\n        seconds = seconds % 60\n\n        return cls(hours, minutes, seconds, nanoseconds, tz)"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        seconds = ticks // 1e9\n        nanoseconds = ticks % 1e9\n        hours = seconds // 3600\n        minutes = (seconds % 3600) // 60\n        seconds = seconds % 60\n\n        return cls(hours, minutes, seconds, nanoseconds, tz)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        handlers = {\n            (1, 0): BoltProtocolV1Handler,\n            (2, 0): BoltProtocolV2Handler,\n            (3, 0): BoltProtocolV3Handler\n        }\n        \n        if protocol_version is not None:\n            return handlers.get(protocol_version)\n        \n        return handlers"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        handlers = {\n            (1, 0): BoltProtocolV1Handler,\n            (2, 0): BoltProtocolV2Handler,\n            (3, 0): BoltProtocolV3Handler\n        }\n        \n        if protocol_version is not None:\n            return handlers.get(protocol_version)\n        \n        return handlers", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod\n    def from_raw_values(cls, values):\n        \n        bookmarks = cls()\n        for value in values:\n            bookmark = Bookmark.from_raw_value(value)\n            bookmarks.add_bookmark(bookmark)\n        return bookmarks"], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod\n    def from_raw_values(cls, values):\n        \n        bookmarks = cls()\n        for value in values:\n            bookmark = Bookmark.from_raw_value(value)\n            bookmarks.add_bookmark(bookmark)\n        return bookmarks", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    \n    if bufsize is None:\n        bufsize = len(seq)\n\n    if isinstance(seq, str):\n        return seq[:bufsize], str\n    elif isinstance(seq, bytes):\n        return seq[:bufsize], bytes\n    elif isinstance(seq, bytearray):\n        return seq[:bufsize], bytearray\n    else:\n        raise TypeError(\"Unsupported sequence type\")"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    \n    if bufsize is None:\n        bufsize = len(seq)\n\n    if isinstance(seq, str):\n        return seq[:bufsize], str\n    elif isinstance(seq, bytes):\n        return seq[:bufsize], bytes\n    elif isinstance(seq, bytearray):\n        return seq[:bufsize], bytearray\n    else:\n        raise TypeError(\"Unsupported sequence type\")", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n        \n        if other is not None:\n            self.scale = other\n        elif recompute:\n            self.scale = sum(self.histogram) * self.bin_width\n        return self.scale"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n        \n        if other is not None:\n            self.scale = other\n        elif recompute:\n            self.scale = sum(self.histogram) * self.bin_width\n        return self.scale", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n        \n        if other is None:\n            return self.scale\n        else:\n            self.scale = other"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n        \n        if other is None:\n            return self.scale\n        else:\n            self.scale = other", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = graph()\n    for bin in hist.bins:\n        x = bin.left_edge if get_coordinate == \"left\" else bin.center\n        y = bin.value if make_value is None else make_value(bin)\n        if scale is not None:\n            y = y * scale\n        point = {field_names[0]: x, field_names[1]: y}\n        graph.add_point(point)\n    return graph"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = graph()\n    for bin in hist.bins:\n        x = bin.left_edge if get_coordinate == \"left\" else bin.center\n        y = bin.value if make_value is None else make_value(bin)\n        if scale is not None:\n            y = y * scale\n        point = {field_names[0]: x, field_names[1]: y}\n        graph.add_point(point)\n    return graph", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if tentative:\n        pass\n    else:\n        pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if tentative:\n        pass\n    else:\n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    \n    if hasattr(candidate, 'implements'):\n        return candidate.implements(iface)\n    if tentative:\n        return hasattr(candidate, iface)\n    return hasattr(candidate, iface) and callable(getattr(candidate, iface))"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    \n    if hasattr(candidate, 'implements'):\n        return candidate.implements(iface)\n    if tentative:\n        return hasattr(candidate, iface)\n    return hasattr(candidate, iface) and callable(getattr(candidate, iface))", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n    pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    elif len(bases) == 1:\n        return type(bases[0])\n    else:\n        metaclasses = [type(base) for base in bases]\n        if len(set(metaclasses)) > 1:\n            raise TypeError(\"Inconsistent metaclass hierarchy\")\n        return metaclasses[0]"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    elif len(bases) == 1:\n        return type(bases[0])\n    else:\n        metaclasses = [type(base) for base in bases]\n        if len(set(metaclasses)) > 1:\n            raise TypeError(\"Inconsistent metaclass hierarchy\")\n        return metaclasses[0]", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n        \n        if default is self.__marker:\n            return self.__delitem__(key)\n        else:\n            return self.__pop__(key, default)"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n        \n        if default is self.__marker:\n            return self.__delitem__(key)\n        else:\n            return self.__pop__(key, default)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n        \n        if self.head is None:\n            raise KeyError(\"popitem(): dictionary is empty\")\n        \n        current = self.head\n        while current.next is not None:\n            current = current.next\n        \n        key = current.key\n        value = current.value\n        \n        if current.prev is not None:\n            current.prev.next = None\n        else:\n            self.head = None\n        \n        del self.cache[key]\n        \n        return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self.head is None:\n            raise KeyError(\"popitem(): dictionary is empty\")\n        \n        current = self.head\n        while current.next is not None:\n            current = current.next\n        \n        key = current.key\n        value = current.value\n        \n        if current.prev is not None:\n            current.prev.next = None\n        else:\n            self.head = None\n        \n        del self.cache[key]\n        \n        return (key, value)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n        \n        if not self.head:\n            return None\n\n        key = self.head.key\n        value = self.head.value\n\n        self._remove_node(self.head)\n        \n        return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if not self.head:\n            return None\n\n        key = self.head.key\n        value = self.head.value\n\n        self._remove_node(self.head)\n        \n        return (key, value)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n        \n        if not self:\n            raise KeyError(\"popitem(): dictionary is empty\")\n\n        key = next(reversed(self))\n        value = self[key]\n        del self[key]\n        return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if not self:\n            raise KeyError(\"popitem(): dictionary is empty\")\n\n        key = next(reversed(self))\n        value = self[key]\n        del self[key]\n        return (key, value)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n        \n        if not self:\n            raise KeyError('popitem(): dictionary is empty')\n        key = random.choice(list(self.keys()))\n        value = self[key]\n        del self[key]\n        return (key, value)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if not self:\n            raise KeyError('popitem(): dictionary is empty')\n        key = random.choice(list(self.keys()))\n        value = self[key]\n        del self[key]\n        return (key, value)", "is_pass": true, "return_code": 0}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in\\s*:\\s*(?P<value>.+)', re.IGNORECASE)"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in\\s*:\\s*(?P<value>.+)', re.IGNORECASE)", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        try:\n            return datetime.datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n        except ValueError:\n            return None"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        try:\n            return datetime.datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n        except ValueError:\n            return None", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        pass"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        if not dt.tzinfo:\n            raise ValueError(\"Input datetime must be timezone-aware\")\n        \n        new_dt = dt.astimezone(self)\n        \n        return new_dt"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        if not dt.tzinfo:\n            raise ValueError(\"Input datetime must be timezone-aware\")\n        \n        new_dt = dt.astimezone(self)\n        \n        return new_dt", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    \n    if request.method == \"POST\":\n        if \"diaspora\" in request.headers.get(\"User-Agent\", \"\"):\n            return \"Diaspora request\"\n    return \"Not a Diaspora request\""], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    \n    if request.method == \"POST\":\n        if \"diaspora\" in request.headers.get(\"User-Agent\", \"\"):\n            return \"Diaspora request\"\n    return \"Not a Diaspora request\"", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    \n    if \"Matrix\" in request:\n        return True\n    else:\n        return False"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    if \"Matrix\" in request:\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ')"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S.%fZ')", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    \n    pattern = r'#\\w+'\n    \n    matches = re.findall(pattern, text)\n    \n    for match in matches:\n        tags.add(match)\n    \n    if replacer:\n        text = re.sub(pattern, replacer, text)\n    \n    return tags, text"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    \n    pattern = r'#\\w+'\n    \n    matches = re.findall(pattern, text)\n    \n    for match in matches:\n        tags.add(match)\n    \n    if replacer:\n        text = re.sub(pattern, replacer, text)\n    \n    return tags, text", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \n    words = text.split()\n    \n    processed_words = []\n    \n    for word in words:\n        if word.startswith('http://') or word.startswith('https://'):\n            processed_word = f'<a href=\"{word}\" target=\"_blank\" rel=\"noopener noreferrer\">{word}</a>'\n        else:\n            processed_word = word\n        \n        processed_words.append(processed_word)\n    \n    processed_text = ' '.join(processed_words)\n    \n    return processed_text"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \n    words = text.split()\n    \n    processed_words = []\n    \n    for word in words:\n        if word.startswith('http://') or word.startswith('https://'):\n            processed_word = f'<a href=\"{word}\" target=\"_blank\" rel=\"noopener noreferrer\">{word}</a>'\n        else:\n            processed_word = word\n        \n        processed_words.append(processed_word)\n    \n    processed_text = ' '.join(processed_words)\n    \n    return processed_text", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n    import requests\n    try:\n        response = requests.head(url)\n        content_type = response.headers.get('content-type')\n        return content_type\n    except requests.exceptions.RequestException:\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    import requests\n    try:\n        response = requests.head(url)\n        content_type = response.headers.get('content-type')\n        return content_type\n    except requests.exceptions.RequestException:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    \n    if len(tag) < 2:\n        return False\n    if not tag.isalnum():\n        return False\n    return True"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    \n    if len(tag) < 2:\n        return False\n    if not tag.isalnum():\n        return False\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \n    children_dict = {}\n    for child in node:\n        if child.tag in children_dict:\n            if isinstance(children_dict[child.tag], list):\n                children_dict[child.tag].append(xml_children_as_dict(child))\n            else:\n                children_dict[child.tag] = [children_dict[child.tag], xml_children_as_dict(child)]\n        else:\n            children_dict[child.tag] = xml_children_as_dict(child)\n    return children_dict"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \n    children_dict = {}\n    for child in node:\n        if child.tag in children_dict:\n            if isinstance(children_dict[child.tag], list):\n                children_dict[child.tag].append(xml_children_as_dict(child))\n            else:\n                children_dict[child.tag] = [children_dict[child.tag], xml_children_as_dict(child)]\n        else:\n            children_dict[child.tag] = xml_children_as_dict(child)\n    return children_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    nodeinfo_document = {\n        \"links\": [\n            {\n                \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/2.0\",\n                \"href\": url + \"/nodeinfo/2.0\"\n            }\n        ]\n    }\n\n    if document_path is not None:\n        with open(document_path, 'w') as file:\n            json.dump(nodeinfo_document, file, indent=4)\n\n    return nodeinfo_document"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    nodeinfo_document = {\n        \"links\": [\n            {\n                \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/2.0\",\n                \"href\": url + \"/nodeinfo/2.0\"\n            }\n        ]\n    }\n\n    if document_path is not None:\n        with open(document_path, 'w') as file:\n            json.dump(nodeinfo_document, file, indent=4)\n\n    return nodeinfo_document", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    \n    import xml.etree.ElementTree as ET\n    from Crypto.PublicKey import RSA\n    from Crypto.Signature import PKCS1_v1_5\n    from Crypto.Hash import SHA256\n    from base64 import b64decode\n\n    root = ET.fromstring(doc)\n\n    signed_data = ''\n    for elem in root.iter():\n        if elem.tag == 'Signature':\n            signed_data = elem.text\n\n    key = RSA.importKey(public_key)\n    h = SHA256.new(signed_data.encode())\n    verifier = PKCS1_v1_5.new(key)\n    signature = b64decode(signature)\n    \n    if verifier.verify(h, signature):\n        return True\n    else:\n        return False"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    \n    import xml.etree.ElementTree as ET\n    from Crypto.PublicKey import RSA\n    from Crypto.Signature import PKCS1_v1_5\n    from Crypto.Hash import SHA256\n    from base64 import b64decode\n\n    root = ET.fromstring(doc)\n\n    signed_data = ''\n    for elem in root.iter():\n        if elem.tag == 'Signature':\n            signed_data = elem.text\n\n    key = RSA.importKey(public_key)\n    h = SHA256.new(signed_data.encode())\n    verifier = PKCS1_v1_5.new(key)\n    signature = b64decode(signature)\n    \n    if verifier.verify(h, signature):\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    try:\n        data = json.loads(document)\n        return data\n    except json.JSONDecodeError:\n        pass\n    \n    xrd_parser = XRDParser()\n    parsed_data = xrd_parser.parse(document)\n    \n    return parsed_data"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    try:\n        data = json.loads(document)\n        return data\n    except json.JSONDecodeError:\n        pass\n    \n    xrd_parser = XRDParser()\n    parsed_data = xrd_parser.parse(document)\n    \n    return parsed_data", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    webfinger_url = f\"https://{handle}/.well-known/webfinger\"\n\n    response = requests.get(webfinger_url)\n\n    if response.status_code == 200:\n        webfinger_data = response.json()\n        return webfinger_data\n    else:\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    webfinger_url = f\"https://{handle}/.well-known/webfinger\"\n\n    response = requests.get(webfinger_url)\n\n    if response.status_code == 200:\n        webfinger_data = response.json()\n        return webfinger_data\n    else:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    \n    url = f\"https://{host}/.well-known/host-meta\"\n    \n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        return response.text\n    else:\n        return None"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    \n    url = f\"https://{host}/.well-known/host-meta\"\n    \n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        return response.text\n    else:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    try:\n        response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n        return response\n    except Exception as e:\n        print(f\"Error sending document: {e}\")\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    try:\n        response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n        return response\n    except Exception as e:\n        print(f\"Error sending document: {e}\")\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    \n    if keys:\n        current_dict = dic\n        for k in keys[:-1]:\n            current_dict = current_dict.setdefault(k, {})\n        current_dict[keys[-1]][key] = val\n    else:\n        dic[key] = val\n    return dic"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    \n    if keys:\n        current_dict = dic\n        for k in keys[:-1]:\n            current_dict = current_dict.setdefault(k, {})\n        current_dict[keys[-1]][key] = val\n    else:\n        dic[key] = val\n    return dic", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    \n    file_names = []\n    for directory in settings_dirs:\n        file_names.append(f\"{directory}/{spec_option}.ini\")\n    return file_names"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    file_names = []\n    for directory in settings_dirs:\n        file_names.append(f\"{directory}/{spec_option}.ini\")\n    return file_names", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls.config_manager"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls.config_manager", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod\n    def workspace_manager(cls):\n        \n        return cls._workspace_manager"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def workspace_manager(cls):\n        \n        return cls._workspace_manager", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod\n    def plugins_manager(cls):\n        \n        return cls._plugins_manager"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def plugins_manager(cls):\n        \n        return cls._plugins_manager", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        try:\n            spec_dict = yaml.safe_load(spec_content)\n        except yaml.YAMLError as exc:\n            raise ValueError(f'Invalid YAML content: {exc}')\n\n        required_fields = ['field1', 'field2', 'field3']  # Add all required fields here\n\n        for field in required_fields:\n            if field not in spec_dict:\n                raise ValueError(f'Missing required field: {field}')\n\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        try:\n            spec_dict = yaml.safe_load(spec_content)\n        except yaml.YAMLError as exc:\n            raise ValueError(f'Invalid YAML content: {exc}')\n\n        required_fields = ['field1', 'field2', 'field3']  # Add all required fields here\n\n        for field in required_fields:\n            if field not in spec_dict:\n                raise ValueError(f'Missing required field: {field}')\n\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if yaml_file is None:\n            raise ValueError(\"yaml_file parameter is required\")\n\n        with open(yaml_file, 'r') as file:\n            data = yaml.safe_load(file)\n\n        required_fields = ['field1', 'field2', 'field3'] # Add all required fields here\n\n        for field in required_fields:\n            if field not in data:\n                raise ValueError(f\"Missing required field: {field}\")\n\n        return cls(**data)"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if yaml_file is None:\n            raise ValueError(\"yaml_file parameter is required\")\n\n        with open(yaml_file, 'r') as file:\n            data = yaml.safe_load(file)\n\n        required_fields = ['field1', 'field2', 'field3'] # Add all required fields here\n\n        for field in required_fields:\n            if field not in data:\n                raise ValueError(f\"Missing required field: {field}\")\n\n        return cls(**data)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n        \n        for key, value in parser_dict.items():\n            if key == 'include':\n                for group in value:\n                    if group in self.groups:\n                        self.groups[group].resolve()\n                    else:\n                        raise ValueError(f\"Group '{group}' not found in spec file.\")\n            else:\n                continue"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n        \n        for key, value in parser_dict.items():\n            if key == 'include':\n                for group in value:\n                    if group in self.groups:\n                        self.groups[group].resolve()\n                    else:\n                        raise ValueError(f\"Group '{group}' not found in spec file.\")\n            else:\n                continue", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n        \n        defaults = {}\n        \n        for arg_name, arg_spec in self.spec.items():\n            if 'default' in arg_spec:\n                defaults[arg_name] = arg_spec['default']\n        \n        \n        return defaults"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n        \n        defaults = {}\n        \n        for arg_name, arg_spec in self.spec.items():\n            if 'default' in arg_spec:\n                defaults[arg_name] = arg_spec['default']\n        \n        \n        return defaults", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n        \n        deprecated_args = {\n            'old_option': 'new_option',\n            'obsolete_option': 'replacement_option'\n        }\n        return deprecated_args"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n        \n        deprecated_args = {\n            'old_option': 'new_option',\n            'obsolete_option': 'replacement_option'\n        }\n        return deprecated_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        deprecated_args = []\n        \n        for arg in cli_args:\n            if arg in self.deprecated_args:\n                deprecated_args.append(arg)\n        \n        for arg in answer_file_args:\n            if arg in self.deprecated_args:\n                deprecated_args.append(arg)\n        \n        if deprecated_args:\n            print(\"The following arguments are deprecated and should not be used:\")\n            for arg in deprecated_args:\n                print(arg)\n        else:\n            print(\"No deprecated arguments found.\")"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        deprecated_args = []\n        \n        for arg in cli_args:\n            if arg in self.deprecated_args:\n                deprecated_args.append(arg)\n        \n        for arg in answer_file_args:\n            if arg in self.deprecated_args:\n                deprecated_args.append(arg)\n        \n        if deprecated_args:\n            print(\"The following arguments are deprecated and should not be used:\")\n            for arg in deprecated_args:\n                print(arg)\n        else:\n            print(\"No deprecated arguments found.\")", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n        \n        options = {}\n        for parser in self.parsers:\n            if parser.command_name == command_name:\n                options = parser.options\n                break\n        return options"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n        \n        options = {}\n        for parser in self.parsers:\n            if parser.command_name == command_name:\n                options = parser.options\n                break\n        return options", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n        \n        pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n        \n        silent_args = []\n        for arg in args:\n            if arg.startswith('-s'):\n                silent_args.append(arg)\n        return silent_args"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n        \n        silent_args = []\n        for arg in args:\n            if arg.startswith('-s'):\n                silent_args.append(arg)\n        return silent_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n        \n        for arg in self.required_args:\n            if arg not in args:\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n        \n        for arg in self.required_args:\n            if arg not in args:\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        conditionally_required_args = []\n        for arg_name, arg_spec in options_spec.items():\n            if 'required_when' in arg_spec:\n                required_when = arg_spec['required_when']\n                if required_when(args):\n                    conditionally_required_args.append(arg_name)\n        return conditionally_required_args"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        conditionally_required_args = []\n        for arg_name, arg_spec in options_spec.items():\n            if 'required_when' in arg_spec:\n                required_when = arg_spec['required_when']\n                if required_when(args):\n                    conditionally_required_args.append(arg_name)\n        return conditionally_required_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n        \n        for arg in args:\n            if len(arg) > self.length:\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n        \n        for arg in args:\n            if len(arg) > self.length:\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n        \n        for arg in args:\n            if arg not in self.available_choices:\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n        \n        for arg in args:\n            if arg not in self.available_choices:\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n        \n        min_value = self.min_value\n        max_value = self.max_value\n\n        for arg in args:\n            if arg < min_value or arg > max_value:\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n        \n        min_value = self.min_value\n        max_value = self.max_value\n\n        for arg in args:\n            if arg < min_value or arg > max_value:\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_argument_type = {\n            \"subcommand\": subcommand,\n            \"type_name\": type_name,\n            \"option_name\": option_name,\n            \"spec_option\": spec_option\n        }\n        \n        return complex_argument_type"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_argument_type = {\n            \"subcommand\": subcommand,\n            \"type_name\": type_name,\n            \"option_name\": option_name,\n            \"spec_option\": spec_option\n        }\n        \n        return complex_argument_type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n        \n        custom_args = {}\n        control_args = {}\n\n        for key, value in args.items():\n            if key.startswith('custom_'):\n                custom_args[key.replace('custom_', '')] = value\n            else:\n                control_args[key] = value\n\n        return custom_args, control_args"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n        \n        custom_args = {}\n        control_args = {}\n\n        for key, value in args.items():\n            if key.startswith('custom_'):\n                custom_args[key.replace('custom_', '')] = value\n            else:\n                control_args[key] = value\n\n        return custom_args, control_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is not None:\n            vars_dict.update(extra_vars)\n        return vars_dict"], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is not None:\n            vars_dict.update(extra_vars)\n        return vars_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    if not ir_workspace:\n        raise ValueError(\"ir_workspace is required\")\n    if not ir_plugin:\n        raise ValueError(\"ir_plugin is required\")\n    if not playbook_path:\n        raise ValueError(\"playbook_path is required\")\n    \n    command = [\"ansible-playbook\", playbook_path]\n    \n    if verbose:\n        command.append(\"-v\")\n    \n    if extra_vars:\n        for key, value in extra_vars.items():\n            command.extend([\"--extra-vars\", f\"{key}={value}\"])\n    \n    if ansible_args:\n        command.extend(ansible_args)\n    \n    subprocess.run(command)"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    if not ir_workspace:\n        raise ValueError(\"ir_workspace is required\")\n    if not ir_plugin:\n        raise ValueError(\"ir_plugin is required\")\n    if not playbook_path:\n        raise ValueError(\"playbook_path is required\")\n    \n    command = [\"ansible-playbook\", playbook_path]\n    \n    if verbose:\n        command.append(\"-v\")\n    \n    if extra_vars:\n        for key, value in extra_vars.items():\n            command.extend([\"--extra-vars\", f\"{key}={value}\"])\n    \n    if ansible_args:\n        command.extend(ansible_args)\n    \n    subprocess.run(command)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    ansible_cmd = ['ansible-playbook']\n\n    ansible_cmd.extend(cli_args)\n\n    ansible_cmd.append('--extra-vars')\n    ansible_cmd.append(json.dumps(vars_dict))\n\n    subprocess.run(ansible_cmd, cwd=ir_workspace, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    ansible_cmd = ['ansible-playbook']\n\n    ansible_cmd.extend(cli_args)\n\n    ansible_cmd.append('--extra-vars')\n    ansible_cmd.append(json.dumps(vars_dict))\n\n    subprocess.run(ansible_cmd, cwd=ir_workspace, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for key, value in values_dict.items():\n            if key == 'arg1':\n                values_dict[key] = int(value)\n            elif key == 'arg2':\n                values_dict[key] = float(value)\n            elif key == 'arg3':\n                values_dict[key] = str(value)\n            else:\n                print(f\"Unknown argument {key} for parser {parser_name}\")\n        return values_dict"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for key, value in values_dict.items():\n            if key == 'arg1':\n                values_dict[key] = int(value)\n            elif key == 'arg2':\n                values_dict[key] = float(value)\n            elif key == 'arg3':\n                values_dict[key] = str(value)\n            else:\n                print(f\"Unknown argument {key} for parser {parser_name}\")\n        return values_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = {}\n    plugin_spec_path = os.path.join(plugin_dir, 'plugin_spec.json')\n    if os.path.exists(plugin_spec_path):\n        with open(plugin_spec_path, 'r') as f:\n            plugin_spec = json.load(f)\n    \n    flattened_spec = {}\n    for key, value in plugin_spec.items():\n        if isinstance(value, dict):\n            for inner_key, inner_value in value.items():\n                flattened_spec[key + '.' + inner_key] = inner_value\n        else:\n            flattened_spec[key] = value\n    \n    return flattened_spec"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = {}\n    plugin_spec_path = os.path.join(plugin_dir, 'plugin_spec.json')\n    if os.path.exists(plugin_spec_path):\n        with open(plugin_spec_path, 'r') as f:\n            plugin_spec = json.load(f)\n    \n    flattened_spec = {}\n    for key, value in plugin_spec.items():\n        if isinstance(value, dict):\n            for inner_key, inner_value in value.items():\n                flattened_spec[key + '.' + inner_key] = inner_value\n        else:\n            flattened_spec[key] = value\n    \n    return flattened_spec", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n        \n        if not os.getenv('CONFIG_PATH'):\n            os.environ['CONFIG_PATH'] = '/path/to/config.yaml'"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n        \n        if not os.getenv('CONFIG_PATH'):\n            os.environ['CONFIG_PATH'] = '/path/to/config.yaml'", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n        \n        spec_parser = root_subparsers.add_parser('spec', help='Manage API specifications')\n        spec_subparsers = spec_parser.add_subparsers(dest='spec_command', title='spec commands')\n\n        create_parser = spec_subparsers.add_parser('create', help='Create a new API specification')\n        create_parser.add_argument('name', help='Name of the API specification')\n        create_parser.add_argument('--description', help='Description of the API specification')\n\n        list_parser = spec_subparsers.add_parser('list', help='List all API specifications')\n\n        delete_parser = spec_subparsers.add_parser('delete', help='Delete an API specification')\n        delete_parser.add_argument('name', help='Name of the API specification to delete')\n\n        root_subparsers.add_parser('spec', parents=[spec_parser], help='Manage API specifications')"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n        \n        spec_parser = root_subparsers.add_parser('spec', help='Manage API specifications')\n        spec_subparsers = spec_parser.add_subparsers(dest='spec_command', title='spec commands')\n\n        create_parser = spec_subparsers.add_parser('create', help='Create a new API specification')\n        create_parser.add_argument('name', help='Name of the API specification')\n        create_parser.add_argument('--description', help='Description of the API specification')\n\n        list_parser = spec_subparsers.add_parser('list', help='List all API specifications')\n\n        delete_parser = spec_subparsers.add_parser('delete', help='Delete an API specification')\n        delete_parser.add_argument('name', help='Name of the API specification to delete')\n\n        root_subparsers.add_parser('spec', parents=[spec_parser], help='Manage API specifications')", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):\n        \n        if not path.startswith(root):\n            raise ValueError(\"Path does not start with root\")\n        \n        return path[len(root):]"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):\n        \n        if not path.startswith(root):\n            raise ValueError(\"Path does not start with root\")\n        \n        return path[len(root):]", "is_pass": false, "return_code": 1}]}
