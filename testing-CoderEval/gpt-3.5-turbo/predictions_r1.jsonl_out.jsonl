{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["\ndef dict_insert(dic, val, key, *keys):\n    \nThis function `dict_insert` is used to insert a value for a nested key into a dictionary. The function takes in the following parameters:\n\n- `dic`: a dictionary object to insert the nested key value into\n- `val`: a value to insert into the dictionary\n- `key`: the first key in a chain of keys that will store the value\n- `*keys`: additional sub keys in the keys chain\n\nThe function recursively traverses the keys chain to insert the value at the nested key location in the dictionary. If the nested key does not exist, it creates a new dictionary for it.\n\nHere is an example of how to use this function:\n```python\ndict_insert({}, 'value', 'key1', 'key2', 'key3')\n```\n\nThis will insert the value 'value' at the nested key 'key1.key2.key3' in the dictionary."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef dict_insert(dic, val, key, *keys):\n    \nThis function `dict_insert` is used to insert a value for a nested key into a dictionary. The function takes in the following parameters:\n\n- `dic`: a dictionary object to insert the nested key value into\n- `val`: a value to insert into the dictionary\n- `key`: the first key in a chain of keys that will store the value\n- `*keys`: additional sub keys in the keys chain\n\nThe function recursively traverses the keys chain to insert the value at the nested key location in the dictionary. If the nested key does not exist, it creates a new dictionary for it.\n\nHere is an example of how to use this function:\n```python\ndict_insert({}, 'value', 'key1', 'key2', 'key3')\n```\n\nThis will insert the value 'value' at the nested key 'key1.key2.key3' in the dictionary.", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["\ndef list_of_file_names(settings_dirs, spec_option):\n    \nThis function is incomplete and does not contain any implementation details. It seems like it is intended to create a new complex type for handling a list of file names based on the settings directories and specification options provided as parameters. \n\nTo complete the implementation of this function, you may need to define the behavior of the complex type, such as how it validates input values, resolves them, and provides a list of allowed values. \n\nYou can refer to other complex type implementations in the codebase for guidance on how to implement the `list_of_file_names` complex type."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef list_of_file_names(settings_dirs, spec_option):\n    \nThis function is incomplete and does not contain any implementation details. It seems like it is intended to create a new complex type for handling a list of file names based on the settings directories and specification options provided as parameters. \n\nTo complete the implementation of this function, you may need to define the behavior of the complex type, such as how it validates input values, resolves them, and provides a list of allowed values. \n\nYou can refer to other complex type implementations in the codebase for guidance on how to implement the `list_of_file_names` complex type.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            raise IRValidatorException(\"Plugin spec content is missing\")\n\n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITH_CONFIG)\n            else:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(\"Spec file validation failed: {}\".format(error.message))\n\n        return spec_dict"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            raise IRValidatorException(\"Plugin spec content is missing\")\n\n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITH_CONFIG)\n            else:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(\"Spec file validation failed: {}\".format(error.message))\n\n        return spec_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if yaml_file is None:\n            raise ValueError(\"YAML file is missing\")\n\n        with open(yaml_file, 'r') as file:\n            data = yaml.safe_load(file)\n\n        required_fields = [\"field1\", \"field2\", \"field3\"]\n\n        for field in required_fields:\n            if field not in data:\n                raise ValueError(\"Missing required field '{}' in YAML file: {}\".format(field, yaml_file))\n\n        return data"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if yaml_file is None:\n            raise ValueError(\"YAML file is missing\")\n\n        with open(yaml_file, 'r') as file:\n            data = yaml.safe_load(file)\n\n        required_fields = [\"field1\", \"field2\", \"field3\"]\n\n        for field in required_fields:\n            if field not in data:\n                raise ValueError(\"Missing required field '{}' in YAML file: {}\".format(field, yaml_file))\n\n        return data", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next(\n                (grp for grp in self.spec_dict.get('shared_groups', [])\n                 if grp['title'] == group),\n                None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append(deepcopy(grp_dict))"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next(\n                (grp for grp in self.spec_dict.get('shared_groups', [])\n                 if grp['title'] == group),\n                None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append(deepcopy(grp_dict))", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["\ndef get_spec_defaults(self):\n        \nThis function is used to resolve argument values from a specification and other sources. It uses a getter function to retrieve the default value for each argument from the specification.\n\nThe getter function first tries to get the default value from an environment variable with the prefix \"IR_\". If a default value is found in the environment variable, it logs a message indicating that the default value was loaded from the environment variable.\n\nIf no default value is found in the environment variable, the function checks if the argument has a 'default' key in the specification. If a default value is specified in the specification, it uses that value.\n\nIf neither the environment variable nor the specification provides a default value, and the argument's action is 'store_true', the default value is set to False.\n\nOverall, this function is responsible for determining the default values for arguments based on the specification and other sources."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_spec_defaults(self):\n        \nThis function is used to resolve argument values from a specification and other sources. It uses a getter function to retrieve the default value for each argument from the specification.\n\nThe getter function first tries to get the default value from an environment variable with the prefix \"IR_\". If a default value is found in the environment variable, it logs a message indicating that the default value was loaded from the environment variable.\n\nIf no default value is found in the environment variable, the function checks if the argument has a 'default' key in the specification. If a default value is specified in the specification, it uses that value.\n\nIf neither the environment variable nor the specification provides a default value, and the argument's action is 'store_true', the default value is set to False.\n\nOverall, this function is responsible for determining the default values for arguments based on the specification and other sources.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["\ndef get_deprecated_args(self):\n        \n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_deprecated_args(self):\n        \n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        for deprecated, deprecates in self.get_deprecated_args().items():\n            for input_args in (answer_file_args.items(), cli_args.items()):\n                for command, command_dict in input_args:\n                    if deprecated in command_dict:\n                        if deprecates in command_dict:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use the new argument instead.\".format(\n                                    command, deprecated, deprecates)\n                            )"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        for deprecated, deprecates in self.get_deprecated_args().items():\n            for input_args in (answer_file_args.items(), cli_args.items()):\n                for command, command_dict in input_args:\n                    if deprecated in command_dict:\n                        if deprecates in command_dict:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use the new argument instead.\".format(\n                                    command, deprecated, deprecates)\n                            )", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["\ndef get_parser_option_specs(self, command_name):\n        \n        return self.parser_options[command_name]"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_parser_option_specs(self, command_name):\n        \n        return self.parser_options[command_name]", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["\ndef get_option_spec(self, command_name, argument_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_option_spec(self, command_name, argument_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["\ndef get_silent_args(self, args):\n        \n        \"\"\"\n        :param args: The received arguments.\n        :return: list, silenced argument names\n        \"\"\"\n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n```"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_silent_args(self, args):\n        \n        \"\"\"\n        :param args: The received arguments.\n        :return: list, silenced argument names\n        \"\"\"\n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n```", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["\ndef validate_requires_args(self, args):\n        \n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    option['name'] in condition_req_args) and \\\n                        name not in silent_args:\n                    result[parser_name].append(name)\n\n            return result\n\n        res = {}\n        for command_data in self.spec_helper.iterate_parsers():"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_requires_args(self, args):\n        \n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    option['name'] in condition_req_args) and \\\n                        name not in silent_args:\n                    result[parser_name].append(name)\n\n            return result\n\n        res = {}\n        for command_data in self.spec_helper.iterate_parsers():", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \nThis function is used to list arguments with a \"required_when\" condition that is matched. The function takes in the command name, a list of command spec options, and the received input arguments as parameters. It then iterates through the options spec and checks if there is a \"required_when\" condition in the option. If there is, it checks if the condition is met based on the input arguments.\n\nThe function returns a list of argument names that have a \"required_when\" condition that is matched."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \nThis function is used to list arguments with a \"required_when\" condition that is matched. The function takes in the command name, a list of command spec options, and the received input arguments as parameters. It then iterates through the options spec and checks if there is a \"required_when\" condition in the option. If there is, it checks if the condition is met based on the input arguments.\n\nThe function returns a list of argument names that have a \"required_when\" condition that is matched.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if invalid_options:\n            pass # placeholder for raising exception\n        else:\n            return True"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if invalid_options:\n            pass # placeholder for raising exception\n        else:\n            return True", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["\ndef validate_choices_args(self, args):\n        \n        if args in self.choices:\n            return True\n        else:\n            return False\n\n    def validate_min_max_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    minimum = spec_option.get('minimum')\n                    maximum = spec_option.get('maximum')\n                    option_value = parser_dict[option_name]\n                    \n                    if minimum is not None and option_value < minimum:\n                        invalid_options.append((option_name, option_value, minimum, maximum))\n                    if maximum is not None and option_value > maximum:\n                        invalid_options.append((option_name, option_value, minimum, maximum))\n\n        if invalid_options:\n            raise exceptions.IRInvalidMinMaxException(invalid_options)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_choices_args(self, args):\n        \n        if args in self.choices:\n            return True\n        else:\n            return False\n\n    def validate_min_max_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    minimum = spec_option.get('minimum')\n                    maximum = spec_option.get('maximum')\n                    option_value = parser_dict[option_name]\n                    \n                    if minimum is not None and option_value < minimum:\n                        invalid_options.append((option_name, option_value, minimum, maximum))\n                    if maximum is not None and option_value > maximum:\n                        invalid_options.append((option_name, option_value, minimum, maximum))\n\n        if invalid_options:\n            raise exceptions.IRInvalidMinMaxException(invalid_options)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["\ndef validate_min_max_args(self, args):\n        \nThis function checks if the value of arguments is between minimum and maximum values. The implementation of this function involves iterating over the arguments and checking if the value of a specific argument falls within the specified minimum and maximum range. If the value is within the range, the function returns True, otherwise it returns False."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_min_max_args(self, args):\n        \nThis function checks if the value of arguments is between minimum and maximum values. The implementation of this function involves iterating over the arguments and checking if the value of a specific argument falls within the specified minimum and maximum range. If the value is within the range, the function returns True, otherwise it returns False.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["\ndef get_nested_custom_and_control_args(self, args):\n        \n\n        control_args = {}\n        nested_args = {}\n        custom_args = {}\n\n        for (parser_name, parser_dict, arg_name, arg_value, arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None), arg_spec.get('type', None) in [ctype_name for ctype_name, klass in COMPLEX_TYPES.items() if klass.is_nested]]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested_args:\n                    LOG.warning(\"Duplicated nested argument found: '{}'.\")\n\n                nested_args[arg_name] = arg_value\n            else:\n                control_args[arg_name] = arg_value\n        \n        return control_args, nested_args"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nested_custom_and_control_args(self, args):\n        \n\n        control_args = {}\n        nested_args = {}\n        custom_args = {}\n\n        for (parser_name, parser_dict, arg_name, arg_value, arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None), arg_spec.get('type', None) in [ctype_name for ctype_name, klass in COMPLEX_TYPES.items() if klass.is_nested]]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested_args:\n                    LOG.warning(\"Duplicated nested argument found: '{}'.\")\n\n                nested_args[arg_name] = arg_value\n            else:\n                control_args[arg_name] = arg_value\n        \n        return control_args, nested_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is not None:\n            for var in extra_vars:\n                vars_dict.update(var)\n        return vars_dict"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is not None:\n            for var in extra_vars:\n                vars_dict.update(var)\n        return vars_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \nThis function is designed to wrap the 'ansible-playbook' command-line interface (CLI) in Python. It takes several parameters:\n\n- `ir_workspace`: An object representing the active workspace in the Infrared framework.\n- `ir_plugin`: An object representing the current plugin in the Infrared framework.\n- `playbook_path`: The path to the playbook file to be executed.\n- `verbose`: Optional parameter specifying the verbosity level for Ansible.\n- `extra_vars`: Optional parameter that is a dictionary passed to Ansible as extra variables.\n- `ansible_args`: Optional parameter that is a dictionary of arguments to be passed directly to Ansible.\n\nThe function body is not implemented in the provided code fragments, as it contains only the function signature and a docstring. The actual implementation of the function is expected to contain the necessary logic to execute the 'ansible-playbook' command with the provided parameters."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \nThis function is designed to wrap the 'ansible-playbook' command-line interface (CLI) in Python. It takes several parameters:\n\n- `ir_workspace`: An object representing the active workspace in the Infrared framework.\n- `ir_plugin`: An object representing the current plugin in the Infrared framework.\n- `playbook_path`: The path to the playbook file to be executed.\n- `verbose`: Optional parameter specifying the verbosity level for Ansible.\n- `extra_vars`: Optional parameter that is a dictionary passed to Ansible as extra variables.\n- `ansible_args`: Optional parameter that is a dictionary of arguments to be passed directly to Ansible.\n\nThe function body is not implemented in the provided code fragments, as it contains only the function signature and a docstring. The actual implementation of the function is expected to contain the necessary logic to execute the 'ansible-playbook' command with the provided parameters.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \nThis function is responsible for running an Ansible playbook with the given variables dictionary. It takes in the variables dictionary, command line arguments, an Infrared Workspace object representing the active workspace, and an InfraredPlugin object of the current plugin.\n\nThe function is meant to execute the Ansible playbook with the provided variables and arguments. It seems like there are some TODOs in the code related to using Ansible vars object instead of a temporary file and ensuring the correct import order for Ansible to work properly.\n\nIf you need more specific details or have any questions about this function, feel free to ask!"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \nThis function is responsible for running an Ansible playbook with the given variables dictionary. It takes in the variables dictionary, command line arguments, an Infrared Workspace object representing the active workspace, and an InfraredPlugin object of the current plugin.\n\nThe function is meant to execute the Ansible playbook with the provided variables and arguments. It seems like there are some TODOs in the code related to using Ansible vars object instead of a temporary file and ensuring the correct import order for Ansible to work properly.\n\nIf you need more specific details or have any questions about this function, feel free to ask!", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        '''\n        By default, all the values are strings.\n\n        :param parser_name: The command name, e.g. main, virsh, ospd, etc\n        :param values_dict: The dictionary with arguments\n        '''\n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        '''\n        By default, all the values are strings.\n\n        :param parser_name: The command name, e.g. main, virsh, ospd, etc\n        :param values_dict: The dictionary with arguments\n        '''\n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] if \"description\" in spec_yaml else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] if \"config\" in spec_yaml else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return plugin_spec_dict"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] if \"description\" in spec_yaml else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] if \"config\" in spec_yaml else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return plugin_spec_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["\ndef inject_config(self):\n        \n        import os\n\n        if 'ANSIBLE_CONFIG' not in os.environ:\n            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef inject_config(self):\n        \n        import os\n\n        if 'ANSIBLE_CONFIG' not in os.environ:\n            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["\ndef extend_cli(self, root_subparsers):\n        \n        pass  # implementation of adding spec cli options to main entry point is pending."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef extend_cli(self, root_subparsers):\n        \n        pass  # implementation of adding spec cli options to main entry point is pending.", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["\ndef subclasses(cls):\n    \n    subclasses = cls.__subclasses__()\n    for subclass in subclasses:\n        subclasses.extend(subclasses(subclass))\n    return subclasses"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef subclasses(cls):\n    \n    subclasses = cls.__subclasses__()\n    for subclass in subclasses:\n        subclasses.extend(subclasses(subclass))\n    return subclasses", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    \"\"\"\n    Run a function in a sub-process with a specified timeout and optional extra environment variables.\n\n    Parameters:\n    - func: The function to run in the sub-process.\n    - args: Arguments to pass to the function.\n    - timeout: The timeout value for the sub-process execution.\n    - extra_env: Extra environment variables to set for the sub-process.\n\n    Returns:\n    - The result of the function execution in the sub-process.\n    \"\"\"\n    pass"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    \"\"\"\n    Run a function in a sub-process with a specified timeout and optional extra environment variables.\n\n    Parameters:\n    - func: The function to run in the sub-process.\n    - args: Arguments to pass to the function.\n    - timeout: The timeout value for the sub-process execution.\n    - extra_env: Extra environment variables to set for the sub-process.\n\n    Returns:\n    - The result of the function execution in the sub-process.\n    \"\"\"\n    pass", "is_pass": true, "return_code": 0}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    \"\"\"\n    Find the roots in a transitive hierarchy in a graph.\n\n    Args:\n    - graph: The graph in which to find the roots\n    - prop: The property to use for hierarchy traversal\n    - roots: Optional set of nodes to start the search from\n\n    Returns:\n    - Set of nodes representing the roots of the hierarchy\n    \"\"\"\n    catcher: Optional[pytest.ExceptionInfo[Exception]] = None\n\n    graph = cached_graph(graph_sources)\n\n    with ExitStack() as xstack:\n        if isinstance(expected_result, type) and issubclass(expected_result, Exception):\n            catcher = xstack.enter_context(pytest.raises(expected_result))\n        result = find_roots(graph, prop, roots)\n    if catcher is not None:\n        assert catcher is not None\n        assert catcher.value is not None\n    else:\n        assert expected_result == result"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    \"\"\"\n    Find the roots in a transitive hierarchy in a graph.\n\n    Args:\n    - graph: The graph in which to find the roots\n    - prop: The property to use for hierarchy traversal\n    - roots: Optional set of nodes to start the search from\n\n    Returns:\n    - Set of nodes representing the roots of the hierarchy\n    \"\"\"\n    catcher: Optional[pytest.ExceptionInfo[Exception]] = None\n\n    graph = cached_graph(graph_sources)\n\n    with ExitStack() as xstack:\n        if isinstance(expected_result, type) and issubclass(expected_result, Exception):\n            catcher = xstack.enter_context(pytest.raises(expected_result))\n        result = find_roots(graph, prop, roots)\n    if catcher is not None:\n        assert catcher is not None\n        assert catcher.value is not None\n    else:\n        assert expected_result == result", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"", "is_pass": true, "return_code": 0}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["\ndef split(s, platform='this'):\n    \n    if platform == 'darwin' or platform == 'cygwin' or platform == 'cmd' or platform == 'linux':\n        import shlex\n        return shlex.split(s)\n    else:\n        import re\n        return re.findall(r'\\w+', s)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef split(s, platform='this'):\n    \n    if platform == 'darwin' or platform == 'cygwin' or platform == 'cmd' or platform == 'linux':\n        import shlex\n        return shlex.split(s)\n    else:\n        import re\n        return re.findall(r'\\w+', s)", "is_pass": true, "return_code": 0}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["\ndef is_local(host):\n    \n    if host == 'localhost' or host == '127.0.0.1':\n        return True\n    else:\n        return False"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_local(host):\n    \n    if host == 'localhost' or host == '127.0.0.1':\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["\ndef is_gitbash():\n    \n    return 'MSYSTEM' in os.environ and 'MINGW' in os.environ['MSYSTEM']"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_gitbash():\n    \n    return 'MSYSTEM' in os.environ and 'MINGW' in os.environ['MSYSTEM']", "is_pass": true, "return_code": 0}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["\ndef oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())", "is_pass": true, "return_code": 0}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["\ndef replace_dots(value, arg):\n    \n    return value.replace('.', arg)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef replace_dots(value, arg):\n    \n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \nThis code snippet defines a `match` method for a class. The method takes a list of `LeafPattern` objects as `left` and a list of `Pattern` objects as `collected`. It checks if the filename is a type that the module supports and returns a tuple containing a boolean value indicating whether the match was successful, the updated list of `LeafPattern` objects, and the updated list of `Pattern` objects.\n\nThe method signature is as follows:\n- Input parameters:\n  - `left`: a list of `LeafPattern` objects\n  - `collected`: a list of `Pattern` objects (defaulting to None)\n- Output:\n  - A tuple containing:\n    - A boolean value indicating whether the match was successful\n    - The updated list of `LeafPattern` objects\n    - The updated list of `Pattern` objects\n\nIt seems like the method implementation is incomplete and the purpose of checking if the filename is a supported type is not clear from the provided code snippet. More context or implementation details are needed to provide a more accurate explanation."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \nThis code snippet defines a `match` method for a class. The method takes a list of `LeafPattern` objects as `left` and a list of `Pattern` objects as `collected`. It checks if the filename is a type that the module supports and returns a tuple containing a boolean value indicating whether the match was successful, the updated list of `LeafPattern` objects, and the updated list of `Pattern` objects.\n\nThe method signature is as follows:\n- Input parameters:\n  - `left`: a list of `LeafPattern` objects\n  - `collected`: a list of `Pattern` objects (defaulting to None)\n- Output:\n  - A tuple containing:\n    - A boolean value indicating whether the match was successful\n    - The updated list of `LeafPattern` objects\n    - The updated list of `Pattern` objects\n\nIt seems like the method implementation is incomplete and the purpose of checking if the filename is a supported type is not clear from the provided code snippet. More context or implementation details are needed to provide a more accurate explanation.", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["\ndef is_ipv4(target):\n    \n    try:\n        ipaddress.ip_address(target)\n        return True\n    except ValueError:\n        return False\n\ndef is_ipv6(target):\n    \n    try:\n        ipaddress.IPv6Address(target)\n        return True\n    except ValueError:\n        return False\n\ndef is_ip(target):\n    \n    return is_ipv4(target) or is_ipv6(target)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef is_ipv4(target):\n    \n    try:\n        ipaddress.ip_address(target)\n        return True\n    except ValueError:\n        return False\n\ndef is_ipv6(target):\n    \n    try:\n        ipaddress.IPv6Address(target)\n        return True\n    except ValueError:\n        return False\n\ndef is_ip(target):\n    \n    return is_ipv4(target) or is_ipv6(target)", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\nThis method is used to convert the SQL query to use the out-style parameters instead of the in-style parameters. It takes the SQL query as input along with the parameters in either dictionary or sequence format. The method returns a tuple containing the converted SQL query and the out-style parameters in either dictionary or sequence format.\n\nIf you have any specific questions or need further clarification, feel free to ask!"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\nThis method is used to convert the SQL query to use the out-style parameters instead of the in-style parameters. It takes the SQL query as input along with the parameters in either dictionary or sequence format. The method returns a tuple containing the converted SQL query and the out-style parameters in either dictionary or sequence format.\n\nIf you have any specific questions or need further clarification, feel free to ask!", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\nThis `formatmany` method is used to convert the SQL query to use the out-style parameters instead of the in-style parameters. It takes two parameters:\n- `sql`: The SQL query to be converted.\n- `many_params`: Contains each set of in-style parameters.\n\nThe method returns a tuple containing the converted SQL query and the many out-style parameters.\n\nThe method signature is as follows:\n```python\ndef formatmany(\n    self,\n    sql: AnyStr,\n    many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]:\n```"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\nThis `formatmany` method is used to convert the SQL query to use the out-style parameters instead of the in-style parameters. It takes two parameters:\n- `sql`: The SQL query to be converted.\n- `many_params`: Contains each set of in-style parameters.\n\nThe method returns a tuple containing the converted SQL query and the many out-style parameters.\n\nThe method signature is as follows:\n```python\ndef formatmany(\n    self,\n    sql: AnyStr,\n    many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]:\n```", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["\ndef _create_in_regex(self) -> Pattern:\n\t\t\nThe function `_create_in_regex` is responsible for creating the in-style parameter regular expression. It uses the `re.compile` function from the `re` module to compile a regular expression pattern that matches the in-style parameters.\n\nHere is the code for the function:\n\n```python\nimport re\nfrom typing import Pattern\n\ndef _create_in_regex(self) -> Pattern:\n    return re.compile(r'in-style parameter regular expression')\n```\n\nThis function returns a compiled regular expression pattern that can be used to extract in-style parameters from a given input string. The regular expression pattern is defined by the string `'in-style parameter regular expression'`."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_in_regex(self) -> Pattern:\n\t\t\nThe function `_create_in_regex` is responsible for creating the in-style parameter regular expression. It uses the `re.compile` function from the `re` module to compile a regular expression pattern that matches the in-style parameters.\n\nHere is the code for the function:\n\n```python\nimport re\nfrom typing import Pattern\n\ndef _create_in_regex(self) -> Pattern:\n    return re.compile(r'in-style parameter regular expression')\n```\n\nThis function returns a compiled regular expression pattern that can be used to extract in-style parameters from a given input string. The regular expression pattern is defined by the string `'in-style parameter regular expression'`.", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["\ndef _create_converter(self) -> _converting._Converter:\n\t\t\nThis function creates a parameter style converter. The converter is responsible for converting SQL queries to use named output-style parameters from named input-style parameters. The function returns an instance of the `_converting._Converter` class, which is used for this conversion process."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_converter(self) -> _converting._Converter:\n\t\t\nThis function creates a parameter style converter. The converter is responsible for converting SQL queries to use named output-style parameters from named input-style parameters. The function returns an instance of the `_converting._Converter` class, which is used for this conversion process.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["\ndef cached(cache, key=hashkey, lock=None):\n    \ndef decorator(func):\n        if cache is None:\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n        elif lock is None:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    result = func(*args, **kwargs)\n                    cache[k] = result\n                    return result\n        return wrapper\n    return decorator"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef cached(cache, key=hashkey, lock=None):\n    \ndef decorator(func):\n        if cache is None:\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n        elif lock is None:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    result = func(*args, **kwargs)\n                    cache[k] = result\n                    return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \nThis `ttl_cache` function is a decorator that wraps a function with a memoizing callable. It saves up to a specified `maxsize` of results based on a Least Recently Used (LRU) algorithm with a per-item time-to-live (TTL) value. The function takes several parameters:\n- `maxsize`: The maximum number of results to cache. Default is 128.\n- `ttl`: The time-to-live value for each cached item. Default is 600 seconds.\n- `timer`: A function to get the current time. Default is `time.monotonic`.\n- `typed`: A boolean flag indicating whether to differentiate between arguments of different types. Default is False.\n\nThe function returns a memoizing callable that implements the LRU caching algorithm with the specified parameters."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \nThis `ttl_cache` function is a decorator that wraps a function with a memoizing callable. It saves up to a specified `maxsize` of results based on a Least Recently Used (LRU) algorithm with a per-item time-to-live (TTL) value. The function takes several parameters:\n- `maxsize`: The maximum number of results to cache. Default is 128.\n- `ttl`: The time-to-live value for each cached item. Default is 600 seconds.\n- `timer`: A function to get the current time. Default is `time.monotonic`.\n- `typed`: A boolean flag indicating whether to differentiate between arguments of different types. Default is False.\n\nThe function returns a memoizing callable that implements the LRU caching algorithm with the specified parameters.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["\ndef lfu_cache(maxsize=128, typed=False):\n    \nif maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lfu_cache(maxsize=128, typed=False):\n    \nif maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["\ndef setdefault(self, key, default=None):\n        \nThis `setdefault` method is used to retrieve the value of a key from a dictionary-like object (`D`). If the key (`k`) is present in the object `D`, it returns the corresponding value. If the key is not present, it sets the key to the default value (`d`) and returns the default value.\n\nHere's how the `setdefault` method works:\n- If the key (`k`) is in the object `D`, it returns `D[k]`.\n- If the key is not in the object `D`, it sets `D[k]` to the default value (`d`) and returns the default value.\n\nThis method is commonly used in dictionaries or dictionary-like objects to provide a default value if a key is not found in the object."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef setdefault(self, key, default=None):\n        \nThis `setdefault` method is used to retrieve the value of a key from a dictionary-like object (`D`). If the key (`k`) is present in the object `D`, it returns the corresponding value. If the key is not present, it sets the key to the default value (`d`) and returns the default value.\n\nHere's how the `setdefault` method works:\n- If the key (`k`) is in the object `D`, it returns `D[k]`.\n- If the key is not in the object `D`, it sets `D[k]` to the default value (`d`) and returns the default value.\n\nThis method is commonly used in dictionaries or dictionary-like objects to provide a default value if a key is not found in the object.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["\ndef get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n    return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["\ndef pop(self, key, default=__marker):\n        \nThis `pop` method is used to remove a specified key from a dictionary-like object and return the corresponding value. If the key is not found in the object, it returns the default value provided (if any) or raises a KeyError.\n\nIn the code fragments provided, the `pop` method is implemented in various classes and modules with similar functionality. It handles the removal of a key and returning the corresponding value, as well as handling the case where the key is not found.\n\nIf you have any specific questions or need further clarification, feel free to ask!"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop(self, key, default=__marker):\n        \nThis `pop` method is used to remove a specified key from a dictionary-like object and return the corresponding value. If the key is not found in the object, it returns the default value provided (if any) or raises a KeyError.\n\nIn the code fragments provided, the `pop` method is implemented in various classes and modules with similar functionality. It handles the removal of a key and returning the corresponding value, as well as handling the case where the key is not found.\n\nIf you have any specific questions or need further clarification, feel free to ask!", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["\ndef popitem(self):\n        \nThis code fragment is from a cache implementation that removes and returns the key-value pair that has been least frequently used. The `popitem` method is used to implement this functionality in the cache. When called, it removes and returns the least frequently used key-value pair from the cache.\n\nThe implementation uses a counter to keep track of the frequency of each key being accessed. The key with the lowest frequency is considered the least frequently used and is removed when `popitem` is called.\n\nIf there are no items in the cache, a `KeyError` is raised with a message indicating that the cache is empty.\n\nOverall, this method helps in managing the cache by evicting the least frequently used items when the cache reaches its capacity."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \nThis code fragment is from a cache implementation that removes and returns the key-value pair that has been least frequently used. The `popitem` method is used to implement this functionality in the cache. When called, it removes and returns the least frequently used key-value pair from the cache.\n\nThe implementation uses a counter to keep track of the frequency of each key being accessed. The key with the lowest frequency is considered the least frequently used and is removed when `popitem` is called.\n\nIf there are no items in the cache, a `KeyError` is raised with a message indicating that the cache is empty.\n\nOverall, this method helps in managing the cache by evicting the least frequently used items when the cache reaches its capacity.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["\ndef popitem(self):\n        \nThis `popitem` method removes and returns the `(key, value)` pair that was most recently used in the cache. This method is implemented in different cache classes within the `cachetools` module to provide specific functionality for each type of cache.\n\nIn the context of the code fragments provided, the `popitem` method is used to remove and return the most recently used item from the cache. Each cache class has its own implementation of the `popitem` method to handle the specific behavior of that cache type.\n\nIf you have a specific cache class in mind, I can provide more detailed information about how the `popitem` method is implemented for that class. Let me know if you need more information."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \nThis `popitem` method removes and returns the `(key, value)` pair that was most recently used in the cache. This method is implemented in different cache classes within the `cachetools` module to provide specific functionality for each type of cache.\n\nIn the context of the code fragments provided, the `popitem` method is used to remove and return the most recently used item from the cache. Each cache class has its own implementation of the `popitem` method to handle the specific behavior of that cache type.\n\nIf you have a specific cache class in mind, I can provide more detailed information about how the `popitem` method is implemented for that class. Let me know if you need more information.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["\ndef _dump_string(self, obj, dumper=None):\n        \nThis function is used to dump an object into a string in Python. It supports both Python 2 and Python 3, ensuring compatibility with different versions of the language.\n\nThe `obj` parameter is the object to be dumped into a string, and the `dumper` parameter is an optional parameter specifying the dumper to be used for dumping the object.\n\nThe function returns the object dumped into a string, with the encoding handled based on the Python version (py2-unicode or py3-string)."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _dump_string(self, obj, dumper=None):\n        \nThis function is used to dump an object into a string in Python. It supports both Python 2 and Python 3, ensuring compatibility with different versions of the language.\n\nThe `obj` parameter is the object to be dumped into a string, and the `dumper` parameter is an optional parameter specifying the dumper to be used for dumping the object.\n\nThe function returns the object dumped into a string, with the encoding handled based on the Python version (py2-unicode or py3-string).", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    level = logging.DEBUG if debug else logging.INFO\n    logger = logging.getLogger(name)\n    logger.setLevel(level)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    if logfile:\n        if not os.path.exists('logs'):\n            os.makedirs('logs')\n        file_handler = RotatingFileHandler(f'logs/{logfile}', maxBytes=10000, backupCount=10)\n        file_handler.setLevel(level)\n        file_handler.setFormatter(formatter)\n        logger.addHandler(file_handler)\n\n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(level)\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n\n    return logger"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    level = logging.DEBUG if debug else logging.INFO\n    logger = logging.getLogger(name)\n    logger.setLevel(level)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    if logfile:\n        if not os.path.exists('logs'):\n            os.makedirs('logs')\n        file_handler = RotatingFileHandler(f'logs/{logfile}', maxBytes=10000, backupCount=10)\n        file_handler.setLevel(level)\n        file_handler.setFormatter(formatter)\n        logger.addHandler(file_handler)\n\n    console_handler = logging.StreamHandler()\n    console_handler.setLevel(level)\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n\n    return logger", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["\ndef pretty(self, indent=0, debug=False):\n        \n        debug_details = \"\"\n        if debug:\n            debug_details += f\"<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>\"\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\""], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pretty(self, indent=0, debug=False):\n        \n        debug_details = \"\"\n        if debug:\n            debug_details += f\"<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>\"\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"", "is_pass": true, "return_code": 0}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["\ndef absorb(self, args):\n        \nThe `absorb` method takes a sequence of expressions `args` and applies absorption and negative absorption to return a new list of expressions. The method implements the absorption law and negative absorption law as defined below:\n\nAbsorption:\n\n- A & (A | B) = A\n- A | (A & B) = A\n\nNegative absorption:\n\n- A & (~A | B) = A & B\n- A | (~A & B) = A | B\n\nThe method iterates through the expressions in the `args` sequence and applies the absorption and negative absorption rules to simplify the expressions."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef absorb(self, args):\n        \nThe `absorb` method takes a sequence of expressions `args` and applies absorption and negative absorption to return a new list of expressions. The method implements the absorption law and negative absorption law as defined below:\n\nAbsorption:\n\n- A & (A | B) = A\n- A | (A & B) = A\n\nNegative absorption:\n\n- A & (~A | B) = A & B\n- A | (~A & B) = A | B\n\nThe method iterates through the expressions in the `args` sequence and applies the absorption and negative absorption rules to simplify the expressions.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["\ndef validate(self, path):\n        \nThis `validate` method is intended to validate an OCFL (Object Composition and Framing Layer) object at a given path or at the root of a Pyfilesystem (pyfs) object. The method is expected to return `True` if the object is valid (with warnings permitted) and `False` otherwise.\n\nHere is a breakdown of the steps performed in the `validate` method:\n1. Initialize the validation process.\n2. Attempt to open the filesystem at the specified path.\n3. If successful, set the object filesystem (`obj_fs`) to the opened filesystem.\n4. If there is a failure to open the filesystem, log an error with the code 'E003e' and the path that failed to open.\n5. Search for namastes (a special file that contains metadata) in the object to determine the spec version number of the object.\n\nThe method does not provide the complete implementation of the validation logic but serves as a starting point for validating OCFL objects. Further validation steps and checks related to the object's structure, content, and compliance with OCFL specifications would need to be added to this method or other related methods in the codebase."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, path):\n        \nThis `validate` method is intended to validate an OCFL (Object Composition and Framing Layer) object at a given path or at the root of a Pyfilesystem (pyfs) object. The method is expected to return `True` if the object is valid (with warnings permitted) and `False` otherwise.\n\nHere is a breakdown of the steps performed in the `validate` method:\n1. Initialize the validation process.\n2. Attempt to open the filesystem at the specified path.\n3. If successful, set the object filesystem (`obj_fs`) to the opened filesystem.\n4. If there is a failure to open the filesystem, log an error with the code 'E003e' and the path that failed to open.\n5. Search for namastes (a special file that contains metadata) in the object to determine the spec version number of the object.\n\nThe method does not provide the complete implementation of the validation logic but serves as a starting point for validating OCFL objects. Further validation steps and checks related to the object's structure, content, and compliance with OCFL specifications would need to be added to this method or other related methods in the codebase.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["\ndef status_str(self, prefix=''):\n        \n        result = ''\n        sorted_messages = sorted(self.messages)\n        for message in sorted_messages:\n            result += prefix + str(message)\n        return result\n\n    def __str__(self):\n        \n        return self.status_str()"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        result = ''\n        sorted_messages = sorted(self.messages)\n        for message in sorted_messages:\n            result += prefix + str(message)\n        return result\n\n    def __str__(self):\n        \n        return self.status_str()", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["\ndef status_str(self, prefix=''):\n        \n        s = ''\n        for message in sorted(self.messages):\n            s += prefix + message + '\\n'\n        return s[:-1]"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        s = ''\n        for message in sorted(self.messages):\n            s += prefix + message + '\\n'\n        return s[:-1]", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["\ndef is_valid(self, identifier):\n  \n  return True"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_valid(self, identifier):\n  \n  return True", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["\ndef validate(self, inventory, extract_spec_version=False):\n        \nIt seems like the code snippets provided are different implementations of the `validate` and `validate_manifest` methods in various files within the `ocfl` module. These methods are responsible for validating an inventory and manifest block in the context of the OCFL (Object Composition and Framing Language) specification.\n\nThe `validate` method typically takes an inventory as input and performs validation checks based on the spec version specified. It may also extract the spec version from the inventory if needed. The method returns a validation result.\n\nThe `validate_manifest` method is responsible for validating the manifest block in the inventory. It usually returns information such as a mapping of file to digest for each file in the manifest, a list of manifest files that passed initial checks, and a set of original digests in unnormalized form.\n\nThe code snippets show that different implementations of these methods exist across multiple files, each tailored to perform validation based on different criteria or spec versions.\n\nIf you need further assistance or specific details on how these methods are implemented, feel free to ask!"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, inventory, extract_spec_version=False):\n        \nIt seems like the code snippets provided are different implementations of the `validate` and `validate_manifest` methods in various files within the `ocfl` module. These methods are responsible for validating an inventory and manifest block in the context of the OCFL (Object Composition and Framing Language) specification.\n\nThe `validate` method typically takes an inventory as input and performs validation checks based on the spec version specified. It may also extract the spec version from the inventory if needed. The method returns a validation result.\n\nThe `validate_manifest` method is responsible for validating the manifest block in the inventory. It usually returns information such as a mapping of file to digest for each file in the manifest, a list of manifest files that passed initial checks, and a set of original digests in unnormalized form.\n\nThe code snippets show that different implementations of these methods exist across multiple files, each tailored to perform validation based on different criteria or spec versions.\n\nIf you need further assistance or specific details on how these methods are implemented, feel free to ask!", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for digest in digests_used:\n            if digest not in manifest_files:\n                self.error(\"E107\", digest=digest)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for digest in digests_used:\n            if digest not in manifest_files:\n                self.error(\"E107\", digest=digest)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["\ndef validate_as_prior_version(self, prior):\n        \nThis function is used to validate that a given prior inventory is a valid prior version of the current inventory object. The function compares the items, quantities, prices, total value, date, and location of the prior inventory with the current inventory to ensure that they are consistent and valid.\n\nThe specific checks performed in this function may vary depending on the implementation and requirements of the inventory validation process. It typically involves comparing various attributes and values between the prior and current inventories to ensure that the prior version is valid and can be used as a reference for the current version."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_as_prior_version(self, prior):\n        \nThis function is used to validate that a given prior inventory is a valid prior version of the current inventory object. The function compares the items, quantities, prices, total value, date, and location of the prior inventory with the current inventory to ensure that they are consistent and valid.\n\nThe specific checks performed in this function may vary depending on the implementation and requirements of the inventory validation process. It typically involves comparing various attributes and values between the prior and current inventories to ensure that the prior version is valid and can be used as a reference for the current version.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["\ndef get_logical_path_map(inventory, version):\n    \nThis function `get_logical_path_map` takes in an `inventory` and a `version` as input parameters and returns a map of logical paths in state to files on disk for that particular version in the inventory.\n\nThe function iterates through the states in the inventory and constructs a logical path for each state in the format `{state}/{version}`. It then maps each state to its corresponding logical path in the `logical_path_map` dictionary.\n\nHere is a brief overview of how the function works:\n- Initialize an empty dictionary `logical_path_map`.\n- Iterate through the states in the inventory.\n- For each state, construct a logical path using the state name and the given version.\n- Map the state to its corresponding logical path in the `logical_path_map` dictionary.\n- Return the `logical_path_map` dictionary containing the mapping of states to logical paths.\n\nThis function is part of the `InventoryValidator` class in the OCFL (Object Compliant File Layout) Inventory Validator module."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get_logical_path_map(inventory, version):\n    \nThis function `get_logical_path_map` takes in an `inventory` and a `version` as input parameters and returns a map of logical paths in state to files on disk for that particular version in the inventory.\n\nThe function iterates through the states in the inventory and constructs a logical path for each state in the format `{state}/{version}`. It then maps each state to its corresponding logical path in the `logical_path_map` dictionary.\n\nHere is a brief overview of how the function works:\n- Initialize an empty dictionary `logical_path_map`.\n- Iterate through the states in the inventory.\n- For each state, construct a logical path using the state name and the given version.\n- Map the state to its corresponding logical path in the `logical_path_map` dictionary.\n- Return the `logical_path_map` dictionary containing the mapping of states to logical paths.\n\nThis function is part of the `InventoryValidator` class in the OCFL (Object Compliant File Layout) Inventory Validator module.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["\ndef validate_fixity(self, fixity, manifest_files):\n        \nThe function `validate_fixity` is used to validate the fixity block in the inventory. It takes two parameters: `fixity` which represents the fixity block in the inventory, and `manifest_files` which is a mapping from file to digest for each file in the manifest.\n\nThe implementation of this function is not provided in the code fragments above, so you may need to refer to the actual implementation in the corresponding file `ocfl/inventory_validator_validate_fixity_passk_validte1.py` to understand how the fixity block validation is performed."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_fixity(self, fixity, manifest_files):\n        \nThe function `validate_fixity` is used to validate the fixity block in the inventory. It takes two parameters: `fixity` which represents the fixity block in the inventory, and `manifest_files` which is a mapping from file to digest for each file in the manifest.\n\nThe implementation of this function is not provided in the code fragments above, so you may need to refer to the actual implementation in the corresponding file `ocfl/inventory_validator_validate_fixity_passk_validte1.py` to understand how the fixity block validation is performed.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self.good_objects = 0\n            self.num_objects = 0\n            objects = self.get_objects()\n            for obj_id in objects:\n                obj_path = self.get_object_path(obj_id)\n                if self.validate_object(obj_path, obj_id, check_digests, show_warnings):\n                    self.good_objects += 1\n                self.num_objects += 1\n        else:\n            self.good_objects = 0\n            self.num_objects = len(self.get_objects())\n        \n        return self.num_objects, self.good_objects"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self.good_objects = 0\n            self.num_objects = 0\n            objects = self.get_objects()\n            for obj_id in objects:\n                obj_path = self.get_object_path(obj_id)\n                if self.validate_object(obj_path, obj_id, check_digests, show_warnings):\n                    self.good_objects += 1\n                self.num_objects += 1\n        else:\n            self.good_objects = 0\n            self.num_objects = len(self.get_objects())\n        \n        return self.num_objects, self.good_objects", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["\ndef initialize(self):\n        \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef initialize(self):\n        \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["\ndef next_version(version):\n    \n    version_list = version.split('.')\n    last_index = len(version_list) - 1\n    if int(version_list[last_index]) < 9:\n        version_list[last_index] = str(int(version_list[last_index]) + 1)\n    else:\n        i = last_index\n        while i >= 0 and int(version_list[i]) == 9:\n            version_list[i] = '0'\n            i -= 1\n        if i >= 0:\n            version_list[i] = str(int(version_list[i]) + 1)\n        else:\n            version_list.insert(0, '1')\n    return '.'.join(version_list)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef next_version(version):\n    \n    version_list = version.split('.')\n    last_index = len(version_list) - 1\n    if int(version_list[last_index]) < 9:\n        version_list[last_index] = str(int(version_list[last_index]) + 1)\n    else:\n        i = last_index\n        while i >= 0 and int(version_list[i]) == 9:\n            version_list[i] = '0'\n            i -= 1\n        if i >= 0:\n            version_list[i] = str(int(version_list[i]) + 1)\n        else:\n            version_list.insert(0, '1')\n    return '.'.join(version_list)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["\ndef validate_version_inventories(self, version_dirs):\n        \n        '''\n        Also keep a record of any content digests different from those in the root inventory\n        so that we can also check them when validating the content.\n        \n        version_dirs is an array of version directory names and is assumed to be in\n        version sequence (1, 2, 3...).\n        '''\n        prior_manifest_digests = {}  # file -> algorithm -> digest -> [versions]\n        prior_fixity_digests = {}  # file -> algorithm -> digest -> [versions]\n        if len(version_dirs) == 0:\n            return prior_manifest_digests, prior_fixity_digests\n        last_version = version_dirs[-1]\n        prev_version_dir = \"NONE\"  # will be set for the first directory with inventory\n        prev_spec_version = '1.0'  # lowest version\n        for version_dir in version_dirs:\n            inv_file = fs.path.join(version_dir, 'inventory.json')\n            if not self.obj_fs.exists(inv_file):\n                return False\n        return prior_manifest_digests, prior_fixity_digests"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_version_inventories(self, version_dirs):\n        \n        '''\n        Also keep a record of any content digests different from those in the root inventory\n        so that we can also check them when validating the content.\n        \n        version_dirs is an array of version directory names and is assumed to be in\n        version sequence (1, 2, 3...).\n        '''\n        prior_manifest_digests = {}  # file -> algorithm -> digest -> [versions]\n        prior_fixity_digests = {}  # file -> algorithm -> digest -> [versions]\n        if len(version_dirs) == 0:\n            return prior_manifest_digests, prior_fixity_digests\n        last_version = version_dirs[-1]\n        prev_version_dir = \"NONE\"  # will be set for the first directory with inventory\n        prev_spec_version = '1.0'  # lowest version\n        for version_dir in version_dirs:\n            inv_file = fs.path.join(version_dir, 'inventory.json')\n            if not self.obj_fs.exists(inv_file):\n                return False\n        return prior_manifest_digests, prior_fixity_digests", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["\ndef find_path_type(path):\n    \nThis function is incomplete and lacks the implementation details. It seems like it is meant to return a string indicating the type of thing at the given path, such as 'root', 'object', or 'file'. It may also return an error description if the path cannot be opened.\n\nIf you need further assistance with completing this function, please provide more context or requirements."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_path_type(path):\n    \nThis function is incomplete and lacks the implementation details. It seems like it is meant to return a string indicating the type of thing at the given path, such as 'root', 'object', or 'file'. It may also return an error description if the path cannot be opened.\n\nIf you need further assistance with completing this function, please provide more context or requirements.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["\ndef strip_root(self, path, root):\n        \nThis function removes the root path from a given path and throws an exception if the operation fails. It first strips any trailing path separators from the root path and then checks if the common prefix of the two paths is equal to the root path. If it is, it returns the relative path starting from the root path. If not, it raises an exception indicating that the path is not within the root path."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef strip_root(self, path, root):\n        \nThis function removes the root path from a given path and throws an exception if the operation fails. It first strips any trailing path separators from the root path and then checks if the common prefix of the two paths is equal to the root path. If it is, it returns the relative path starting from the root path. If not, it raises an exception indicating that the path is not within the root path.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["\ndef identify_request(request: RequestType):\n    \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime('%Y-%m-%dT%H:%M:%SZ')"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime('%Y-%m-%dT%H:%M:%SZ')", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n    \n    \n    if replacer:\n        pass\n    \n    return tags, replaced_text"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n    \n    \n    if replacer:\n        pass\n    \n    return tags, replaced_text", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, \"href\")\n        if attrs.get(href_key).startswith(\"/\"):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, \"href\")\n        if attrs.get(href_key).startswith(\"/\"):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child.text)\n    return result\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child.text)\n    return result\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \nThis function is used to ensure that the sender handle and the entity handle match. It checks if the sender handle is equal to the entity handle and logs a warning if they don't match. The purpose of this check is to prevent a scenario where the sender is trying to set another author in the payload itself. This is important because Diaspora has the sender in both the payload headers and the object, and it must be ensured that they are the same. \n\nIf the sender handle is not equal to the entity handle, the function logs a warning and returns False. Otherwise, it returns True."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \nThis function is used to ensure that the sender handle and the entity handle match. It checks if the sender handle is equal to the entity handle and logs a warning if they don't match. The purpose of this check is to prevent a scenario where the sender is trying to set another author in the payload itself. This is important because Diaspora has the sender in both the payload headers and the object, and it must be ensured that they are the same. \n\nIf the sender handle is not equal to the entity handle, the function logs a warning and returns False. Otherwise, it returns True.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \nThe function `get_nodeinfo_well_known_document` generates a NodeInfo .well-known document with the given `url` and optional `document_path`. The function returns a dictionary with the `url` and `document_path` included."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \nThe function `get_nodeinfo_well_known_document` generates a NodeInfo .well-known document with the given `url` and optional `document_path`. The function returns a dictionary with the `url` and `document_path` included.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef create_relayable_signature(private_key, doc):\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef create_relayable_signature(private_key, doc):\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \nThis function is used to parse a Diaspora webfinger document, which can be in either JSON format (new) or XRD (old). The function extracts the \"hcard_url\" from the document and returns it as a dictionary.\n\nIt seems like the implementation of the function is missing in the provided code fragments. The function should parse the document and extract the necessary information."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \nThis function is used to parse a Diaspora webfinger document, which can be in either JSON format (new) or XRD (old). The function extracts the \"hcard_url\" from the document and returns it as a dictionary.\n\nIt seems like the implementation of the function is missing in the provided code fragments. The function should parse the document and extract the necessary information.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \nThis function tries to retrieve an RFC7033 webfinger document for a given handle. It first extracts the host from the handle and then fetches the webfinger document using the host and handle information. If successful, it returns the document; otherwise, it logs a warning and returns None. This function does not raise an exception if it fails to retrieve the document."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \nThis function tries to retrieve an RFC7033 webfinger document for a given handle. It first extracts the host from the handle and then fetches the webfinger document using the host and handle information. If successful, it returns the document; otherwise, it logs a warning and returns None. This function does not raise an exception if it fails to retrieve the document.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \nThis function retrieves and parses a remote Diaspora webfinger document for a given handle. The process involves retrieving the webfinger document using the handle, parsing it into a dictionary, and returning the parsed document.\n\nThe function may also involve retrieving a remote Diaspora host-meta document based on the host extracted from the handle. The host-meta document is used to find a link with a specific relation (lrdd) that contains a template for constructing a URL to fetch more information about the handle.\n\nOverall, this function serves the purpose of gathering information about a remote Diaspora user based on their handle."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \nThis function retrieves and parses a remote Diaspora webfinger document for a given handle. The process involves retrieving the webfinger document using the handle, parsing it into a dictionary, and returning the parsed document.\n\nThe function may also involve retrieving a remote Diaspora host-meta document based on the host extracted from the handle. The host-meta document is used to find a link with a specific relation (lrdd) that contains a template for constructing a URL to fetch more information about the handle.\n\nOverall, this function serves the purpose of gathering information about a remote Diaspora user based on their handle.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["\ndef retrieve_diaspora_host_meta(host):\n    \n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef retrieve_diaspora_host_meta(host):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n        'Content-Type': 'application/json',\n    })\n    \n    try:\n        response = requests.request(method, url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n        return response.status_code, None\n    except requests.exceptions.RequestException as exc:\n        return None, exc"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n        'Content-Type': 'application/json',\n    })\n    \n    try:\n        response = requests.request(method, url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n        return response.status_code, None\n    except requests.exceptions.RequestException as exc:\n        return None, exc", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["\ndef get_versions():\n    \nThis function is used to get version information or return a default value if unable to retrieve the information. The function attempts to get version information using certain methods and returns the result. If the methods fail to retrieve the version information, it returns a default value.\n\nThe code fragments provided show different implementations of the `get_versions()` function in various files within the `src/prestoplot/` directory. Each implementation follows a similar pattern of trying to retrieve version information using specific methods and returning the result or a default value if unsuccessful.\n\nIf you need further assistance or have specific questions about a particular implementation, feel free to ask."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_versions():\n    \nThis function is used to get version information or return a default value if unable to retrieve the information. The function attempts to get version information using certain methods and returns the result. If the methods fail to retrieve the version information, it returns a default value.\n\nThe code fragments provided show different implementations of the `get_versions()` function in various files within the `src/prestoplot/` directory. Each implementation follows a similar pattern of trying to retrieve version information using specific methods and returning the result or a default value if unsuccessful.\n\nIf you need further assistance or have specific questions about a particular implementation, feel free to ask.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["\ndef render(pieces, style):\n    \n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef render(pieces, style):\n    \n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["\ndef plus_or_dot(pieces):\n    \n    if \"+\" in pieces[\"closest-tag\"]:\n        return \".\"\n    return \"+\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef plus_or_dot(pieces):\n    \n    if \"+\" in pieces[\"closest-tag\"]:\n        return \".\"\n    return \"+\"", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    if env is None:\n        env = {}\n    \n    command = ' '.join(commands)\n    if args:\n        command += ' ' + ' '.join(args)\n    \n    if verbose:\n        print(f\"Running command: {command}\")\n    \n    try:\n        process = subprocess.Popen(command, cwd=cwd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n        output, error = process.communicate()\n        \n        if not hide_stderr and error:\n            print(error.decode())\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    if env is None:\n        env = {}\n    \n    command = ' '.join(commands)\n    if args:\n        command += ' ' + ' '.join(args)\n    \n    if verbose:\n        print(f\"Running command: {command}\")\n    \n    try:\n        process = subprocess.Popen(command, cwd=cwd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)\n        output, error = process.communicate()\n        \n        if not hide_stderr and error:\n            print(error.decode())\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["\ndef get_config():\n    \n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_config():\n    \n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \n  assert isinstance(commands, list)\n  process = None\n\n  popen_kwargs = {}\n  if sys.platform == \"win32\":\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    popen_kwargs[\"startupinfo\"] = startupinfo\n\n  for command in commands:\n    try:\n      dispcmd = str([command] + args)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \n  assert isinstance(commands, list)\n  process = None\n\n  popen_kwargs = {}\n  if sys.platform == \"win32\":\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    popen_kwargs[\"startupinfo\"] = startupinfo\n\n  for command in commands:\n    try:\n      dispcmd = str([command] + args)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        list_frame = None\n        try:\n            out_buffer = \"\"\n\n            out_buffer += \"e.cls:[{0}]\".format(e.__class__.__name__)\n\n            try:\n                ex_buf = str(e)\n            except UnicodeEncodeError:\n                ex_buf = repr(str(e))\n            except Exception as e:\n                logger.warning(\"Exception, e=%s\", e)"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        list_frame = None\n        try:\n            out_buffer = \"\"\n\n            out_buffer += \"e.cls:[{0}]\".format(e.__class__.__name__)\n\n            try:\n                ex_buf = str(e)\n            except UnicodeEncodeError:\n                ex_buf = repr(str(e))\n            except Exception as e:\n                logger.warning(\"Exception, e=%s\", e)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        :param file_name: File name.\n        :type file_name: str\n        :param text_buffer: Text buffer to write.\n        :type text_buffer: str\n        :param encoding: The encoding to use.\n        :type encoding: str\n        :param overwrite: If true, file is overwritten.\n        :type overwrite: bool\n        :return: The number of bytes written or -1 if error.\n        :rtype: int\n        '''\n        \n        rd = None\n        \n        try:\n            if not overwrite:\n                rd = codecs.open(file_name, \"a+\", encoding, \"strict\", -1)\n            else:\n                rd = codecs.open(file_name, \"w\", encoding, \"strict\", -1)\n\n            return rd.write(text_buffer)\n        except IOError as e:\n            print(\"Error writing to file:\", e)\n            return -1"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        :param file_name: File name.\n        :type file_name: str\n        :param text_buffer: Text buffer to write.\n        :type text_buffer: str\n        :param encoding: The encoding to use.\n        :type encoding: str\n        :param overwrite: If true, file is overwritten.\n        :type overwrite: bool\n        :return: The number of bytes written or -1 if error.\n        :rtype: int\n        '''\n        \n        rd = None\n        \n        try:\n            if not overwrite:\n                rd = codecs.open(file_name, \"a+\", encoding, \"strict\", -1)\n            else:\n                rd = codecs.open(file_name, \"w\", encoding, \"strict\", -1)\n\n            return rd.write(text_buffer)\n        except IOError as e:\n            print(\"Error writing to file:\", e)\n            return -1", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        CAUTION: This will read the whole file IN MEMORY.\n        :param file_name: File name.\n        :type file_name: str\n        :param encoding: Encoding to use.\n        :type encoding: str\n        :return: A text buffer or None in case of error.\n        :rtype: str\n        '''\n        \n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer: file_name does not exist, file_name=%s\", file_name)\n            return None\n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)  # Open file in read mode\n            \n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer: IOError, ex=%s\", SolBase.extostr(e))\n            return None"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        CAUTION: This will read the whole file IN MEMORY.\n        :param file_name: File name.\n        :type file_name: str\n        :param encoding: Encoding to use.\n        :type encoding: str\n        :return: A text buffer or None in case of error.\n        :rtype: str\n        '''\n        \n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer: file_name does not exist, file_name=%s\", file_name)\n            return None\n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)  # Open file in read mode\n            \n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer: IOError, ex=%s\", SolBase.extostr(e))\n            return None", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["\n@staticmethod\n    def is_file_exist(file_name):\n        \n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n\n        return os.path.isfile(file_name)"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def is_file_exist(file_name):\n        \n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n\n        return os.path.isfile(file_name)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n\n    @classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \"\"\"\n        Global initialization, to call as soon as possible.\n        Apply gevent stuff & default logging configuration.\n        :param aggressive: bool\n        :type aggressive: bool\n        :param init_logging: If True, logging_init is called.\n        :type init_logging: bool\n        :return Nothing.\n        \"\"\"\n        try:\n            if cls._voodoo_initialized:\n                return\n            cls._voodoo_initialized = True\n\n            if aggressive:\n                pass\n\n            if init_logging:\n                cls.logging_init()\n\n        except Exception as e:\n            cls.error_log_exception(e)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n\n    @classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \"\"\"\n        Global initialization, to call as soon as possible.\n        Apply gevent stuff & default logging configuration.\n        :param aggressive: bool\n        :type aggressive: bool\n        :param init_logging: If True, logging_init is called.\n        :type init_logging: bool\n        :return Nothing.\n        \"\"\"\n        try:\n            if cls._voodoo_initialized:\n                return\n            cls._voodoo_initialized = True\n\n            if aggressive:\n                pass\n\n            if init_logging:\n                cls.logging_init()\n\n        except Exception as e:\n            cls.error_log_exception(e)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["\ndef _getTargetClass(self):\n        \nThis function is a placeholder that should be implemented in a subclass to return the specific implementation class without the 'Py' or 'Fallback' suffix. It is used in testing optimizations for different implementations. The specific implementation details would need to be provided in the subclass that implements this function."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _getTargetClass(self):\n        \nThis function is a placeholder that should be implemented in a subclass to return the specific implementation class without the 'Py' or 'Fallback' suffix. It is used in testing optimizations for different implementations. The specific implementation details would need to be provided in the subclass that implements this function.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["\ndef _legacy_mergeOrderings(orderings):\n    \nThis function merges multiple orderings while preserving the order within each ordering. The orderings are constrained such that if an object appears in two or more orderings, then the suffix that begins with the object must be in both orderings.\n\nFor example:\n```\n_mergeOrderings([\n    ['x', 'y', 'z'],\n    ['q', 'z'],\n    [1, 3, 5],\n    ['z']\n])\n```\nThis will result in `['x', 'y', 'q', 1, 3, 5, 'z']`.\n\nThe function uses a set to keep track of seen elements and constructs the merged ordering by iterating over the orderings in reverse order. If an element is not already seen, it is added to the result list in reverse order.\n\nThis function is a part of the legacy code for merging orderings in the `zope.interface` module."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _legacy_mergeOrderings(orderings):\n    \nThis function merges multiple orderings while preserving the order within each ordering. The orderings are constrained such that if an object appears in two or more orderings, then the suffix that begins with the object must be in both orderings.\n\nFor example:\n```\n_mergeOrderings([\n    ['x', 'y', 'z'],\n    ['q', 'z'],\n    [1, 3, 5],\n    ['z']\n])\n```\nThis will result in `['x', 'y', 'q', 1, 3, 5, 'z']`.\n\nThe function uses a set to keep track of seen elements and constructs the merged ordering by iterating over the orderings in reverse order. If an element is not already seen, it is added to the result list in reverse order.\n\nThis function is a part of the legacy code for merging orderings in the `zope.interface` module.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["\ndef directlyProvidedBy(object):\n \n    provides = getattr(object, \"__provides__\", None)\n    if provides is None:\n        return None\n    return provides\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef directlyProvidedBy(object):\n \n    provides = getattr(object, \"__provides__\", None)\n    if provides is None:\n        return None\n    return provides\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["\ndef minimalBases(classes):\n    \n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n, m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)  # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef minimalBases(classes):\n    \n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n, m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)  # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["\ndef namesAndDescriptions(self, all=False):\n \n    if not all:\n        return self.__attrs.items()\n\n    r = {}\n    for base in self.__bases__[::-1]:\n        r.update(dict(base.namesAndDescriptions(all)))\n\n    r.update(self.__attrs)\n\n    return r.items()"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef namesAndDescriptions(self, all=False):\n \n    if not all:\n        return self.__attrs.items()\n\n    r = {}\n    for base in self.__bases__[::-1]:\n        r.update(dict(base.namesAndDescriptions(all)))\n\n    r.update(self.__attrs)\n\n    return r.items()", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["\ndef names(self, all=False):\n \nThis function returns the attribute names defined by the interface. If the `all` parameter is set to `True`, it will return all attribute names. Otherwise, it will return only the attribute names defined directly by the interface without considering base interfaces."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef names(self, all=False):\n \nThis function returns the attribute names defined by the interface. If the `all` parameter is set to `True`, it will return all attribute names. Otherwise, it will return only the attribute names defined directly by the interface without considering base interfaces.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["\ndef _normalizeargs(sequence, output=None):\n    \nThis function is used to normalize declaration arguments. The normalization process involves handling declarations, tuples, or single interfaces within the arguments. Anything other than individual interfaces or implements specs will be expanded during normalization.\n\nThe function takes a sequence as input and an optional output list. If the output list is not provided, it initializes an empty list. It then iterates over the elements in the sequence and checks if each element is an individual interface or implements spec. If it is, the element is appended to the output list. If the element is not an individual interface or implements spec, the function recursively calls itself on that element to further normalize the arguments.\n\nOverall, this function ensures that the declaration arguments are in a standardized format for processing in the context of interfaces and implementations."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _normalizeargs(sequence, output=None):\n    \nThis function is used to normalize declaration arguments. The normalization process involves handling declarations, tuples, or single interfaces within the arguments. Anything other than individual interfaces or implements specs will be expanded during normalization.\n\nThe function takes a sequence as input and an optional output list. If the output list is not provided, it initializes an empty list. It then iterates over the elements in the sequence and checks if each element is an individual interface or implements spec. If it is, the element is appended to the output list. If the element is not an individual interface or implements spec, the function recursively calls itself on that element to further normalize the arguments.\n\nOverall, this function ensures that the declaration arguments are in a standardized format for processing in the context of interfaces and implementations.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["\ndef _c_optimizations_available():\n    \nThis function returns the C optimization module if it is available, otherwise it returns a false value. If the optimizations are required but not available, it may raise an ImportError. This function does not determine whether the optimizations should be used or not."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_available():\n    \nThis function returns the C optimization module if it is available, otherwise it returns a false value. If the optimizations are required but not available, it may raise an ImportError. This function does not determine whether the optimizations should be used or not.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["\ndef _should_attempt_c_optimizations():\n    \nThis function seems to be incomplete and lacks the implementation details. It is intended to return a boolean value based on certain conditions to determine whether C optimizations should be attempted. The actual logic for determining this based on whether the environment variable `PURE_PYTHON` is set and if the Python implementation is PyPy is missing.\n\nTo complete the function, you can refer to the code fragments provided in the other files in the repository. The logic involves checking if C optimizations are required, if the Python implementation is PyPy, and if the `PURE_PYTHON` environment variable is set to determine whether C optimizations should be attempted."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _should_attempt_c_optimizations():\n    \nThis function seems to be incomplete and lacks the implementation details. It is intended to return a boolean value based on certain conditions to determine whether C optimizations should be attempted. The actual logic for determining this based on whether the environment variable `PURE_PYTHON` is set and if the Python implementation is PyPy is missing.\n\nTo complete the function, you can refer to the code fragments provided in the other files in the repository. The logic involves checking if C optimizations are required, if the Python implementation is PyPy, and if the `PURE_PYTHON` environment variable is set to determine whether C optimizations should be attempted.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["\ndef _c_optimizations_ignored():\n    \nThis function returns a boolean value indicating whether C optimizations should be ignored. It checks the value of the `PURE_PYTHON` environment variable and returns `True` if the value is not `0`. This function is used in determining whether C optimizations should be attempted in certain contexts."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_ignored():\n    \nThis function returns a boolean value indicating whether C optimizations should be ignored. It checks the value of the `PURE_PYTHON` environment variable and returns `True` if the value is not `0`. This function is used in determining whether C optimizations should be attempted in certain contexts.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \nThis function is used to verify that a candidate object might correctly provide a specified interface. The verification process involves checking if the candidate claims to provide the interface, defining all necessary methods, and ensuring that the methods have the correct signature.\n\nThe function takes the following parameters:\n- `iface`: The interface that the candidate object should provide.\n- `candidate`: The object being verified.\n- `tentative`: A boolean flag indicating if the verification process should be tentative.\n- `vtype`: A string indicating the type of verification being performed.\n\nThe function does not return anything but is used to perform the verification process described above."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \nThis function is used to verify that a candidate object might correctly provide a specified interface. The verification process involves checking if the candidate claims to provide the interface, defining all necessary methods, and ensuring that the methods have the correct signature.\n\nThe function takes the following parameters:\n- `iface`: The interface that the candidate object should provide.\n- `candidate`: The object being verified.\n- `tentative`: A boolean flag indicating if the verification process should be tentative.\n- `vtype`: A string indicating the type of verification being performed.\n\nThe function does not return anything but is used to perform the verification process described above.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["\ndef verifyObject(iface, candidate, tentative=False):\n    \nThis function is used to verify that the `candidate` object correctly provides the `iface` interface. It checks if the candidate object claims to provide the interface, defines all necessary methods, and ensures that the methods have the correct signature.\n\nIf `tentative` is `False`, it first checks if the candidate object claims to provide the interface using `iface.providedBy(candidate)`. If `tentative` is `True`, this step is skipped.\n\nIf any errors are found during the verification process, they are stored in the `errors` list.\n\nThe specific verification steps may vary depending on the implementation of the `iface` interface and the methods defined in the candidate object."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyObject(iface, candidate, tentative=False):\n    \nThis function is used to verify that the `candidate` object correctly provides the `iface` interface. It checks if the candidate object claims to provide the interface, defines all necessary methods, and ensures that the methods have the correct signature.\n\nIf `tentative` is `False`, it first checks if the candidate object claims to provide the interface using `iface.providedBy(candidate)`. If `tentative` is `True`, this step is skipped.\n\nIf any errors are found during the verification process, they are stored in the `errors` list.\n\nThe specific verification steps may vary depending on the implementation of the `iface` interface and the methods defined in the candidate object.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["\ndef verifyClass(iface, candidate, tentative=False):\n    \nThis function is used to verify that a candidate class might correctly provide a specified interface. The function takes in three parameters:\n\n- `iface`: The interface that the candidate class should provide.\n- `candidate`: The candidate class that is being verified.\n- `tentative`: A flag indicating whether the verification should be tentative or strict.\n\nIf the `tentative` flag is `True`, the function will simply check if the candidate class might provide the specified interface. If the `tentative` flag is `False`, the function will perform a more thorough check and raise an exception if the candidate class does not provide the interface.\n\nThe function does not return anything but may raise an exception if the verification fails."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyClass(iface, candidate, tentative=False):\n    \nThis function is used to verify that a candidate class might correctly provide a specified interface. The function takes in three parameters:\n\n- `iface`: The interface that the candidate class should provide.\n- `candidate`: The candidate class that is being verified.\n- `tentative`: A flag indicating whether the verification should be tentative or strict.\n\nIf the `tentative` flag is `True`, the function will simply check if the candidate class might provide the specified interface. If the `tentative` flag is `False`, the function will perform a more thorough check and raise an exception if the candidate class does not provide the interface.\n\nThe function does not return anything but may raise an exception if the verification fails.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["\ndef determineMetaclass(bases, explicit_mc=None):\n    \n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n\n    if len(meta) == 1:\n        return meta[0]\n\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n\n    if not candidates:  # pragma: no cover\n        assert(not __python3)  # This should not happen under Python 3\n        return ClassType\n\n    elif len(candidates) > 1:\n        raise TypeError(\"Incompatible metatypes\", bases)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef determineMetaclass(bases, explicit_mc=None):\n    \n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n\n    if len(meta) == 1:\n        return meta[0]\n\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n\n    if not candidates:  # pragma: no cover\n        assert(not __python3)  # This should not happen under Python 3\n        return ClassType\n\n    elif len(candidates) > 1:\n        raise TypeError(\"Incompatible metatypes\", bases)", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["\ndef force_string(obj):\n    \nThis function takes an object `obj` as input and returns the corresponding bytes object using UTF-8 encoding if `obj` is a string. If `obj` is not a string, it returns `obj` without any modifications."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef force_string(obj):\n    \nThis function takes an object `obj` as input and returns the corresponding bytes object using UTF-8 encoding if `obj` is a string. If `obj` is not a string, it returns `obj` without any modifications.", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    result = ''\n    base = len(alphabet)\n    \n    while number > 0:\n        number, remainder = divmod(number, base)\n        result = alphabet[remainder] + result\n        \n    if padding:\n        result = alphabet[0] * (padding - len(result)) + result\n        \n    return result"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    result = ''\n    base = len(alphabet)\n    \n    while number > 0:\n        number, remainder = divmod(number, base)\n        result = alphabet[remainder] + result\n        \n    if padding:\n        result = alphabet[0] * (padding - len(result)) + result\n        \n    return result", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    output = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        output = output * alpha_len + alphabet.index(char)\n    return output"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    output = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        output = output * alpha_len + alphabet.index(char)\n    return output", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["\ndef _dictsum(dicts):\n    \n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            result[key] = result.get(key, 0) + value\n    return result\n\ndicts = [{'a': 1, 'b': 2}, {'a': 3, 'c': 4}]\nprint(_dictsum(dicts))  # Output: {'a': 4, 'b': 2, 'c': 4}"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _dictsum(dicts):\n    \n    result = {}\n    for d in dicts:\n        for key, value in d.items():\n            result[key] = result.get(key, 0) + value\n    return result\n\ndicts = [{'a': 1, 'b': 2}, {'a': 3, 'c': 4}]\nprint(_dictsum(dicts))  # Output: {'a': 4, 'b': 2, 'c': 4}", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["\ndef files_list(path):\n    \nimport os\n\ndef files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return os.listdir(path)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list(path):\n    \nimport os\n\ndef files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return os.listdir(path)", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["\ndef _group_files_by_xml_filename(source, xmls, files):\n    \nThis function groups files by their XML basename and returns the data in a dictionary format.\n\nParameters:\n- `xml_filename`: str (XML filenames)\n- `files`: list (list of files in the folder or zipfile)\n\nReturns:\n- dict: key - name of the XML files, value - Package"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _group_files_by_xml_filename(source, xmls, files):\n    \nThis function groups files by their XML basename and returns the data in a dictionary format.\n\nParameters:\n- `xml_filename`: str (XML filenames)\n- `files`: list (list of files in the folder or zipfile)\n\nReturns:\n- dict: key - name of the XML files, value - Package", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["\ndef match_file_by_prefix(prefix, file_path):\n    \nThis function `match_file_by_prefix` is used to identify if a file path belongs to a document package by checking if the filename starts with a given prefix. The function takes two parameters, `prefix` which is the filename prefix to match, and `file_path` which is the path of the file being checked.\n\nThe function returns `True` if the file path belongs to the package (i.e., if the filename starts with the given prefix), and `False` otherwise."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match_file_by_prefix(prefix, file_path):\n    \nThis function `match_file_by_prefix` is used to identify if a file path belongs to a document package by checking if the filename starts with a given prefix. The function takes two parameters, `prefix` which is the filename prefix to match, and `file_path` which is the path of the file being checked.\n\nThe function returns `True` if the file path belongs to the package (i.e., if the filename starts with the given prefix), and `False` otherwise.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["\ndef select_filenames_by_prefix(prefix, files):\n    \nThis function takes a prefix and a list of file paths as input and returns a list of file paths that match the given prefix. The function likely filters out file paths that do not start with the specified prefix.\n\nIf you need further assistance with this function, feel free to ask."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef select_filenames_by_prefix(prefix, files):\n    \nThis function takes a prefix and a list of file paths as input and returns a list of file paths that match the given prefix. The function likely filters out file paths that do not start with the specified prefix.\n\nIf you need further assistance with this function, feel free to ask.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["\ndef _explore_folder(folder):\n    \nThe `_explore_folder` function is used to get packages' data from a folder. The function definition is incomplete and does not include any implementation details. The function is likely intended to process files within a folder and return data in a specific format, similar to other functions in the code fragments provided. \n\nTo complete the implementation of the `_explore_folder` function, you can follow a similar structure as seen in the other code fragments. This may involve grouping files by their XML basename, processing the files in the folder, and returning the data in a dictionary format.\n\nHere is a possible implementation outline for the `_explore_folder` function:\n\n```python\ndef _explore_folder(folder):\n    \"\"\"\n    Get packages' data from folder\n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    folder : str\n        Folder path\n    Returns\n    -------\n    dict\n    \"\"\"\n    if file_utils.is_folder(folder):\n        data = _group_files_by_xml_filename(\n            folder,\n            file_utils.xml_files_list(folder),\n            file_utils.files_list(folder),\n        )\n        return data\n```\n\nYou can then implement the `_group_files_by_xml_filename` function to handle the grouping of files by their XML basename and the retrieval of data in the desired format."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_folder(folder):\n    \nThe `_explore_folder` function is used to get packages' data from a folder. The function definition is incomplete and does not include any implementation details. The function is likely intended to process files within a folder and return data in a specific format, similar to other functions in the code fragments provided. \n\nTo complete the implementation of the `_explore_folder` function, you can follow a similar structure as seen in the other code fragments. This may involve grouping files by their XML basename, processing the files in the folder, and returning the data in a dictionary format.\n\nHere is a possible implementation outline for the `_explore_folder` function:\n\n```python\ndef _explore_folder(folder):\n    \"\"\"\n    Get packages' data from folder\n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    folder : str\n        Folder path\n    Returns\n    -------\n    dict\n    \"\"\"\n    if file_utils.is_folder(folder):\n        data = _group_files_by_xml_filename(\n            folder,\n            file_utils.xml_files_list(folder),\n            file_utils.files_list(folder),\n        )\n        return data\n```\n\nYou can then implement the `_group_files_by_xml_filename` function to handle the grouping of files by their XML basename and the retrieval of data in the desired format.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["\ndef _eval_file(prefix, file_path):\n    \nIdentifies the type of file in the package: `asset` or `rendition`."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _eval_file(prefix, file_path):\n    \nIdentifies the type of file in the package: `asset` or `rendition`.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["\ndef add_rendition(self, lang, file_path):\n        \n    self._renditions[lang] = self.file_path(file_path)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_rendition(self, lang, file_path):\n        \n    self._renditions[lang] = self.file_path(file_path)", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = file_path\n\n    def get_asset(self, basename):\n        try:\n            return self._assets[basename]\n        except KeyError:\n            return None\n\n    def add_rendition(self, lang: str, file_path: str):\n        self._renditions[lang] = file_path\n\n    def get_rendition(self, lang):\n        try:\n            return self._renditions[lang]\n        except KeyError:\n            return None"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = file_path\n\n    def get_asset(self, basename):\n        try:\n            return self._assets[basename]\n        except KeyError:\n            return None\n\n    def add_rendition(self, lang: str, file_path: str):\n        self._renditions[lang] = file_path\n\n    def get_rendition(self, lang):\n        try:\n            return self._renditions[lang]\n        except KeyError:\n            return None", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["\ndef _explore_zipfile(zip_path):\n    \nThis function is used to get packages' data from a zip file path. It groups files by their XML basename and returns the data in a dictionary format. The function takes a zip file path as input and returns a dictionary.\n\nHere is the code snippet for the function:\n```python\ndef _explore_zipfile(zip_path):\n    \n```\n\nThe actual implementation of the function is not provided in the code snippets you have shared. It seems that the implementation details are present in other files in the repo. You may need to look into those files to see how the function `_explore_zipfile` is implemented."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_zipfile(zip_path):\n    \nThis function is used to get packages' data from a zip file path. It groups files by their XML basename and returns the data in a dictionary format. The function takes a zip file path as input and returns a dictionary.\n\nHere is the code snippet for the function:\n```python\ndef _explore_zipfile(zip_path):\n    \n```\n\nThe actual implementation of the function is not provided in the code snippets you have shared. It seems that the implementation details are present in other files in the repo. You may need to look into those files to see how the function `_explore_zipfile` is implemented.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["\ndef files_list_from_zipfile(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list_from_zipfile(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["\ndef fix_namespace_prefix_w(content):\n    \n    return content.replace(\"w:st=\", \"w-st=\")"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef fix_namespace_prefix_w(content):\n    \n    return content.replace(\"w:st=\", \"w-st=\")", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["\ndef match_pubdate(node, pubdate_xpaths):\n    \nThis function takes a node and a list of XPath expressions as input, and returns the first match found in the list of XPath expressions. If no match is found, it returns None.\n\nIt seems like this function is used to extract a publication date from an XML node using a list of possible XPath expressions that could lead to the publication date information."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef match_pubdate(node, pubdate_xpaths):\n    \nThis function takes a node and a list of XPath expressions as input, and returns the first match found in the list of XPath expressions. If no match is found, it returns None.\n\nIt seems like this function is used to extract a publication date from an XML node using a list of possible XPath expressions that could lead to the publication date information.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \nThis function is designed to extract the possible values of \"number\" and \"suppl\" from the contents of the \"issue\" element. The actual implementation of how these values are extracted from the issue element is not provided in the code snippet. The function appears to parse the \"issue\" element and return the extracted values as a tuple."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \nThis function is designed to extract the possible values of \"number\" and \"suppl\" from the contents of the \"issue\" element. The actual implementation of how these values are extracted from the issue element is not provided in the code snippet. The function appears to parse the \"issue\" element and return the extracted values as a tuple.", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["\ndef size_to_bytes(size: str) -> int:\n    \n    units = {'B': 1, 'K': 1024, 'M': 1024**2, 'G': 1024**3, 'T': 1024**4}\n    size = size.upper()\n    if size[-1] in units:\n        return int(size[:-1]) * units[size[-1]]\n    return int(size)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef size_to_bytes(size: str) -> int:\n    \n    units = {'B': 1, 'K': 1024, 'M': 1024**2, 'G': 1024**3, 'T': 1024**4}\n    size = size.upper()\n    if size[-1] in units:\n        return int(size[:-1]) * units[size[-1]]\n    return int(size)", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        response = requests.get(url)\n        \n        if response.status_code == 200:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_file.write(response.content)\n            \n            with tarfile.open(temp_file.name, 'r:gz') as tar:\n                tar.extractall(destination_path)\n            \n            return destination_path\n        else:\n            raise Exception(f\"Failed to retrieve archive from {url}\")"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        response = requests.get(url)\n        \n        if response.status_code == 200:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_file.write(response.content)\n            \n            with tarfile.open(temp_file.name, 'r:gz') as tar:\n                tar.extractall(destination_path)\n            \n            return destination_path\n        else:\n            raise Exception(f\"Failed to retrieve archive from {url}\")", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Args:\n    archive_path (str): The path to the existing archive file.\n    filename (str, optional): The name of the file to uncompress. Defaults to None.\n    tmp_path (Union[PosixPath, str], optional): The temporary path to store the uncompressed files. Defaults to \"/tmp\".\n\n    Returns:\n    str: The path to the directory where the files are uncompressed.\n    \"\"\"\n    with TemporaryDirectory(dir=tmp_path) as tmp_dir:\n        with tarfile.open(archive_path, \"r:gz\") as tar:\n            tar.extractall(path=tmp_dir)\n        \n        return tmp_dir"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Args:\n    archive_path (str): The path to the existing archive file.\n    filename (str, optional): The name of the file to uncompress. Defaults to None.\n    tmp_path (Union[PosixPath, str], optional): The temporary path to store the uncompressed files. Defaults to \"/tmp\".\n\n    Returns:\n    str: The path to the directory where the files are uncompressed.\n    \"\"\"\n    with TemporaryDirectory(dir=tmp_path) as tmp_dir:\n        with tarfile.open(archive_path, \"r:gz\") as tar:\n            tar.extractall(path=tmp_dir)\n        \n        return tmp_dir", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["\ndef _replace_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["\ndef hydrate_time(nanoseconds, tz=None):\n    \n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef hydrate_time(nanoseconds, tz=None):\n    \n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["\ndef dehydrate_time(value):\n    \n    \"\"\"\n    :param value:\n    :type value: time\n    :returns:\n    \"\"\"\n    hours = value.hour\n    minutes = value.minute\n    seconds = value.second\n    microseconds = value.microsecond\n    return Structure(b\"E\", hours, minutes, seconds, microseconds)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_time(value):\n    \n    \"\"\"\n    :param value:\n    :type value: time\n    :returns:\n    \"\"\"\n    hours = value.hour\n    minutes = value.minute\n    seconds = value.second\n    microseconds = value.microsecond\n    return Structure(b\"E\", hours, minutes, seconds, microseconds)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["\ndef dehydrate_point(value):\n    \n:param value:\n    :type value: Point\n    :returns:"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_point(value):\n    \n:param value:\n    :type value: Point\n    :returns:", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["\ndef keys(self):\n        \n        return [key for key in self]"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef keys(self):\n        \n        return [key for key in self]", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        \n        \n        :param protocol_version: tuple identifying a specific protocol version (e.g. (3, 5)) or None\n        :returns: dictionary of version tuple to handler class for all relevant and supported protocol versions\n        :raise TypeError: if protocol version is not passed in a tuple\n        '''"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        \n        \n        :param protocol_version: tuple identifying a specific protocol version (e.g. (3, 5)) or None\n        :returns: dictionary of version tuple to handler class for all relevant and supported protocol versions\n        :raise TypeError: if protocol version is not passed in a tuple\n        '''", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["\ndef unit_of_work(metadata=None, timeout=None):\n    \nThe `unit_of_work` function is a decorator for transaction functions that provides additional control over how the transaction is executed. It accepts parameters `metadata` and `timeout` that can be used to customize the behavior of the transaction.\n\nFor example, the `metadata` parameter allows you to attach metadata to the transaction, which can be useful for tagging transactions and making them easily identifiable. This metadata will be visible in the output of `SHOW TRANSACTIONS YIELD *` and will also be logged to the `query.log`.\n\nThe `timeout` parameter allows you to specify a transaction timeout in seconds. Transactions that exceed this timeout will be terminated by the database.\n\nHere is an example usage of the `unit_of_work` decorator:\n\n```python\nfrom neo4j import unit_of_work\n\n@unit_of_work(timeout=100)\ndef count_people_tx(tx):\n    result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n    record = result.single()\n    return record[\"persons\"]\n```\n\nIn this example, the `count_people_tx` function is decorated with `unit_of_work` and is configured to have a timeout of 100 seconds for the transaction. The function performs a Cypher query to count the number of `Person` nodes in the database.\n\nThis decorator provides a flexible way to customize the behavior of transaction functions in Neo4j."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef unit_of_work(metadata=None, timeout=None):\n    \nThe `unit_of_work` function is a decorator for transaction functions that provides additional control over how the transaction is executed. It accepts parameters `metadata` and `timeout` that can be used to customize the behavior of the transaction.\n\nFor example, the `metadata` parameter allows you to attach metadata to the transaction, which can be useful for tagging transactions and making them easily identifiable. This metadata will be visible in the output of `SHOW TRANSACTIONS YIELD *` and will also be logged to the `query.log`.\n\nThe `timeout` parameter allows you to specify a transaction timeout in seconds. Transactions that exceed this timeout will be terminated by the database.\n\nHere is an example usage of the `unit_of_work` decorator:\n\n```python\nfrom neo4j import unit_of_work\n\n@unit_of_work(timeout=100)\ndef count_people_tx(tx):\n    result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n    record = result.single()\n    return record[\"persons\"]\n```\n\nIn this example, the `count_people_tx` function is decorated with `unit_of_work` and is configured to have a timeout of 100 seconds for the transaction. The function performs a Cypher query to count the number of `Person` nodes in the database.\n\nThis decorator provides a flexible way to customize the behavior of transaction functions in Neo4j.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["\ndef index(self, key):\n        \n        if isinstance(key, int):\n            if 0 <= key < len(self.__keys):\n                return key\n            raise IndexError(key)\n        elif isinstance(key, str):\n            try:\n                return self.__keys.index(key)\n            except ValueError as exc:\n                raise KeyError(key) from exc\n        else:\n            raise TypeError(key)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef index(self, key):\n        \n        if isinstance(key, int):\n            if 0 <= key < len(self.__keys):\n                return key\n            raise IndexError(key)\n        elif isinstance(key, str):\n            try:\n                return self.__keys.index(key)\n            except ValueError as exc:\n                raise KeyError(key) from exc\n        else:\n            raise TypeError(key)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["\ndef values(self, *keys):\n        \n:param keys: indexes or keys of the items to include; if none are provided, all values will be included\n:return: list of values"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef values(self, *keys):\n        \n:param keys: indexes or keys of the items to include; if none are provided, all values will be included\n:return: list of values", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["\ndef data(self, *keys):\n        \nThe `data` method in the code fragment returns the keys and values of a record as a dictionary. It provides the option to include only specific values by index or key. If no keys are provided, all values will be included in the dictionary. The keys that are not present in the record will have a value of `None`, and out-of-bounds indexes will raise an `IndexError`."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef data(self, *keys):\n        \nThe `data` method in the code fragment returns the keys and values of a record as a dictionary. It provides the option to include only specific values by index or key. If no keys are provided, all values will be included in the dictionary. The keys that are not present in the record will have a value of `None`, and out-of-bounds indexes will raise an `IndexError`.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        pass"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        pass # Placeholder for implementation"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        pass # Placeholder for implementation", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["\ndef round_half_to_even(n):\n    \n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        up = int(n + 0.5)\n        down = int(n - 0.5)\n        return up if up % 2 == 0 else down\n    else:\n        return int(round(n))"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef round_half_to_even(n):\n    \n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        up = int(n + 0.5)\n        down = int(n - 0.5)\n        return up if up % 2 == 0 else down\n    else:\n        return int(round(n))", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["\ndef point_type(name, fields, srid_map):\n    \nThe `point_type` function is used to dynamically create a Point subclass with the given name, fields, and SRID map. The function defines attributes such as `srid` and accessors for each field in the subclass. The `srid` attribute returns the SRID value based on the length of the Point instance. Accessors are defined for each field to allow access to the field values using attribute syntax.\n\nThis function is used to create different types of Point subclasses, such as CartesianPoint and WGS84Point, with specific fields and SRID mappings."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef point_type(name, fields, srid_map):\n    \nThe `point_type` function is used to dynamically create a Point subclass with the given name, fields, and SRID map. The function defines attributes such as `srid` and accessors for each field in the subclass. The `srid` attribute returns the SRID value based on the length of the Point instance. Accessors are defined for each field to allow access to the field values using attribute syntax.\n\nThis function is used to create different types of Point subclasses, such as CartesianPoint and WGS84Point, with specific fields and SRID mappings.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["\ndef deprecated(message):\n    \n    return _make_warning_decorator(message, deprecation_warn)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deprecated(message):\n    \n    return _make_warning_decorator(message, deprecation_warn)", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if not 0 <= ticks < 86400000000000:\n            raise ValueError(\"Ticks must be between 0 and 86400000000000\")\n        \n        hour = ticks // 3600000000000\n        minute = (ticks % 3600000000000) // 60000000000\n        second = (ticks % 60000000000) // 1000000000\n        nanosecond = ticks % 1000000000\n\n        return cls.__new(ticks, hour, minute, second, nanosecond, tz)"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if not 0 <= ticks < 86400000000000:\n            raise ValueError(\"Ticks must be between 0 and 86400000000000\")\n        \n        hour = ticks // 3600000000000\n        minute = (ticks % 3600000000000) // 60000000000\n        second = (ticks % 60000000000) // 1000000000\n        nanosecond = ticks % 1000000000\n\n        return cls.__new(ticks, hour, minute, second, nanosecond, tz)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmark = Bookmark(value)\n                bookmarks.append(bookmark)\n            except Exception as e:\n                raise ValueError(\"Unable to deserialize bookmark value: {}\".format(value)) from e\n        obj.values = bookmarks\n        return obj"], "level": "self_contained", "generate_results": [{"generate_code": "\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmark = Bookmark(value)\n                bookmarks.append(bookmark)\n            except Exception as e:\n                raise ValueError(\"Unable to deserialize bookmark value: {}\".format(value)) from e\n        obj.values = bookmarks\n        return obj", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["\ndef amend_bzparams(self, params, bug_ids):\n        \n        params['bug_ids'] = bug_ids\n        \n        return params"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef amend_bzparams(self, params, bug_ids):\n        \n        params['bug_ids'] = bug_ids\n        \n        return params", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["\ndef vertex3tuple(vertices):\n    \n    result = []\n    for i in range(len(vertices)):\n        result.append((vertices[i-1], vertices[i], vertices[(i+1)%len(vertices)]))\n    return result"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef vertex3tuple(vertices):\n    \n    result = []\n    for i in range(len(vertices)):\n        result.append((vertices[i-1], vertices[i], vertices[(i+1)%len(vertices)]))\n    return result", "is_pass": true, "return_code": 0}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["\ndef _validate_labels(labels):\n    \nThis function is responsible for checking that keys and values in the given labels match against their corresponding regular expressions. It seems to be a part of a data validation process where labels need to adhere to specific patterns defined by regular expressions.\n\nThe function takes a dictionary of labels as input and raises a `ValidationError` if any of the keys and values do not match their respective regular expressions. The error message contains a list of all errors that occurred in the labels, with each element of the list being a dictionary with two key-value pairs:\n\n- `key`: the label key or label value for which an error occurred as a string.\n- `value`: the error message.\n\nThis function is likely used to ensure that the labels associated with certain data objects meet specific validation criteria before further processing or storage."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _validate_labels(labels):\n    \nThis function is responsible for checking that keys and values in the given labels match against their corresponding regular expressions. It seems to be a part of a data validation process where labels need to adhere to specific patterns defined by regular expressions.\n\nThe function takes a dictionary of labels as input and raises a `ValidationError` if any of the keys and values do not match their respective regular expressions. The error message contains a list of all errors that occurred in the labels, with each element of the list being a dictionary with two key-value pairs:\n\n- `key`: the label key or label value for which an error occurred as a string.\n- `value`: the error message.\n\nThis function is likely used to ensure that the labels associated with certain data objects meet specific validation criteria before further processing or storage.", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["\ndef _get_resource_name_regex():\n    \nThis function is responsible for building or returning the regular expressions used to validate the name of Krake resources. It checks if the regular expressions have already been built and returns them if they have. Otherwise, it builds the regular expressions based on certain criteria such as the maximum and minimum length of the resource name and the allowed characters (alphanumeric, \"-\", \"_\", \".\")."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _get_resource_name_regex():\n    \nThis function is responsible for building or returning the regular expressions used to validate the name of Krake resources. It checks if the regular expressions have already been built and returns them if they have. Otherwise, it builds the regular expressions based on certain criteria such as the maximum and minimum length of the resource name and the allowed characters (alphanumeric, \"-\", \"_\", \".\").", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["\ndef validate_value(value):\n    \n    Args:\n        value: the string to validate\n\n    Raises:\n        ValidationError: if the given value is not conform to the regular expression."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_value(value):\n    \n    Args:\n        value: the string to validate\n\n    Raises:\n        ValidationError: if the given value is not conform to the regular expression.", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["\ndef validate_key(key):\n    \n    Args:\n        key: the string to validate\n\n    Raises:\n        ValidationError: if the given key is not conform to the regular expression.\n    '''\n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not match the regex {_label_key_pattern!r}.\"\n        )"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_key(key):\n    \n    Args:\n        key: the string to validate\n\n    Raises:\n        ValidationError: if the given key is not conform to the regular expression.\n    '''\n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not match the regex {_label_key_pattern!r}.\"\n        )", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values by ``None``."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values by ``None``.", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    \"\"\"\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    This function goes through all observed fields and initializes their value in last_applied_manifest if they are not yet present\n    \"\"\"\n    for key, value in observer_schema.items():\n\n        camel_key = camel_to_snake_case(key)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    \"\"\"\n    Args:\n        last_applied_manifest (dict): partial ``last_applied_manifest`` being updated\n        observer_schema (dict): partial ``observer_schema``\n        response (dict): partial response from the Kubernetes API.\n\n    Raises:\n        KeyError: If the observed field is not present in the Kubernetes response\n\n    This function goes through all observed fields and initializes their value in last_applied_manifest if they are not yet present\n    \"\"\"\n    for key, value in observer_schema.items():\n\n        camel_key = camel_to_snake_case(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    \"\"\"\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n    \n    This function goes through all observed fields and initializes their value in\n    last_applied_manifest if they are not yet present\n    \"\"\"\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            break\n\n        if isinstance(val, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n        elif isinstance(val, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n        else:\n            last_applied_manifest[idx] = response[idx]"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    \"\"\"\n    Args:\n        last_applied_manifest (list): partial ``last_applied_manifest`` being updated\n        observer_schema (list): partial ``observer_schema``\n        response (list): partial response from the Kubernetes API.\n    \n    This function goes through all observed fields and initializes their value in\n    last_applied_manifest if they are not yet present\n    \"\"\"\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            break\n\n        if isinstance(val, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n        elif isinstance(val, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n        else:\n            last_applied_manifest[idx] = response[idx]", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["\ndef generate_default_observer_schema(app):\n    \nThis function generates the default observer schema for each Kubernetes resource present in `app.spec.manifest` for which a custom observer schema hasn't been specified. It iterates over each resource manifest in `app.spec.manifest` and checks if a custom observer schema has been set. If not, it appends a default observer schema for that resource to `app.status.mangled_observer_schema`.\n\nThe function `generate_default_observer_schema_dict` is called to generate the default observer schema for a resource manifest. The generated observer schema includes properties for `metadata` (with `name` and `namespace` fields) and `spec` based on the resource's specifications.\n\nOverall, this function ensures that a default observer schema is created for Kubernetes resources if a custom schema is not provided by the user."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema(app):\n    \nThis function generates the default observer schema for each Kubernetes resource present in `app.spec.manifest` for which a custom observer schema hasn't been specified. It iterates over each resource manifest in `app.spec.manifest` and checks if a custom observer schema has been set. If not, it appends a default observer schema for that resource to `app.status.mangled_observer_schema`.\n\nThe function `generate_default_observer_schema_dict` is called to generate the default observer schema for a resource manifest. The generated observer schema includes properties for `metadata` (with `name` and `namespace` fields) and `spec` based on the resource's specifications.\n\nOverall, this function ensures that a default observer schema is created for Kubernetes resources if a custom schema is not provided by the user.", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["\ndef on(self, hook):\n        \n        pass"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef on(self, hook):\n        \n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \nArgs:\n- user (str): the name of the user for the static authentication\n- etcd_host (str): the host for the database\n- etcd_port (int): the port for the database\n\nReturns:\n- dict: the created configuration"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \nArgs:\n- user (str): the name of the user for the static authentication\n- etcd_host (str): the host for the database\n- etcd_port (int): the port for the database\n\nReturns:\n- dict: the created configuration", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["\ndef paging(response, max_results):\n    \n    i = 0\n    for page in utils.paging(response, max_results=max_results):\n        yield page"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef paging(response, max_results):\n    \n    i = 0\n    for page in utils.paging(response, max_results=max_results):\n        yield page", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["\ndef _fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n\n\n        return _fold\n\n    def _fold(self, dt):\n        return getattr(dt, 'fold', 0)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n\n\n        return _fold\n\n    def _fold(self, dt):\n        return getattr(dt, 'fold', 0)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["\ndef normalized(self):\n        \nThis method returns a version of the object with all relative attributes represented as integers. It cascades remainders down and rounds each to the nearest microsecond. For example, if the object has days=1.5 and hours=2, calling `normalized()` would return a new object with days=+1 and hours=+14."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef normalized(self):\n        \nThis method returns a version of the object with all relative attributes represented as integers. It cascades remainders down and rounds each to the nearest microsecond. For example, if the object has days=1.5 and hours=2, calling `normalized()` would return a new object with days=+1 and hours=+14.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["\ndef tzname_in_python2(namefunc):\n    \nThe function `tzname_in_python2` takes another function `namefunc` as input and returns a wrapper function that converts the unicode output of `namefunc` into bytestrings in Python 2. The wrapper function checks if the result of `namefunc` is a unicode string, and if so, encodes it into utf-8 bytestrings before returning it.\n\nThis function is used to ensure compatibility with Python 2 where unicode strings were used, as opposed to Python 3 where unicode strings were replaced with byte strings."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef tzname_in_python2(namefunc):\n    \nThe function `tzname_in_python2` takes another function `namefunc` as input and returns a wrapper function that converts the unicode output of `namefunc` into bytestrings in Python 2. The wrapper function checks if the result of `namefunc` is a unicode string, and if so, encodes it into utf-8 bytestrings before returning it.\n\nThis function is used to ensure compatibility with Python 2 where unicode strings were used, as opposed to Python 3 where unicode strings were replaced with byte strings.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \nThe `isoparse` method is used to parse an ISO-8601 datetime string into a `datetime.datetime` object. The method is decorated with `@_takes_ascii`, which suggests that it expects the input string to be in ASCII format.\n\nThe code fragments provided show the implementation of parsing date and time components separately in different files within the repo. The `isoparse` method likely calls these separate methods to parse the date and time components before combining them into a `datetime.datetime` object.\n\nIf you need further assistance with the implementation of the `isoparse` method or have specific questions about how it works, feel free to ask!"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \nThe `isoparse` method is used to parse an ISO-8601 datetime string into a `datetime.datetime` object. The method is decorated with `@_takes_ascii`, which suggests that it expects the input string to be in ASCII format.\n\nThe code fragments provided show the implementation of parsing date and time components separately in different files within the repo. The `isoparse` method likely calls these separate methods to parse the date and time components before combining them into a `datetime.datetime` object.\n\nIf you need further assistance with the implementation of the `isoparse` method or have specific questions about how it works, feel free to ask!", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \nThe `parse` method in the code fragment is used to parse a date/time string into a `datetime.datetime` object. The method takes the following parameters:\n\n- `timestr`: A string containing a date/time stamp.\n- `default`: The default datetime object, used if not `None`. Elements specified in `timestr` replace elements in the default object.\n- `ignoretz`: If set to `True`, time zones in parsed strings are ignored and a naive `datetime.datetime` object is returned.\n- `tzinfos`: Additional time zone names/aliases which may be present in the string. This parameter can be a dictionary mapping time zone names to time zones or a function that returns a time zone.\n\nThis method is part of a `parser` class and is used for parsing date/time strings using the supported formats."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \nThe `parse` method in the code fragment is used to parse a date/time string into a `datetime.datetime` object. The method takes the following parameters:\n\n- `timestr`: A string containing a date/time stamp.\n- `default`: The default datetime object, used if not `None`. Elements specified in `timestr` replace elements in the default object.\n- `ignoretz`: If set to `True`, time zones in parsed strings are ignored and a naive `datetime.datetime` object is returned.\n- `tzinfos`: Additional time zone names/aliases which may be present in the string. This parameter can be a dictionary mapping time zone names to time zones or a function that returns a time zone.\n\nThis method is part of a `parser` class and is used for parsing date/time strings using the supported formats.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["\ndef default_tzinfo(dt, tzinfo):\n    \nThis function sets the `tzinfo` parameter on naive datetimes only. It is useful when you are provided a datetime that may have either an implicit or explicit time zone, such as when parsing a time zone string."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef default_tzinfo(dt, tzinfo):\n    \nThis function sets the `tzinfo` parameter on naive datetimes only. It is useful when you are provided a datetime that may have either an implicit or explicit time zone, such as when parsing a time zone string.", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["\ndef is_none_string(val: Any) -> bool:\n    \n    return val.lower() == \"none\" if isinstance(val, str) else False"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_none_string(val: Any) -> bool:\n    \n    return val.lower() == \"none\" if isinstance(val, str) else False", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    parts = image_href.split('/')\n    \n    image_id = parts[-1]\n    image_format = parts[-2]\n    \n    is_snapshot = 'snapshot' in parts\n    \n    return image_id, image_format, is_snapshot"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    parts = image_href.split('/')\n    \n    image_id = parts[-1]\n    image_format = parts[-2]\n    \n    is_snapshot = 'snapshot' in parts\n    \n    return image_id, image_format, is_snapshot", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["\ndef _inline_r_setup(code: str) -> str:\n    \n    with_option = [\n        ('''withr::with_options(\n            list(\n                repos = c(CRAN = 'https://cloud.r-project.org'),\n                Ncpus = 1,\n                pkgType = \"source\"\n            )\n        )\n        '''),\n        code,\n    ]\n    return '\\n'.join(with_option)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _inline_r_setup(code: str) -> str:\n    \n    with_option = [\n        ('''withr::with_options(\n            list(\n                repos = c(CRAN = 'https://cloud.r-project.org'),\n                Ncpus = 1,\n                pkgType = \"source\"\n            )\n        )\n        '''),\n        code,\n    ]\n    return '\\n'.join(with_option)", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    pass"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    pass", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0], env=env)\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0], env=env)\n\n    return (exe,) + cmd[1:]"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0], env=env)\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0], env=env)\n\n    return (exe,) + cmd[1:]", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["\ndef gaussian(self, x):\n        \n        return np.exp(-((x - 0.2) ** 2) / (2 * 0.1 ** 2))"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef gaussian(self, x):\n        \n        return np.exp(-((x - 0.2) ** 2) / (2 * 0.1 ** 2))", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n            if strip:\n                pattern = pattern.strip()\n            return re.compile(pattern)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n            if strip:\n                pattern = pattern.strip()\n            return re.compile(pattern)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["\ndef deep_merge_nodes(nodes):\n    \n\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["\ndef parse_arguments(*arguments):\n    \n    config_paths = collect.get_default_config_paths()\n\n    parser = ArgumentParser(description='Validate borgmatic configuration file(s).')\n    parser.add_argument(\n        '-c',\n        '--config',\n        nargs='+',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(config_paths)\n        ),\n    )\n\n    return parser.parse_args(arguments)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    config_paths = collect.get_default_config_paths()\n\n    parser = ArgumentParser(description='Validate borgmatic configuration file(s).')\n    parser.add_argument(\n        '-c',\n        '--config',\n        nargs='+',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(config_paths)\n        ),\n    )\n\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes flag has been replaced with exclude_patterns in configuration.'\n        )\n\n    if (\n        ('list' in arguments and 'rinfo' in arguments and arguments['list'].json)\n        or ('list' in arguments and 'info' in arguments and arguments['list'].json)\n        or ('rinfo' in arguments and 'info' in arguments and arguments['rinfo'].json)\n    ):\n        raise ValueError('With the --json flag, multiple actions cannot be used together.')\n    \n    return arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes flag has been replaced with exclude_patterns in configuration.'\n        )\n\n    if (\n        ('list' in arguments and 'rinfo' in arguments and arguments['list'].json)\n        or ('list' in arguments and 'info' in arguments and arguments['list'].json)\n        or ('rinfo' in arguments and 'info' in arguments and arguments['rinfo'].json)\n    ):\n        raise ValueError('With the --json flag, multiple actions cannot be used together.')\n    \n    return arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        try:\n            parsed_arguments = subparser.parse_known_args(remaining_arguments)\n            arguments[subparser_name] = parsed_arguments[0]\n            remaining_arguments = parsed_arguments[1]\n        except SystemExit:\n            pass\n\n    return arguments, remaining_arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        try:\n            parsed_arguments = subparser.parse_known_args(remaining_arguments)\n            arguments[subparser_name] = parsed_arguments[0]\n            remaining_arguments = parsed_arguments[1]\n        except SystemExit:\n            pass\n\n    return arguments, remaining_arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["\ndef was_processed(processed, path_name, verbose):\n    \n    if path_name in processed:\n        if verbose:\n            print(\"Already processed: {}\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef was_processed(processed, path_name, verbose):\n    \n    if path_name in processed:\n        if verbose:\n            print(\"Already processed: {}\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["\ndef regex_dict(item):\n    \n    result = {}\n    for key, value in item.items():\n        result[key.replace('.cpp', '.*')] = value\n    return result"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef regex_dict(item):\n    \n    result = {}\n    for key, value in item.items():\n        result[key.replace('.cpp', '.*')] = value\n    return result", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["\ndef remove_ending_os_sep(input_list):\n    \n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    output_list = []\n    for item in input_list:\n        if item.endswith(os.sep):\n            output_list.append(item[:-1])\n        else:\n            output_list.append(item)\n    \n    return output_list"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef remove_ending_os_sep(input_list):\n    \n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    output_list = []\n    for item in input_list:\n        if item.endswith(os.sep):\n            output_list.append(item[:-1])\n        else:\n            output_list.append(item)\n    \n    return output_list", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["\ndef run_command(self, cmd, verbose):\n        \n        \"\"\"\n        Issue a command and return the generated BuildError\n\n        Args:\n            cmd: command line to execute\n            verbose: True if verbose output is required\n        Returns:\n            BuildError object with error condition, if any.\n        \"\"\"\n\n        try:\n            error_code = run_command(\n                cmd, working_dir=os.path.dirname(self.file_name),\n                quiet=not verbose)[0]\n            msg = None\n        except OSError as error:\n            error_code = getattr(error, \"winerror\", error.errno)\n            msg = str(error)\n            print(msg, file=sys.stderr)\n\n        return BuildError(error_code, self.file_name,\n                          configuration=self.configuration, msg=msg)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef run_command(self, cmd, verbose):\n        \n        \"\"\"\n        Issue a command and return the generated BuildError\n\n        Args:\n            cmd: command line to execute\n            verbose: True if verbose output is required\n        Returns:\n            BuildError object with error condition, if any.\n        \"\"\"\n\n        try:\n            error_code = run_command(\n                cmd, working_dir=os.path.dirname(self.file_name),\n                quiet=not verbose)[0]\n            msg = None\n        except OSError as error:\n            error_code = getattr(error, \"winerror\", error.errno)\n            msg = str(error)\n            print(msg, file=sys.stderr)\n\n        return BuildError(error_code, self.file_name,\n                          configuration=self.configuration, msg=msg)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n            b\"[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]))\"\n        )"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n            b\"[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]))\"\n        )", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n    return np.zeros(shape, dtype=dtype)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n    return np.zeros(shape, dtype=dtype)", "is_pass": true, "return_code": 0}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["\ndef addignored(self, ignored):\n        \n        import subprocess\n        import os\n        \n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        \n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True, text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = [s for s in x if sub in s]\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        \n        return t"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef addignored(self, ignored):\n        \n        import subprocess\n        import os\n        \n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        \n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True, text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = [s for s in x if sub in s]\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        \n        return t", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["\ndef reset(self):\n        \n        \"\"\"\n        Reset the histogram.\n\n        Current context is reset to an empty dict.\n        Bins are reinitialized with the *initial_value*\n        or with *make_bins()* (depending on the initialization).\n        \"\"\"\n        if self._make_bins is not None:\n            self.bins = self._make_bins()\n        elif self._initial_bins is not None:\n            self.bins = copy.deepcopy(self._initial_bins)\n        else:\n            pass\n        self._cur_context = {}"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef reset(self):\n        \n        \"\"\"\n        Reset the histogram.\n\n        Current context is reset to an empty dict.\n        Bins are reinitialized with the *initial_value*\n        or with *make_bins()* (depending on the initialization).\n        \"\"\"\n        if self._make_bins is not None:\n            self.bins = self._make_bins()\n        elif self._initial_bins is not None:\n            self.bins = copy.deepcopy(self._initial_bins)\n        else:\n            pass\n        self._cur_context = {}", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["\ndef to_csv(self, separator=\",\", header=None):\n        \nThe code provided is a method named `to_csv` that is used to convert data into a CSV format. The method takes in parameters `separator`, `header`, and `self`. The `separator` parameter is used to specify the delimiter for the CSV file (default is comma). The `header` parameter is used to specify the header row for the CSV file.\n\nThe method does not contain any implementation details and only has a docstring with a placeholder comment ``.\n\nIf you need further assistance with implementing the `to_csv` method or have specific requirements for the CSV conversion, please provide more details."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef to_csv(self, separator=\",\", header=None):\n        \nThe code provided is a method named `to_csv` that is used to convert data into a CSV format. The method takes in parameters `separator`, `header`, and `self`. The `separator` parameter is used to specify the delimiter for the CSV file (default is comma). The `header` parameter is used to specify the header row for the CSV file.\n\nThe method does not contain any implementation details and only has a docstring with a placeholder comment ``.\n\nIf you need further assistance with implementing the `to_csv` method or have specific requirements for the CSV conversion, please provide more details.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["\ndef _get_err_indices(self, coord_name):\n        \nThe code snippets provided show multiple implementations of a class method `_get_err_indices` in different files within the project. \n\nThe method `_get_err_indices` is intended to retrieve error indices corresponding to a specific coordinate name. However, in the code fragments provided, the method is defined but the implementation is missing. Each file contains the method definition along with other methods like `__iter__`, `__repr__`, and `scale` which are related to handling graph coordinates and scaling.\n\nTo make the `_get_err_indices` method functional, it needs to be implemented in each of the files where it is defined. The implementation should involve finding and returning the error indices for the given coordinate name.\n\nIf you need further assistance with implementing the `_get_err_indices` method, feel free to provide more context or specific requirements for its functionality."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _get_err_indices(self, coord_name):\n        \nThe code snippets provided show multiple implementations of a class method `_get_err_indices` in different files within the project. \n\nThe method `_get_err_indices` is intended to retrieve error indices corresponding to a specific coordinate name. However, in the code fragments provided, the method is defined but the implementation is missing. Each file contains the method definition along with other methods like `__iter__`, `__repr__`, and `scale` which are related to handling graph coordinates and scaling.\n\nTo make the `_get_err_indices` method functional, it needs to be implemented in each of the files where it is defined. The implementation should involve finding and returning the error indices for the given coordinate name.\n\nIf you need further assistance with implementing the `_get_err_indices` method, feel free to provide more context or specific requirements for its functionality.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["\ndef _update_context(self, context):\n        \n        hist_context = {\n            \"dim\": self.dim,\n            \"nbins\": self.nbins,\n            \"ranges\": self.ranges\n        }\n\n        if self._scale is not None:\n            hist_context[\"scale\"] = self._scale\n\n        lena.context.update_recursively(context, {\"histogram\": hist_context})"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _update_context(self, context):\n        \n        hist_context = {\n            \"dim\": self.dim,\n            \"nbins\": self.nbins,\n            \"ranges\": self.ranges\n        }\n\n        if self._scale is not None:\n            hist_context[\"scale\"] = self._scale\n\n        lena.context.update_recursively(context, {\"histogram\": hist_context})", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["\ndef integral(bins, edges):\n    \nThis function calculates the integral (scale) for a histogram. The `bins` parameter contains the values of the histogram bins, and the `edges` parameter forms the mesh for the integration. The format of `bins` and `edges` is defined in the `histogram` description.\n\nThe function iterates over the bins and calculates the integral for each bin by multiplying the bin content with the volume of the bin (product of bin lengths in each dimension). The total integral is the sum of all individual bin integrals.\n\nThe function returns the total integral value."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef integral(bins, edges):\n    \nThis function calculates the integral (scale) for a histogram. The `bins` parameter contains the values of the histogram bins, and the `edges` parameter forms the mesh for the integration. The format of `bins` and `edges` is defined in the `histogram` description.\n\nThe function iterates over the bins and calculates the integral for each bin by multiplying the bin content with the volume of the bin (product of bin lengths in each dimension). The total integral is the sum of all individual bin integrals.\n\nThe function returns the total integral value.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["\ndef is_fill_request_seq(seq):\n    \n    \"\"\"\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    \"\"\"\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method 'run'.\"\"\"\n    return hasattr(obj, \"run\") and callable(obj.run)\n    \ndef is_source(seq):\n    \"\"\"Sequence is a Source, if and only if its type is Source.\"\"\"\n    from lena.core import source\n    return isinstance(seq, source.Source)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef is_fill_request_seq(seq):\n    \n    \"\"\"\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    \"\"\"\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method 'run'.\"\"\"\n    return hasattr(obj, \"run\") and callable(obj.run)\n    \ndef is_source(seq):\n    \"\"\"Sequence is a Source, if and only if its type is Source.\"\"\"\n    from lena.core import source\n    return isinstance(seq, source.Source)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"request\") \\\n            and callable(obj.fill) and callable(obj.request)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"request\") \\\n            and callable(obj.fill) and callable(obj.request)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"compute\") \\\n            and callable(obj.fill) and callable(obj.compute)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"compute\") \\\n            and callable(obj.fill) and callable(obj.compute)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["\ndef difference(d1, d2, level=-1):\n    \nThis function `difference` takes two dictionaries `d1` and `d2` as input and returns a dictionary with items from `d1` that are not contained in `d2`. The `level` parameter sets the maximum depth of recursion. If a key is present in both `d1` and `d2` but has different values, it is included in the difference based on the `level` specified.\n\nThe function does not modify the original dictionaries `d1` and `d2`. It may return `d1` or some of its subdictionaries directly. It is recommended to make a deep copy of the result when necessary.\n\nIf `level` is set to -1, the function will perform infinite recursion. If `level` is set to 1, it will only include keys that have different values in `d1` and `d2`.\n\nYou can refer to the documentation of the `intersection` function for more details on how the `difference` function works."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef difference(d1, d2, level=-1):\n    \nThis function `difference` takes two dictionaries `d1` and `d2` as input and returns a dictionary with items from `d1` that are not contained in `d2`. The `level` parameter sets the maximum depth of recursion. If a key is present in both `d1` and `d2` but has different values, it is included in the difference based on the `level` specified.\n\nThe function does not modify the original dictionaries `d1` and `d2`. It may return `d1` or some of its subdictionaries directly. It is recommended to make a deep copy of the result when necessary.\n\nIf `level` is set to -1, the function will perform infinite recursion. If `level` is set to 1, it will only include keys that have different values in `d1` and `d2`.\n\nYou can refer to the documentation of the `intersection` function for more details on how the `difference` function works.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        \n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        \n        ind = indices[-1]\n        if ind < 0:\n            return\n        \n        try: \n            subarr[ind] += weight\n        except IndexError:\n            return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        \n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        \n        ind = indices[-1]\n        if ind < 0:\n            return\n        \n        try: \n            subarr[ind] += weight\n        except IndexError:\n            return", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["\ndef _get_seq_with_type(seq, bufsize=None):\n    \nThis function takes a sequence `seq` and an optional buffer size `bufsize` as input and returns a tuple containing the sequence and its type. The type of the sequence is determined based on the input `seq`. If `seq` is of a sequence type such as list, tuple, str, bytes, or a single element, the function returns the sequence and its type. \n\nHere is the function signature:\n```python\ndef _get_seq_with_type(seq, bufsize=None):\n```\n\nThis function is used in different modules to determine the type of the input sequence and return it along with the sequence itself."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _get_seq_with_type(seq, bufsize=None):\n    \nThis function takes a sequence `seq` and an optional buffer size `bufsize` as input and returns a tuple containing the sequence and its type. The type of the sequence is determined based on the input `seq`. If `seq` is of a sequence type such as list, tuple, str, bytes, or a single element, the function returns the sequence and its type. \n\nHere is the function signature:\n```python\ndef _get_seq_with_type(seq, bufsize=None):\n```\n\nThis function is used in different modules to determine the type of the input sequence and return it along with the sequence itself.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["\ndef scale(self, other=None, recompute=False):\n        \nThis function is used to compute or set the scale (integral) of a histogram object. \n\nIf `other` is `None`, it returns the scale of the histogram. If the scale has not been computed before or if `recompute` is set to `True`, it computes and stores the scale for subsequent use.\n\nIf a float value `other` is provided, it rescales the histogram to that value. \n\nHistograms with a scale equal to zero cannot be rescaled, and a LenaValueError is raised if one tries to do so.\n\nAfter changing or filling the histogram, the scale must be explicitly recomputed if it was computed before. \n\nThe function signature is:\n```python\ndef scale(self, other=None, recompute=False):\n```"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None, recompute=False):\n        \nThis function is used to compute or set the scale (integral) of a histogram object. \n\nIf `other` is `None`, it returns the scale of the histogram. If the scale has not been computed before or if `recompute` is set to `True`, it computes and stores the scale for subsequent use.\n\nIf a float value `other` is provided, it rescales the histogram to that value. \n\nHistograms with a scale equal to zero cannot be rescaled, and a LenaValueError is raised if one tries to do so.\n\nAfter changing or filling the histogram, the scale must be explicitly recomputed if it was computed before. \n\nThe function signature is:\n```python\ndef scale(self, other=None, recompute=False):\n```", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["\ndef scale(self, other=None):\n        \nThis method is used to get or set the scale of the graph. If no argument is provided, it returns the current scale of the graph. If a numeric value is provided as an argument, it rescales the graph to that value.\n\nIf the graph has an unknown or zero scale, rescaling it will raise a LenaValueError. The rescaling is done on the last coordinate of the graph. For example, if the graph has x and y coordinates, then the y coordinate will be rescaled. In a 3-dimensional graph, the z coordinate will be rescaled.\n\nThis method is part of the `BaseStemmer` class in the snowballstemmer package."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None):\n        \nThis method is used to get or set the scale of the graph. If no argument is provided, it returns the current scale of the graph. If a numeric value is provided as an argument, it rescales the graph to that value.\n\nIf the graph has an unknown or zero scale, rescaling it will raise a LenaValueError. The rescaling is done on the last coordinate of the graph. For example, if the graph has x and y coordinates, then the y coordinate will be rescaled. In a 3-dimensional graph, the z coordinate will be rescaled.\n\nThis method is part of the `BaseStemmer` class in the snowballstemmer package.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \nThis function converts a histogram to a graph. It takes the following parameters:\n\n- `hist`: the histogram to convert to a graph.\n- `make_value`: a function to set the value of a graph's point. By default, it is the bin content.\n- `get_coordinate`: defines what the coordinate of a graph point created from a histogram bin will be.\n- `field_names`: a tuple of field names for the x and y coordinates of the graph points.\n- `scale`: a scale parameter for the graph.\n\nThe function iterates over the bins in the histogram and creates graph points based on the bin content and coordinate specified by `get_coordinate`. It then returns the resulting graph."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \nThis function converts a histogram to a graph. It takes the following parameters:\n\n- `hist`: the histogram to convert to a graph.\n- `make_value`: a function to set the value of a graph's point. By default, it is the bin content.\n- `get_coordinate`: defines what the coordinate of a graph point created from a histogram bin will be.\n- `field_names`: a tuple of field names for the x and y coordinates of the graph points.\n- `scale`: a scale parameter for the graph.\n\nThe function iterates over the bins in the histogram and creates graph points based on the bin content and coordinate specified by `get_coordinate`. It then returns the resulting graph.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["\ndef deep_merge_nodes(nodes):\n    \nThis code snippet defines a function `deep_merge_nodes` that takes a list of tuples as input, where each tuple contains a key (ruamel.yaml.nodes.ScalarNode) and a value (ruamel.yaml.nodes.MappingNode or other Node). The function deep merges any node values corresponding to duplicate keys and returns the result.\n\nThe purpose of this function is to support merging borgmatic configuration files, ensuring that configuration options with sub-options are not completely replaced when merging one configuration file into another for reuse.\n\nThe function uses `functools.reduce` and `operator.add` to merge the values of the nodes."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \nThis code snippet defines a function `deep_merge_nodes` that takes a list of tuples as input, where each tuple contains a key (ruamel.yaml.nodes.ScalarNode) and a value (ruamel.yaml.nodes.MappingNode or other Node). The function deep merges any node values corresponding to duplicate keys and returns the result.\n\nThe purpose of this function is to support merging borgmatic configuration files, ensuring that configuration options with sub-options are not completely replaced when merging one configuration file into another for reuse.\n\nThe function uses `functools.reduce` and `operator.add` to merge the values of the nodes.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        ),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help='Whether to overwrite any existing destination file, defaults to false',\n    )\n\n    return parser.parse_args(arguments)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        ),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help='Whether to overwrite any existing destination file, defaults to false',\n    )\n\n    return parser.parse_args(arguments)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["\ndef bash_completion():\n    \nThis function is supposed to return a bash completion script for the borgmatic command. It seems like the actual implementation of the function is missing in the code snippets provided. Typically, a bash completion script would involve generating completion options based on the available command-line arguments and flags for the borgmatic command. \n\nIf you need further assistance with implementing the `bash_completion` function, please provide more context or details on how the completion script should be generated."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef bash_completion():\n    \nThis function is supposed to return a bash completion script for the borgmatic command. It seems like the actual implementation of the function is missing in the code snippets provided. Typically, a bash completion script would involve generating completion options based on the available command-line arguments and flags for the borgmatic command. \n\nIf you need further assistance with implementing the `bash_completion` function, please provide more context or details on how the completion script should be generated.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    global_parser, subparsers = make_parsers()\n    \n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = global_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n\n    return arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    global_parser, subparsers = make_parsers()\n    \n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = global_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n\n    return arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n    \n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        subparsed_arguments, remaining_arguments = subparser.parse_known_args(remaining_arguments)\n        arguments[subparser_name] = subparsed_arguments\n    \n    return arguments, remaining_arguments"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n    \n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        subparsed_arguments, remaining_arguments = subparser.parse_known_args(remaining_arguments)\n        arguments[subparser_name] = subparsed_arguments\n    \n    return arguments, remaining_arguments", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',\n        dest='excludes_filename',\n        help='Deprecated in favor of exclude_patterns within configuration',\n    )\n\n    return global_parser, subparsers"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument(\n        '--excludes',\n        dest='excludes_filename',\n        help='Deprecated in favor of exclude_patterns within configuration',\n    )\n\n    return global_parser, subparsers", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n\n    number, unit = frequency.split()\n\n    unit_mapping = {\n        'seconds': 'seconds',\n        'minutes': 'minutes',\n        'hours': 'hours',\n        'days': 'days',\n        'weeks': 'weeks',\n        'months': 'days',  # Approximation assuming 30 days in a month\n        'years': 'days',   # Approximation assuming 365 days in a year\n    }\n\n    total_days = int(number) * (1 if unit == 'months' or unit == 'years' else 1)\n\n    return datetime.timedelta(**{unit_mapping[unit]: total_days})"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n\n    number, unit = frequency.split()\n\n    unit_mapping = {\n        'seconds': 'seconds',\n        'minutes': 'minutes',\n        'hours': 'hours',\n        'days': 'days',\n        'weeks': 'weeks',\n        'months': 'days',  # Approximation assuming 30 days in a month\n        'years': 'days',   # Approximation assuming 365 days in a year\n    }\n\n    total_days = int(number) * (1 if unit == 'months' or unit == 'years' else 1)\n\n    return datetime.timedelta(**{unit_mapping[unit]: total_days})", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-!+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-!+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(\n            f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.'\n        )\n\n    with open(config_filename, 'w') as file:\n        file.write(rendered_config)\n\n    os.chmod(config_filename, mode)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(\n            f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.'\n        )\n\n    with open(config_filename, 'w') as file:\n        file.write(rendered_config)\n\n    os.chmod(config_filename, mode)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [\n                logging.makeLogRecord(\n                    dict(\n                        levelno=logging.DEBUG,\n                        levelname='DEBUG',\n                        msg=f'{config_filename}: Loading configuration file',\n                    )\n                ),\n            ]\n        )\n        try:\n            configs[config_filename], parse_logs = validate.parse_configuration(\n                config_filename, validate.schema_filename(), overrides, resolve_env\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs.extend(\n                [\n                    logging.makeLogRecord(\n                        dict(\n                            levelno=logging.WARNING,\n                            levelname='WARNING',\n                            msg=f'{config_filename}: Permission denied when loading configuration file',\n                        )\n                    )\n                ]\n            )\n\n    return configs, logs"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [\n                logging.makeLogRecord(\n                    dict(\n                        levelno=logging.DEBUG,\n                        levelname='DEBUG',\n                        msg=f'{config_filename}: Loading configuration file',\n                    )\n                ),\n            ]\n        )\n        try:\n            configs[config_filename], parse_logs = validate.parse_configuration(\n                config_filename, validate.schema_filename(), overrides, resolve_env\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs.extend(\n                [\n                    logging.makeLogRecord(\n                        dict(\n                            levelno=logging.WARNING,\n                            levelname='WARNING',\n                            msg=f'{config_filename}: Permission denied when loading configuration file',\n                        )\n                    )\n                ]\n            )\n\n    return configs, logs", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url", "is_pass": true, "return_code": 0}]}
