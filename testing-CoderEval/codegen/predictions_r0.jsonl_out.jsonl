{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):      \n      def _hydrate_time(self, nanoseconds, tz=None):\n          if tz is None:\n              tz = self.tz\n          return Time(self.year, self.month, self.day, self.hour, self.minute, self.second, nanoseconds, tz=tz)\n\n      return _hydrate_time\n\n\nclass Date(object):\n      '''\n      A datetime.date object.\n\n     .. note::\n\n          This is not a subclass of `datetime.datetime`, but a subclass of\n          `datetime.date` which provides a more convenient interface for\n          conversion.\n\n      '''\n\n      __slots__ = ('year','month', 'day', 'hour','minute','second', 'tz', '_hour', '_minute', '_second', '_"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):      \n      def _hydrate_time(self, nanoseconds, tz=None):\n          if tz is None:\n              tz = self.tz\n          return Time(self.year, self.month, self.day, self.hour, self.minute, self.second, nanoseconds, tz=tz)\n\n      return _hydrate_time\n\n\nclass Date(object):\n      '''\n      A datetime.date object.\n\n     .. note::\n\n          This is not a subclass of `datetime.datetime`, but a subclass of\n          `datetime.date` which provides a more convenient interface for\n          conversion.\n\n      '''\n\n      __slots__ = ('year','month', 'day', 'hour','minute','second', 'tz', '_hour', '_minute', '_second', '_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):      \n      return value.total_seconds()\n\n\ndef add_date_formatters(app):\n      \n      app.add_date_formatters(\n          [\n              format_date_format_date(app.now()),\n              format_date_format_date_time(app.now()),\n          ]\n      )\n      app.add_date_formatters(\n          [\n              format_date_format_time(app.now()),\n              format_date_format_time_time(app.now()),\n          ]\n      )\n\n\ndef parse_date(value):\n      '''Parse a date string.\n\n      This is a helper function for `.format_date_time`.\n      '''\n      if value is None:\n          return None\n      try"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):      \n      return value.total_seconds()\n\n\ndef add_date_formatters(app):\n      \n      app.add_date_formatters(\n          [\n              format_date_format_date(app.now()),\n              format_date_format_date_time(app.now()),\n          ]\n      )\n      app.add_date_formatters(\n          [\n              format_date_format_time(app.now()),\n              format_date_format_time_time(app.now()),\n          ]\n      )\n\n\ndef parse_date(value):\n      '''Parse a date string.\n\n      This is a helper function for `.format_date_time`.\n      '''\n      if value is None:\n          return None\n      try", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):      \n      if value == 1:\n          return'second'\n      if value == 2:\n          return'minute'\n      if value == 3:\n          return 'hour'\n      if value == 4:\n          return 'day'\n      if value == 5:\n          return 'week'\n\n\nclass TimeDelta(models.Model):\n      \"\"\"Django Model for storing timedelta data.\"\"\"\n\n      date = models.DateField(\n          help_text='Date',\n          validators=[\n              validators.MinValueValidator(date(1, 1, 1),\n                                            message='Date must be at least 1 year'),\n              validators.MaxValueValidator(datetime.timedelta(days=7),\n                                            message='Date must be at most 7 days')]\n      )\n      time = models.TimeField(\n         "], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):      \n      if value == 1:\n          return'second'\n      if value == 2:\n          return'minute'\n      if value == 3:\n          return 'hour'\n      if value == 4:\n          return 'day'\n      if value == 5:\n          return 'week'\n\n\nclass TimeDelta(models.Model):\n      \"\"\"Django Model for storing timedelta data.\"\"\"\n\n      date = models.DateField(\n          help_text='Date',\n          validators=[\n              validators.MinValueValidator(date(1, 1, 1),\n                                            message='Date must be at least 1 year'),\n              validators.MaxValueValidator(datetime.timedelta(days=7),\n                                            message='Date must be at most 7 days')]\n      )\n      time = models.TimeField(\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):      \n          return value.__str__()\n\nclass User(db.Model):\n      __tablename__ = 'users'\n      id = db.Column(db.Integer, primary_key=True)\n      username = db.Column(db.String(80), unique=True)\n      password = db.Column(db.String(80))\n      email = db.Column(db.String(80), unique=True)\n      first_name = db.Column(db.String(80))\n      last_name = db.Column(db.String(80))\n      about = db.Column(db.String(80))\n      password_hash = db.Column(db.String(80))"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):      \n          return value.__str__()\n\nclass User(db.Model):\n      __tablename__ = 'users'\n      id = db.Column(db.Integer, primary_key=True)\n      username = db.Column(db.String(80), unique=True)\n      password = db.Column(db.String(80))\n      email = db.Column(db.String(80), unique=True)\n      first_name = db.Column(db.String(80))\n      last_name = db.Column(db.String(80))\n      about = db.Column(db.String(80))\n      password_hash = db.Column(db.String(80))", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):          \n          return self._keys\n\n      def read(self):\n          \n          line = self._file.readline()\n          if not line:\n              return None\n          record, = line.split(None, 1)\n          record = record.strip()\n          self._keys = []\n          return record\n\n      def write(self, record):\n          \n          self._file.write(record + '\\n')\n\n\nclass RecordParser(object):\n      '''A class that parses a binary xml file.\n\n      The record parser is used to parse a record file to generate a\n      record object. It is used to parse a record file to generate a\n      record object.\n\n      '''\n\n      def __init__(self, file, encoding='utf-8'):"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):          \n          return self._keys\n\n      def read(self):\n          \n          line = self._file.readline()\n          if not line:\n              return None\n          record, = line.split(None, 1)\n          record = record.strip()\n          self._keys = []\n          return record\n\n      def write(self, record):\n          \n          self._file.write(record + '\\n')\n\n\nclass RecordParser(object):\n      '''A class that parses a binary xml file.\n\n      The record parser is used to parse a record file to generate a\n      record object. It is used to parse a record file to generate a\n      record object.\n\n      '''\n\n      def __init__(self, file, encoding='utf-8'):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod      def protocol_handlers(cls, protocol_version=None):          \n          raise BoltProtocolException('Not implemented')\n\n      def _create_protocol(self, handler):\n          \n          raise BoltProtocolException('Not implemented')\n\n      def _create_protocol_handlers(self, protocol_version):\n          \n          raise BoltProtocolException('Not implemented')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod      def protocol_handlers(cls, protocol_version=None):          \n          raise BoltProtocolException('Not implemented')\n\n      def _create_protocol(self, handler):\n          \n          raise BoltProtocolException('Not implemented')\n\n      def _create_protocol_handlers(self, protocol_version):\n          \n          raise BoltProtocolException('Not implemented')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):      \n      def decorate(f):\n          def wrapper(self, *args, **kwargs):\n              try:\n                  return f(self, *args, **kwargs)\n              except db.DatabaseError as e:\n                  self.rollback()\n                  if metadata is not None and metadata.get(SQL_ROLLBACK_ATTR, False):\n                      self.rollback()\n                      raise e\n                  raise\n          return wrapper\n      return decorate\n\nclass transaction(object):\n      def __init__(self, transaction_manager, conn=None, autocommit=True):\n          self.transaction_manager = transaction_manager\n          self.conn = conn\n          self.autocommit = autocommit\n          self.cursor = self.conn.cursor()\n          self.rollback = False\n          if autoc"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):      \n      def decorate(f):\n          def wrapper(self, *args, **kwargs):\n              try:\n                  return f(self, *args, **kwargs)\n              except db.DatabaseError as e:\n                  self.rollback()\n                  if metadata is not None and metadata.get(SQL_ROLLBACK_ATTR, False):\n                      self.rollback()\n                      raise e\n                  raise\n          return wrapper\n      return decorate\n\nclass transaction(object):\n      def __init__(self, transaction_manager, conn=None, autocommit=True):\n          self.transaction_manager = transaction_manager\n          self.conn = conn\n          self.autocommit = autocommit\n          self.cursor = self.conn.cursor()\n          self.rollback = False\n          if autoc", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):          \n          return self.index(key, 0, len(self))\n      def __len__(self):\n          return len(self.data)\n      def __getitem__(self, index):\n          return self.data[index]\n      def __setitem__(self, index, value):\n          self.data[index] = value\n      def __delitem__(self, index):\n          del self.data[index]\n\n      def __iter__(self):\n          return iter(self.data)\n\n      def __reversed__(self):\n          return reversed(self.data)\n\n      def pop(self, key=-1):\n          if key < 0:\n              key = len(self)\n          return self.data.pop(key)\n      def __reversed__(self):\n          return reversed(self.data"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):          \n          return self.index(key, 0, len(self))\n      def __len__(self):\n          return len(self.data)\n      def __getitem__(self, index):\n          return self.data[index]\n      def __setitem__(self, index, value):\n          self.data[index] = value\n      def __delitem__(self, index):\n          del self.data[index]\n\n      def __iter__(self):\n          return iter(self.data)\n\n      def __reversed__(self):\n          return reversed(self.data)\n\n      def pop(self, key=-1):\n          if key < 0:\n              key = len(self)\n          return self.data.pop(key)\n      def __reversed__(self):\n          return reversed(self.data", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              keys = (keys, )\n          return self.env['mail.message'].sudo().read(keys, load='_classic_read')\n\n      @api.multi\n      def _read_fields(self, fields_list):\n          \"\"\"\n          Private method to read the given fields_list, which should be a list of\n          field names, of the form [field_name, field_name,...].\n          \"\"\"\n          if not fields_list:\n              return {}\n          res = {}\n          for f in fields_list:\n              if not isinstance(f, basestring):\n                  res[f] = []\n                  continue\n              if f.startswith('['):\n                  f = f[1:-1].split(',')\n              if"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              keys = (keys, )\n          return self.env['mail.message'].sudo().read(keys, load='_classic_read')\n\n      @api.multi\n      def _read_fields(self, fields_list):\n          \"\"\"\n          Private method to read the given fields_list, which should be a list of\n          field names, of the form [field_name, field_name,...].\n          \"\"\"\n          if not fields_list:\n              return {}\n          res = {}\n          for f in fields_list:\n              if not isinstance(f, basestring):\n                  res[f] = []\n                  continue\n              if f.startswith('['):\n                  f = f[1:-1].split(',')\n              if", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              return [keys[0]]\n\n          return [k for k in self.iterkeys() if k in keys]\n\n      def __getitem__(self, index):\n          \n          return dict(self.data(index))\n\n      def __iter__(self):\n          \n          return iter(self.data())\n\n      def __len__(self):\n          \n          return len(self.data())\n\n      def __nonzero"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              return [keys[0]]\n\n          return [k for k in self.iterkeys() if k in keys]\n\n      def __getitem__(self, index):\n          \n          return dict(self.data(index))\n\n      def __iter__(self):\n          \n          return iter(self.data())\n\n      def __len__(self):\n          \n          return len(self.data())\n\n      def __nonzero", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):          \n          self.data = self.data[-2:]\n          return struct.unpack('<H', self.data)[0]\n\nclass Packet:\n      \n      def __init__(self, data, offset=0):\n          self.data = data\n          self.offset = offset\n\n      def get_bytes(self):\n          return self.data[self.offset:self.offset+2]\n\n      def get_offset(self):\n          return self.offset\n\n      def set_offset(self, offset):\n          self.offset = offset\n\n      def get_data(self):\n          return self.data[self.offset:]\n\n      def set_data(self, data):\n          self.data"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):          \n          self.data = self.data[-2:]\n          return struct.unpack('<H', self.data)[0]\n\nclass Packet:\n      \n      def __init__(self, data, offset=0):\n          self.data = data\n          self.offset = offset\n\n      def get_bytes(self):\n          return self.data[self.offset:self.offset+2]\n\n      def get_offset(self):\n          return self.offset\n\n      def set_offset(self, offset):\n          self.offset = offset\n\n      def get_data(self):\n          return self.data[self.offset:]\n\n      def set_data(self, data):\n          self.data", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,                  hydration_hooks=None, **handlers):          \n          self.outputs.discard(n, qid, **handlers)\n          self.hydration_hooks.discard(n, qid, **handlers)\n          self.dehydration_hooks.discard(n, qid, **handlers)\n\n      def discard_all(self, n=-1, qid=-1, **handlers):          \n          self.outputs.discard_all(n, qid, **handlers)\n          self.hydration_hooks.discard_all(n, qid, **handlers)\n          self.dehydration_hooks.discard_all(n, qid, **handlers)\n\nclass Batch:\n      def __init__(self, output_queue,"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,                  hydration_hooks=None, **handlers):          \n          self.outputs.discard(n, qid, **handlers)\n          self.hydration_hooks.discard(n, qid, **handlers)\n          self.dehydration_hooks.discard(n, qid, **handlers)\n\n      def discard_all(self, n=-1, qid=-1, **handlers):          \n          self.outputs.discard_all(n, qid, **handlers)\n          self.hydration_hooks.discard_all(n, qid, **handlers)\n          self.dehydration_hooks.discard_all(n, qid, **handlers)\n\nclass Batch:\n      def __init__(self, output_queue,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,                db=None, imp_user=None, dehydration_hooks=None,                hydration_hooks=None, **handlers):          \n          if handlers is None:\n              handlers = default_handlers\n          handlers['begin'] = self.begin\n          if mode is not None:\n              handlers['begin']['mode'] = mode\n          if bookmarks is not None:\n              handlers['begin']['bookmarks'] = bookmarks\n          if metadata is not None:\n              handlers['begin']['metadata'] = metadata\n          if timeout is not None:\n              handlers['begin']['timeout'] = timeout\n          if db is not None:\n              handlers['begin']['db'] = db\n          if imp_user is not None:\n              handlers['begin']['imp_user'] = imp_user\n          if dehydration_hooks is not None:\n              handlers['begin'"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,                db=None, imp_user=None, dehydration_hooks=None,                hydration_hooks=None, **handlers):          \n          if handlers is None:\n              handlers = default_handlers\n          handlers['begin'] = self.begin\n          if mode is not None:\n              handlers['begin']['mode'] = mode\n          if bookmarks is not None:\n              handlers['begin']['bookmarks'] = bookmarks\n          if metadata is not None:\n              handlers['begin']['metadata'] = metadata\n          if timeout is not None:\n              handlers['begin']['timeout'] = timeout\n          if db is not None:\n              handlers['begin']['db'] = db\n          if imp_user is not None:\n              handlers['begin']['imp_user'] = imp_user\n          if dehydration_hooks is not None:\n              handlers['begin'", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):      \n      return round(n/2)\n\ndef round_half_to_even_simple(n):\n      \n      return int(n*(1/2))\n\ndef round_half_to_even_simple_again(n):\n      '''>>> round_half_to"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):      \n      return round(n/2)\n\ndef round_half_to_even_simple(n):\n      \n      return int(n*(1/2))\n\ndef round_half_to_even_simple_again(n):\n      '''>>> round_half_to", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):      \n      if name in fields:\n          return None\n      fields.append('Point')\n      super(Point, cls).__init__(name, fields, srid_map)\n      return cls\n\n\nclass PointInline(FieldInline):\n      def __init__(self, name, fields, attrs, srid_map):\n          super(PointInline, self).__init__(name, fields, attrs, srid_map)\n\n      def init_point(self):\n          if not self.fields['Point'].null:\n              self.fields['Point'].init_from_geom(self.attrs['Point'])\n\n\nclass LineStringField(Field):\n      \"\"\"\n      A field that stores LineStrings.\n      \"\"\"\n      geom_type = 'LINESTRING'\n      geom_"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):      \n      if name in fields:\n          return None\n      fields.append('Point')\n      super(Point, cls).__init__(name, fields, srid_map)\n      return cls\n\n\nclass PointInline(FieldInline):\n      def __init__(self, name, fields, attrs, srid_map):\n          super(PointInline, self).__init__(name, fields, attrs, srid_map)\n\n      def init_point(self):\n          if not self.fields['Point'].null:\n              self.fields['Point'].init_from_geom(self.attrs['Point'])\n\n\nclass LineStringField(Field):\n      \"\"\"\n      A field that stores LineStrings.\n      \"\"\"\n      geom_type = 'LINESTRING'\n      geom_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          return wrapper\n      return decorator\n\n\ndef deprecated_args(message, *deprecated_args):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          for deprecated_arg in deprecated_args:\n              deprecated_arg(*args, **kwargs)\n          return wrapper\n     "], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          return wrapper\n      return decorator\n\n\ndef deprecated_args(message, *deprecated_args):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          for deprecated_arg in deprecated_args:\n              deprecated_arg(*args, **kwargs)\n          return wrapper\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:      \n      if code == 'R' or code == 'r':\n          return 'R'\n      elif code == 'R-R' or code == 'r-r':\n          return 'R-R'\n      elif code == 'R-R-R' or code == 'r-r-r':\n          return 'R-R-R'\n      elif code == 'R-R-R-R' or code == 'r-r-r-r':\n          return 'R-R-R-R'\n      elif code == 'R-R-R-R-R' or code == 'r-r-r-r-r':\n          return 'R-R-R-R-R'\n      elif code == 'R-R-R-R-R-R' or code == 'r-r-r-"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:      \n      if code == 'R' or code == 'r':\n          return 'R'\n      elif code == 'R-R' or code == 'r-r':\n          return 'R-R'\n      elif code == 'R-R-R' or code == 'r-r-r':\n          return 'R-R-R'\n      elif code == 'R-R-R-R' or code == 'r-r-r-r':\n          return 'R-R-R-R'\n      elif code == 'R-R-R-R-R' or code == 'r-r-r-r-r':\n          return 'R-R-R-R-R'\n      elif code == 'R-R-R-R-R-R' or code == 'r-r-r-", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(          cmd: tuple[str,...],          varargs: Sequence[str],          *,          color: bool = False,          target_concurrency: int = 1,          _max_length: int = _get_platform_max_length(),          **kwargs: Any,\n) -> tuple[int, bytes]:      \n      if not isinstance(cmd, tuple):\n          cmd = (cmd,)\n      if not isinstance(varargs, tuple):\n          varargs = (varargs,)\n      if not isinstance(color, bool):\n          color = color\n      if not isinstance(target_concurrency, int):\n          target_concurrency = target_concurrency\n      if not isinstance(_max_length, int):\n          _max_length = _max_length\n      try:\n          return subprocess.Popen(cmd,\n                                  stdout=subprocess.PIPE,\n                                  stderr=subprocess.PIPE,\n                                  universal_newlines=True,\n                                  bufsize=1,\n                                  bufsize_total=_max_length,\n                                  **kwargs)\n      except OSError as err:\n          raise O"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(          cmd: tuple[str,...],          varargs: Sequence[str],          *,          color: bool = False,          target_concurrency: int = 1,          _max_length: int = _get_platform_max_length(),          **kwargs: Any,\n) -> tuple[int, bytes]:      \n      if not isinstance(cmd, tuple):\n          cmd = (cmd,)\n      if not isinstance(varargs, tuple):\n          varargs = (varargs,)\n      if not isinstance(color, bool):\n          color = color\n      if not isinstance(target_concurrency, int):\n          target_concurrency = target_concurrency\n      if not isinstance(_max_length, int):\n          _max_length = _max_length\n      try:\n          return subprocess.Popen(cmd,\n                                  stdout=subprocess.PIPE,\n                                  stderr=subprocess.PIPE,\n                                  universal_newlines=True,\n                                  bufsize=1,\n                                  bufsize_total=_max_length,\n                                  **kwargs)\n      except OSError as err:\n          raise O", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:      \n      return seq[:]\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:      \n      return seq[:]\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int,...]:      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version(s: str) -> tuple[int,...]:      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version_major(s: str) -> int:      \n      return int(s.split('.')[0])\n\n\ndef parse_version_version_minor(s: str) -> int:      \n      return int(s.split('.')[1])\n\n\ndef parse_version_version_patch(s: str) -> int:      \n      return int(s.split('.')[2])\n\n\ndef parse_version_version_"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int,...]:      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version(s: str) -> tuple[int,...]:      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version_major(s: str) -> int:      \n      return int(s.split('.')[0])\n\n\ndef parse_version_version_minor(s: str) -> int:      \n      return int(s.split('.')[1])\n\n\ndef parse_version_version_patch(s: str) -> int:      \n      return int(s.split('.')[2])\n\n\ndef parse_version_version_", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:      \n      cmd = cmd.replace('(', '(').replace(')', ')')\n      cmd = cmd.replace(';', ';').replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\")\n      cmd = cmd.replace(\"'\", \"\\\\'\").replace('\"', \"\\\\'\")\n      cmd = cmd.replace(\";\", \";\").replace(\"\\\\\", \"\\\\\\\\\").replace('\"', \"\\\\'\")\n      return cmd\n\n\ndef generate_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      cmd = normalize_cmd(cmd)\n      cmd = cmd.replace('\"', \"\\\\'\").replace('\"', \"\\\\'\").replace('\\\\', '\\\\\\\\').replace('\"', \"'\")\n      cmd = cmd.replace('\"', \"\\\\'\").replace"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:      \n      cmd = cmd.replace('(', '(').replace(')', ')')\n      cmd = cmd.replace(';', ';').replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"').replace(\"'\", \"\\\\'\")\n      cmd = cmd.replace(\"'\", \"\\\\'\").replace('\"', \"\\\\'\")\n      cmd = cmd.replace(\";\", \";\").replace(\"\\\\\", \"\\\\\\\\\").replace('\"', \"\\\\'\")\n      return cmd\n\n\ndef generate_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      cmd = normalize_cmd(cmd)\n      cmd = cmd.replace('\"', \"\\\\'\").replace('\"', \"\\\\'\").replace('\\\\', '\\\\\\\\').replace('\"', \"'\")\n      cmd = cmd.replace('\"', \"\\\\'\").replace", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):      \n      def _cached(func):\n          @wraps(func)\n          def _wrapper(*args, **kwargs):\n              key = key()\n              if key not in cache:\n                  cache[key] = func(*args, **kwargs)\n              return cache[key]\n          return _wrapper\n      return _cached\n\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):      \n      def _cached(func):\n          @wraps(func)\n          def _wrapper(*args, **kwargs):\n              key = key()\n              if key not in cache:\n                  cache[key] = func(*args, **kwargs)\n              return cache[key]\n          return _wrapper\n      return _cached\n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):      \n      def wrapper(func):\n          wrapper.func = func\n          wrapper.maxsize = maxsize\n          wrapper.ttl = ttl\n          wrapper.typed = typed\n          wrapper.timer = timer\n\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              memo = LRU(maxsize)\n\n              try:\n                  for item in memo:\n                      item = func(*args, **kwargs)\n              except:\n                  if wrapper.maxsize > 0:\n                      del wrapper.memo[item]\n                      return None\n                  else:\n                      raise\n\n              if wrapper"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):      \n      def wrapper(func):\n          wrapper.func = func\n          wrapper.maxsize = maxsize\n          wrapper.ttl = ttl\n          wrapper.typed = typed\n          wrapper.timer = timer\n\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              memo = LRU(maxsize)\n\n              try:\n                  for item in memo:\n                      item = func(*args, **kwargs)\n              except:\n                  if wrapper.maxsize > 0:\n                      del wrapper.memo[item]\n                      return None\n                  else:\n                      raise\n\n              if wrapper", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              data = get_cached_data(func, args, kwargs)\n              if data:\n                  return data\n              return func(*args, **kwargs)\n          wrapper.cache_info = SimpleNamespace(maxsize=maxsize, typed=typed)\n          wrapper.cache = functools.update_wrapper(wrapper, func)\n          return wrapper\n      return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              data = get_cached_data(func, args, kwargs)\n              if data:\n                  return data\n              return func(*args, **kwargs)\n          wrapper.cache_info = SimpleNamespace(maxsize=maxsize, typed=typed)\n          wrapper.cache = functools.update_wrapper(wrapper, func)\n          return wrapper\n      return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              if args and not kwargs:\n                  kwargs = args[0]\n              key = func.__name__\n              if key not in cache:\n                  value = cache[key] = func(*args, **kwargs)\n                  if len(cache) > maxsize:\n                      del cache[key]\n                      del cache[key]\n              else:\n                  value = cache[key]\n              return value\n          return wrapper\n      return decorator\n\n@lru_cache(1)\ndef fibonacci(n):\n      if n <= 2:\n          return 1\n      return fibonacci(n-1) + fibonacci(n-2)\n\n@lru_cache(1)"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              if args and not kwargs:\n                  kwargs = args[0]\n              key = func.__name__\n              if key not in cache:\n                  value = cache[key] = func(*args, **kwargs)\n                  if len(cache) > maxsize:\n                      del cache[key]\n                      del cache[key]\n              else:\n                  value = cache[key]\n              return value\n          return wrapper\n      return decorator\n\n@lru_cache(1)\ndef fibonacci(n):\n      if n <= 2:\n          return 1\n      return fibonacci(n-1) + fibonacci(n-2)\n\n@lru_cache(1)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = lfu_cache_wrapper(func, maxsize, typed)\n              return memo(func, *args, **kwargs)\n          return wrapper\n      return decorator\n\ndef lfu_cache_wrapper(func, maxsize, typed):\n      '''Wraps a function as a memoizing callable that saves up to `maxsize` results based on a LFU algorithm.\n      The LFU algorithm is implemented as a callable that takes a key and returns its value.\n      The LFU algorithm is implemented as a callable that takes a key and returns an item.\n      The output of the LFU algorithm is the largest key that is in the cache, which is returned.\n      The LFU algorithm is implemented using a Python dictionary.\n      '''\n      cache"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = lfu_cache_wrapper(func, maxsize, typed)\n              return memo(func, *args, **kwargs)\n          return wrapper\n      return decorator\n\ndef lfu_cache_wrapper(func, maxsize, typed):\n      '''Wraps a function as a memoizing callable that saves up to `maxsize` results based on a LFU algorithm.\n      The LFU algorithm is implemented as a callable that takes a key and returns its value.\n      The LFU algorithm is implemented as a callable that takes a key and returns an item.\n      The output of the LFU algorithm is the largest key that is in the cache, which is returned.\n      The LFU algorithm is implemented using a Python dictionary.\n      '''\n      cache", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):          \n          return self.items.popitem()\n\n      def clear(self):\n          \n          self.items = {}\n\nclass LRUCache:\n      '''Implements a cache that uses a hash-based key-value\n      structures.\n      '''\n\n      def __init__(self, capacity: int = _DEFAULT_CAPACITY) -> None:\n          self._capacity = capacity\n          self._d = {}     # d[key] = value\n          self._head = 0    # the first item in the cache\n\n      def get(self, key: int) -> int:\n          '''Return the value associated with the given *key*.\n          Raise a `KeyError` if there is no value in the cache\n          with the given *key*.\n          '''\n          if key not"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):          \n          return self.items.popitem()\n\n      def clear(self):\n          \n          self.items = {}\n\nclass LRUCache:\n      '''Implements a cache that uses a hash-based key-value\n      structures.\n      '''\n\n      def __init__(self, capacity: int = _DEFAULT_CAPACITY) -> None:\n          self._capacity = capacity\n          self._d = {}     # d[key] = value\n          self._head = 0    # the first item in the cache\n\n      def get(self, key: int) -> int:\n          '''Return the value associated with the given *key*.\n          Raise a `KeyError` if there is no value in the cache\n          with the given *key*.\n          '''\n          if key not", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):          \n          return self.__dict__.setdefault(key, default)\n\n      def __repr__(self):\n          \n          if not hasattr(self, '_repr_meth_'):\n              self._repr_meth_ = '__repr__'\n          if self._repr_meth_:\n              return '<%s.%s; %s>' % (self.__class__.__module__,\n                                        self.__class__.__name__,\n                                        getattr(self, self._repr_meth_))\n          else:\n              return '<%s>' % (self.__class__.__name__,)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):          \n          return self.__dict__.setdefault(key, default)\n\n      def __repr__(self):\n          \n          if not hasattr(self, '_repr_meth_'):\n              self._repr_meth_ = '__repr__'\n          if self._repr_meth_:\n              return '<%s.%s; %s>' % (self.__class__.__module__,\n                                        self.__class__.__name__,\n                                        getattr(self, self._repr_meth_))\n          else:\n              return '<%s>' % (self.__class__.__name__,)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):          \n          if key in self: return self[key]\n          return default\n      def has_key(self, key):\n          return self.__contains__(key)\n      def __getitem__(self, key):\n          return self.get(key)\n      def __setitem__(self, key, value):\n          self.__setattr__(key, value)\n      def __delitem__(self, key):\n          self.__delattr__(key)\n      def clear(self):\n          self.__dict__.clear()\n      def update(self, E):\n          self.__dict__.update(E)\n      def get(self, key, d=None):\n          if key in self: return self[key]\n          if d is None:\n              return None\n          return d\n      def has_"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):          \n          if key in self: return self[key]\n          return default\n      def has_key(self, key):\n          return self.__contains__(key)\n      def __getitem__(self, key):\n          return self.get(key)\n      def __setitem__(self, key, value):\n          self.__setattr__(key, value)\n      def __delitem__(self, key):\n          self.__delattr__(key)\n      def clear(self):\n          self.__dict__.clear()\n      def update(self, E):\n          self.__dict__.update(E)\n      def get(self, key, d=None):\n          if key in self: return self[key]\n          if d is None:\n              return None\n          return d\n      def has_", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):      \n      def __init__(self, func, cache={}, **args):\n          self.func = func\n          self.cache = cache\n          self.lock = lock\n          if args:\n              self.__dict__.update(args)\n\n      def __get__(self, obj, type=None):\n          if obj is None:\n              return self\n          if self.lock:\n              key = (obj, self.func.__name__)\n              if key in self.cache:\n                  return self.cache[key]\n              else:\n                  result = self.func(obj)\n                  self.cache[key] = result\n                  return result\n          else:\n              return self.func(obj)\n\n      def __set__(self, obj, value):\n          if self.lock:\n              key = (obj, self.func."], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):      \n      def __init__(self, func, cache={}, **args):\n          self.func = func\n          self.cache = cache\n          self.lock = lock\n          if args:\n              self.__dict__.update(args)\n\n      def __get__(self, obj, type=None):\n          if obj is None:\n              return self\n          if self.lock:\n              key = (obj, self.func.__name__)\n              if key in self.cache:\n                  return self.cache[key]\n              else:\n                  result = self.func(obj)\n                  self.cache[key] = result\n                  return result\n          else:\n              return self.func(obj)\n\n      def __set__(self, obj, value):\n          if self.lock:\n              key = (obj, self.func.", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod      def extostr(cls, e, max_level=30, max_path_level=5):          \n          output = ''\n          if e.args[0] == 'RuntimeError':\n              output += 'RuntimeError: '\n          elif e.args[0] == 'ResourceWarning':\n              output += 'ResourceWarning: '\n          output += '{}: {}\\n'.format(e.__class__.__name__, e)\n          output += '{}'.format(cls.format_traceback(e, max_level, max_path_level))\n          return output\n\n      @staticmethod\n      def format_traceback(e, max_level=30, max_path_level=5):\n          \n          format_str = '{}: {}\\n'\n          return format_str.format(e.__class__.__name__, e)\n\n      @classmethod\n      def is"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod      def extostr(cls, e, max_level=30, max_path_level=5):          \n          output = ''\n          if e.args[0] == 'RuntimeError':\n              output += 'RuntimeError: '\n          elif e.args[0] == 'ResourceWarning':\n              output += 'ResourceWarning: '\n          output += '{}: {}\\n'.format(e.__class__.__name__, e)\n          output += '{}'.format(cls.format_traceback(e, max_level, max_path_level))\n          return output\n\n      @staticmethod\n      def format_traceback(e, max_level=30, max_path_level=5):\n          \n          format_str = '{}: {}\\n'\n          return format_str.format(e.__class__.__name__, e)\n\n      @classmethod\n      def is", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):          \n          with open(file_name, 'wb') as f:\n              f.write(text_buffer.encode(encoding))\n          if overwrite:\n              os.remove(file_name)\n\nclass FileObjectEncoder(object):\n      def __init__(self, file_object, encoding):\n          self.file_object = file_object\n          self.encoding = encoding\n          self.text_buffer = None\n\n      def read(self, num_bytes):\n          \n          data = self.file_object.read(num_bytes)\n          if data is None:\n              return None\n          return data.decode(self.encoding)\n\n      def write(self, data):\n          \n          self.file_"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):          \n          with open(file_name, 'wb') as f:\n              f.write(text_buffer.encode(encoding))\n          if overwrite:\n              os.remove(file_name)\n\nclass FileObjectEncoder(object):\n      def __init__(self, file_object, encoding):\n          self.file_object = file_object\n          self.encoding = encoding\n          self.text_buffer = None\n\n      def read(self, num_bytes):\n          \n          data = self.file_object.read(num_bytes)\n          if data is None:\n              return None\n          return data.decode(self.encoding)\n\n      def write(self, data):\n          \n          self.file_", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod      def file_to_textbuffer(file_name, encoding):          \n          f = open(file_name, \"r\", encoding=encoding)\n          buf_text = f.read()\n          f.close()\n          return buf_text\n\n      def get_file(self, file_name):\n          \n          if self.__file_name == file_name:\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n          else:\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n\n      def save_file(self, file_name, buf_text, encoding):\n          \n          if self.__file_name == file_name:\n              f = open(file_name, \"w\", encoding=encoding)\n              f."], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod      def file_to_textbuffer(file_name, encoding):          \n          f = open(file_name, \"r\", encoding=encoding)\n          buf_text = f.read()\n          f.close()\n          return buf_text\n\n      def get_file(self, file_name):\n          \n          if self.__file_name == file_name:\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n          else:\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n\n      def save_file(self, file_name, buf_text, encoding):\n          \n          if self.__file_name == file_name:\n              f = open(file_name, \"w\", encoding=encoding)\n              f.", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod      def is_file_exist(file_name):          \n      \n      @staticmethod      def is_dir_exist(dir_name):                \n      \n      @staticmethod      def is_file_exist_with_ext(file_name, ext):    \n\n      @staticmethod      def file_exists(file_name):                            \n\n      @staticmethod      def is_dir_exist_with_ext(dir_name, ext):              \n\n      @staticmethod      def is_file_exist_with_ext(file_name, ext):              \n\n      @staticmethod      def file_exists_with_ext(file_name, ext):                 '''Check if file name exist with"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod      def is_file_exist(file_name):          \n      \n      @staticmethod      def is_dir_exist(dir_name):                \n      \n      @staticmethod      def is_file_exist_with_ext(file_name, ext):    \n\n      @staticmethod      def file_exists(file_name):                            \n\n      @staticmethod      def is_dir_exist_with_ext(dir_name, ext):              \n\n      @staticmethod      def is_file_exist_with_ext(file_name, ext):              \n\n      @staticmethod      def file_exists_with_ext(file_name, ext):                 '''Check if file name exist with", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod      def _reset_logging(cls):          \n          self.logging = False\n\n      def __init__(self, *args, **kwargs):\n          \n          super().__init__(*args, **kwargs)\n          self.init()\n          \n      def init(self):\n          \n          self.logging = True\n          if not self.logging:\n              return\n          self._setup_logging()\n          \n      def _setup_logging(self):\n          \n          self.logging = True\n          self._log = logging.getLogger(self.__class__.__name__)\n          self.logging = False\n          \n      def error(self, message, *args, **kwargs):\n          ''"], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod      def _reset_logging(cls):          \n          self.logging = False\n\n      def __init__(self, *args, **kwargs):\n          \n          super().__init__(*args, **kwargs)\n          self.init()\n          \n      def init(self):\n          \n          self.logging = True\n          if not self.logging:\n              return\n          self._setup_logging()\n          \n      def _setup_logging(self):\n          \n          self.logging = True\n          self._log = logging.getLogger(self.__class__.__name__)\n          self.logging = False\n          \n      def error(self, message, *args, **kwargs):\n          ''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):          \n          return self.__class__\n\n      def _getSupportedFeatures(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the set of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features\n\n      def _getSupportedFeaturesString(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the string representation of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features_string\n\n      def _getSupportedFeaturesStringList(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the string representation of the list of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features_string_list"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):          \n          return self.__class__\n\n      def _getSupportedFeatures(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the set of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features\n\n      def _getSupportedFeaturesString(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the string representation of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features_string\n\n      def _getSupportedFeaturesStringList(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is the string representation of the list of all features that can be selected by a subclass.\n          '''\n          return self.__supported_features_string_list", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):      \n      if not orderings:\n          return orderings\n      if len(orderings) > 1:\n          first = orderings[0]\n          for order in orderings[1:]:\n              for i in range(len(first)):\n                  if order[i] > first[i]:\n                      first[i], order[i] = order[i], first[i]\n          return orderings\n      else:\n          return orderings\n\n\ndef _flatten(nested):\n      if isinstance(nested, (list, tuple)):\n          return _flatten(nested[0]) + flatten(nested[1:])\n      elif isinstance(nested, dict):\n          return _flatten(nested.items())\n      return nested\n\n\ndef _flatten_dict(nested):\n      if isinstance("], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):      \n      if not orderings:\n          return orderings\n      if len(orderings) > 1:\n          first = orderings[0]\n          for order in orderings[1:]:\n              for i in range(len(first)):\n                  if order[i] > first[i]:\n                      first[i], order[i] = order[i], first[i]\n          return orderings\n      else:\n          return orderings\n\n\ndef _flatten(nested):\n      if isinstance(nested, (list, tuple)):\n          return _flatten(nested[0]) + flatten(nested[1:])\n      elif isinstance(nested, dict):\n          return _flatten(nested.items())\n      return nested\n\n\ndef _flatten_dict(nested):\n      if isinstance(", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n\ndef directlyProvidedByCallable(object):\n \n\ndef getSettersFor(object):\n \n\ndef getSettersForCallable(object):\n \n\ndef setSettersFor(object):\n \n\ndef setSettersForCallable(object):\n \n\ndef getMethodsFor(object):\n \n\ndef getMethodsForCallable(object):\n \n\ndef setMethodsFor(object):\n '''"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n\ndef directlyProvidedByCallable(object):\n \n\ndef getSettersFor(object):\n \n\ndef getSettersForCallable(object):\n \n\ndef setSettersFor(object):\n \n\ndef setSettersForCallable(object):\n \n\ndef getMethodsFor(object):\n \n\ndef getMethodsForCallable(object):\n \n\ndef setMethodsFor(object):\n '''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):      \n      return sorted(classes, key=lambda c: len(c), reverse=True)\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      '''Return a dictionary of property values for the given class list''"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):      \n      return sorted(classes, key=lambda c: len(c), reverse=True)\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      \n      return {prop: getattr(class, prop) for prop in properties}\n\ndef getClassProperties(classList, properties):\n      '''Return a dictionary of property values for the given class list''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n if not all:\n    names = [a for a in self.__dict__.keys() if a[0]!= '_']\n    descriptions = [self.__dict__[a] for a in names]\n else:\n    names = []\n    descriptions = []\n    for a in self.__dict__.keys():\n     if a[0]!= '_':\n      names.append(a)\n      descriptions.append(self.__dict__[a])\n\n if not all:\n    names.sort()\n    descriptions.sort()\n    return ', '.join(names), ', '.join(descriptions)\n\ndef _getMethod(self, name):\n    if not hasattr(self, name):\n       raise AttributeError, name\n    meth = getattr(self, name)"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n if not all:\n    names = [a for a in self.__dict__.keys() if a[0]!= '_']\n    descriptions = [self.__dict__[a] for a in names]\n else:\n    names = []\n    descriptions = []\n    for a in self.__dict__.keys():\n     if a[0]!= '_':\n      names.append(a)\n      descriptions.append(self.__dict__[a])\n\n if not all:\n    names.sort()\n    descriptions.sort()\n    return ', '.join(names), ', '.join(descriptions)\n\ndef _getMethod(self, name):\n    if not hasattr(self, name):\n       raise AttributeError, name\n    meth = getattr(self, name)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \n '''\n return self._names\n '''\n def __getattribute__(self, name):\n    \n    return _getattr(self, name)\n '''\n def __setattr__(self, name, value):\n    \n    return _setattr(self, name, value)\n '''\n def __delattr__(self, name):\n    \n    return _delattr(self, name)\n '''\n def __call__(self, *args, **kwds):\n    \n    return _call(self, args, kwds)\n '''\n def __str__(self):\n    '''Return the representation"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \n '''\n return self._names\n '''\n def __getattribute__(self, name):\n    \n    return _getattr(self, name)\n '''\n def __setattr__(self, name, value):\n    \n    return _setattr(self, name, value)\n '''\n def __delattr__(self, name):\n    \n    return _delattr(self, name)\n '''\n def __call__(self, *args, **kwds):\n    \n    return _call(self, args, kwds)\n '''\n def __str__(self):\n    '''Return the representation", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):      \n      if output is None:\n          output = sequence[0]\n      else:\n          sequence = tuple(sequence)\n          if isinstance(output, (list, tuple)):\n              if isinstance(output, (list, tuple)):\n                  output = tuple(output)\n              elif isinstance(output, dict):\n                  output = tuple(output.values())\n          else:\n              output = tuple(output)\n      return sequence, output\n\n\ndef _normalizearglst(sequence, output=None):\n      \n      if output is None:\n          output = sequence[0]\n      else:\n          sequence = tuple(sequence)\n          if isinstance(output, (list, tuple)):\n              if isinstance(output, (list, tuple)):\n                  output = tuple(output)"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):      \n      if output is None:\n          output = sequence[0]\n      else:\n          sequence = tuple(sequence)\n          if isinstance(output, (list, tuple)):\n              if isinstance(output, (list, tuple)):\n                  output = tuple(output)\n              elif isinstance(output, dict):\n                  output = tuple(output.values())\n          else:\n              output = tuple(output)\n      return sequence, output\n\n\ndef _normalizearglst(sequence, output=None):\n      \n      if output is None:\n          output = sequence[0]\n      else:\n          sequence = tuple(sequence)\n          if isinstance(output, (list, tuple)):\n              if isinstance(output, (list, tuple)):\n                  output = tuple(output)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():      \n          try:\n              import ctypes\n              return ctypes.c_int(0)\n          except (ImportError, AttributeError):\n              return 0\n\n      def _c_optimizations_available_and_set(self):\n          \n          try:\n              import ctypes\n              return ctypes.c_int(1)\n          except (ImportError, AttributeError):\n              return 1\n\n      def _c_optimizations_available_and_get(self):\n          \n          try:\n              import ctypes\n              return ctypes.c_int(2)\n          except (ImportError, AttributeError):\n              return 2\n\n      def _c_optimizations_available_and_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():      \n          try:\n              import ctypes\n              return ctypes.c_int(0)\n          except (ImportError, AttributeError):\n              return 0\n\n      def _c_optimizations_available_and_set(self):\n          \n          try:\n              import ctypes\n              return ctypes.c_int(1)\n          except (ImportError, AttributeError):\n              return 1\n\n      def _c_optimizations_available_and_get(self):\n          \n          try:\n              import ctypes\n              return ctypes.c_int(2)\n          except (ImportError, AttributeError):\n              return 2\n\n      def _c_optimizations_available_and_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():      \n     return _should_optimize() or _should_use_c_optimizations()\n\ndef _should_optimize():\n     \n     return False\n\ndef _should_use_c_optimizations():\n     \n     return False\n\ndef _is_optimized():\n     \n     return _should_optimize() or _should_use_c_optimizations()\n\ndef _make_optimizer(optimizer, **kwargs):\n     \n     return optimizer(**kwargs)\n\n@_make_optim"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():      \n     return _should_optimize() or _should_use_c_optimizations()\n\ndef _should_optimize():\n     \n     return False\n\ndef _should_use_c_optimizations():\n     \n     return False\n\ndef _is_optimized():\n     \n     return _should_optimize() or _should_use_c_optimizations()\n\ndef _make_optimizer(optimizer, **kwargs):\n     \n     return optimizer(**kwargs)\n\n@_make_optim", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():      \n      _c_optimizations_required = _c_optimizations_required.replace('_c_optimizations_required', '_c_optimizations_required_')\n      return _c_optimizations_required\n\n\ndef _c_optimizations_required():      \n      _c_optimizations_required = _c_optimizations_required.replace('_c_optimizations_required', '_c_optimizations_required_')\n      return _c_optimizations_required\n\n\ndef _c_optimizations_required_():      "], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():      \n      _c_optimizations_required = _c_optimizations_required.replace('_c_optimizations_required', '_c_optimizations_required_')\n      return _c_optimizations_required\n\n\ndef _c_optimizations_required():      \n      _c_optimizations_required = _c_optimizations_required.replace('_c_optimizations_required', '_c_optimizations_required_')\n      return _c_optimizations_required\n\n\ndef _c_optimizations_required_():      ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_str(self):      \n          return (', '.join(self.c_optimizations_required))\n\n      def _c_optimizations_required_bool(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_int(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_float(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_str(self):      \n          return (', '.join(self.c_optimizations_required))\n\n      def _c_optimizations_required_bool(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_int(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations_required_float(self):      \n          return (self.c_optimizations_required)\n\n      def _c_optimizations", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):          \n          self.x = np.arange(len(self.hist[0]))\n          self.y = np.arange(len(self.hist[0]))\n          self.hist_x, self.hist_y = np.histogram(self.x, bins=self.bins,\n                                                    range=self.bins_range)\n          self.hist_x = np.append(self.hist_x, np.zeros(len(self.hist[0])))\n          self.hist_y = np.append(self.hist_y, np.zeros(len(self.hist[0])))\n          self.hist_x[0] = self.hist[0][0]\n          self.hist_y[0] = self.hist[0][0]\n          self.bin_width ="], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):          \n          self.x = np.arange(len(self.hist[0]))\n          self.y = np.arange(len(self.hist[0]))\n          self.hist_x, self.hist_y = np.histogram(self.x, bins=self.bins,\n                                                    range=self.bins_range)\n          self.hist_x = np.append(self.hist_x, np.zeros(len(self.hist[0])))\n          self.hist_y = np.append(self.hist_y, np.zeros(len(self.hist[0])))\n          self.hist_x[0] = self.hist[0][0]\n          self.hist_y[0] = self.hist[0][0]\n          self.bin_width =", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):          \n          with open(self.file, \"w\", newline=\"\") as f:\n              csv_writer = csv.writer(f, delimiter=separator)\n              if header:\n                  csv_writer.writerow(header)\n              for i in self.data:\n                  csv_writer.writerow(i)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):          \n          with open(self.file, \"w\", newline=\"\") as f:\n              csv_writer = csv.writer(f, delimiter=separator)\n              if header:\n                  csv_writer.writerow(header)\n              for i in self.data:\n                  csv_writer.writerow(i)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self.coord_names[coord_name])\n              else:\n                  err_indices = np.arange(len(self.coord_names))\n          else:\n              err_indices = np.arange(len(self.coord_names))\n          return err_indices\n\n      def _get_coord_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self.coord_names[coord_name])\n              else:\n                  err_indices = np.arange(len(self.coord_names))\n          else:\n              err_indices = np.arange(len(self.coord_names))\n          return err_indices\n\n      def _get_coord_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):          \n          context['graph_type'] = self.__class__.__name__\n          context['model_name'] = self.__model_name\n          context['model_code'] = self.__model_code\n          return context\n\n      def _get_model_code(self):\n          return self.__model_code\n\n      def _set_model_code(self, value):\n          self.__model_code = value\n\n      def _get_model_name(self):\n          return self.__model_name\n\n      def _set_model_name(self, value):\n          self.__model_name = value\n\n      def _get_model(self):\n          return self.__model\n\n      def _set_model(self, value):\n          self.__model = value\n\n      def _get_model_type(self):\n         "], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):          \n          context['graph_type'] = self.__class__.__name__\n          context['model_name'] = self.__model_name\n          context['model_code'] = self.__model_code\n          return context\n\n      def _get_model_code(self):\n          return self.__model_code\n\n      def _set_model_code(self, value):\n          self.__model_code = value\n\n      def _get_model_name(self):\n          return self.__model_name\n\n      def _set_model_name(self, value):\n          self.__model_name = value\n\n      def _get_model(self):\n          return self.__model\n\n      def _set_model(self, value):\n          self.__model = value\n\n      def _get_model_type(self):\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):      \n      return bins[1] - bins[0] + edges[1] - edges[0]\n\n\ndef smooth(a, s=1):\n      \n      return scipy.ndimage.gaussian_filter(a, s, mode='wrap')\n\n\ndef smooth2d(a, s=1):\n      '''Perform smooth operation on data.\n      Equivalent to np.pad(a, pad_width, mode='wrap') but faster.'''\n      return scipy.ndimage.gaussian_filter(a, s, mode='wrap')\n\n\ndef gauss2d(sigma, size=None):\n      \n      if size is None:\n          size = (3, 3)\n      sigma = float(sigma)\n      c"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):      \n      return bins[1] - bins[0] + edges[1] - edges[0]\n\n\ndef smooth(a, s=1):\n      \n      return scipy.ndimage.gaussian_filter(a, s, mode='wrap')\n\n\ndef smooth2d(a, s=1):\n      '''Perform smooth operation on data.\n      Equivalent to np.pad(a, pad_width, mode='wrap') but faster.'''\n      return scipy.ndimage.gaussian_filter(a, s, mode='wrap')\n\n\ndef gauss2d(sigma, size=None):\n      \n      if size is None:\n          size = (3, 3)\n      sigma = float(sigma)\n      c", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):      \n      return isinstance(seq, FillRequestSeq)\n\ndef is_fill_request(seq):\n      \n      return isinstance(seq, FillRequest)\n\ndef is_fill_response_seq(seq):      \n      return isinstance(seq, FillResponseSeq)\n\ndef is_fill_response(seq):\n      \n      return isinstance(seq, FillResponse)\n\ndef is_get_order_request_seq(seq):      \n      return isinstance(seq, GetOrderRequestSeq)\n\ndef is_get"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):      \n      return isinstance(seq, FillRequestSeq)\n\ndef is_fill_request(seq):\n      \n      return isinstance(seq, FillRequest)\n\ndef is_fill_response_seq(seq):      \n      return isinstance(seq, FillResponseSeq)\n\ndef is_fill_response(seq):\n      \n      return isinstance(seq, FillResponse)\n\ndef is_get_order_request_seq(seq):      \n      return isinstance(seq, GetOrderRequestSeq)\n\ndef is_get", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):      \n      return obj.__class__.__name__ == \"FillRequest\" or obj.__class__.__name__ == \"Request\"\n\n\ndef is_fill_request_el_doc(obj):\n      \n      return obj.__class__.__name__ == \"FillRequest\" or obj.__class__.__name__ == \"Request\"\n\n\ndef is_get_request_el(obj):      \n      return obj.__class__.__name__ == \"GetRequest\"\n\n\ndef is_get_request_el_doc(obj):\n      \n      return obj.__class__.__name__ == \"GetRequest\"\n\n\ndef is"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):      \n      return obj.__class__.__name__ == \"FillRequest\" or obj.__class__.__name__ == \"Request\"\n\n\ndef is_fill_request_el_doc(obj):\n      \n      return obj.__class__.__name__ == \"FillRequest\" or obj.__class__.__name__ == \"Request\"\n\n\ndef is_get_request_el(obj):      \n      return obj.__class__.__name__ == \"GetRequest\"\n\n\ndef is_get_request_el_doc(obj):\n      \n      return obj.__class__.__name__ == \"GetRequest\"\n\n\ndef is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):      \n      return isinstance(obj, _run_el)\n\n\ndef is_run_el_path(obj):      \n      return isinstance(obj, _run_el_path)\n\n\ndef is_run_el_subpath(obj):      \n      return isinstance(obj, _run_el_subpath)\n\n\ndef is_run_el_module(obj):      \n      return isinstance(obj, _run_el_module)\n\n\ndef is_run_el_fun(obj):      \n      return isinstance(obj, _run_el_fun)\n\n\ndef is_run_el_method(obj):      '''Object contains"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):      \n      return isinstance(obj, _run_el)\n\n\ndef is_run_el_path(obj):      \n      return isinstance(obj, _run_el_path)\n\n\ndef is_run_el_subpath(obj):      \n      return isinstance(obj, _run_el_subpath)\n\n\ndef is_run_el_module(obj):      \n      return isinstance(obj, _run_el_module)\n\n\ndef is_run_el_fun(obj):      \n      return isinstance(obj, _run_el_fun)\n\n\ndef is_run_el_method(obj):      '''Object contains", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return True\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return True\n      return False\n\ndef is_fill_compute_el_obj(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return obj\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return obj\n      return None\n\ndef is_fill_compute_el_obj_repr(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return True\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return True\n      return False\n\ndef is_fill_compute_el_obj(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return obj\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return obj\n      return None\n\ndef is_fill_compute_el_obj_repr(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):      \n      new = {}\n      for k, v in d1.items():\n          if k not in d2:\n              new[k] = v\n          elif d2[k]!= v:\n              new[k] = v\n          if level!= -1:\n              new[k] = difference(d1[k], d2[k], level + 1)\n      return new\n\n\ndef merge(d1, d2, *, f=lambda x: x, g=lambda x: x, C=list):\n      '''Merge *d1* into *d2*, using *f*, *g*, and *C* as the factory functions.\n      Where as with regular dicts, *d2* must be a dict that is a subset of\n      *d1*.'''\n      f = f(d1)\n      g"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):      \n      new = {}\n      for k, v in d1.items():\n          if k not in d2:\n              new[k] = v\n          elif d2[k]!= v:\n              new[k] = v\n          if level!= -1:\n              new[k] = difference(d1[k], d2[k], level + 1)\n      return new\n\n\ndef merge(d1, d2, *, f=lambda x: x, g=lambda x: x, C=list):\n      '''Merge *d1* into *d2*, using *f*, *g*, and *C* as the factory functions.\n      Where as with regular dicts, *d2* must be a dict that is a subset of\n      *d1*.'''\n      f = f(d1)\n      g", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):          \n          if not self.__hist:\n              self.__hist = [0]\n          if coord not in self.__hist:\n              self.__hist[0] = weight\n          else:\n              self.__hist[coord] = weight\n\n      def add(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [weight]\n          else:\n              self.__hist.append(weight)\n\n\nclass Histogram(object):\n      '''A histogram is a container for a list of values.\n      It is built from an input list of values, and provides some\n      methods to retrieve and modify the values.\n\n      The *__hist* attribute provides an array of the values in the histogram.\n     "], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):          \n          if not self.__hist:\n              self.__hist = [0]\n          if coord not in self.__hist:\n              self.__hist[0] = weight\n          else:\n              self.__hist[coord] = weight\n\n      def add(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [weight]\n          else:\n              self.__hist.append(weight)\n\n\nclass Histogram(object):\n      '''A histogram is a container for a list of values.\n      It is built from an input list of values, and provides some\n      methods to retrieve and modify the values.\n\n      The *__hist* attribute provides an array of the values in the histogram.\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):      \n      for key in labels:\n          if isinstance(labels[key], list) or isinstance(labels[key], tuple):\n              for label in labels[key]:\n                  if isinstance(label, str) and re.match(r'^\\d+$', label):\n                      pass\n                  else:\n                      raise ValueError(f'{key} key must be of type {str} or {list}')\n          elif isinstance(labels[key], str):\n              if re.match(r'^\\d+$', labels[key]):\n                  pass\n              else:\n                  raise ValueError(f'{key} key must be of type {str}')\n          else:\n              raise ValueError(f'{key} key must be of type {str} or {list}')\n\ndef _list_to_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):      \n      for key in labels:\n          if isinstance(labels[key], list) or isinstance(labels[key], tuple):\n              for label in labels[key]:\n                  if isinstance(label, str) and re.match(r'^\\d+$', label):\n                      pass\n                  else:\n                      raise ValueError(f'{key} key must be of type {str} or {list}')\n          elif isinstance(labels[key], str):\n              if re.match(r'^\\d+$', labels[key]):\n                  pass\n              else:\n                  raise ValueError(f'{key} key must be of type {str}')\n          else:\n              raise ValueError(f'{key} key must be of type {str} or {list}')\n\ndef _list_to_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():      \n      if hasattr(self, '_resource_name_regex'):\n          return self._resource_name_regex\n      \n      resource_name_regex = re.compile(r'^[a-zA-Z0-9][a-zA-Z0-9_.]*$')\n      \n      if hasattr(self, '_resource_name_regex_validated'):\n          return self._resource_name_regex_validated\n      \n      if hasattr(self, '_resource_name_regex_validated_base'):\n          return self._resource_name_regex_validated_base\n      \n      self._resource_name_regex_validated = False\n      \n      self._resource_name_regex_validated_base = []\n      \n      for resource"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():      \n      if hasattr(self, '_resource_name_regex'):\n          return self._resource_name_regex\n      \n      resource_name_regex = re.compile(r'^[a-zA-Z0-9][a-zA-Z0-9_.]*$')\n      \n      if hasattr(self, '_resource_name_regex_validated'):\n          return self._resource_name_regex_validated\n      \n      if hasattr(self, '_resource_name_regex_validated_base'):\n          return self._resource_name_regex_validated_base\n      \n      self._resource_name_regex_validated = False\n      \n      self._resource_name_regex_validated_base = []\n      \n      for resource", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default_and_none(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default_and_"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default_and_none(value):      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex_and_default_and_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):      \n      if not re.search(regex, key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[A-Z][a-z]{1,32}$', key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[a-z][A-Z]{1,32}$', key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[a-z][A-Z]{1,"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):      \n      if not re.search(regex, key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[A-Z][a-z]{1,32}$', key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[a-z][A-Z]{1,32}$', key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):      \n      if not re.search(r'^[a-z][A-Z]{1,", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):      \n      observer_schema_dict = {}\n      observer_schema_list = []\n      if first_level:\n          observer_schema_dict = generate_default_observer_schema_dict(manifest_dict, True)\n          observer_schema_dict = {**observer_schema_dict, **manifest_dict}\n          observer_schema_list = [observer_schema_dict]\n      else:\n          observer_schema_list = [generate_default_observer_schema_dict(manifest_dict, False)]\n          observer_schema_list += [generate_default_observer_schema_dict"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):      \n      observer_schema_dict = {}\n      observer_schema_list = []\n      if first_level:\n          observer_schema_dict = generate_default_observer_schema_dict(manifest_dict, True)\n          observer_schema_dict = {**observer_schema_dict, **manifest_dict}\n          observer_schema_list = [observer_schema_dict]\n      else:\n          observer_schema_list = [generate_default_observer_schema_dict(manifest_dict, False)]\n          observer_schema_list += [generate_default_observer_schema_dict", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(      last_applied_manifest, observer_schema, response\n):      \n      last_applied_manifest_dict = {\n          \"last_applied_manifest\": last_applied_manifest,\n      }\n      if last_applied_manifest:\n          last_applied_manifest_dict.update(\n              update_last_applied_manifest_dict_from_resp(\n                  last_applied_manifest, observer_schema, response\n              )\n          )\n      return last_applied_manifest_dict\n\n\ndef update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      '''Together with :func:``update_last_applied_manifest_list_from_resp``, this function is called recursively to update a partial ``last_applied_"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(      last_applied_manifest, observer_schema, response\n):      \n      last_applied_manifest_dict = {\n          \"last_applied_manifest\": last_applied_manifest,\n      }\n      if last_applied_manifest:\n          last_applied_manifest_dict.update(\n              update_last_applied_manifest_dict_from_resp(\n                  last_applied_manifest, observer_schema, response\n              )\n          )\n      return last_applied_manifest_dict\n\n\ndef update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      '''Together with :func:``update_last_applied_manifest_list_from_resp``, this function is called recursively to update a partial ``last_applied_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(      last_applied_manifest, observer_schema, response\n):      \n      if observer_schema is None:\n          observer_schema = response.get('schema', {})\n      if 'last_applied_manifest' not in observer_schema:\n          last_applied_manifest['last_applied_manifest'] = {}\n      if response.get('data', {}).get('items', None):\n          last_applied_manifest['last_applied_manifest']['items'] = response['data']['items']\n      if response.get('data', {}).get('updated_at'):\n          last_applied_manifest['last_applied_manifest']['updated_at'] = response['data']['updated_at']\n      if response.get('data', {}).get('updated_at_str'):\n          last_applied"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(      last_applied_manifest, observer_schema, response\n):      \n      if observer_schema is None:\n          observer_schema = response.get('schema', {})\n      if 'last_applied_manifest' not in observer_schema:\n          last_applied_manifest['last_applied_manifest'] = {}\n      if response.get('data', {}).get('items', None):\n          last_applied_manifest['last_applied_manifest']['items'] = response['data']['items']\n      if response.get('data', {}).get('updated_at'):\n          last_applied_manifest['last_applied_manifest']['updated_at'] = response['data']['updated_at']\n      if response.get('data', {}).get('updated_at_str'):\n          last_applied", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):      \n      print(f'Generating default observer schema for {app}.')\n      for resource in app.resources:\n          for k in resource.get('spec', {}).get('manifest', {}).get('objects', {}):\n              if k in kubernetes_api.observer_schema:\n                  print(f'Setting default observer schema for {resource}.')\n                  kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource]\n              else:\n                  print(f'Generating default observer schema for {resource}.')\n                  kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource] = kubernet"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):      \n      print(f'Generating default observer schema for {app}.')\n      for resource in app.resources:\n          for k in resource.get('spec', {}).get('manifest', {}).get('objects', {}):\n              if k in kubernetes_api.observer_schema:\n                  print(f'Setting default observer schema for {resource}.')\n                  kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource]\n              else:\n                  print(f'Generating default observer schema for {resource}.')\n                  kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource] = kubernetes_api.observer_schema[resource] = kubernet", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format( \t\t self, \t\t sql: AnyStr, \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]: \t\t \n \t\t if self.database:\n \t\t\t sql = f\"{sql} LIMIT 1\"\n \t\t else:\n \t\t\t sql = f\"{sql} LIMIT {self.limit}\"\n \t\t return sql, params\n\t\n\tdef execute(self, \t\t sql: AnyStr, \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> int:\n \t\t \n \t\t if self.database:\n \t\t\t result = self.database.exec(sql, params)\n \t\t else:\n \t\t\t result = self.engine.execute(sql, params)\n \t\t return result.rowcount\n\t\n\tdef fetchall(self) -> Sequence[Any]:\n \t\t \n \t\t return self.engine.execute(f\"SELECT"], "level": "file_runnable", "generate_results": [{"generate_code": "def format( \t\t self, \t\t sql: AnyStr, \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]: \t\t \n \t\t if self.database:\n \t\t\t sql = f\"{sql} LIMIT 1\"\n \t\t else:\n \t\t\t sql = f\"{sql} LIMIT {self.limit}\"\n \t\t return sql, params\n\t\n\tdef execute(self, \t\t sql: AnyStr, \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> int:\n \t\t \n \t\t if self.database:\n \t\t\t result = self.database.exec(sql, params)\n \t\t else:\n \t\t\t result = self.engine.execute(sql, params)\n \t\t return result.rowcount\n\t\n\tdef fetchall(self) -> Sequence[Any]:\n \t\t \n \t\t return self.engine.execute(f\"SELECT", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany( \t\t self, \t\t sql: AnyStr, \t\t many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]: \t\t \n \t\t if many_params is None:\n \t\t\t many_params = {}\n \t\t if isinstance(many_params, dict):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [{'id': idx, 'value': param} for idx, param in enumerate(many_params)]\n \t\t else:\n \t\t\t many_params = [many_params]\n \t\t return self.sql(sql, many_params)\n\n\tdef format(self,\tsql: AnyStr, *args: Any, **kwargs: Any) -> Any:\n \t\t \n \t\t return self.formatmany(\tsql, *args, **kw"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany( \t\t self, \t\t sql: AnyStr, \t\t many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]: \t\t \n \t\t if many_params is None:\n \t\t\t many_params = {}\n \t\t if isinstance(many_params, dict):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [{'id': idx, 'value': param} for idx, param in enumerate(many_params)]\n \t\t else:\n \t\t\t many_params = [many_params]\n \t\t return self.sql(sql, many_params)\n\n\tdef format(self,\tsql: AnyStr, *args: Any, **kwargs: Any) -> Any:\n \t\t \n \t\t return self.formatmany(\tsql, *args, **kw", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):          \n          if path == self.root:\n              path = self.pyfs_root\n          else:\n              path = path.rstrip('/')\n          if not path:\n              raise ValueError(\"path must not be empty\")\n          if path[-1] == '/':\n              path = path[:-1]\n          if self.is_pyfs_root(path):\n              self.root = path\n              self.path = path\n          else:\n              self.path = path\n              self.root = self.root.rstrip('/') + '/'\n          self.path = self.root + path\n          if not self.path.endswith('/'):\n              self.path += '/'\n          if self.is_pyfs_root(self.path):\n              self.pyfs_root = self.path\n         "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):          \n          if path == self.root:\n              path = self.pyfs_root\n          else:\n              path = path.rstrip('/')\n          if not path:\n              raise ValueError(\"path must not be empty\")\n          if path[-1] == '/':\n              path = path[:-1]\n          if self.is_pyfs_root(path):\n              self.root = path\n              self.path = path\n          else:\n              self.path = path\n              self.root = self.root.rstrip('/') + '/'\n          self.path = self.root + path\n          if not self.path.endswith('/'):\n              self.path += '/'\n          if self.is_pyfs_root(self.path):\n              self.pyfs_root = self.path\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):          \n          if self.valid:\n              return prefix + 'valid'\n          return prefix + 'invalid'\n\n      def __repr__(self):\n          return '<{} {}>'.format(self.__class__.__name__, self.valid)\n\n      def __str__(self):\n          return self.status_str()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):          \n          if self.valid:\n              return prefix + 'valid'\n          return prefix + 'invalid'\n\n      def __repr__(self):\n          return '<{} {}>'.format(self.__class__.__name__, self.valid)\n\n      def __str__(self):\n          return self.status_str()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):          \n          return self.status_str('Status: %s' % self.status, prefix)\n\n      def get_all_fields(self):\n          \n          return dict(self.__dict__)\n\n      def get_all_valid_fields(self):\n          \n          return dict([(k,self.__dict__[k]) for k in self.get_all_fields() if self.__dict__[k] is not None])\n\n      def get_all_invalid_fields(self):\n          \n          return dict([(k,self.__dict__[k]) for k in self.get_all_fields() if self.__dict__[k]"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):          \n          return self.status_str('Status: %s' % self.status, prefix)\n\n      def get_all_fields(self):\n          \n          return dict(self.__dict__)\n\n      def get_all_valid_fields(self):\n          \n          return dict([(k,self.__dict__[k]) for k in self.get_all_fields() if self.__dict__[k] is not None])\n\n      def get_all_invalid_fields(self):\n          \n          return dict([(k,self.__dict__[k]) for k in self.get_all_fields() if self.__dict__[k]", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):    \n          return True\n\n      def get_identifier(self, identifier):    \n          return None\n\n      def get_id(self, identifier):    \n          return None\n\n      def get_identifier_by_id(self, identifier):\n          return None\n\n      def add_identifier(self, identifier):\n          pass\n\n      def remove_identifier(self, identifier):\n          pass\n\n      def get_identifier_by_name(self, name):\n          pass\n\n      def get_identifiers_by_name(self, name):\n          pass\n\n      def get_identifier_by_name_and_id(self, name, identifier):\n          pass\n\n      def get_identifiers_by_name_and_id(self,"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):    \n          return True\n\n      def get_identifier(self, identifier):    \n          return None\n\n      def get_id(self, identifier):    \n          return None\n\n      def get_identifier_by_id(self, identifier):\n          return None\n\n      def add_identifier(self, identifier):\n          pass\n\n      def remove_identifier(self, identifier):\n          pass\n\n      def get_identifier_by_name(self, name):\n          pass\n\n      def get_identifiers_by_name(self, name):\n          pass\n\n      def get_identifier_by_name_and_id(self, name, identifier):\n          pass\n\n      def get_identifiers_by_name_and_id(self,", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):          \n          valid_extracts = set(self.extracts)\n          for entry in inventory:\n              entry_type = entry.get('type')\n              if entry_type not in valid_extracts:\n                  inventory[entry_type].append(entry)\n          if extract_spec_version:\n              spec_version = self.spec['version']\n              for entry in inventory:\n                  if'version' in entry:\n                      if spec_version!= entry['version']:\n                          inventory[entry_type].append(entry)\n                          break\n                      else:\n                         "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):          \n          valid_extracts = set(self.extracts)\n          for entry in inventory:\n              entry_type = entry.get('type')\n              if entry_type not in valid_extracts:\n                  inventory[entry_type].append(entry)\n          if extract_spec_version:\n              spec_version = self.spec['version']\n              for entry in inventory:\n                  if'version' in entry:\n                      if spec_version!= entry['version']:\n                          inventory[entry_type].append(entry)\n                          break\n                      else:\n                         ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):          \n          for manifest_file in manifest_files:\n              self.check_digests_present_and_used_in_manifest_file(manifest_file, digests_used)\n              self.check_digests_used_in_manifest_file(manifest_file, digests_used)\n\n      def check_digests_present_and_used_in_manifest_file(self, manifest_file, digests_used):\n          \n          for digest in self.sha256_digests:\n              if digest in digests_used:\n                  continue\n              if manifest_file.checksum_used_in_manifest_file(digest):\n                  digests_used[digest] = True\n\n      def check_digests_used_"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):          \n          for manifest_file in manifest_files:\n              self.check_digests_present_and_used_in_manifest_file(manifest_file, digests_used)\n              self.check_digests_used_in_manifest_file(manifest_file, digests_used)\n\n      def check_digests_present_and_used_in_manifest_file(self, manifest_file, digests_used):\n          \n          for digest in self.sha256_digests:\n              if digest in digests_used:\n                  continue\n              if manifest_file.checksum_used_in_manifest_file(digest):\n                  digests_used[digest] = True\n\n      def check_digests_used_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):          \n          if prior.is_valid():\n              return prior\n          else:\n              raise F5ModuleError(\n                  \"The prior {0} is invalid: {1}\".format(prior, prior.to_dict())\n              )\n\n      def validate_as_server_version(self, server):\n          \n          if server.is_valid():\n              return server\n          else:\n              raise F5ModuleError(\n                  \"The server {0} is invalid: {1}\".format(server, server.to_dict())\n              )\n\n      def validate_as_fqdn(self, fqdn):\n          \n          if fqdn.is_valid():\n              return fqdn\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):          \n          if prior.is_valid():\n              return prior\n          else:\n              raise F5ModuleError(\n                  \"The prior {0} is invalid: {1}\".format(prior, prior.to_dict())\n              )\n\n      def validate_as_server_version(self, server):\n          \n          if server.is_valid():\n              return server\n          else:\n              raise F5ModuleError(\n                  \"The server {0} is invalid: {1}\".format(server, server.to_dict())\n              )\n\n      def validate_as_fqdn(self, fqdn):\n          \n          if fqdn.is_valid():\n              return fqdn\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):      \n      logical_path_map = {}\n      logical_path_map[version] = {}\n      for logical_path, logical_path_state in inventory.get_logical_paths(version).items():\n          logical_path_map[version][logical_path] = logical_path_state\n      return logical_path_map\n\n\ndef get_logical_path_map_from_inventory(inventory):\n      \n      logical_path_map = {}\n      for logical_path, logical_path_state in inventory.get_logical_paths().items():\n          logical_path_map[logical_path] = logical_path_state\n      return logical_path_map\n\n\ndef get_logical_"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):      \n      logical_path_map = {}\n      logical_path_map[version] = {}\n      for logical_path, logical_path_state in inventory.get_logical_paths(version).items():\n          logical_path_map[version][logical_path] = logical_path_state\n      return logical_path_map\n\n\ndef get_logical_path_map_from_inventory(inventory):\n      \n      logical_path_map = {}\n      for logical_path, logical_path_state in inventory.get_logical_paths().items():\n          logical_path_map[logical_path] = logical_path_state\n      return logical_path_map\n\n\ndef get_logical_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):          \n          if fixity in self.fixities:\n              fixity_name = fixity + \"fixity\"\n              self.fixities[fixity_name] = fixity\n              if fixity_name not in manifest_files:\n                  manifest_files[fixity_name] = []\n              manifest_files[fixity_name].append(self.inventory_path)\n              self.fixities[fixity_name].append(manifest_files[fixity_name])\n              self.fixities[fixity_name].append(self.inventory_path_c)\n              self.fixities[fixity_name].append(self.inventory_path_d)\n              self.fixities[fixity_name].append(self.inventory_path_c)\n              self.fixities[fixity_name].append(self."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):          \n          if fixity in self.fixities:\n              fixity_name = fixity + \"fixity\"\n              self.fixities[fixity_name] = fixity\n              if fixity_name not in manifest_files:\n                  manifest_files[fixity_name] = []\n              manifest_files[fixity_name].append(self.inventory_path)\n              self.fixities[fixity_name].append(manifest_files[fixity_name])\n              self.fixities[fixity_name].append(self.inventory_path_c)\n              self.fixities[fixity_name].append(self.inventory_path_d)\n              self.fixities[fixity_name].append(self.inventory_path_c)\n              self.fixities[fixity_name].append(self.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef get_files(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef make_dir(path):\n      \n      try:\n          os.mkdir(path)\n      except FileExistsError:\n          pass\n\ndef is_file(path, extension=None):\n      \n      if not extension:\n          extension = ['.zip', '.zip.gz', '.zip.xz', '.zip.rar'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef get_files(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef make_dir(path):\n      \n      try:\n          os.mkdir(path)\n      except FileExistsError:\n          pass\n\ndef is_file(path, extension=None):\n      \n      if not extension:\n          extension = ['.zip', '.zip.gz', '.zip.xz', '.zip.rar'", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):      \n          for xml_filename in xmls:\n              if xml_filename.startswith(source):\n                  break\n          else:\n              raise RuntimeError(\"'%s' not found in '%s'\" % (source, xmls))\n\n          xml_filename = os.path.join(xmls[xml_filename], xml_filename)\n          files[xml_filename] = files[source]\n\n          extension = os.path.splitext(xml_filename)[1].lower()\n          xml_filename = os.path.splitext"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):      \n          for xml_filename in xmls:\n              if xml_filename.startswith(source):\n                  break\n          else:\n              raise RuntimeError(\"'%s' not found in '%s'\" % (source, xmls))\n\n          xml_filename = os.path.join(xmls[xml_filename], xml_filename)\n          files[xml_filename] = files[source]\n\n          extension = os.path.splitext(xml_filename)[1].lower()\n          xml_filename = os.path.splitext", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):      \n      if prefix[-1] == '/':\n          prefix = prefix[:-1]\n      return file_path.startswith(prefix)\n\ndef get_file_list(path, suffix=None, prefix=None, is_dir=False):\n      \n      files = []\n      for dirpath, _dirnames, filenames in os.walk(path, topdown=False):\n          for filename in fnmatch.filter(filenames, suffix):\n              if is_dir:\n                  if prefix:\n                      filename = prefix + filename\n                  files.append(os.path.join(dirpath, filename))\n              else:\n                  files.append(os.path.join(dirpath, filename))\n      return files\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):      \n      if prefix[-1] == '/':\n          prefix = prefix[:-1]\n      return file_path.startswith(prefix)\n\ndef get_file_list(path, suffix=None, prefix=None, is_dir=False):\n      \n      files = []\n      for dirpath, _dirnames, filenames in os.walk(path, topdown=False):\n          for filename in fnmatch.filter(filenames, suffix):\n              if is_dir:\n                  if prefix:\n                      filename = prefix + filename\n                  files.append(os.path.join(dirpath, filename))\n              else:\n                  files.append(os.path.join(dirpath, filename))\n      return files\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):      \n      if len(files) == 0:\n          return []\n      \n      filenames = []\n      filenames.extend(files)\n      filenames = list(set(filenames))\n      \n      return filenames\n\ndef select_files_by_prefix(prefix, files):      \n      if len(files) == 0:\n          return []\n      \n      filenames = []\n      filenames = files.split(\".\")\n      filenames = [prefix + file_name for file_name in filenames]\n      filenames = list(set(filenames))\n      \n      return filenames\n\ndef get_files(folder, prefix='', extension=''):\n      \n      files = []"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):      \n      if len(files) == 0:\n          return []\n      \n      filenames = []\n      filenames.extend(files)\n      filenames = list(set(filenames))\n      \n      return filenames\n\ndef select_files_by_prefix(prefix, files):      \n      if len(files) == 0:\n          return []\n      \n      filenames = []\n      filenames = files.split(\".\")\n      filenames = [prefix + file_name for file_name in filenames]\n      filenames = list(set(filenames))\n      \n      return filenames\n\ndef get_files(folder, prefix='', extension=''):\n      \n      files = []", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):      \n      if not os.path.isdir(folder):\n          print('The folder does not exist.')\n          return\n      files = os.listdir(folder)\n      for file in files:\n          if file.endswith('.py'):\n              package = file.split('.')[0]\n              data = get_data(folder, package)\n              save_data(data, package)\n\n\ndef save_data(data, package):\n      \n      filename = package + '.txt'\n      with open(filename, 'w', encoding='utf-8') as file:\n          for data_item in data:\n             "], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):      \n      if not os.path.isdir(folder):\n          print('The folder does not exist.')\n          return\n      files = os.listdir(folder)\n      for file in files:\n          if file.endswith('.py'):\n              package = file.split('.')[0]\n              data = get_data(folder, package)\n              save_data(data, package)\n\n\ndef save_data(data, package):\n      \n      filename = package + '.txt'\n      with open(filename, 'w', encoding='utf-8') as file:\n          for data_item in data:\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):      \n          \n          \n          \n          \n          \n\n      return file_path\n\n\ndef download_asset"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):      \n          \n          \n          \n          \n          \n\n      return file_path\n\n\ndef download_asset", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):          \n          if lang not in self.list_of_languages:\n              raise Exception(\"Language not found\")\n          file_path = os.path.join(self.root_path, file_path)\n          if not os.path.exists(file_path):\n              raise Exception(\"File not found\")\n          return self.add_file(file_path)\n\nclass ArtificalExtractor(ArtificalFetcher):\n      def __init__(self, root_path, lang, extension=\".pdf\", max_ext=10):\n          super().__init__(root_path, extension, max_ext)\n          self.lang = lang\n          self.extension = extension\n\n      def add_file(self, file_path):\n          if self.extension not in ['pdf', 'png', 'jpeg', 'jpg'"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):          \n          if lang not in self.list_of_languages:\n              raise Exception(\"Language not found\")\n          file_path = os.path.join(self.root_path, file_path)\n          if not os.path.exists(file_path):\n              raise Exception(\"File not found\")\n          return self.add_file(file_path)\n\nclass ArtificalExtractor(ArtificalFetcher):\n      def __init__(self, root_path, lang, extension=\".pdf\", max_ext=10):\n          super().__init__(root_path, extension, max_ext)\n          self.lang = lang\n          self.extension = extension\n\n      def add_file(self, file_path):\n          if self.extension not in ['pdf', 'png', 'jpeg', 'jpg'", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):          \n          if basename not in self.asset_dict:\n              self.asset_dict[basename] = []\n          self.asset_dict[basename].append(file_path)\n          \n      def get_asset(self, basename):\n          if basename in self.asset_dict:\n              return self.asset_dict[basename]\n          else:\n              return None\n\n      def get_path(self, basename, file_path):\n          if basename in self.asset_dict:\n              return self.asset_dict[basename][file_path]\n          else:\n              return None\n\n      def get_path_list(self):\n          return list(self.asset_dict.keys())\n          \n      def get_all_files(self):\n          return self.ass"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):          \n          if basename not in self.asset_dict:\n              self.asset_dict[basename] = []\n          self.asset_dict[basename].append(file_path)\n          \n      def get_asset(self, basename):\n          if basename in self.asset_dict:\n              return self.asset_dict[basename]\n          else:\n              return None\n\n      def get_path(self, basename, file_path):\n          if basename in self.asset_dict:\n              return self.asset_dict[basename][file_path]\n          else:\n              return None\n\n      def get_path_list(self):\n          return list(self.asset_dict.keys())\n          \n      def get_all_files(self):\n          return self.ass", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):      \n      with ZipFile(zip_path) as z:\n          packages = z.infolist()\n          for entry in packages:\n              name = entry.filename\n              if name.endswith(\".py\"):\n                  if name.startswith(\"__init__\"):\n                      continue\n                  else:\n                      yield name.split(\"/\")[-1]"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):      \n      with ZipFile(zip_path) as z:\n          packages = z.infolist()\n          for entry in packages:\n              name = entry.filename\n              if name.endswith(\".py\"):\n                  if name.startswith(\"__init__\"):\n                      continue\n                  else:\n                      yield name.split(\"/\")[-1]", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):      \n      file_list = []\n      for path, subdirs, files in os.walk(zip_path):\n          for name in files:\n              if name.endswith(\".zip\"):\n                  file_list.append(os.path.join(path, name))\n      return file_list\n\n\ndef get_file_paths(files_list):\n      \n      file_paths = []\n      for file_path in files_list:\n          file_paths.append(file_path.replace(\"\\\\\", \"/\"))\n      return file_paths\n\n\ndef get_file_urls(files_list):\n      "], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):      \n      file_list = []\n      for path, subdirs, files in os.walk(zip_path):\n          for name in files:\n              if name.endswith(\".zip\"):\n                  file_list.append(os.path.join(path, name))\n      return file_list\n\n\ndef get_file_paths(files_list):\n      \n      file_paths = []\n      for file_path in files_list:\n          file_paths.append(file_path.replace(\"\\\\\", \"/\"))\n      return file_paths\n\n\ndef get_file_urls(files_list):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):      \n      if content.endswith(u'w:st=\"'):\n          return content.replace(u'w:st=\"', u'w-st=')\n      else:\n          return content\n\n\ndef fix_namespace_prefix_q(content):\n      if content.endswith(u'=\"'):\n          return content.replace(u'=\"', u'=\"')\n      else:\n          return content\n\n\ndef fix_namespace_prefix_b(content):"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):      \n      if content.endswith(u'w:st=\"'):\n          return content.replace(u'w:st=\"', u'w-st=')\n      else:\n          return content\n\n\ndef fix_namespace_prefix_q(content):\n      if content.endswith(u'=\"'):\n          return content.replace(u'=\"', u'=\"')\n      else:\n          return content\n\n\ndef fix_namespace_prefix_b(content):", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):      \n      pubdate_xpath = pubdate_xpaths[0]\n      if pubdate_xpath:\n          pubdate = node.xpath(pubdate_xpath)\n      else:\n          pubdate = node.xpath('//*[@id=\"date\"]/text()')\n      if pubdate:\n          pubdate = pubdate[0].strip()\n      else:\n          pubdate = ''\n      return pubdate\n\n\ndef get_price(node):\n      \"\"\"\n      Returns the price of the node, if it is a string it is converted to a float\n      :param node: a node object\n      :return: the price of the node\n      \"\"\"\n      price_xpath = '//span[@class=\"price\"]/text()'\n      return node.xpath(price_xpath)\n\n\ndef get_"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):      \n      pubdate_xpath = pubdate_xpaths[0]\n      if pubdate_xpath:\n          pubdate = node.xpath(pubdate_xpath)\n      else:\n          pubdate = node.xpath('//*[@id=\"date\"]/text()')\n      if pubdate:\n          pubdate = pubdate[0].strip()\n      else:\n          pubdate = ''\n      return pubdate\n\n\ndef get_price(node):\n      \"\"\"\n      Returns the price of the node, if it is a string it is converted to a float\n      :param node: a node object\n      :return: the price of the node\n      \"\"\"\n      price_xpath = '//span[@class=\"price\"]/text()'\n      return node.xpath(price_xpath)\n\n\ndef get_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):      \n      number = issue.find(class_='number')\n      supp = issue.find(class_='supp')\n      if not number or not supp:\n          return None, None\n      number = str(number.text).strip()\n      supp = str(supp.text).strip()\n      return number, supp\n\n\ndef _extract_issue_details(issue):\n      return {\n          'number': issue.find(class_='number').text.strip(),\n          'issuetype': issue.find(class_='issuetype').text.strip(),\n          'url': issue.find(class_='url').get('href'),\n          'issue': None,\n         'status': None,\n          'assignee': issue.find(class_='assignee').text.strip(),\n          'assignment_name':"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):      \n      number = issue.find(class_='number')\n      supp = issue.find(class_='supp')\n      if not number or not supp:\n          return None, None\n      number = str(number.text).strip()\n      supp = str(supp.text).strip()\n      return number, supp\n\n\ndef _extract_issue_details(issue):\n      return {\n          'number': issue.find(class_='number').text.strip(),\n          'issuetype': issue.find(class_='issuetype').text.strip(),\n          'url': issue.find(class_='url').get('href'),\n          'issue': None,\n         'status': None,\n          'assignee': issue.find(class_='assignee').text.strip(),\n          'assignment_name':", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):          \n          return self.__pretty(indent=indent, debug=debug)\n\n      def pretty_debug(self, indent=0, debug=False):          \n          return self.__pretty_debug(indent=indent, debug=debug)\n\nclass class_class(type):\n      def __new__(cls, name, bases, attrs):\n          new_cls = type.__new__(cls, name, bases, attrs)\n          return new_cls\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):          \n          return self.__pretty(indent=indent, debug=debug)\n\n      def pretty_debug(self, indent=0, debug=False):          \n          return self.__pretty_debug(indent=indent, debug=debug)\n\nclass class_class(type):\n      def __new__(cls, name, bases, attrs):\n          new_cls = type.__new__(cls, name, bases, attrs)\n          return new_cls\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):          \n          if len(args) == 1:\n              return [self.absorption(args[0])]\n          elif len(args) == 2:\n              return [self.absorption(args[0]), self.absorption(args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or 2.\")\n\n      def abs_neg(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(-args[0])]\n          elif len(args) == 2:\n              return [self.absorption(-args[0]), self.absorption(-args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):          \n          if len(args) == 1:\n              return [self.absorption(args[0])]\n          elif len(args) == 2:\n              return [self.absorption(args[0]), self.absorption(args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or 2.\")\n\n      def abs_neg(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(-args[0])]\n          elif len(args) == 2:\n              return [self.absorption(-args[0]), self.absorption(-args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):          \n          return self.add(hook)\n\n      def remove(self, hook):          \n          return self.remove(hook)\n\n      def __getitem__(self, key):\n          return self.__dict__[key]\n\n      def __setitem__(self, key, value):\n          self.__dict__[key] = value\n\n      def __delitem__(self, key):\n          del self.__dict__[key]\n\n      def __contains__(self, key):\n          return key in self.__dict__\n\n      def __iter__(self):\n          return iter(self.__dict__)\n\n      def __len__(self):\n          return len(self.__dict__)\n\n      def __repr__(self):\n          return '<"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):          \n          return self.add(hook)\n\n      def remove(self, hook):          \n          return self.remove(hook)\n\n      def __getitem__(self, key):\n          return self.__dict__[key]\n\n      def __setitem__(self, key, value):\n          self.__dict__[key] = value\n\n      def __delitem__(self, key):\n          del self.__dict__[key]\n\n      def __contains__(self, key):\n          return key in self.__dict__\n\n      def __iter__(self):\n          return iter(self.__dict__)\n\n      def __len__(self):\n          return len(self.__dict__)\n\n      def __repr__(self):\n          return '<", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):      \n      global base_config_file\n      global base_config_file_path\n      global base_config_filename\n      global base_config_filename_append\n      global base_config_filename_overwrite\n      global base_config_filename_append_overwrite\n      global base_config_filename_append_new\n      global base_config_filename_append_new_overwrite\n      global base_config_filename_append_new_new\n      global base_config_filename_append_new_new_overwrite\n      global base_config_filename_overwrite_new\n      global base_config_filename_overwrite_overwrite\n      global base_config_filename_overwrite_new_new\n      global base_config_filename_overwrite_overwrite_new\n      global base_config_filename_overwrite_new_new_over"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):      \n      global base_config_file\n      global base_config_file_path\n      global base_config_filename\n      global base_config_filename_append\n      global base_config_filename_overwrite\n      global base_config_filename_append_overwrite\n      global base_config_filename_append_new\n      global base_config_filename_append_new_overwrite\n      global base_config_filename_append_new_new\n      global base_config_filename_append_new_new_overwrite\n      global base_config_filename_overwrite_new\n      global base_config_filename_overwrite_overwrite\n      global base_config_filename_overwrite_new_new\n      global base_config_filename_overwrite_overwrite_new\n      global base_config_filename_overwrite_new_new_over", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):          \n          if not isinstance(dt, datetime):\n              raise TypeError('Must be a datetime object, got'+ type(dt).__name__)\n\n          if dt.tzinfo is not None:\n              raise ValueError('Cannot use naive timezones.')\n\n          dt = dt.replace(tzinfo=utc)\n\n          delta = dt - dt.utcoffset()\n          if delta.days < 0:\n              raise ValueError('Cannot make a naive datetime - timezone offset must be positive')\n          h = delta.seconds // 3600\n          m = delta.seconds // 60 % 60\n          s = delta.seconds % 60\n\n          if 0 <= h <= HOUR_PER_DAY and 0 <= m <= MIN_PER_HOUR and 0 <="], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):          \n          if not isinstance(dt, datetime):\n              raise TypeError('Must be a datetime object, got'+ type(dt).__name__)\n\n          if dt.tzinfo is not None:\n              raise ValueError('Cannot use naive timezones.')\n\n          dt = dt.replace(tzinfo=utc)\n\n          delta = dt - dt.utcoffset()\n          if delta.days < 0:\n              raise ValueError('Cannot make a naive datetime - timezone offset must be positive')\n          h = delta.seconds // 3600\n          m = delta.seconds // 60 % 60\n          s = delta.seconds % 60\n\n          if 0 <= h <= HOUR_PER_DAY and 0 <= m <= MIN_PER_HOUR and 0 <=", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):          \n          return self.__norm_attributes\n\n      def get_relative_index(self, name):         \n          \n          return self.__relative_index[name]\n\n      def get_relative_index_by_name(self, name):\n          \n          return self.__relative_index_by_name[name]\n\n      def get_relative_index_by_name_inverse(self, name):\n          \n          return self.__relative_index_by_name_inverse[name]\n\n      def get_relative_index_by_name_inverse_inverse(self, name):\n          \n          return self.__"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):          \n          return self.__norm_attributes\n\n      def get_relative_index(self, name):         \n          \n          return self.__relative_index[name]\n\n      def get_relative_index_by_name(self, name):\n          \n          return self.__relative_index_by_name[name]\n\n      def get_relative_index_by_name_inverse(self, name):\n          \n          return self.__relative_index_by_name_inverse[name]\n\n      def get_relative_index_by_name_inverse_inverse(self, name):\n          \n          return self.__", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n\n      def tzname(self, dt):\n          return dt.strftime(\"%z\")\n\n      def utcoffset(self, dt):\n          return dt.utcoffset()\n\n      def dst(self, dt):\n          return dt.dst()\n\n      def tzoffset(self, dt):\n          return dt.tzoffset()\n\nclass tzutc(tzoffset):\n      \n      def __init__(self, dstoffset=None):\n          self.dstoffset = dstoffset\n          super(tzutc, self).__init__(0)\n\n      def __repr__(self"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n\n      def tzname(self, dt):\n          return dt.strftime(\"%z\")\n\n      def utcoffset(self, dt):\n          return dt.utcoffset()\n\n      def dst(self, dt):\n          return dt.dst()\n\n      def tzoffset(self, dt):\n          return dt.tzoffset()\n\nclass tzutc(tzoffset):\n      \n      def __init__(self, dstoffset=None):\n          self.dstoffset = dstoffset\n          super(tzutc, self).__init__(0)\n\n      def __repr__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():      \n\n      cfg = get_config()\n      verbose = cfg.verbose\n\n      try:\n          return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                               verbose)\n      except NotThisMethod:\n          pass\n\n      try:\n          root = os.path.realpath(__file__)"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():      \n\n      cfg = get_config()\n      verbose = cfg.verbose\n\n      try:\n          return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                               verbose)\n      except NotThisMethod:\n          pass\n\n      try:\n          root = os.path.realpath(__file__)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):      \n      if pieces[\"error\"]: return {\"version\": \"unknown\",\n                                  \"error\": pieces[\"error\"],\n                                  \"pieces\": {}}\n\n      v = {}\n\n      for key in (\"epoch\", \"release\", \"dev\"):\n          if pieces.get(key): v[key] = pieces[key]\n      src = \"/\" + pieces[\"full-repository-url\"]\n      if style == \"pep440\":\n          rendered = render_pep440(pieces)\n      elif style == \"pep440-pre\":\n          rendered = render_pep440_pre(pieces)\n      elif style == \"pep440-post\":\n          rendered = render_pep440_post("], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):      \n      if pieces[\"error\"]: return {\"version\": \"unknown\",\n                                  \"error\": pieces[\"error\"],\n                                  \"pieces\": {}}\n\n      v = {}\n\n      for key in (\"epoch\", \"release\", \"dev\"):\n          if pieces.get(key): v[key] = pieces[key]\n      src = \"/\" + pieces[\"full-repository-url\"]\n      if style == \"pep440\":\n          rendered = render_pep440(pieces)\n      elif style == \"pep440-pre\":\n          rendered = render_pep440_pre(pieces)\n      elif style == \"pep440-post\":\n          rendered = render_pep440_post(", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):      \n          if '.' in pieces.in_name:\n              return '.'\n          return '+'\n      def extract_num(s):\n          try:\n              return int(s)\n          except ValueError:\n              pass\n\n      def check_valid_number(s):\n          if (s.lower().startswith('0') or s.lower().startswith('1')):\n              return True\n          if (s.lower() in ('q', 'w', 'e', 'r', 't', 'y', 'u')):\n              return True\n          return False\n\n      def check_valid_letter(s):\n          if not s.isalpha():\n              return False\n          if (s.lower() in ('q', 'w', 'e', 'r', 't', 'y', 'u')):\n              return True\n         "], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):      \n          if '.' in pieces.in_name:\n              return '.'\n          return '+'\n      def extract_num(s):\n          try:\n              return int(s)\n          except ValueError:\n              pass\n\n      def check_valid_number(s):\n          if (s.lower().startswith('0') or s.lower().startswith('1')):\n              return True\n          if (s.lower() in ('q', 'w', 'e', 'r', 't', 'y', 'u')):\n              return True\n          return False\n\n      def check_valid_letter(s):\n          if not s.isalpha():\n              return False\n          if (s.lower() in ('q', 'w', 'e', 'r', 't', 'y', 'u')):\n              return True\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):      \n          if isinstance(commands, basestring):\n              commands = commands.split(' ')\n          if isinstance(args, basestring):\n              args = args.split(' ')\n          if isinstance(cwd, basestring):\n              cwd = cwd.rstrip('/') + '/'\n          if verbose is None:\n              verbose = self.verbose\n          if verbose:\n              print('run_command: commands: %s, args: %s' %\n                    (commands, args))\n          if verbose and self.verbose:\n              sys.stdout.write('run_command: '.ljust(75))\n              for command in commands:\n                  sys.stdout.write('%s'% command)\n              sys.stdout."], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):      \n          if isinstance(commands, basestring):\n              commands = commands.split(' ')\n          if isinstance(args, basestring):\n              args = args.split(' ')\n          if isinstance(cwd, basestring):\n              cwd = cwd.rstrip('/') + '/'\n          if verbose is None:\n              verbose = self.verbose\n          if verbose:\n              print('run_command: commands: %s, args: %s' %\n                    (commands, args))\n          if verbose and self.verbose:\n              sys.stdout.write('run_command: '.ljust(75))\n              for command in commands:\n                  sys.stdout.write('%s'% command)\n              sys.stdout.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():      \n      return VersioneerConfig()\n\n\ndef get_command_line():\n      \n      cmd_line = None\n      if os.environ.get('VIRTUALENV_INTERPRETER') == '/app':\n          cmd_line = sys.argv[0]\n          sys.argv[0] = os.environ['VIRTUALENV_INTERPRETER']\n      return cmd_line\n\ndef run_command(cmd, **kwargs):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():      \n      return VersioneerConfig()\n\n\ndef get_command_line():\n      \n      cmd_line = None\n      if os.environ.get('VIRTUALENV_INTERPRETER') == '/app':\n          cmd_line = sys.argv[0]\n          sys.argv[0] = os.environ['VIRTUALENV_INTERPRETER']\n      return cmd_line\n\ndef run_command(cmd, **kwargs):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):    \n      def decorator(func):\n          if vcs not in ('git', 'hg'):\n              raise ValueError('Unknown vcs: %s' % vcs)\n          if hasattr(func, 'GitCommand'):\n              func.GitCommand.register_handler(vcs, method)\n          else:\n              func.__GitCommand__.register_handler(vcs, method)\n          return func\n      return decorator\n\n\ndef get_all_submodules(path, ref=\"HEAD\"):\n      \"\"\"Get a list of all submodules under a given path.\n\n      :param path: directory to get submodules from\n      :param ref: ref to get submodules from\n      :return: list of all submodules\n      \"\"\"\n      if not os.path.isdir(path):\n          raise ValueError('Not a"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):    \n      def decorator(func):\n          if vcs not in ('git', 'hg'):\n              raise ValueError('Unknown vcs: %s' % vcs)\n          if hasattr(func, 'GitCommand'):\n              func.GitCommand.register_handler(vcs, method)\n          else:\n              func.__GitCommand__.register_handler(vcs, method)\n          return func\n      return decorator\n\n\ndef get_all_submodules(path, ref=\"HEAD\"):\n      \"\"\"Get a list of all submodules under a given path.\n\n      :param path: directory to get submodules from\n      :param ref: ref to get submodules from\n      :return: list of all submodules\n      \"\"\"\n      if not os.path.isdir(path):\n          raise ValueError('Not a", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):          \n          if not self.root:\n              raise ValueError(\"storage root is not set\")\n\n          if not self.root.is_directory():\n              raise ValueError(\"storage root is not a directory\")\n\n          if not self.root.is_file():\n              raise ValueError(\"storage root is not a file\")\n\n          if not self.root.is_symlink():\n              raise ValueError(\"storage root is not a symlink\")\n\n          if check_digests and not check_digests(self.root):\n              raise ValueError(\"storage root is not a valid storage root\")\n\n          return self.root\n\n      def validate_files(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.files:\n              raise ValueError(\"files is"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):          \n          if not self.root:\n              raise ValueError(\"storage root is not set\")\n\n          if not self.root.is_directory():\n              raise ValueError(\"storage root is not a directory\")\n\n          if not self.root.is_file():\n              raise ValueError(\"storage root is not a file\")\n\n          if not self.root.is_symlink():\n              raise ValueError(\"storage root is not a symlink\")\n\n          if check_digests and not check_digests(self.root):\n              raise ValueError(\"storage root is not a valid storage root\")\n\n          return self.root\n\n      def validate_files(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.files:\n              raise ValueError(\"files is", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):          \n          pass\n\n      def get_root(self):\n          \n          pass\n\n      def get_storage_path(self, path):\n          '''Return the path of the storage root.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The path of the storage root.\n          :rtype: str\n          '''\n          pass\n\n      def get_storage(self, path):\n          '''Return the OCFL storage object.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The OCFL storage object.\n          :rtype: OCFLStorage\n          '''\n          pass\n\n      def get_storage_list(self):\n          '''Return the list of OCFL storage"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):          \n          pass\n\n      def get_root(self):\n          \n          pass\n\n      def get_storage_path(self, path):\n          '''Return the path of the storage root.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The path of the storage root.\n          :rtype: str\n          '''\n          pass\n\n      def get_storage(self, path):\n          '''Return the OCFL storage object.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The OCFL storage object.\n          :rtype: OCFLStorage\n          '''\n          pass\n\n      def get_storage_list(self):\n          '''Return the list of OCFL storage", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):      \n      return version + '_' + next(version_gen)\n\n\ndef next_version_exact(version):\n      \n      return version + '_' + next(version_gen)\n\n\ndef next_version_pattern(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact_ex(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact_ex_ex(pattern):\n      '''Exact version identifier following"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):      \n      return version + '_' + next(version_gen)\n\n\ndef next_version_exact(version):\n      \n      return version + '_' + next(version_gen)\n\n\ndef next_version_pattern(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact_ex(pattern):\n      \n      return next(version_gen)\n\n\ndef next_version_pattern_exact_ex_ex(pattern):\n      '''Exact version identifier following", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):          \n          for v_dir in version_dirs:\n              if not os.path.isdir(v_dir):\n                  raise IOError('The directory \\'%s\\' does not exist' % v_dir)\n              for v_file in os.listdir(v_dir):\n                  if not os.path.isfile(os.path.join(v_dir, v_file)):\n                      raise IOError('The file \\'%s\\' does not exist' % v_file)\n                  with open(os.path.join(v_dir, v_file), 'r') as f:\n                      for line in f.readlines():\n                          if not line.strip():\n                              continue\n                          (key, value) = line.split(':', 1)\n                          if key =='version':\n                              version = value\n          return version\n\n      def"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):          \n          for v_dir in version_dirs:\n              if not os.path.isdir(v_dir):\n                  raise IOError('The directory \\'%s\\' does not exist' % v_dir)\n              for v_file in os.listdir(v_dir):\n                  if not os.path.isfile(os.path.join(v_dir, v_file)):\n                      raise IOError('The file \\'%s\\' does not exist' % v_file)\n                  with open(os.path.join(v_dir, v_file), 'r') as f:\n                      for line in f.readlines():\n                          if not line.strip():\n                              continue\n                          (key, value) = line.split(':', 1)\n                          if key =='version':\n                              version = value\n          return version\n\n      def", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):      \n      if path[0] == '.': return '.'\n      elif path[0] == '..': return '..'\n      else: return path[0]\n\n\ndef find_path_type_index(path):\n      \n      i = 0\n      while i < len(path):\n          if path[i] == '.':\n              i += 1\n          else:\n              return i, i\n          i += 1\n      return None\n\n\ndef find_path(from_dir, to_dir):\n      \n      if to_dir is None or from_dir is None:\n          return []\n      from_dir = os.path.normpath(from_dir)\n      to_dir = os.path.norm"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):      \n      if path[0] == '.': return '.'\n      elif path[0] == '..': return '..'\n      else: return path[0]\n\n\ndef find_path_type_index(path):\n      \n      i = 0\n      while i < len(path):\n          if path[i] == '.':\n              i += 1\n          else:\n              return i, i\n          i += 1\n      return None\n\n\ndef find_path(from_dir, to_dir):\n      \n      if to_dir is None or from_dir is None:\n          return []\n      from_dir = os.path.normpath(from_dir)\n      to_dir = os.path.norm", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):          \n          for bug_id in bug_ids:\n              if bug_id in self.params['bz'].keys():\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n              else:\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n\n      def amend_bugs(self, bugs):\n          \n          for bug in bugs:\n              if self.params['bz'][bug['bug_number']]:\n                  self.params['bz'][bug['bug"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):          \n          for bug_id in bug_ids:\n              if bug_id in self.params['bz'].keys():\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n              else:\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n                  self.params['bz'][bug_id] = params['bz'][bug_id]\n\n      def amend_bugs(self, bugs):\n          \n          for bug in bugs:\n              if self.params['bz'][bug['bug_number']]:\n                  self.params['bz'][bug['bug", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):      \n      '''\n      [\n          (\"a\",(\"1\",\"2\",\"3\")),\n          (\"b\",(\"4\",\"5\",\"6\")),\n          (\"c\",(\"7\",\"8\",\"9\")),\n      ]\n      '''"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):      \n      '''\n      [\n          (\"a\",(\"1\",\"2\",\"3\")),\n          (\"b\",(\"4\",\"5\",\"6\")),\n          (\"c\",(\"7\",\"8\",\"9\")),\n      ]\n      '''", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):      \n          parser = argparse.ArgumentParser()\n\n          parser.add_argument(\n              '-i',\n              '--input',\n              dest='input',\n              required=True,\n              help='Input file.')\n\n          parser.add_argument(\n              '-d',\n              '--destination',\n              dest='destination',\n              required=True,\n              help='Destination folder.')\n\n          parser.add_argument(\n              '-o',\n              '--output',\n              dest='output',\n              required=False,\n              help='Output file.')\n\n          return parser.parse_args(arguments)\n\n      @staticmethod\n      def print_results(log_file, results):\n          \n          log_file.write('\\n----------------------------------------\\n')\n          for result in"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):      \n          parser = argparse.ArgumentParser()\n\n          parser.add_argument(\n              '-i',\n              '--input',\n              dest='input',\n              required=True,\n              help='Input file.')\n\n          parser.add_argument(\n              '-d',\n              '--destination',\n              dest='destination',\n              required=True,\n              help='Destination folder.')\n\n          parser.add_argument(\n              '-o',\n              '--output',\n              dest='output',\n              required=False,\n              help='Output file.')\n\n          return parser.parse_args(arguments)\n\n      @staticmethod\n      def print_results(log_file, results):\n          \n          log_file.write('\\n----------------------------------------\\n')\n          for result in", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):      \n      flags = []\n      for f in parser._actions:\n          flags.append(f.dest)\n      return''.join(flags)\n\ndef get_arguments(argv):\n      \n      arguments = {}\n      args = [arg for arg in argv if arg.startswith('--')]\n      for arg in args:\n          arg_name = arg.split('=')[0]\n          arg_value = arg.split('=')[1]\n          arguments[arg_name] = arg_value\n      return arguments\n\ndef get_arguments_with_default(argv, default):\n      \n      args = [arg for arg in arg"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):      \n      flags = []\n      for f in parser._actions:\n          flags.append(f.dest)\n      return''.join(flags)\n\ndef get_arguments(argv):\n      \n      arguments = {}\n      args = [arg for arg in argv if arg.startswith('--')]\n      for arg in args:\n          arg_name = arg.split('=')[0]\n          arg_value = arg.split('=')[1]\n          arguments[arg_name] = arg_value\n      return arguments\n\ndef get_arguments_with_default(argv, default):\n      \n      args = [arg for arg in arg", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):      \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):      \n      for name, arg_parser in subparsers.items():\n          if unparsed_arguments is not None:\n              raise Exception('Unparsed arguments: %s' % unparsed_arguments)\n          parsed_arguments = arg_parser.parse_args(unparsed_arguments)      \n      return parsed_arguments\n\ndef get_subparser_arguments(subparsers, subparsers_dict):      \n      \n      for name, subparser in subparsers_dict.items():\n          if subparsers is None:\n              raise Exception('No subparser named %s' % name)\n          parsed_arg"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):      \n      for name, arg_parser in subparsers.items():\n          if unparsed_arguments is not None:\n              raise Exception('Unparsed arguments: %s' % unparsed_arguments)\n          parsed_arguments = arg_parser.parse_args(unparsed_arguments)      \n      return parsed_arguments\n\ndef get_subparser_arguments(subparsers, subparsers_dict):      \n      \n      for name, subparser in subparsers_dict.items():\n          if subparsers is None:\n              raise Exception('No subparser named %s' % name)\n          parsed_arg", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():      \n      parser = argparse.ArgumentParser(description='Makes a simple command line interface.',\n                                         epilog='Example: \"python -m cmd.cli\"')\n      subparsers = parser.add_subparsers(dest='command', help='Subcommand help')\n      subparsers.required = True\n      subparsers.dest = 'command'\n      subparsers.metavar = '<command>'\n      return subparsers\n\n\ndef main(args=None):\n      \"\"\"\n      Main entry point of the command-line interface.\n\n      Args:\n          args (optional): command-line arguments.\n      \"\"\"\n      parser = make_parsers()\n      subparser = parser.add_parser(args[0],\n                                      parents=[make_parser()],\n                                     "], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():      \n      parser = argparse.ArgumentParser(description='Makes a simple command line interface.',\n                                         epilog='Example: \"python -m cmd.cli\"')\n      subparsers = parser.add_subparsers(dest='command', help='Subcommand help')\n      subparsers.required = True\n      subparsers.dest = 'command'\n      subparsers.metavar = '<command>'\n      return subparsers\n\n\ndef main(args=None):\n      \"\"\"\n      Main entry point of the command-line interface.\n\n      Args:\n          args (optional): command-line arguments.\n      \"\"\"\n      parser = make_parsers()\n      subparser = parser.add_parser(args[0],\n                                      parents=[make_parser()],\n                                     ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):      "], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):      ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):      \n      parser = ArgumentParser()\n      parser.add_argument('-s', '--seed', help='Random seed for reproducibility.')\n      parser.add_argument('-m', '--mode', choices=['train', 'test'], help='Mode to run. Choose from \"train\" and \"test\"')\n      parser.add_argument('-t', '--type', choices=['binary','multiclass'], help='Type of the model to use. Choose from \"binary\" and \"multiclass\"')\n      parser.add_argument('-c', '--config', type=str, help='Path to the config file.')\n      parser.add_argument('-l', '--load', type=str, help='Path to the model to load.')\n      parser.add_argument('-t', '--train_iterations"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):      \n      parser = ArgumentParser()\n      parser.add_argument('-s', '--seed', help='Random seed for reproducibility.')\n      parser.add_argument('-m', '--mode', choices=['train', 'test'], help='Mode to run. Choose from \"train\" and \"test\"')\n      parser.add_argument('-t', '--type', choices=['binary','multiclass'], help='Type of the model to use. Choose from \"binary\" and \"multiclass\"')\n      parser.add_argument('-c', '--config', type=str, help='Path to the config file.')\n      parser.add_argument('-l', '--load', type=str, help='Path to the model to load.')\n      parser.add_argument('-t', '--train_iterations", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):      \n      return parser.flags.as_command_flags()\n\ndef get_parser(args=None):\n      '''Return an argparse.ArgumentParser for the given arguments.\n      If args is not given, the arguments are parsed from sys.argv.'''\n      parser = argparse.ArgumentParser(description=__doc__,\n                                         epilog=\"\\n\".join([_default_description,\n                                                             \"\\n\".join([_command_description,\n                                                                     _default_description])]))\n      parser.add_argument(dest='command', metavar='command', nargs=argparse.REMAINDER,\n                          help=\"command to run; can be used as a whole or as a command group\")\n      parser.add_argument('-h', '--help', action='help"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):      \n      return parser.flags.as_command_flags()\n\ndef get_parser(args=None):\n      '''Return an argparse.ArgumentParser for the given arguments.\n      If args is not given, the arguments are parsed from sys.argv.'''\n      parser = argparse.ArgumentParser(description=__doc__,\n                                         epilog=\"\\n\".join([_default_description,\n                                                             \"\\n\".join([_command_description,\n                                                                     _default_description])]))\n      parser.add_argument(dest='command', metavar='command', nargs=argparse.REMAINDER,\n                          help=\"command to run; can be used as a whole or as a command group\")\n      parser.add_argument('-h', '--help', action='help", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():      \n      bash_completion = \"\"\"\\"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():      \n      bash_completion = \"\"\"\\", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):      \n      global parser\n      arguments = {}\n      for arg in unparsed_arguments:\n          if arg[0] == '-':\n              subparser_name = arg[1:]\n              arguments[subparser_name] = parser.parse_args([arg])\n          else:\n              arguments[arg] = parser.parse_args([arg])\n      return arguments\n\n\ndef main():\n      args = parse_arguments()\n      logging.basicConfig(level=logging.INFO)\n      logger = logging.getLogger(__name__)\n\n      if args.command == 'help':\n          logger.info('Usage: {} [-h] [-c] [-m] [-t] [--version]'.format(sys.argv[0]))\n      elif args.command =='version':\n          logger"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):      \n      global parser\n      arguments = {}\n      for arg in unparsed_arguments:\n          if arg[0] == '-':\n              subparser_name = arg[1:]\n              arguments[subparser_name] = parser.parse_args([arg])\n          else:\n              arguments[arg] = parser.parse_args([arg])\n      return arguments\n\n\ndef main():\n      args = parse_arguments()\n      logging.basicConfig(level=logging.INFO)\n      logger = logging.getLogger(__name__)\n\n      if args.command == 'help':\n          logger.info('Usage: {} [-h] [-c] [-m] [-t] [--version]'.format(sys.argv[0]))\n      elif args.command =='version':\n          logger", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):      \n      for i in range(len(unparsed_arguments)):\n          if unparsed_arguments[i] == '--help':\n              unparsed_arguments[i] = subparsers.add_parser('help', description='Show help', help='Show this help.')\n              unparsed_arguments[i].set_defaults(help='Show this help')\n          elif unparsed_arguments[i] == '--version':\n              unparsed_arguments[i] = subparsers.add_parser('version', description='Show version', help='Show this help.')\n              unparsed_arguments[i].set_defaults(version='No version')\n          elif unparsed_arguments[i] == '--version':\n              unparsed_"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):      \n      for i in range(len(unparsed_arguments)):\n          if unparsed_arguments[i] == '--help':\n              unparsed_arguments[i] = subparsers.add_parser('help', description='Show help', help='Show this help.')\n              unparsed_arguments[i].set_defaults(help='Show this help')\n          elif unparsed_arguments[i] == '--version':\n              unparsed_arguments[i] = subparsers.add_parser('version', description='Show version', help='Show this help.')\n              unparsed_arguments[i].set_defaults(version='No version')\n          elif unparsed_arguments[i] == '--version':\n              unparsed_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():      \n      parser = ArgumentParser(description='Script to convert a.vtp file into a.obj file.')\n\n      parser.add_argument('--input', type=str, default='input.vtp', metavar='FILE',\n          help='input vtp file, default=%(default)s')\n      parser.add_argument('--output', type=str, metavar='FILE', default='output.obj',\n          help='output vtp file, default=%(default)s')\n      parser.add_argument('--debug', action='store_true', default=False,\n          help='print debug statements to stdout')\n      parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():      \n      parser = ArgumentParser(description='Script to convert a.vtp file into a.obj file.')\n\n      parser.add_argument('--input', type=str, default='input.vtp', metavar='FILE',\n          help='input vtp file, default=%(default)s')\n      parser.add_argument('--output', type=str, metavar='FILE', default='output.obj',\n          help='output vtp file, default=%(default)s')\n      parser.add_argument('--debug', action='store_true', default=False,\n          help='print debug statements to stdout')\n      parser.add_argument('--version', action='version', version='%(prog)s 1.0.0')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):      \n      result = []\n      if response.status == 200:\n          for item in response.json()['Items']:\n              result.append(item)\n          return result\n      else:\n          raise Exception('Status Code: {}'.format(response.status))\n\ndef search(request):\n      \n      if request.method == 'GET':\n          name = request.GET.get('name', '')\n          if name.strip()!= '':\n              name = name.strip()\n              return search_items(name)\n          else:\n              return search_items(name)\n      else:\n          return 'Not a GET Method'\n\ndef search_items(name):\n      \n      try:\n          items = search_items"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):      \n      result = []\n      if response.status == 200:\n          for item in response.json()['Items']:\n              result.append(item)\n          return result\n      else:\n          raise Exception('Status Code: {}'.format(response.status))\n\ndef search(request):\n      \n      if request.method == 'GET':\n          name = request.GET.get('name', '')\n          if name.strip()!= '':\n              name = name.strip()\n              return search_items(name)\n          else:\n              return search_items(name)\n      else:\n          return 'Not a GET Method'\n\ndef search_items(name):\n      \n      try:\n          items = search_items", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:      \n      if size.startswith('x'):\n          return int(size[1:])\n      else:\n          return int(size)\n\n\ndef get_file_path(path: str) -> str:\n      \n      return path.replace(os.path.sep, '/').lstrip('/')\n\n\ndef get_file_extension(path: str) -> str:\n      \n      if path.endswith('/'):\n          return '.' + path[:-1]\n      else:\n          return path[-3:]\n\n\ndef get_file_size(path: str) -> int:\n      \n      return get_file_extension(path).lower() + os.path.splitext("], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:      \n      if size.startswith('x'):\n          return int(size[1:])\n      else:\n          return int(size)\n\n\ndef get_file_path(path: str) -> str:\n      \n      return path.replace(os.path.sep, '/').lstrip('/')\n\n\ndef get_file_extension(path: str) -> str:\n      \n      if path.endswith('/'):\n          return '.' + path[:-1]\n      else:\n          return path[-3:]\n\n\ndef get_file_size(path: str) -> int:\n      \n      return get_file_extension(path).lower() + os.path.splitext(", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):      \n      return sum(dicts, {})\r\n\r\n\r\n@functools.lru_cache(maxsize=None)\r\ndef _lru_cache(fun):\r\n      \r\n      @functools.wraps(fun)\r\n      def wrapper(*args, **kwargs):\r\n          result = fun(*args, **kwargs)\r\n          lru_cache.set(fun.__name__, result)\r\n          return result\r\n      return wrapper\r\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):      \n      return sum(dicts, {})\r\n\r\n\r\n@functools.lru_cache(maxsize=None)\r\ndef _lru_cache(fun):\r\n      \r\n      @functools.wraps(fun)\r\n      def wrapper(*args, **kwargs):\r\n          result = fun(*args, **kwargs)\r\n          lru_cache.set(fun.__name__, result)\r\n          return result\r\n      return wrapper\r\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):      \n      url = url.replace('{url}', url_args)\n      return url\n\ndef _get_args(url):\n      \n      args = {}\n      parts = url.split('?')\n      for part in parts[1].split('&'):\n          k, v = part.split('=')\n          k = k[1:]\n          if k:\n              args[k] = v\n      return args\n\ndef _get_args_from_url(url):\n      \n      parts = url.split('?')"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):      \n      url = url.replace('{url}', url_args)\n      return url\n\ndef _get_args(url):\n      \n      args = {}\n      parts = url.split('?')\n      for part in parts[1].split('&'):\n          k, v = part.split('=')\n          k = k[1:]\n          if k:\n              args[k] = v\n      return args\n\ndef _get_args_from_url(url):\n      \n      parts = url.split('?')", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:      \n      return type(val) is str and val == 'None'\n\n\ndef is_none_number(val: Any) -> bool:\n      \n      return type(val) is float and val == 'None'\n\n\ndef convert_to_int(val: Any) -> int:\n      \n      if is_none_string(val):\n          return 0\n      return int(val) if val.isnumeric() else 0\n\n\ndef convert_to_float(val: Any) -> float:\n      \n      if is_none_string(val):\n          return 0.0\n      return float(val) if val.isnumeric() else 0.0\n\n\ndef convert_to_bool(val"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:      \n      return type(val) is str and val == 'None'\n\n\ndef is_none_number(val: Any) -> bool:\n      \n      return type(val) is float and val == 'None'\n\n\ndef convert_to_int(val: Any) -> int:\n      \n      if is_none_string(val):\n          return 0\n      return int(val) if val.isnumeric() else 0\n\n\ndef convert_to_float(val: Any) -> float:\n      \n      if is_none_string(val):\n          return 0.0\n      return float(val) if val.isnumeric() else 0.0\n\n\ndef convert_to_bool(val", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):      \n      flags = []\n      for flag in parser.flags:\n          flags.append('--' + '_'.join(flag.option_strings))\n      return''.join(flags)\n\ndef check_flags(parser, flags, verbose=True):\n      \n      bad_flags = []\n      for flag in flags:\n          try:\n              parser.add_argument(flag, action='store_true', help='--' + flag)\n          except:\n              bad_flags.append(flag)\n      if verbose:\n          print('Bad flags:')\n          for bad_flag in bad_flags:\n              print('    %s' % bad_flag)\n      return bad_flags\n\ndef check_required_flags(parser, flags, verbose=True):\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):      \n      flags = []\n      for flag in parser.flags:\n          flags.append('--' + '_'.join(flag.option_strings))\n      return''.join(flags)\n\ndef check_flags(parser, flags, verbose=True):\n      \n      bad_flags = []\n      for flag in flags:\n          try:\n              parser.add_argument(flag, action='store_true', help='--' + flag)\n          except:\n              bad_flags.append(flag)\n      if verbose:\n          print('Bad flags:')\n          for bad_flag in bad_flags:\n              print('    %s' % bad_flag)\n      return bad_flags\n\ndef check_required_flags(parser, flags, verbose=True):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):      \n      if path_name in processed:\n          return True\n      else:\n          return False\n\ndef get_file_name(path_name):\n      \n      if os.path.isfile(path_name):\n          return path_name\n      else:\n          return os.path.split(path_name)[-1]\n\ndef get_file_ext(path_name):\n      \n      return os.path.splitext(path_name)[1]\n\ndef get_file_ext_and_path(path_name):\n      \n      return os.path.splitext(path_name)[1"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):      \n      if path_name in processed:\n          return True\n      else:\n          return False\n\ndef get_file_name(path_name):\n      \n      if os.path.isfile(path_name):\n          return path_name\n      else:\n          return os.path.split(path_name)[-1]\n\ndef get_file_ext(path_name):\n      \n      return os.path.splitext(path_name)[1]\n\ndef get_file_ext_and_path(path_name):\n      \n      return os.path.splitext(path_name)[1", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):      \n      return tuple(vertices)\n\n\ndef vertextuple(vertices):\n      \n      return tuple(vertices[0])\n\ndef face(vertices, faces):\n      \n      return faces[vertices]\n\n\ndef triangle_area(vertices, faces):\n      \n      return sum([face(vertices, faces).area() for faces in faces])\n\n\ndef triangle_area_2(vertices, faces):\n      \n      return sum([face(vertices, faces).area() for faces in faces])\n\n\ndef area_triangle(vertices, faces):\n      \n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):      \n      return tuple(vertices)\n\n\ndef vertextuple(vertices):\n      \n      return tuple(vertices[0])\n\ndef face(vertices, faces):\n      \n      return faces[vertices]\n\n\ndef triangle_area(vertices, faces):\n      \n      return sum([face(vertices, faces).area() for faces in faces])\n\n\ndef triangle_area_2(vertices, faces):\n      \n      return sum([face(vertices, faces).area() for faces in faces])\n\n\ndef area_triangle(vertices, faces):\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:      \n      result = \"\"\n      if padding is None:\n          padding = len(alphabet) - 1\n      for _ in range(padding):\n          result += alphabet[0]\n      result += alphabet[-1]\n      if number >= 0:\n          result += str(number)\n      else:\n          result += str(-number)\n      return result\n\ndef get_random_number(size: int = 6) -> int:\n      \n      import random\n      return random.randrange(0, 10 ** size)\n\ndef get_random_alphabet(size: int = 3) -> List[str]:\n      \n      import random\n      return [chr(x) for x in random.sample(range(97, 123), size)]"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:      \n      result = \"\"\n      if padding is None:\n          padding = len(alphabet) - 1\n      for _ in range(padding):\n          result += alphabet[0]\n      result += alphabet[-1]\n      if number >= 0:\n          result += str(number)\n      else:\n          result += str(-number)\n      return result\n\ndef get_random_number(size: int = 6) -> int:\n      \n      import random\n      return random.randrange(0, 10 ** size)\n\ndef get_random_alphabet(size: int = 3) -> List[str]:\n      \n      import random\n      return [chr(x) for x in random.sample(range(97, 123), size)]", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _replace_register_all(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _replace_register_all_all(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _register_all_to_"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _replace_register_all(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _replace_register_all_all(flow_params, register_number, register_value):      \n          if register_number == 0:\n              return register_value\n          else:\n              return flow_params[0][register_number]\n\n      @staticmethod\n      def _register_all_to_", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):      \n      return value.replace('.', arg) if value else value\n\ndef replace_whitespace(value):      \n      return value.replace(' ', arg) if value else value\n\ndef remove_at_position(position, value):      \n      return value.replace(' ', arg) if value else value[:position]\n\n\ndef remove_all(value, arg):      \n      return value.replace('.', arg) if value else value\n\ndef remove_all_at"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):      \n      return value.replace('.', arg) if value else value\n\ndef replace_whitespace(value):      \n      return value.replace(' ', arg) if value else value\n\ndef remove_at_position(position, value):      \n      return value.replace(' ', arg) if value else value[:position]\n\n\ndef remove_all(value, arg):      \n      return value.replace('.', arg) if value else value\n\ndef remove_all_at", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):      \n          if cls.__subclasses__ is not None:\n              return cls.__subclasses__()\n          subclasses = [cls]\n          for subclass in cls.__subclasses__():\n              subclasses += subclasses(subclass)\n          subclasses.append(cls)\n          return subclasses\n      \n      def __init__(self, name=None, bases=(), attrs=None, _is_init=False, *, _is_subclass=False):\n          if attrs is None:\n              attrs = {}\n          if name is not None:\n              attrs['name'] = name\n          if bases and not _is_subclass:\n              attrs['bases'] = tuple(bases)\n          if _is_init:\n              attrs['__init__'] = self.__init__"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):      \n          if cls.__subclasses__ is not None:\n              return cls.__subclasses__()\n          subclasses = [cls]\n          for subclass in cls.__subclasses__():\n              subclasses += subclasses(subclass)\n          subclasses.append(cls)\n          return subclasses\n      \n      def __init__(self, name=None, bases=(), attrs=None, _is_init=False, *, _is_subclass=False):\n          if attrs is None:\n              attrs = {}\n          if name is not None:\n              attrs['name'] = name\n          if bases and not _is_subclass:\n              attrs['bases'] = tuple(bases)\n          if _is_init:\n              attrs['__init__'] = self.__init__", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:      \n      return alphabet.index(string.lower())\n\n\ndef string_to_int_list(string: str, alphabet: List[str]) -> List[int]:      \n      return [string_to_int(string, alphabet)]\n\n\ndef string_to_int_list_str(string: str, alphabet: List[str]) -> List[str]:      \n      return [string_to_int(string, alphabet)]\n\ndef string_to_int_str_list(string: str, alphabet: List[str]) -> List[str]:      \n      return [string_to_int(string, alphabet)]\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:      \n      return alphabet.index(string.lower())\n\n\ndef string_to_int_list(string: str, alphabet: List[str]) -> List[int]:      \n      return [string_to_int(string, alphabet)]\n\n\ndef string_to_int_list_str(string: str, alphabet: List[str]) -> List[str]:      \n      return [string_to_int(string, alphabet)]\n\ndef string_to_int_str_list(string: str, alphabet: List[str]) -> List[str]:      \n      return [string_to_int(string, alphabet)]\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:          \n          tar = tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\")\n          with tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\") as tar:\n              tar.add(url, arcname=self.archive_name)\n          return destination_path / self.archive_name\n\n      def get_repo_files(self, url: str, destination_path: Path):\n          \n          tar = tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\")\n          with tarfile.open(str(destination_path / self.tar_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:          \n          tar = tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\")\n          with tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\") as tar:\n              tar.add(url, arcname=self.archive_name)\n          return destination_path / self.archive_name\n\n      def get_repo_files(self, url: str, destination_path: Path):\n          \n          tar = tarfile.open(str(destination_path / self.tar_file_name), mode=\"w:gz\")\n          with tarfile.open(str(destination_path / self.tar_", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():      \n      return platform.system() == \"Mac\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():      \n      return platform.system() == \"Mac\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):      \n      if isinstance(item, list):\n          return [regex_dict(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:regex_dict(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_cpp(item):\n      if isinstance(item, list):\n          return [_convert_to_cpp(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:_convert_to_cpp(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_list(item):\n      if isinstance(item, list):\n          return item\n      elif isinstance("], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):      \n      if isinstance(item, list):\n          return [regex_dict(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:regex_dict(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_cpp(item):\n      if isinstance(item, list):\n          return [_convert_to_cpp(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:_convert_to_cpp(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_list(item):\n      if isinstance(item, list):\n          return item\n      elif isinstance(", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):      \n      if len(name) > 1:\n          if name[0] == name[1] == '\"': \n              return name[2:-1]\n          elif name[0] == name[1] and name[1] <> '\"':\n              return name[1:].replace('\"', '')\n          else:\n              return name\n      else:\n          return name\n\ndef get_name(name):\n      \n      if name:\n          return unquote(name)\n      else:\n          return name\n\ndef get_file_contents(filename):\n      \n      f = open(filename, \"r\")\n      try:\n          return f.read()\n      except:\n          return \"\"\n      f"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):      \n      if len(name) > 1:\n          if name[0] == name[1] == '\"': \n              return name[2:-1]\n          elif name[0] == name[1] and name[1] <> '\"':\n              return name[1:].replace('\"', '')\n          else:\n              return name\n      else:\n          return name\n\ndef get_name(name):\n      \n      if name:\n          return unquote(name)\n      else:\n          return name\n\ndef get_file_contents(filename):\n      \n      f = open(filename, \"r\")\n      try:\n          return f.read()\n      except:\n          return \"\"\n      f", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):      \n      if platform == 'this':\n          return shlex.split(s)\n      else:\n          return shlex.split(s, posix=platform.startswith('posix'))\n      \ndef shell_quote(s):\n      \n      return subprocess.list2cmdline([s])\n\ndef shell_quote_output(s):\n      \n      return subprocess.list2cmdline([s], output=True)\n\ndef shell_quote_error(e):\n      \n      if e.stderr is not None:\n          e.stderr = subprocess.list2cmdline([e.stderr], output=True)\n      if"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):      \n      if platform == 'this':\n          return shlex.split(s)\n      else:\n          return shlex.split(s, posix=platform.startswith('posix'))\n      \ndef shell_quote(s):\n      \n      return subprocess.list2cmdline([s])\n\ndef shell_quote_output(s):\n      \n      return subprocess.list2cmdline([s], output=True)\n\ndef shell_quote_error(e):\n      \n      if e.stderr is not None:\n          e.stderr = subprocess.list2cmdline([e.stderr], output=True)\n      if", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(      archive_path: str,      filename: Optional[str] = None,      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      return uncompressed_path.as_posix()\n\n\ndef read_file_contents(     archive_path: str,      filename: Optional[str] = None,      tmp_path: Union[PosixPath, str] = \"/tmp\",\n      ) -> List[str]:      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      with open(uncompressed_path) as f:\n          return f.readlines()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(      archive_path: str,      filename: Optional[str] = None,      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      return uncompressed_path.as_posix()\n\n\ndef read_file_contents(     archive_path: str,      filename: Optional[str] = None,      tmp_path: Union[PosixPath, str] = \"/tmp\",\n      ) -> List[str]:      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      with open(uncompressed_path) as f:\n          return f.readlines()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):          \n          files = []\n          for entry in os.listdir(self.dire):\n              if os.path.isfile(os.path.join(self.dire, entry)):\n                  files.append(entry)\n          files.sort()\n          if ignored:\n              return files[0]\n          return ','.join(files)\n\n      def get_files_in_dir(self, dire):\n          \n          files = []\n          for entry in os.listdir(dire):\n              if os.path.isfile(os.path.join("], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):          \n          files = []\n          for entry in os.listdir(self.dire):\n              if os.path.isfile(os.path.join(self.dire, entry)):\n                  files.append(entry)\n          files.sort()\n          if ignored:\n              return files[0]\n          return ','.join(files)\n\n      def get_files_in_dir(self, dire):\n          \n          files = []\n          for entry in os.listdir(dire):\n              if os.path.isfile(os.path.join(", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(          self, left: list[LeafPattern], collected: list[Pattern] = None      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:          \n          if self.__module_type__ in self.__supported_types__:\n              return True, left, collected\n          else:\n              return False, [], []\n\n      @abc.abstractmethod\n      def walk(self, node: Node, *args, **kwargs) -> list[LeafPattern]:\n          \n          raise NotImplementedError\n\n      @abc.abstractmethod\n      def __patterns__(self, node: Node, *args, **kwargs) -> tuple[list[Pattern], list[Pattern]]:\n          \n          raise NotImplementedError\n\n      def __get_type(self, pattern: Pattern) -> str:\n          \n          if pattern.type == Pattern."], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(          self, left: list[LeafPattern], collected: list[Pattern] = None      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:          \n          if self.__module_type__ in self.__supported_types__:\n              return True, left, collected\n          else:\n              return False, [], []\n\n      @abc.abstractmethod\n      def walk(self, node: Node, *args, **kwargs) -> list[LeafPattern]:\n          \n          raise NotImplementedError\n\n      @abc.abstractmethod\n      def __patterns__(self, node: Node, *args, **kwargs) -> tuple[list[Pattern], list[Pattern]]:\n          \n          raise NotImplementedError\n\n      def __get_type(self, pattern: Pattern) -> str:\n          \n          if pattern.type == Pattern.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):      \n      return datetime.timedelta(\n          seconds=int(frequency) if frequency else 0,\n          microseconds=0,\n          milliseconds=0,\n          minutes=0,\n          hours=0,\n          days=0,\n          weeks=0,\n          months=0,\n          years=0\n      )\n\n\ndef parse_time(time):\n      \n      return datetime.timedelta(\n          seconds=int(time) if time else 0,\n          microseconds=0,\n          milliseconds=0,\n          minutes=0,\n          hours=0,\n          days=0,\n          weeks=0,\n          months=0"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):      \n      return datetime.timedelta(\n          seconds=int(frequency) if frequency else 0,\n          microseconds=0,\n          milliseconds=0,\n          minutes=0,\n          hours=0,\n          days=0,\n          weeks=0,\n          months=0,\n          years=0\n      )\n\n\ndef parse_time(time):\n      \n      return datetime.timedelta(\n          seconds=int(time) if time else 0,\n          microseconds=0,\n          milliseconds=0,\n          minutes=0,\n          hours=0,\n          days=0,\n          weeks=0,\n          months=0", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):      \n      return socket.gethostname() == 'localhost'\n\n\ndef is_local(host):      \n      return socket.gethostname() == 'localhost'\n\n\ndef get_host_ip():\n      \n      return socket.gethostbyname(socket.gethostname())\n\n\ndef get_host_ip(with_hostname=False):\n      \n      return socket.gethostbyname(socket.gethostname()) if with_hostname else get_host_ip()\n\n\ndef get_host_ip_v4(with_hostname=False):\n      \n      return socket.gethostbyname(socket.gethostname()).split('.'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):      \n      return socket.gethostname() == 'localhost'\n\n\ndef is_local(host):      \n      return socket.gethostname() == 'localhost'\n\n\ndef get_host_ip():\n      \n      return socket.gethostbyname(socket.gethostname())\n\n\ndef get_host_ip(with_hostname=False):\n      \n      return socket.gethostbyname(socket.gethostname()) if with_hostname else get_host_ip()\n\n\ndef get_host_ip_v4(with_hostname=False):\n      \n      return socket.gethostbyname(socket.gethostname()).split('.'", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):      \n      if isinstance(find_paths, str):\n          find_paths = [find_paths]\n      if isinstance(find_paths, list):\n          find_paths = list(find_paths)\n      if len(find_paths) == 0:\n          find_paths = [find_paths[0]]\n      if len(find_paths) == 1:\n          find_paths = [find_paths]\n      if len(find_paths) == 0:\n          find_paths = ["], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):      \n      if isinstance(find_paths, str):\n          find_paths = [find_paths]\n      if isinstance(find_paths, list):\n          find_paths = list(find_paths)\n      if len(find_paths) == 0:\n          find_paths = [find_paths[0]]\n      if len(find_paths) == 1:\n          find_paths = [find_paths]\n      if len(find_paths) == 0:\n          find_paths = [", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():      \n      return os.environ.get('PATH', '').find(\"/bin/bash\") >= 0\n\ndef git_checkout():\n      \n      if not is_gitbash():\n          return\n      os.system('git checkout {}'.format(branch))\n\ndef git_init():\n      \n      os.system('git init')\n\ndef git_add():\n      \n      os.system('git add.')\n\ndef git_commit():\n      \n      os.system('git commit -m \"Commit added by {}\".'.format(__file__))\n\ndef git_pull():\n      \n      os.system('git pull')\n\ndef git_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():      \n      return os.environ.get('PATH', '').find(\"/bin/bash\") >= 0\n\ndef git_checkout():\n      \n      if not is_gitbash():\n          return\n      os.system('git checkout {}'.format(branch))\n\ndef git_init():\n      \n      os.system('git init')\n\ndef git_add():\n      \n      os.system('git add.')\n\ndef git_commit():\n      \n      os.system('git commit -m \"Commit added by {}\".'.format(__file__))\n\ndef git_pull():\n      \n      os.system('git pull')\n\ndef git_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):      \n      with open(config_filename, mode=mode) as f:\n          try:\n              yaml.dump(rendered_config, f, default_flow_style=False)\n              if overwrite:\n                  os.remove(config_filename)\n          except yaml.YAMLError as exc:\n              print(exc)\n              print(u\"Skipping writing configuration because of error: \" + exc.problem)\n\n\n\nwrite_configuration(\n      \"/some/path/to/config/file\",\n      {\n          \"foo\": \"bar\",\n          \"baz\": {\"bob\": \"bob\"},\n          \"quux\": {\"bob\": \"bob\"},\n      },\n      overwrite=True,\n)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):      \n      with open(config_filename, mode=mode) as f:\n          try:\n              yaml.dump(rendered_config, f, default_flow_style=False)\n              if overwrite:\n                  os.remove(config_filename)\n          except yaml.YAMLError as exc:\n              print(exc)\n              print(u\"Skipping writing configuration because of error: \" + exc.problem)\n\n\n\nwrite_configuration(\n      \"/some/path/to/config/file\",\n      {\n          \"foo\": \"bar\",\n          \"baz\": {\"bob\": \"bob\"},\n          \"quux\": {\"bob\": \"bob\"},\n      },\n      overwrite=True,\n)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):          \n      return script.replace(seperator, \"\\n\")\n\ndef pprint(script):\n      \n      print(script)\n      sys.stdout.flush()\n\ndef get_data(script):\n      \n      data = {}\n      for line in script.split('\\n'):\n          if line.strip() == '':\n              continue\n          if \":\" in line:\n              data[line.split(\":\", 1)[0].strip()] = line.split(\":\", 1)[1].strip()\n          else:\n              data[line.strip().split(':')[0].strip()] = line.strip().split(':')[1].strip()\n      return data\n\ndef get"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):          \n      return script.replace(seperator, \"\\n\")\n\ndef pprint(script):\n      \n      print(script)\n      sys.stdout.flush()\n\ndef get_data(script):\n      \n      data = {}\n      for line in script.split('\\n'):\n          if line.strip() == '':\n              continue\n          if \":\" in line:\n              data[line.split(\":\", 1)[0].strip()] = line.split(\":\", 1)[1].strip()\n          else:\n              data[line.strip().split(':')[0].strip()] = line.strip().split(':')[1].strip()\n      return data\n\ndef get", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):      \n      import subprocess\n      import select\n      import signal\n      import os\n      import time\n\n      timeout_sec = timeout\n\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):      \n      import subprocess\n      import select\n      import signal\n      import os\n      import time\n\n      timeout_sec = timeout\n\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):      \n      import numpy as np\n      from matplotlib.colors import Normalize\n      from matplotlib.lines import Line2D\n\n      if matcher.startswith('_'):\n          raise ValueError('Matcher cannot begin with _')\n\n      if matcher in ('None', None):\n          return None\n\n      if isinstance(matcher, str):\n          matcher = matcher.lower().replace(' ', '_').replace('-', '_')\n\n      if matcher in ('in', 'is'):\n          return matcher in os.environ\n\n      if matcher in ('_', '__'):\n          return matcher in os.environ\n\n      if matcher == '*':\n          return True\n\n      if matcher == '*_':\n          return True\n\n      if matcher == '_is_':\n          return"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):      \n      import numpy as np\n      from matplotlib.colors import Normalize\n      from matplotlib.lines import Line2D\n\n      if matcher.startswith('_'):\n          raise ValueError('Matcher cannot begin with _')\n\n      if matcher in ('None', None):\n          return None\n\n      if isinstance(matcher, str):\n          matcher = matcher.lower().replace(' ', '_').replace('-', '_')\n\n      if matcher in ('in', 'is'):\n          return matcher in os.environ\n\n      if matcher in ('_', '__'):\n          return matcher in os.environ\n\n      if matcher == '*':\n          return True\n\n      if matcher == '*_':\n          return True\n\n      if matcher == '_is_':\n          return", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:      \n      if not image_href:\n          return None, None, False\n      if not _image_id_re.match(image_href):\n          return None, None, False\n\n      image_id = _image_id_re.search(image_href).group(1)\n      if image_id!= image_href:\n          return image_href, image_id, False\n\n      image_id = image_id.strip(\"/\")\n      return image_href, image_id, True\n\n\ndef _parse_image_url(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_url_re.match(image_href):\n          return None, None,"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:      \n      if not image_href:\n          return None, None, False\n      if not _image_id_re.match(image_href):\n          return None, None, False\n\n      image_id = _image_id_re.search(image_href).group(1)\n      if image_id!= image_href:\n          return image_href, image_id, False\n\n      image_id = image_id.strip(\"/\")\n      return image_href, image_id, True\n\n\ndef _parse_image_url(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_url_re.match(image_href):\n          return None, None,", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              continue\n          yield elem.rstrip('\\\\')\n\ndef remove_leading_os_sep(input_list):\n      for elem in input_list:\n          if elem.startswith('\\\\'):\n              continue\n          yield elem[1:]\n\ndef os_sep_to_list(input_string):\n      \n      return [elem.strip('\\\\') for elem in remove_leading_os_sep(input_string)]\n\ndef list_to_os_sep(input_list):\n      \n      return '\\\\'.join("], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              continue\n          yield elem.rstrip('\\\\')\n\ndef remove_leading_os_sep(input_list):\n      for elem in input_list:\n          if elem.startswith('\\\\'):\n              continue\n          yield elem[1:]\n\ndef os_sep_to_list(input_string):\n      \n      return [elem.strip('\\\\') for elem in remove_leading_os_sep(input_string)]\n\ndef list_to_os_sep(input_list):\n      \n      return '\\\\'.join(", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def get_patterns(self, patterns):\n          \n          return [self.get_pattern(pattern) for pattern in patterns]\n\n      def _get_pattern_regex(self, pattern, strip=True):\n          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def _get_pattern_regex_list(self, patterns):\n          \n          return [self._get_pattern_regex(pattern, strip=True) for pattern in patterns"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def get_patterns(self, patterns):\n          \n          return [self.get_pattern(pattern) for pattern in patterns]\n\n      def _get_pattern_regex(self, pattern, strip=True):\n          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def _get_pattern_regex_list(self, patterns):\n          \n          return [self._get_pattern_regex(pattern, strip=True) for pattern in patterns", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):          \n          if verbose:\n              print(\"run_command(%s)\" % cmd)\n          return self.run_c(cmd, verbose)\n\n      def run_c(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_c(%s)\" % cmd)\n          return self.run_r(cmd, verbose)\n\n      def run_r(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_r(%s)\" % cmd)\n          return self.run_w(cmd, verbose)\n\n      def run_w(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_w"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):          \n          if verbose:\n              print(\"run_command(%s)\" % cmd)\n          return self.run_c(cmd, verbose)\n\n      def run_c(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_c(%s)\" % cmd)\n          return self.run_r(cmd, verbose)\n\n      def run_r(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_r(%s)\" % cmd)\n          return self.run_w(cmd, verbose)\n\n      def run_w(self, cmd, verbose):          '''Call the given command.\n          '''\n          if verbose:\n              print(\"run_w", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):      \n      return is_ipv4(target) or target.endswith('.')\n\n\ndef is_ipv6(target):      \n      return is_ipv6(target) or target.endswith('::')\n\n\ndef is_url(target):      \n      return is_url(target) or target.endswith('/')\n\n\ndef is_domain(target):      \n      return is_domain(target) or target.endswith(':')\n\n\ndef is_wordlist(target):      \n      return is_wordlist(target) or target.endswith('.txt')\n\n\ndef is_file(target):      '''Test if"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):      \n      return is_ipv4(target) or target.endswith('.')\n\n\ndef is_ipv6(target):      \n      return is_ipv6(target) or target.endswith('::')\n\n\ndef is_url(target):      \n      return is_url(target) or target.endswith('/')\n\n\ndef is_domain(target):      \n      return is_domain(target) or target.endswith(':')\n\n\ndef is_wordlist(target):      \n      return is_wordlist(target) or target.endswith('.txt')\n\n\ndef is_file(target):      '''Test if", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(      graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:      \n      return {root for root in roots if graph.has_node(root)}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(      graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:      \n      return {root for root in roots if graph.has_node(root)}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):          \n          if dumper is None:\n              dumper = self.default_dumper\n          if isinstance(obj, bytes):\n              return obj.decode(self.encoding)\n          return dumper(obj, **self.kwargs)\n\n\nclass JSONEncoder(BaseEncoder):\n      \n      def default(self, o):\n          if isinstance(o, type):\n              if issubclass(o, JSONEncoder):\n                  return o.encode(o)\n              return JSONEncoder.default(self, o)\n          elif isinstance(o, (list, tuple, dict)):\n              return [self.escape"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):          \n          if dumper is None:\n              dumper = self.default_dumper\n          if isinstance(obj, bytes):\n              return obj.decode(self.encoding)\n          return dumper(obj, **self.kwargs)\n\n\nclass JSONEncoder(BaseEncoder):\n      \n      def default(self, o):\n          if isinstance(o, type):\n              if issubclass(o, JSONEncoder):\n                  return o.encode(o)\n              return JSONEncoder.default(self, o)\n          elif isinstance(o, (list, tuple, dict)):\n              return [self.escape", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):      \n      '''\n      Usage: build_app_logger(name='app', logfile='app.log')'''\n      import logging\n      import logging.config\n      import os\n      import sys\n      logging.config.fileConfig(\n          filename=os.path.join(os.path.dirname(__file__), 'app.log'),\n          logfilename=logfile,\n          disable_existing_loggers=True,\n          format='%(asctime)s - %(message)s',\n          datefmt='%Y-%m-%d %H:%M:%S'\n      )\n      logger = logging.getLogger(name)\n      return logger\n\ndef get_logger(name='app', logfile='app.log', debug=True):\n      '''General purpose application logger"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):      \n      '''\n      Usage: build_app_logger(name='app', logfile='app.log')'''\n      import logging\n      import logging.config\n      import os\n      import sys\n      logging.config.fileConfig(\n          filename=os.path.join(os.path.dirname(__file__), 'app.log'),\n          logfilename=logfile,\n          disable_existing_loggers=True,\n          format='%(asctime)s - %(message)s',\n          datefmt='%Y-%m-%d %H:%M:%S'\n      )\n      logger = logging.getLogger(name)\n      return logger\n\ndef get_logger(name='app', logfile='app.log', debug=True):\n      '''General purpose application logger", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):          \n          return np.zeros(shape, dtype=dtype)\n\ndef get_fisher_mean(samples, mean_n):\n      \n      mean = np.mean(samples, axis=0)\n      mean_n = np.vstack([mean_n, mean]).T\n      f_mean = np.sum(mean_n * samples, axis=0)\n      return f_mean\n\ndef get_fisher_mean_n(samples, n_samples):\n      \n      mean = np.mean(samples, axis=0)\n      mean_n = np.vstack([mean, mean]).T\n      f_mean = np.sum(mean_n * samples, axis=0)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):          \n          return np.zeros(shape, dtype=dtype)\n\ndef get_fisher_mean(samples, mean_n):\n      \n      mean = np.mean(samples, axis=0)\n      mean_n = np.vstack([mean_n, mean]).T\n      f_mean = np.sum(mean_n * samples, axis=0)\n      return f_mean\n\ndef get_fisher_mean_n(samples, n_samples):\n      \n      mean = np.mean(samples, axis=0)\n      mean_n = np.vstack([mean, mean]).T\n      f_mean = np.sum(mean_n * samples, axis=0)", "is_pass": true, "return_code": 0}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):          \n          return np.exp( -0.5*(x - 0.2)**2 / 0.1**2 )\n          \n      def gaussian_2d(self, x, y):\n          \n          return np.exp( -0.5*(x-0.2)**2 / 0.1**2 + 0.5*(y-0.2)**2 / 0.1**2 )\n          \n      def gaussian_3d(self, x, y, z):\n          \n          return np.exp( -0.5*(x-0.2)**2 / 0.1**2 + 0.5*(y-0.2)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):          \n          return np.exp( -0.5*(x - 0.2)**2 / 0.1**2 )\n          \n      def gaussian_2d(self, x, y):\n          \n          return np.exp( -0.5*(x-0.2)**2 / 0.1**2 + 0.5*(y-0.2)**2 / 0.1**2 )\n          \n      def gaussian_3d(self, x, y, z):\n          \n          return np.exp( -0.5*(x-0.2)**2 / 0.1**2 + 0.5*(y-0.2)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):      \n      '''\n      configs = []\n      for config_filename in config_filenames:\n          if os.path.exists(config_filename):\n              with open(config_filename, 'r') as f:\n                  config = yaml.load(f, Loader=yaml.FullLoader)\n                  configs.append(config)\n\n      return configs\n\ndef load_config(config_file, resolve_env=True):\n      \n      if resolve_env:\n          configs = resolve_env_configs(config_file)\n      else:\n          configs = [config_file]\n\n      config = yaml.load(open(config_file), Loader=yaml.FullLoader)\n\n      return configs, config\n\ndef resolve_env_configs(config"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):      \n      '''\n      configs = []\n      for config_filename in config_filenames:\n          if os.path.exists(config_filename):\n              with open(config_filename, 'r') as f:\n                  config = yaml.load(f, Loader=yaml.FullLoader)\n                  configs.append(config)\n\n      return configs\n\ndef load_config(config_file, resolve_env=True):\n      \n      if resolve_env:\n          configs = resolve_env_configs(config_file)\n      else:\n          configs = [config_file]\n\n      config = yaml.load(open(config_file), Loader=yaml.FullLoader)\n\n      return configs, config\n\ndef resolve_env_configs(config", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):      \n      if isinstance(obj, bytes):\n          return obj\n      if isinstance(obj, str):\n          return obj.encode('utf-8')\n      return str(obj)\n\ndef force_unicode(obj):      \n      if isinstance(obj, bytes):\n          return obj.decode('utf-8')\n      if isinstance(obj, str):\n          return obj.decode('utf-8','replace')\n      return str(obj)\n\ndef force_str(obj):      \n      if isinstance(obj, bytes):\n          return obj.decode('utf-8')\n     "], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):      \n      if isinstance(obj, bytes):\n          return obj\n      if isinstance(obj, str):\n          return obj.encode('utf-8')\n      return str(obj)\n\ndef force_unicode(obj):      \n      if isinstance(obj, bytes):\n          return obj.decode('utf-8')\n      if isinstance(obj, str):\n          return obj.decode('utf-8','replace')\n      return str(obj)\n\ndef force_str(obj):      \n      if isinstance(obj, bytes):\n          return obj.decode('utf-8')\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod      def from_ticks(cls, ticks, tz=None):          \n          return cls.from_datetime(ticks, tz=tz)\n\n      def to_datetime(self, tz=None):\n          '''Datetime object from timestamp.\n\n          :param tz: Timezone to use, if None uses the local timezone.\n          :return: Datetime object\n          '''\n          return self.ctime(tz=tz)\n\n      def to_timestamp(self, tz=None):\n          '''Timestamp object from timestamp.\n\n          :param tz: Timezone to use, if None uses the local timezone.\n          :return: Timestamp object\n          '''\n          return self.timestamp(tz=tz)\n\n      def to_pydatetime(self, tz=None):\n          '''Datetime object from pydatetime.\n\n          :param tz"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod      def from_ticks(cls, ticks, tz=None):          \n          return cls.from_datetime(ticks, tz=tz)\n\n      def to_datetime(self, tz=None):\n          '''Datetime object from timestamp.\n\n          :param tz: Timezone to use, if None uses the local timezone.\n          :return: Datetime object\n          '''\n          return self.ctime(tz=tz)\n\n      def to_timestamp(self, tz=None):\n          '''Timestamp object from timestamp.\n\n          :param tz: Timezone to use, if None uses the local timezone.\n          :return: Timestamp object\n          '''\n          return self.timestamp(tz=tz)\n\n      def to_pydatetime(self, tz=None):\n          '''Datetime object from pydatetime.\n\n          :param tz", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod      def protocol_handlers(cls, protocol_version=None):          \n          return cls.protocol_handlers_by_version(protocol_version)\n\n      @classmethod\n      def protocol_handlers_by_version(cls, protocol_version=None):\n          \n          protocol_handlers = {}\n          for version_tuple in cls.supported_protocol_versions:\n              protocol_handlers[version_tuple] = cls.protocol_handlers.get(version_tuple, [])\n          return protocol_handlers\n\n      @classmethod\n      def supported_protocol_versions(cls):\n          \n          protocol_versions = []\n          for version in cls.supported_protocol_versions:\n"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod      def protocol_handlers(cls, protocol_version=None):          \n          return cls.protocol_handlers_by_version(protocol_version)\n\n      @classmethod\n      def protocol_handlers_by_version(cls, protocol_version=None):\n          \n          protocol_handlers = {}\n          for version_tuple in cls.supported_protocol_versions:\n              protocol_handlers[version_tuple] = cls.protocol_handlers.get(version_tuple, [])\n          return protocol_handlers\n\n      @classmethod\n      def supported_protocol_versions(cls):\n          \n          protocol_versions = []\n          for version in cls.supported_protocol_versions:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod      def from_raw_values(cls, values):          \n          return cls(\n              bookmark=values[0],\n              date=values[1],\n          )\n\n      @classmethod\n      def from_dict(cls, dict_, include_empty=False):\n          \n          if not dict_:\n              return None\n          \n          element = dict_['bookmark']\n          \n          return cls(\n              bookmark=element,\n              date=None,\n          )\n\n      @staticmethod\n      def get_field_info() -> Dict[str, str]:\n          return {\n              'bookmark': 'bookmark',\n              'date': 'date',\n          }\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod      def from_raw_values(cls, values):          \n          return cls(\n              bookmark=values[0],\n              date=values[1],\n          )\n\n      @classmethod\n      def from_dict(cls, dict_, include_empty=False):\n          \n          if not dict_:\n              return None\n          \n          element = dict_['bookmark']\n          \n          return cls(\n              bookmark=element,\n              date=None,\n          )\n\n      @staticmethod\n      def get_field_info() -> Dict[str, str]:\n          return {\n              'bookmark': 'bookmark',\n              'date': 'date',\n          }\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):      \n      if bufsize is None:\n          return seq.split(b'\\n')\n      else:\n          return seq.split(b'\\n', bufsize)\n\n\ndef _get_line_with_type(line, bufsize=None):\n      \n      if bufsize is None:\n          return line.split(b'\\n')\n      else:\n          return line.split(b'\\n', bufsize)\n\n\ndef _get_seq_with_type_and_bufsize(seq, bufsize=None):\n      \n      if bufsize is None:\n          return seq.split(b'\\n')\n      else:\n          return seq.split(b'\\n', bufsize)\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):      \n      if bufsize is None:\n          return seq.split(b'\\n')\n      else:\n          return seq.split(b'\\n', bufsize)\n\n\ndef _get_line_with_type(line, bufsize=None):\n      \n      if bufsize is None:\n          return line.split(b'\\n')\n      else:\n          return line.split(b'\\n', bufsize)\n\n\ndef _get_seq_with_type_and_bufsize(seq, bufsize=None):\n      \n      if bufsize is None:\n          return seq.split(b'\\n')\n      else:\n          return seq.split(b'\\n', bufsize)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):          \n          if self.bins.shape[0] == 0:\n              return 0\n          if other is None:\n              return np.sum(self.hist, axis=0)\n          if not hasattr(other, 'hist'):\n              raise TypeError('other must be a BinnedStatistic or a numpy array')\n          return np.sum(self.hist * other.hist, axis=0) / np.sum(other.hist, axis=0)\n      scale = staticmethod(scale)\n      __call__ = scale\n      def scale_by(self, other):\n          \n          if self.bins.shape[0] == 0:\n              return 0\n          return self.hist * other.hist\n      scale_by = staticmethod("], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):          \n          if self.bins.shape[0] == 0:\n              return 0\n          if other is None:\n              return np.sum(self.hist, axis=0)\n          if not hasattr(other, 'hist'):\n              raise TypeError('other must be a BinnedStatistic or a numpy array')\n          return np.sum(self.hist * other.hist, axis=0) / np.sum(other.hist, axis=0)\n      scale = staticmethod(scale)\n      __call__ = scale\n      def scale_by(self, other):\n          \n          if self.bins.shape[0] == 0:\n              return 0\n          return self.hist * other.hist\n      scale_by = staticmethod(", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):          \n          if self.scale is not None:\n              self.scale = other\n              return self.scale\n          else:\n              return self.scale\n\n      @scale.setter\n      def scale(self, other):\n          self.scale = other\n          return self.scale\n\n      @property\n      def color(self):\n          \n          return self._color\n\n      @color.setter\n      def color(self, color):\n          self._color = color\n          self.update_graph_color(color)\n\n      @property\n      def edge_color(self):\n          \n          return self._edge_color\n\n      @edge_color.setter\n      def edge_color(self, color):\n          self._edge_color = color\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):          \n          if self.scale is not None:\n              self.scale = other\n              return self.scale\n          else:\n              return self.scale\n\n      @scale.setter\n      def scale(self, other):\n          self.scale = other\n          return self.scale\n\n      @property\n      def color(self):\n          \n          return self._color\n\n      @color.setter\n      def color(self, color):\n          self._color = color\n          self.update_graph_color(color)\n\n      @property\n      def edge_color(self):\n          \n          return self._edge_color\n\n      @edge_color.setter\n      def edge_color(self, color):\n          self._edge_color = color\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",                    field_names=(\"x\", \"y\"), scale=None):      \n          from matplotlib.patches import Rectangle\n\n          if field_names[0] == field_names[1]:\n              raise Exception(\"Field names should be different\")\n\n          graph = matplotlib.gridspec.GridSpec(\n              1, len(hist) + 1, figure=self.figure,\n          )\n          ax = []\n          for i, (hist_, coord) in enumerate(hist):\n              hist_ = hist_.ravel()\n\n              if get_coordinate == \"left\":\n                  coord = [0, i]\n              elif get_coordinate == \"center\":\n                  coord = [i/len(hist), i]\n              else"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",                    field_names=(\"x\", \"y\"), scale=None):      \n          from matplotlib.patches import Rectangle\n\n          if field_names[0] == field_names[1]:\n              raise Exception(\"Field names should be different\")\n\n          graph = matplotlib.gridspec.GridSpec(\n              1, len(hist) + 1, figure=self.figure,\n          )\n          ax = []\n          for i, (hist_, coord) in enumerate(hist):\n              hist_ = hist_.ravel()\n\n              if get_coordinate == \"left\":\n                  coord = [0, i]\n              elif get_coordinate == \"center\":\n                  coord = [i/len(hist), i]\n              else", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):      \n      if tentative:\n          return True\n\n      iface_version = get_if_version(iface)\n      candidate_version = get_if_version(candidate)\n      iface_ver = tuple(iface_version)\n      candidate_ver = tuple(candidate_version)\n      if iface_ver < candidate_ver:\n          return False\n\n      candidate_ver = tuple(candidate_version)\n      iface_ver = tuple(iface_version)\n      if candidate"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):      \n      if tentative:\n          return True\n\n      iface_version = get_if_version(iface)\n      candidate_version = get_if_version(candidate)\n      iface_ver = tuple(iface_version)\n      candidate_ver = tuple(candidate_version)\n      if iface_ver < candidate_ver:\n          return False\n\n      candidate_ver = tuple(candidate_version)\n      iface_ver = tuple(iface_version)\n      if candidate", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):      \n      if not candidate:\n          return False\n\n      if not cand_iface:\n          cand_iface = candidate.get(\"iface\")\n          assert isinstance(cand_iface, str), \"Candidate must have 'iface' key.\"\n          assert iface not in ifaces, \"The interface %s is already in use.\" % iface\n\n      if not tentative:\n          assert isinstance(candidate, dict), \"Candidate must be a dictionary.\"\n          assert \"iface\" in candidate, \"Cand"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):      \n      if not candidate:\n          return False\n\n      if not cand_iface:\n          cand_iface = candidate.get(\"iface\")\n          assert isinstance(cand_iface, str), \"Candidate must have 'iface' key.\"\n          assert iface not in ifaces, \"The interface %s is already in use.\" % iface\n\n      if not tentative:\n          assert isinstance(candidate, dict), \"Candidate must be a dictionary.\"\n          assert \"iface\" in candidate, \"Cand", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):      \n      candidate_class = candidate.__class__\n      if candidate_class not in (IInterface, IInterfaceFactory):\n          raise TypeError(\"%s is not a valid interface\" % candidate_class)\n      iface_factory = candidate.getFactory()\n      iface_class = iface_factory.getClass()\n      iface_name = iface_class.getName()\n      if candidate_class == IInterface:\n          iface_obj = candidate\n      elif candidate_class == IInterfaceFactory:\n          iface_obj = candidate.getObject()\n      else:\n          raise TypeError(\"%s is not an interface\" % candidate_class)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):      \n      candidate_class = candidate.__class__\n      if candidate_class not in (IInterface, IInterfaceFactory):\n          raise TypeError(\"%s is not a valid interface\" % candidate_class)\n      iface_factory = candidate.getFactory()\n      iface_class = iface_factory.getClass()\n      iface_name = iface_class.getName()\n      if candidate_class == IInterface:\n          iface_obj = candidate\n      elif candidate_class == IInterfaceFactory:\n          iface_obj = candidate.getObject()\n      else:\n          raise TypeError(\"%s is not an interface\" % candidate_class)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):      \n          if explicit_mc is not None:\n              return explicit_mc\n          if len(bases) == 1 and type(bases[0]) is type:\n              return bases[0].__metaclass__\n          for base in bases:\n              if type(base) is type:\n                  return determineMetaclass(base.__bases__, explicit_mc=base.__metaclass__)\n          else:\n              return type.__new__(type, '_Class_Meta', (), {})\n\n\nclass _Class_Meta(type):\n      \n      def __new__(cls, name, bases, dct):\n          \n          if '__new__' in dct:\n              return type.__new__(cl"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):      \n          if explicit_mc is not None:\n              return explicit_mc\n          if len(bases) == 1 and type(bases[0]) is type:\n              return bases[0].__metaclass__\n          for base in bases:\n              if type(base) is type:\n                  return determineMetaclass(base.__bases__, explicit_mc=base.__metaclass__)\n          else:\n              return type.__new__(type, '_Class_Meta', (), {})\n\n\nclass _Class_Meta(type):\n      \n      def __new__(cls, name, bases, dct):\n          \n          if '__new__' in dct:\n              return type.__new__(cl", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):          \n          if key == self.__marker:\n              raise KeyError(key)\n          return self.__data.pop(key, default)\n\n      def __setitem__(self, key, value):\n          '''D[key]=value]\n          If key is not defined, __marker is used.'''\n          if key == self.__marker:\n              raise KeyError(key)\n          self.__data[key] = value\n\n      def copy(self):\n          '''D.copy() -> Dict\n          Return a shallow copy of D.'''\n          return type(self)(self)\n\n      def __repr__(self):\n          if not self:\n              return '%s()' % (self.__class__.__name__,)\n          return '%s(%r)' % (self.__class__."], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):          \n          if key == self.__marker:\n              raise KeyError(key)\n          return self.__data.pop(key, default)\n\n      def __setitem__(self, key, value):\n          '''D[key]=value]\n          If key is not defined, __marker is used.'''\n          if key == self.__marker:\n              raise KeyError(key)\n          self.__data[key] = value\n\n      def copy(self):\n          '''D.copy() -> Dict\n          Return a shallow copy of D.'''\n          return type(self)(self)\n\n      def __repr__(self):\n          if not self:\n              return '%s()' % (self.__class__.__name__,)\n          return '%s(%r)' % (self.__class__.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):          \n          return self.items.popitem()\n\n      def __str__(self):\n          \n          return str(dict(self.items))\n\n      def __repr__(self):\n          \n          return '{%s}' % ', '.join('%r: %r' % (key, value)\n                  for key, value in self.items())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):          \n          return self.items.popitem()\n\n      def __str__(self):\n          \n          return str(dict(self.items))\n\n      def __repr__(self):\n          \n          return '{%s}' % ', '.join('%r: %r' % (key, value)\n                  for key, value in self.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):          \n          return self.heap[0]\n          \n      def __len__(self):\n          \n          return len(self.heap)\n\n\ndef test_heap():\n      \n      heap = Heap()\n      \n      for i in range(10):\n          print('Inserting {}'.format(i))\n          heap.insert(i)\n      \n      print('Searching for {}'.format(10))\n      print('Searching for 10')\n      print('Searching for 20')\n      print('Searching for 30')\n      print('Searching for 40')\n      print('Searching for 50')\n      print('Searching for 60')\n      print('Searching for 70')\n      print('Searching for 80')\n     "], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):          \n          return self.heap[0]\n          \n      def __len__(self):\n          \n          return len(self.heap)\n\n\ndef test_heap():\n      \n      heap = Heap()\n      \n      for i in range(10):\n          print('Inserting {}'.format(i))\n          heap.insert(i)\n      \n      print('Searching for {}'.format(10))\n      print('Searching for 10')\n      print('Searching for 20')\n      print('Searching for 30')\n      print('Searching for 40')\n      print('Searching for 50')\n      print('Searching for 60')\n      print('Searching for 70')\n      print('Searching for 80')\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):          \n          return self.items[0]\n\n      def __setitem__(self, key, value):\n          'Set the `(key, value)` pair to `value`.'\n          self.items[0] = (key, value)\n\n      def __delitem__(self, key):\n          \n          del self.items[0]\n\n      def clear(self):\n          'Reset the dictionary to an empty, new, empty, old.'\n          self.__init__()\n\n      def update(self, iterable):\n          'Update the dictionary with a sequence of key, value pairs.'\n          self.update(iterable)\n          self.__init__()\n\n      def setdefault(self, key, value=None):\n          '''If `key` is in"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):          \n          return self.items[0]\n\n      def __setitem__(self, key, value):\n          'Set the `(key, value)` pair to `value`.'\n          self.items[0] = (key, value)\n\n      def __delitem__(self, key):\n          \n          del self.items[0]\n\n      def clear(self):\n          'Reset the dictionary to an empty, new, empty, old.'\n          self.__init__()\n\n      def update(self, iterable):\n          'Update the dictionary with a sequence of key, value pairs.'\n          self.update(iterable)\n          self.__init__()\n\n      def setdefault(self, key, value=None):\n          '''If `key` is in", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):          \n          return self.popleft()\n\n      def popleft(self):            # popleft() pops the smallest element from the queue\n          while self.queue and self.queue[0][0] < self.queue[0][-1]:\n              self.queue[0] = self.queue[0][1:]\n          return self.queue.pop(0)\n\n\ndef print_queue(q):\n      for _ in range(q):\n          print(q.popitem())\n\n\nif __name__ == '__main__':\n      q = Queue()\n      q.append(('a', 1))\n      q.append(('b', 2))\n      q.append(('c', 3))\n      print_queue(q)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):          \n          return self.popleft()\n\n      def popleft(self):            # popleft() pops the smallest element from the queue\n          while self.queue and self.queue[0][0] < self.queue[0][-1]:\n              self.queue[0] = self.queue[0][1:]\n          return self.queue.pop(0)\n\n\ndef print_queue(q):\n      for _ in range(q):\n          print(q.popitem())\n\n\nif __name__ == '__main__':\n      q = Queue()\n      q.append(('a', 1))\n      q.append(('b', 2))\n      q.append(('c', 3))\n      print_queue(q)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern: \t\t \n \t\t return re.compile(self.in_regex)\n\n\tdef _create_out_regex(self) -> Pattern: \t\t \n \t\t return re.compile(self.out_regex)\n\n\tdef _create_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.pattern)\n\n\tdef _create_out_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.out_pattern)\n\n\tdef _create_in_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.in_pattern)\n\n\tdef _create_out_pattern(self) ->"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern: \t\t \n \t\t return re.compile(self.in_regex)\n\n\tdef _create_out_regex(self) -> Pattern: \t\t \n \t\t return re.compile(self.out_regex)\n\n\tdef _create_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.pattern)\n\n\tdef _create_out_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.out_pattern)\n\n\tdef _create_in_pattern(self) -> Pattern: \t\t \n \t\t return re.compile(self.in_pattern)\n\n\tdef _create_out_pattern(self) ->", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter: \t\t \n          return self._converter()\n\n      def _converter(self) -> _converting._Converter:\n          \n          return self._converter_class(self._create_converter())\n\n      def _create_converter_class(self) -> _converting._Converter:\t# pylint: disable=R0914\n          \n          return _converting.Converter\n\n      def _converter_class(self, converter: _converting._Converter) -> _converting.Converter:\t# pylint: disable=R0914\n          \n          return converter(self)\n\n      @property\n      def name(self) -> str:\n          '''Return the name of the converter"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter: \t\t \n          return self._converter()\n\n      def _converter(self) -> _converting._Converter:\n          \n          return self._converter_class(self._create_converter())\n\n      def _create_converter_class(self) -> _converting._Converter:\t# pylint: disable=R0914\n          \n          return _converting.Converter\n\n      def _converter_class(self, converter: _converting._Converter) -> _converting.Converter:\t# pylint: disable=R0914\n          \n          return converter(self)\n\n      @property\n      def name(self) -> str:\n          '''Return the name of the converter", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii      def isoparse(self, dt_str):          \n          return _datetime_type.from_iso_8601(dt_str).datetime()\n\n      @_takes_ascii      def localize(self, dt_str):          \n          return _datetime_type.from_iso_8601(dt_str).datetime()\n\n      def _compare_canonical(self, a, b):\n          return a.strftime(self.fmt) == b.strftime(self.fmt)\n\n      def _compare_relativedelta(self, a, b):\n          return a.days == b.days\n\n      def _compare_same(self, a, b):\n          return abs(a - b) <= timedelta(0)"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii      def isoparse(self, dt_str):          \n          return _datetime_type.from_iso_8601(dt_str).datetime()\n\n      @_takes_ascii      def localize(self, dt_str):          \n          return _datetime_type.from_iso_8601(dt_str).datetime()\n\n      def _compare_canonical(self, a, b):\n          return a.strftime(self.fmt) == b.strftime(self.fmt)\n\n      def _compare_relativedelta(self, a, b):\n          return a.days == b.days\n\n      def _compare_same(self, a, b):\n          return abs(a - b) <= timedelta(0)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,                ignoretz=False, tzinfos=None, **kwargs):          \n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          if isinstance(timestr, bytes) and self.isep(timestr):\n              timestr = self.parse(timestr, default=default, ignoretz=True,\n                                  tzinfos=tzinfos, **kwargs)\n          else:\n              timestr = self.parse_datetime(timestr,\n                                               ignoretz=ignoretz, tzinfos=tzinfos,\n                                               **kwargs)\n          if self._is_naive(timestr):\n              timestr = self._localize(timestr)\n          return timestr\n\n      def parse_datetime(self, datestr, tzinfos=None, **kwargs):"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,                ignoretz=False, tzinfos=None, **kwargs):          \n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          if isinstance(timestr, bytes) and self.isep(timestr):\n              timestr = self.parse(timestr, default=default, ignoretz=True,\n                                  tzinfos=tzinfos, **kwargs)\n          else:\n              timestr = self.parse_datetime(timestr,\n                                               ignoretz=ignoretz, tzinfos=tzinfos,\n                                               **kwargs)\n          if self._is_naive(timestr):\n              timestr = self._localize(timestr)\n          return timestr\n\n      def parse_datetime(self, datestr, tzinfos=None, **kwargs):", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs      def fromutc(self, dt):          \n          return self._fromutc(dt).replace(tzinfo=self.tzname)\n\n      def _fromutc(self, dt):          \n          if dt.tzinfo is not None:\n              return dt\n          offset = dt.utcoffset()\n          offset = offset.replace(tzinfo=None)\n          offset = offset - datetime.timedelta(hours=2)\n          dt = dt.astimezone(self.tzoffset())\n          return dt + offset\n\n      def _to_pst(self, dt):\n          '''Returns a timezone-aware timestamp.    The timestamp is the\n          concatenation of the timezone-aware time and the local time.\n          '''\n          return dt.replace(tzinfo=self"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs      def fromutc(self, dt):          \n          return self._fromutc(dt).replace(tzinfo=self.tzname)\n\n      def _fromutc(self, dt):          \n          if dt.tzinfo is not None:\n              return dt\n          offset = dt.utcoffset()\n          offset = offset.replace(tzinfo=None)\n          offset = offset - datetime.timedelta(hours=2)\n          dt = dt.astimezone(self.tzoffset())\n          return dt + offset\n\n      def _to_pst(self, dt):\n          '''Returns a timezone-aware timestamp.    The timestamp is the\n          concatenation of the timezone-aware time and the local time.\n          '''\n          return dt.replace(tzinfo=self", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):      \n      if tzinfo is None:\n          return tzinfo\n      if dt.tzinfo is not None:\n          return dt.tzinfo\n      return tzinfo\n\n\nclass DateTime(datetime.datetime):\n      '''\n      A datetime with an explicit timezone.\n      '''\n      def __new__(cls, year, month, day, hour=0, minute=0, second=0,\n                  microsecond=0, tzinfo=None, *, fold=0,\n                  **kwargs):\n          if fold > 1:\n              raise ValueError(\"fold parameter not valid with naive datetimes\")\n          if 'fold' in kwargs:\n              fold = kwargs.pop('fold', 0)\n          else:\n              fold = not kwargs\n          d = super(DateTime,"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):      \n      if tzinfo is None:\n          return tzinfo\n      if dt.tzinfo is not None:\n          return dt.tzinfo\n      return tzinfo\n\n\nclass DateTime(datetime.datetime):\n      '''\n      A datetime with an explicit timezone.\n      '''\n      def __new__(cls, year, month, day, hour=0, minute=0, second=0,\n                  microsecond=0, tzinfo=None, *, fold=0,\n                  **kwargs):\n          if fold > 1:\n              raise ValueError(\"fold parameter not valid with naive datetimes\")\n          if 'fold' in kwargs:\n              fold = kwargs.pop('fold', 0)\n          else:\n              fold = not kwargs\n          d = super(DateTime,", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:          \n          self.cut_chars = before\n          self.after_chars = after\n\n      def get_cut_chars(self) -> bytes:\n          \n          return self.cut_chars\n\n      def get_after_chars(self) -> bytes:\n          \n          return self.after_chars\n\n      def get_before_chars(self) -> bytes:\n          \n          return self.before_chars\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:          \n          self.cut_chars = before\n          self.after_chars = after\n\n      def get_cut_chars(self) -> bytes:\n          \n          return self.cut_chars\n\n      def get_after_chars(self) -> bytes:\n          \n          return self.after_chars\n\n      def get_before_chars(self) -> bytes:\n          \n          return self.before_chars\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):      \n      try:\n          if request.method == 'GET':\n              return True\n          return False\n      except:\n          return False\n\n\ndef request_status(request: RequestType):\n      \n      try:\n          return request.status\n      except:\n          return None\n\n\ndef request_headers(request: RequestType):\n      \n      headers = {}\n      try:\n          for header, value in request.headers.items():\n              headers[header] = value\n          return headers\n      except:\n          return {}\n\n\ndef request_body(request: RequestType):\n      \n      try:\n          return request.body\n      except:\n          return None\n\n\ndef request_params"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):      \n      try:\n          if request.method == 'GET':\n              return True\n          return False\n      except:\n          return False\n\n\ndef request_status(request: RequestType):\n      \n      try:\n          return request.status\n      except:\n          return None\n\n\ndef request_headers(request: RequestType):\n      \n      headers = {}\n      try:\n          for header, value in request.headers.items():\n              headers[header] = value\n          return headers\n      except:\n          return {}\n\n\ndef request_body(request: RequestType):\n      \n      try:\n          return request.body\n      except:\n          return None\n\n\ndef request_params", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:      \n      if request.method == \"POST\":\n          return True\n      return False\n\n\ndef get_request(request: RequestType) -> Optional[str]:\n      \n      if request.method == \"GET\":\n          return request.args.get(\"request\")\n      return None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:      \n      if request.method == \"POST\":\n          return True\n      return False\n\n\ndef get_request(request: RequestType) -> Optional[str]:\n      \n      if request.method == \"GET\":\n          return request.args.get(\"request\")\n      return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt.replace(tzinfo=timezone.utc)\n      return dt.astimezone(timezone.utc)\n\ndef format_dt_string(dt):\n      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt.replace(tzinfo=timezone.utc)\n      return dt.isoformat()\n\ndef format_dt_secs(dt):\n      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt."], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt.replace(tzinfo=timezone.utc)\n      return dt.astimezone(timezone.utc)\n\ndef format_dt_string(dt):\n      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt.replace(tzinfo=timezone.utc)\n      return dt.isoformat()\n\ndef format_dt_secs(dt):\n      \n      if not dt:\n          return dt\n      if not dt.tzinfo:\n          dt = dt.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:      \n      text = text.lower()\n      text = text.translate(str.maketrans('', '', string.punctuation))\n      text = re.sub(r'\\s+','', text)\n      if replacer:\n          text = replacer(text)\n      tags = set()\n      for word in re.split(r'\\w+', text):\n          if word in tags:\n              continue\n          for tag in re.split(r'(\\d+[^\\s]+)', word):\n              if tag:\n                  tags.add(tag)\n      return tags, text\n\ndef find_urls(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:      \n      text = text.lower()\n      text = text.translate(str.maketrans('', '', string.punctuation))\n      text = re.sub(r'\\s+','', text)\n      if replacer:\n          text = replacer(text)\n      tags = set()\n      for word in re.split(r'\\w+', text):\n          if word in tags:\n              continue\n          for tag in re.split(r'(\\d+[^\\s]+)', word):\n              if tag:\n                  tags.add(tag)\n      return tags, text\n\ndef find_urls(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):      \n      text = re.sub(r'\\s+','', text.lower())\n      text = re.sub(r'\\d+\\.?\\d*', '', text)    # Remove non-numerical characters\n      text = re.sub(r'https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\\b', '', text)\n      text = re.sub(r'https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%_\\+.~#?"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):      \n      text = re.sub(r'\\s+','', text.lower())\n      text = re.sub(r'\\d+\\.?\\d*', '', text)    # Remove non-numerical characters\n      text = re.sub(r'https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\\b', '', text)\n      text = re.sub(r'https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%_\\+.~#?", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:      \n      try:\n          response = requests.head(url, allow_redirects=True, timeout=10)\n          if response.status_code == 200:\n              return response.headers['content-type']\n          else:\n              return None\n      except requests.exceptions.Timeout:\n          return None\n      except requests.exceptions.HTTPError as err:\n          if err.response.status_code == 404:\n              return None\n          else:\n              raise\n\n\ndef get_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = requests.head(url, allow_redirects=True, timeout=10)\n          if response.status_code == 200:\n              return response.headers['content-type']\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:      \n      try:\n          response = requests.head(url, allow_redirects=True, timeout=10)\n          if response.status_code == 200:\n              return response.headers['content-type']\n          else:\n              return None\n      except requests.exceptions.Timeout:\n          return None\n      except requests.exceptions.HTTPError as err:\n          if err.response.status_code == 404:\n              return None\n          else:\n              raise\n\n\ndef get_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = requests.head(url, allow_redirects=True, timeout=10)\n          if response.status_code == 200:\n              return response.headers['content-type']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:      \n      return tag in tags\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:      \n      return tag in tags\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value'}\n                  }\n              }\n          }\n      }\n\n\ndef xml_as_dict(node):      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value'}\n                  }\n              }\n          }\n      }\n\n\ndef xml_as_dict(node):      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):      \n      if not (sender_handle in self.sender_handles):\n              raise Exception('Sender handle not in self.sender_handles list')\n      if not (entity_handle in self.entity_handles):\n              raise Exception('Entity handle not in self.entity_handles list')\n\ndef validate_entity_handle_list(entity_handle_list):\n      \n      for entity_handle in entity_handle_list:\n          check_entity_handle_validity(entity_handle)\n\ndef validate_sender_and_entity_handle_list(sender_handle_list, entity_handle_list):\n      \n      for sender_"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):      \n      if not (sender_handle in self.sender_handles):\n              raise Exception('Sender handle not in self.sender_handles list')\n      if not (entity_handle in self.entity_handles):\n              raise Exception('Entity handle not in self.entity_handles list')\n\ndef validate_entity_handle_list(entity_handle_list):\n      \n      for entity_handle in entity_handle_list:\n          check_entity_handle_validity(entity_handle)\n\ndef validate_sender_and_entity_handle_list(sender_handle_list, entity_handle_list):\n      \n      for sender_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):      \n      return NodeInfo(url, document_path)\n\n\ndef get_nodeinfo_document(url):      \n      return NodeInfo(url)\n\n\ndef get_nodeinfo_document_path(url):      \n      return os.path.join(url, 'nodeinfo.json')\n\n\ndef get_nodeinfo_well_known_document_path(url):      \n      return os.path.join(url, 'nodeinfo.well-known.json')\n\n\ndef get_nodeinfo_document_path_from_nodeinfo(nodeinfo):      \n      return os.path.join(nodeinfo.nodeinfo_url, 'node"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):      \n      return NodeInfo(url, document_path)\n\n\ndef get_nodeinfo_document(url):      \n      return NodeInfo(url)\n\n\ndef get_nodeinfo_document_path(url):      \n      return os.path.join(url, 'nodeinfo.json')\n\n\ndef get_nodeinfo_well_known_document_path(url):      \n      return os.path.join(url, 'nodeinfo.well-known.json')\n\n\ndef get_nodeinfo_document_path_from_nodeinfo(nodeinfo):      \n      return os.path.join(nodeinfo.nodeinfo_url, 'node", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):      \n      if doc.get('signature'):\n          try:\n              signature_bytes = base64.b64decode(doc.get('signature'))\n          except TypeError:\n              return False\n          try:\n              signature = base64.b64decode(signature)\n          except TypeError:\n              return False\n          try:\n              signature_bytes = signature_bytes.decode('utf-8')\n          except UnicodeDecodeError:\n              return False\n          if signature!= signature_bytes:\n              return False\n      public_key_bytes = public_key.encode('utf-8')\n      if not base64.b64decode(public_key_bytes).decode('utf-8') == public_key:\n          return False\n     "], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):      \n      if doc.get('signature'):\n          try:\n              signature_bytes = base64.b64decode(doc.get('signature'))\n          except TypeError:\n              return False\n          try:\n              signature = base64.b64decode(signature)\n          except TypeError:\n              return False\n          try:\n              signature_bytes = signature_bytes.decode('utf-8')\n          except UnicodeDecodeError:\n              return False\n          if signature!= signature_bytes:\n              return False\n      public_key_bytes = public_key.encode('utf-8')\n      if not base64.b64decode(public_key_bytes).decode('utf-8') == public_key:\n          return False\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:      \n      \n      \n      "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:      \n      \n      \n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle), 'rb') as handle:\n              return handle.read().decode(encoding='utf-8')\n      except:\n          return None\n\ndef try_retrieve_webfinger_url(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle), 'rb') as handle:\n              return handle.read().decode(encoding='utf-8')\n      except:\n          return None\n\ndef try_retrieve_webfinger_email(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle),"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle), 'rb') as handle:\n              return handle.read().decode(encoding='utf-8')\n      except:\n          return None\n\ndef try_retrieve_webfinger_url(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle), 'rb') as handle:\n              return handle.read().decode(encoding='utf-8')\n      except:\n          return None\n\ndef try_retrieve_webfinger_email(handle: str) -> Optional[str]:      \n      try:\n          with open(os.path.expanduser(handle),", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):      \n      def parse_diaspora_webfinger_doc(handle, page_data):\n          doc = Document()\n          doc.title = page_data['title']\n          if 'date' in page_data:\n              doc.pubDate = page_data['date']\n          else:\n              doc.pubDate = page_data['published']\n          doc.authors = page_data['authors']\n          doc.contributors = page_data['contributors']\n          doc.license = page_data['license']\n          for p in page_data['paragraphs']:\n              p['text'] = p['text'].strip()\n              doc.add_paragraph(p['text'])\n              if p['type'] == 'end':\n                  break\n         "], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):      \n      def parse_diaspora_webfinger_doc(handle, page_data):\n          doc = Document()\n          doc.title = page_data['title']\n          if 'date' in page_data:\n              doc.pubDate = page_data['date']\n          else:\n              doc.pubDate = page_data['published']\n          doc.authors = page_data['authors']\n          doc.contributors = page_data['contributors']\n          doc.license = page_data['license']\n          for p in page_data['paragraphs']:\n              p['text'] = p['text'].strip()\n              doc.add_paragraph(p['text'])\n              if p['type'] == 'end':\n                  break\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):      \n          return self.diaspora_host_meta_dict.get(host, None)\n      \n      def retrieve_diaspora_host_meta(self, host):\n          '''Retrieve a remote Diaspora host-meta document.\n          \n          This method is called when the host is not a Diaspora host.\n          '''\n          return self.diaspora_host_meta_dict.get(host, None)\n      \n      def retrieve_diaspora_host_meta_collection(self, host):\n          '''Retrieve a remote Diaspora host-meta collection.\n          \n          This method is called when the host is not a Diaspora host.\n          '''\n          return self.diaspora_host_meta_collection_dict.get(host, None)\n      \n      def retrieve_diaspora"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):      \n          return self.diaspora_host_meta_dict.get(host, None)\n      \n      def retrieve_diaspora_host_meta(self, host):\n          '''Retrieve a remote Diaspora host-meta document.\n          \n          This method is called when the host is not a Diaspora host.\n          '''\n          return self.diaspora_host_meta_dict.get(host, None)\n      \n      def retrieve_diaspora_host_meta_collection(self, host):\n          '''Retrieve a remote Diaspora host-meta collection.\n          \n          This method is called when the host is not a Diaspora host.\n          '''\n          return self.diaspora_host_meta_collection_dict.get(host, None)\n      \n      def retrieve_diaspora", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):      \n      if isinstance(data, dict):\n          data = json.dumps(data)\n      elif data is None:\n          data = \"\"\n      data = data.encode(\"utf-8\")\n      headers = {'Content-Type': 'application/json'}\n      if timeout is not None:\n          headers['Connection'] = 'close'\n      response = requests.post(url, data=data, headers=headers, timeout=timeout, allow_redirects=True, verify=False)\n      return response\n\n\ndef get_document(url, data, timeout=10, method=\"get\", *args, **kwargs):      \n      if isinstance(data, dict):\n          data = json.dumps(data)\n      elif data is None:\n          data = \"\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):      \n      if isinstance(data, dict):\n          data = json.dumps(data)\n      elif data is None:\n          data = \"\"\n      data = data.encode(\"utf-8\")\n      headers = {'Content-Type': 'application/json'}\n      if timeout is not None:\n          headers['Connection'] = 'close'\n      response = requests.post(url, data=data, headers=headers, timeout=timeout, allow_redirects=True, verify=False)\n      return response\n\n\ndef get_document(url, data, timeout=10, method=\"get\", *args, **kwargs):      \n      if isinstance(data, dict):\n          data = json.dumps(data)\n      elif data is None:\n          data = \"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          for k in keys:\n              if k not in dic:\n                  dic[k] = {}\n              dic[key] = dic[k]\n              if type(dic[key]) is dict:\n                  dict_insert(dic[key], val, key, *keys)\n              else:\n                  dic[key] = val\n\ndef dict_get(dic, key, default=None):\n      \n      if type(dic[key]) is dict:\n          return dict_get(dic[key], key, default)\n      else:\n          return dic[key]\n\ndef dict_get_or_default(dic"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          for k in keys:\n              if k not in dic:\n                  dic[k] = {}\n              dic[key] = dic[k]\n              if type(dic[key]) is dict:\n                  dict_insert(dic[key], val, key, *keys)\n              else:\n                  dic[key] = val\n\ndef dict_get(dic, key, default=None):\n      \n      if type(dic[key]) is dict:\n          return dict_get(dic[key], key, default)\n      else:\n          return dic[key]\n\ndef dict_get_or_default(dic", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):      \n      import os\n      import re\n      import bz2\n      import itertools\n      import sys\n      import string\n      import types\n      import ConfigParser\n      import zipfile\n      \n      class IniType(object):\n          _instance = None\n          def __new__(cls, *args, **kwargs):\n              if not IniType._instance:\n                  IniType._instance = super(IniType, cls).__new__(cls)\n              return IniType._instance\n          \n          def __init__(self, spec):\n              self.spec = spec\n              \n          def __eq__(self, other):\n              return self.spec == other.spec\n          \n          def __ne__(self, other):\n              return self.spec!= other"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):      \n      import os\n      import re\n      import bz2\n      import itertools\n      import sys\n      import string\n      import types\n      import ConfigParser\n      import zipfile\n      \n      class IniType(object):\n          _instance = None\n          def __new__(cls, *args, **kwargs):\n              if not IniType._instance:\n                  IniType._instance = super(IniType, cls).__new__(cls)\n              return IniType._instance\n          \n          def __init__(self, spec):\n              self.spec = spec\n              \n          def __eq__(self, other):\n              return self.spec == other.spec\n          \n          def __ne__(self, other):\n              return self.spec!= other", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod      def ansible_config_manager(cls):          \n          return cls._config_manager\n\n      @classmethod      \n      def get_config_manager(cls):\n          \n          return cls._config_manager\n      \n      @classmethod      \n      def get_config_manager_with_user(cls, user):\n          \n          return cls._config_manager_with_user\n\n      @classmethod\n      def get_config_manager_with_user_and_default_host(cls, user, default_host=None):\n          \n          return cls._config_manager_with_user_and_default_host\n\n      @classmethod      \n      def get_config_manager_with_user_and_default_host_"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod      def ansible_config_manager(cls):          \n          return cls._config_manager\n\n      @classmethod      \n      def get_config_manager(cls):\n          \n          return cls._config_manager\n      \n      @classmethod      \n      def get_config_manager_with_user(cls, user):\n          \n          return cls._config_manager_with_user\n\n      @classmethod\n      def get_config_manager_with_user_and_default_host(cls, user, default_host=None):\n          \n          return cls._config_manager_with_user_and_default_host\n\n      @classmethod      \n      def get_config_manager_with_user_and_default_host_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod      def workspace_manager(cls):          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def get_workspace_manager(cls):\n          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def get_workspace_manager_class(cls):\n          \n          return cls.workspace_manager_class.workspace_manager_class\n\n      @classmethod\n      def get_workspace_manager_name(cls):\n          \n          return cls.workspace_manager_class.workspace_manager_name\n\n      @classmethod\n      def get_"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod      def workspace_manager(cls):          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def get_workspace_manager(cls):\n          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def get_workspace_manager_class(cls):\n          \n          return cls.workspace_manager_class.workspace_manager_class\n\n      @classmethod\n      def get_workspace_manager_name(cls):\n          \n          return cls.workspace_manager_class.workspace_manager_name\n\n      @classmethod\n      def get_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod      def plugins_manager(cls):          \n          return cls.get_instance().plugins_manager\n\n      @classmethod\n      def get_instance(cls):\n          \n          if not hasattr(cls, \"_instance\"):\n              cls._instance = PluginManager()\n          return cls._instance\n\n      def __init__(self):\n          \n          self._plugins = []\n          self._plugins_dict = {}\n          self._plugins_list = []\n\n      def add(self, plugin):\n          \n          self._plugins.append(plugin)\n          self._plugins_dict[plugin.name] = plugin\n\n      def remove(self, plugin):\n          \n          self._plugins.remove"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod      def plugins_manager(cls):          \n          return cls.get_instance().plugins_manager\n\n      @classmethod\n      def get_instance(cls):\n          \n          if not hasattr(cls, \"_instance\"):\n              cls._instance = PluginManager()\n          return cls._instance\n\n      def __init__(self):\n          \n          self._plugins = []\n          self._plugins_dict = {}\n          self._plugins_list = []\n\n      def add(self, plugin):\n          \n          self._plugins.append(plugin)\n          self._plugins_dict[plugin.name] = plugin\n\n      def remove(self, plugin):\n          \n          self._plugins.remove", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod      def validate_from_content(cls, spec_content=None):          \n          spec_content = spec_content or {}\n          if not all(k in spec_content for k in ('name', 'type', 'properties', 'description')):\n              return False\n\n          if not all(k in spec_content for k in ('type', 'properties')):\n              return False\n          return True\n      \n      def validate(self, spec_content=None):\n          \n          spec_content = spec_content or {}\n          for field in ('name', 'type', 'properties', 'description'):\n              if field not in spec_content:\n                  return False\n          return True\n      \n      def get_info(self):\n          \n          return {\n              'name': self.name,\n              'type': self.type"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod      def validate_from_content(cls, spec_content=None):          \n          spec_content = spec_content or {}\n          if not all(k in spec_content for k in ('name', 'type', 'properties', 'description')):\n              return False\n\n          if not all(k in spec_content for k in ('type', 'properties')):\n              return False\n          return True\n      \n      def validate(self, spec_content=None):\n          \n          spec_content = spec_content or {}\n          for field in ('name', 'type', 'properties', 'description'):\n              if field not in spec_content:\n                  return False\n          return True\n      \n      def get_info(self):\n          \n          return {\n              'name': self.name,\n              'type': self.type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod      def validate_from_file(cls, yaml_file=None):          \n          with open(yaml_file, 'r') as stream:\n              try:\n                  yaml_data = yaml.safe_load(stream)\n                  if 'tasks' not in yaml_data:\n                      raise Exception('tasks field missing')\n                  if 'config' not in yaml_data:\n                      raise Exception('config field missing')\n                  if 'tasks' not in yaml_data['config']:\n                      raise Exception('tasks field missing')\n              except yaml.YAMLError as e:\n                  raise Exception('invalid YAML file')\n              return yaml_data\n\n      def to_file(self, yaml_file=None):\n          \n          with open(yaml_file, 'w') as stream:\n              try:\n                 "], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod      def validate_from_file(cls, yaml_file=None):          \n          with open(yaml_file, 'r') as stream:\n              try:\n                  yaml_data = yaml.safe_load(stream)\n                  if 'tasks' not in yaml_data:\n                      raise Exception('tasks field missing')\n                  if 'config' not in yaml_data:\n                      raise Exception('config field missing')\n                  if 'tasks' not in yaml_data['config']:\n                      raise Exception('tasks field missing')\n              except yaml.YAMLError as e:\n                  raise Exception('invalid YAML file')\n              return yaml_data\n\n      def to_file(self, yaml_file=None):\n          \n          with open(yaml_file, 'w') as stream:\n              try:\n                 ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):          \n          self.parser_dict = parser_dict\n          groups = self.parser_dict['include']\n          for group_name in groups:\n              group = self.parser_dict[group_name]\n              for key in group.keys():\n                  self.parser_dict[group_name][key] = self.resolve_include(group[key])\n          return self.parser_dict\n\n      def _include_directive(self, directive):\n          self.parser_dict = self.parser_dict.setdefault(directive['module'], {})\n          if directive['name'] not in self.parser_dict:\n              raise ValueError(\"Unknown directive: '{}'\".format(directive['name']))\n          return self.parser_dict[directive['name']]\n\n      def _resolve_include(self, include):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):          \n          self.parser_dict = parser_dict\n          groups = self.parser_dict['include']\n          for group_name in groups:\n              group = self.parser_dict[group_name]\n              for key in group.keys():\n                  self.parser_dict[group_name][key] = self.resolve_include(group[key])\n          return self.parser_dict\n\n      def _include_directive(self, directive):\n          self.parser_dict = self.parser_dict.setdefault(directive['module'], {})\n          if directive['name'] not in self.parser_dict:\n              raise ValueError(\"Unknown directive: '{}'\".format(directive['name']))\n          return self.parser_dict[directive['name']]\n\n      def _resolve_include(self, include):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):          \n          if self.spec is None:\n              self.spec = self.get_spec()\n          if self.spec is None:\n              return None\n          if self.args is None:\n              self.args = self.get_args()\n          if self.kwargs is None:\n              self.kwargs = self.get_kwargs()\n          if self.no_input is None:\n              self.no_input = self.get_no_input()\n          return self.spec, self.args, self.kwargs, self.no_input\n\n      def get_spec(self):\n          \n          return self.spec\n\n      def get_args(self):\n          \n          return self.spec.args\n\n      def get_kwargs(self):\n          '''Get the"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):          \n          if self.spec is None:\n              self.spec = self.get_spec()\n          if self.spec is None:\n              return None\n          if self.args is None:\n              self.args = self.get_args()\n          if self.kwargs is None:\n              self.kwargs = self.get_kwargs()\n          if self.no_input is None:\n              self.no_input = self.get_no_input()\n          return self.spec, self.args, self.kwargs, self.no_input\n\n      def get_spec(self):\n          \n          return self.spec\n\n      def get_args(self):\n          \n          return self.spec.args\n\n      def get_kwargs(self):\n          '''Get the", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):          \n          return self.__dict__.copy()\n\n      def set_deprecation_args(self, args):          \n          self.__dict__.update(args)\n\n      def _get_deprecated_args(self):          \n          return (self.__dict__,)\n\n      def __getattr__(self, attr):\n          if attr in self.__dict__:\n              return self.__dict__[attr]\n          if attr in self.__dict__.keys():\n              return self.__dict__[attr]\n          if attr in self.__dict__.values():\n              return self.__dict__[attr]\n          raise AttributeError(attr)\n\n      def __setattr__(self, att"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):          \n          return self.__dict__.copy()\n\n      def set_deprecation_args(self, args):          \n          self.__dict__.update(args)\n\n      def _get_deprecated_args(self):          \n          return (self.__dict__,)\n\n      def __getattr__(self, attr):\n          if attr in self.__dict__:\n              return self.__dict__[attr]\n          if attr in self.__dict__.keys():\n              return self.__dict__[attr]\n          if attr in self.__dict__.values():\n              return self.__dict__[attr]\n          raise AttributeError(attr)\n\n      def __setattr__(self, att", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):          \n          if not cli_args.is_deprecated:\n              print('The deprecated argument is not valid. You can add it to '\n                    'the command line with \"--deprecated\".')\n              print('To add it to the command line, you can add it at the '\n                    'command line with \"--deprecated\".')\n              return None\n\n          if cli_args.deprecated:\n              print(f\"The argument '{cli_args."], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):          \n          if not cli_args.is_deprecated:\n              print('The deprecated argument is not valid. You can add it to '\n                    'the command line with \"--deprecated\".')\n              print('To add it to the command line, you can add it at the '\n                    'command line with \"--deprecated\".')\n              return None\n\n          if cli_args.deprecated:\n              print(f\"The argument '{cli_args.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):          \n          option_specs = {}\n          if command_name.endswith('_log'):\n              option_specs['log'] = dict(type='bool', default=False,\n                                            help='Enable logging')\n          if command_name.endswith('_interactive'):\n              option_specs['interactive'] = dict(type='bool', default=False,\n                                                    help='Enable interactive mode')\n          if command_name.endswith('_wait'):\n              option_specs['wait'] = dict(type='int', default=1,\n                                            help='Number of seconds to wait')\n          if command_name.endswith('_output'):\n              option_specs['output'] = dict(type='str', default='text',\n                                               help='Output type"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):          \n          option_specs = {}\n          if command_name.endswith('_log'):\n              option_specs['log'] = dict(type='bool', default=False,\n                                            help='Enable logging')\n          if command_name.endswith('_interactive'):\n              option_specs['interactive'] = dict(type='bool', default=False,\n                                                    help='Enable interactive mode')\n          if command_name.endswith('_wait'):\n              option_specs['wait'] = dict(type='int', default=1,\n                                            help='Number of seconds to wait')\n          if command_name.endswith('_output'):\n              option_specs['output'] = dict(type='str', default='text',\n                                               help='Output type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):          \n          option_spec = super(SubcommandOption, self).get_option_spec(command_name, argument_name)\n          if argument_name in self.configuration_parser.options:\n              return option_spec\n          return option_spec['help']\n\nclass Option(Argument):\n      '''A command line option or group of command line options.\n\n      The ``option_spec`` attribute of an ``Argument`` is a dictionary\n      whose keys are the name of the option which can be accessed\n      with ``get_option_spec()`` or accessed with\n      ``get_option_spec(name)``.\n\n      See ``Argument.set_spec()`` for an explanation of the distinction\n      between ``Option()`` and ``Argument('name')``.\n\n      Option names can be:\n\n      * They are private, i.e."], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):          \n          option_spec = super(SubcommandOption, self).get_option_spec(command_name, argument_name)\n          if argument_name in self.configuration_parser.options:\n              return option_spec\n          return option_spec['help']\n\nclass Option(Argument):\n      '''A command line option or group of command line options.\n\n      The ``option_spec`` attribute of an ``Argument`` is a dictionary\n      whose keys are the name of the option which can be accessed\n      with ``get_option_spec()`` or accessed with\n      ``get_option_spec(name)``.\n\n      See ``Argument.set_spec()`` for an explanation of the distinction\n      between ``Option()`` and ``Argument('name')``.\n\n      Option names can be:\n\n      * They are private, i.e.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):          \n          return [a for a in args if not a.startswith('-')]\n\n      def add_argument(self, *args, action=None, **kwargs):\n          \n          if action is None:\n              action = self.action\n          if action is None:\n              return None\n          if self.help is not None:\n              kwargs['help'] = self.help\n          if self.metavar is not None:\n              kwargs['metavar'] = self.metavar\n          if self.nargs is not None:\n              kwargs['nargs'] = self.nargs\n          if self.required:\n              kwargs['required'] = True\n          for a in args:\n              if self.action =='store_const' or self.action =='store_true':\n                 "], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):          \n          return [a for a in args if not a.startswith('-')]\n\n      def add_argument(self, *args, action=None, **kwargs):\n          \n          if action is None:\n              action = self.action\n          if action is None:\n              return None\n          if self.help is not None:\n              kwargs['help'] = self.help\n          if self.metavar is not None:\n              kwargs['metavar'] = self.metavar\n          if self.nargs is not None:\n              kwargs['nargs'] = self.nargs\n          if self.required:\n              kwargs['required'] = True\n          for a in args:\n              if self.action =='store_const' or self.action =='store_true':\n                 ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):          \n          if not args:\n              raise ValueError('provide at least one argument!')\n          if not self.args:\n              raise ValueError('provide at least one argument!')\n\n      def get_args(self):\n          \n          return self.args\n\n      def get_kwargs(self):\n          \n          return self.kwargs\n\n      def get_requires_kwargs(self):\n          \n          return self.kwargs\n\n      def set_args(self, *args, **kwargs):\n          \n          self.args = args or kwargs\n\n      def set_kwargs(self, **kwargs):\n          \n         "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):          \n          if not args:\n              raise ValueError('provide at least one argument!')\n          if not self.args:\n              raise ValueError('provide at least one argument!')\n\n      def get_args(self):\n          \n          return self.args\n\n      def get_kwargs(self):\n          \n          return self.kwargs\n\n      def get_requires_kwargs(self):\n          \n          return self.kwargs\n\n      def set_args(self, *args, **kwargs):\n          \n          self.args = args or kwargs\n\n      def set_kwargs(self, **kwargs):\n          \n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,                                 args):          \n          args_for_command = []\n          for option in options_spec:\n              if option.required_when:\n                  args_for_command.append(option.name)\n          return args_for_command\n\n      def _get_required_args(self, command_name, options_spec,                                   options_spec_len=0):\n          args = []\n          for option in options_spec:\n              if option.required:\n                  args.append(option.name)\n                  if options_spec_len > 0:\n                      args.append(option.name)\n          return args\n\n      def _get_default_config(self, command_name, options_spec,                                      options_spec_len=0,                                      options_spec_default=[]):\n          '''Get default configuration for the given command.\n\n          :param"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,                                 args):          \n          args_for_command = []\n          for option in options_spec:\n              if option.required_when:\n                  args_for_command.append(option.name)\n          return args_for_command\n\n      def _get_required_args(self, command_name, options_spec,                                   options_spec_len=0):\n          args = []\n          for option in options_spec:\n              if option.required:\n                  args.append(option.name)\n                  if options_spec_len > 0:\n                      args.append(option.name)\n          return args\n\n      def _get_default_config(self, command_name, options_spec,                                      options_spec_len=0,                                      options_spec_default=[]):\n          '''Get default configuration for the given command.\n\n          :param", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):          \n          if len(args) > self.length:\n              raise ValueError('Length of arguments is too long.')\n\ndef get_data_path(dataset, name):\n      \n      return os.path.join(os.getcwd(), 'data', dataset, name)\n\ndef get_data_path_test(dataset, name):\n      \n      return os.path.join(os.getcwd(), 'data', dataset, name)\n\ndef get_model_path(dataset, name):\n      \n      return os.path.join(os.getcwd(),'models', dataset, name)\n\ndef get"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):          \n          if len(args) > self.length:\n              raise ValueError('Length of arguments is too long.')\n\ndef get_data_path(dataset, name):\n      \n      return os.path.join(os.getcwd(), 'data', dataset, name)\n\ndef get_data_path_test(dataset, name):\n      \n      return os.path.join(os.getcwd(), 'data', dataset, name)\n\ndef get_model_path(dataset, name):\n      \n      return os.path.join(os.getcwd(),'models', dataset, name)\n\ndef get", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):          \n          choice_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  choice_args.append(choice)\n              else:\n                  choice_args.append(choice.title())\n          return choice_args\n\n      def validate_value_args(self, args):\n          \n          value_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  value_args.append(choice)\n              else:\n                  value_args.append(choice.lower())\n          return value_args\n\n      def validate_default_args(self, args):\n          \n          default_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  default"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):          \n          choice_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  choice_args.append(choice)\n              else:\n                  choice_args.append(choice.title())\n          return choice_args\n\n      def validate_value_args(self, args):\n          \n          value_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  value_args.append(choice)\n              else:\n                  value_args.append(choice.lower())\n          return value_args\n\n      def validate_default_args(self, args):\n          \n          default_args = []\n          for choice in args:\n              if choice.startswith('-'):\n                  default", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):          \n          if args.get('min_value') is not None and args.get('max_value') is not None:\n              if args.get('min_value') < args.get('max_value'):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be greater than or equal to '\n                      'the maximum value.'\n                  )\n\n      def validate_min_value(self, args):\n          \n          if args.get('min_value') is not None:\n              if not isinstance(args.get('min_value'), numbers.Number):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be a number.'\n                  )\n              if args.get('min_value') < args.get('max_value'):\n                  raise arg"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):          \n          if args.get('min_value') is not None and args.get('max_value') is not None:\n              if args.get('min_value') < args.get('max_value'):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be greater than or equal to '\n                      'the maximum value.'\n                  )\n\n      def validate_min_value(self, args):\n          \n          if args.get('min_value') is not None:\n              if not isinstance(args.get('min_value'), numbers.Number):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be a number.'\n                  )\n              if args.get('min_value') < args.get('max_value'):\n                  raise arg", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,                                 spec_option):          \n          return spec_option.type_name + \" \" + type_name\n\n      def create_type(self, subcommand, type_name, option_name,                                 spec_option):          \n          return type_name + \" \" + option_name\n\n      def create_type_complex(self, subcommand, type_name, option_name,                                 spec_option):          \n          return option_name + \" \" + spec_option.type_name\n          \n      def create_type_complex_argumet(self, subcommand, type_name, option_name,                                 spec_option):          \n          return spec_option.type_name + \" \" + option_name\n\n      def find_type_complex(self, subcommand, type_"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,                                 spec_option):          \n          return spec_option.type_name + \" \" + type_name\n\n      def create_type(self, subcommand, type_name, option_name,                                 spec_option):          \n          return type_name + \" \" + option_name\n\n      def create_type_complex(self, subcommand, type_name, option_name,                                 spec_option):          \n          return option_name + \" \" + spec_option.type_name\n          \n      def create_type_complex_argumet(self, subcommand, type_name, option_name,                                 spec_option):          \n          return spec_option.type_name + \" \" + option_name\n\n      def find_type_complex(self, subcommand, type_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):          \n          custom_args = []\n          control_args = []\n          for arg in args.split(','):\n              if '.' in arg:\n                  custom_args.append(arg.split('.')[0])\n                  control_args.append(arg.split('.')[1])\n              else:\n                  custom_args.append(arg)\n                  control_args.append(None)\n          return custom_args, control_args\n\n      def _get_model_class(self):\n          return self._model_class\n\n      def _get_model_config(self):\n          return self._model_class.get_config()\n\n      def _get_train_input_shape(self):\n          \n          if self._model_class.uses_learning_phase:\n              return self._model_"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):          \n          custom_args = []\n          control_args = []\n          for arg in args.split(','):\n              if '.' in arg:\n                  custom_args.append(arg.split('.')[0])\n                  control_args.append(arg.split('.')[1])\n              else:\n                  custom_args.append(arg)\n                  control_args.append(None)\n          return custom_args, control_args\n\n      def _get_model_class(self):\n          return self._model_class\n\n      def _get_model_config(self):\n          return self._model_class.get_config()\n\n      def _get_train_input_shape(self):\n          \n          if self._model_class.uses_learning_phase:\n              return self._model_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod      def merge_extra_vars(vars_dict, extra_vars=None):          \n          if extra_vars is None:\n              extra_vars = {}\n          if 'extra-vars' not in vars_dict:\n              vars_dict['extra-vars'] = extra_vars\n          else:\n              vars_dict['extra-vars'].update(extra_vars)\n          return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod      def merge_extra_vars(vars_dict, extra_vars=None):          \n          if extra_vars is None:\n              extra_vars = {}\n          if 'extra-vars' not in vars_dict:\n              vars_dict['extra-vars'] = extra_vars\n          else:\n              vars_dict['extra-vars'].update(extra_vars)\n          return vars_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,                       extra_vars=None, ansible_args=None):      \n      if verbose is None:\n          verbose = False\n      if extra_vars is None:\n          extra_vars = {}\n      if ansible_args is None:\n          ansible_args = []\n\n      cmd = [\n          'ansible-playbook',\n          '-e',\n          'hosts=%s' % ir_workspace,\n          '-e',\n          'variables.ansible_env=%s' % ir_plugin,\n          '-e',\n          'variables.ansible_playbook_path=%s' % playbook_path,\n          '-e',\n          'variables.ansible_playbook_verbose=%s' % verbose,\n          '-e',\n          'variables.ansible_playbook_extra_vars=%s' % json.dumps("], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,                       extra_vars=None, ansible_args=None):      \n      if verbose is None:\n          verbose = False\n      if extra_vars is None:\n          extra_vars = {}\n      if ansible_args is None:\n          ansible_args = []\n\n      cmd = [\n          'ansible-playbook',\n          '-e',\n          'hosts=%s' % ir_workspace,\n          '-e',\n          'variables.ansible_env=%s' % ir_plugin,\n          '-e',\n          'variables.ansible_playbook_path=%s' % playbook_path,\n          '-e',\n          'variables.ansible_playbook_verbose=%s' % verbose,\n          '-e',\n          'variables.ansible_playbook_extra_vars=%s' % json.dumps(", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):      \n      playbook = cli_args.playbook\n          \n      if playbook is not None:\n          play_data = cli_args.playbook\n      else:\n          play_data = os.path.join(cli_args.basedir, \"playbooks\", \"playbook\", cli_args.playbook)\n\n      try:\n          playbook_vars = {}\n          playbook_vars.update(vars_dict)\n          playbook_vars.update({'play_data':play_data})\n          playbook_vars.update({'ir_workspace':ir_workspace})\n          playbook_vars.update({'ir_plugin':ir_plugin})\n          playbook_vars.update({'ir_plugin_version':ir_plugin.version})\n          playbook"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):      \n      playbook = cli_args.playbook\n          \n      if playbook is not None:\n          play_data = cli_args.playbook\n      else:\n          play_data = os.path.join(cli_args.basedir, \"playbooks\", \"playbook\", cli_args.playbook)\n\n      try:\n          playbook_vars = {}\n          playbook_vars.update(vars_dict)\n          playbook_vars.update({'play_data':play_data})\n          playbook_vars.update({'ir_workspace':ir_workspace})\n          playbook_vars.update({'ir_plugin':ir_plugin})\n          playbook_vars.update({'ir_plugin_version':ir_plugin.version})\n          playbook", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):          \n          for key in values_dict:\n              if key in self.CLI_ARGS_KEY:\n                  values_dict[key] = self.CLI_ARGS_KEY[key]\n          return values_dict\n\n\n      def _convert_cli_args(self, args_dict, values_dict):\n          \n          for key, value in args_dict.items():\n              if key in self.CLI_ARGS_KEY:\n                  value = self.CLI_ARGS_KEY[key](value)\n              values_dict[key] = value\n          return values_dict\n\n      def _convert_non_cli_args(self, parser_name, values_dict):\n          '''Casts arguments to correct types by modifying values_dict param.'"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):          \n          for key in values_dict:\n              if key in self.CLI_ARGS_KEY:\n                  values_dict[key] = self.CLI_ARGS_KEY[key]\n          return values_dict\n\n\n      def _convert_cli_args(self, args_dict, values_dict):\n          \n          for key, value in args_dict.items():\n              if key in self.CLI_ARGS_KEY:\n                  value = self.CLI_ARGS_KEY[key](value)\n              values_dict[key] = value\n          return values_dict\n\n      def _convert_non_cli_args(self, parser_name, values_dict):\n          '''Casts arguments to correct types by modifying values_dict param.'", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):      \n          files_to_add = []\n          for filename in os.listdir(plugin_dir):\n              if not filename.endswith('.py'): continue\n              if filename.startswith('.'): continue\n              if filename.startswith('_'): continue\n              if filename.endswith('.spec'):\n                  plugin_spec = self.get_plugin_spec_flatten(plugin_dir, filename)\n                  files_to_add.append(plugin_spec)\n          return flatten(files_to_add)\n\n      def get_plugin_spec_flatten(self, plugin_dir, filename):\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):      \n          files_to_add = []\n          for filename in os.listdir(plugin_dir):\n              if not filename.endswith('.py'): continue\n              if filename.startswith('.'): continue\n              if filename.startswith('_'): continue\n              if filename.endswith('.spec'):\n                  plugin_spec = self.get_plugin_spec_flatten(plugin_dir, filename)\n                  files_to_add.append(plugin_spec)\n          return flatten(files_to_add)\n\n      def get_plugin_spec_flatten(self, plugin_dir, filename):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):          \n          if self.config_path is None:\n              return\n          self.check_output(['echo', '-e', '{}'.format(self.config_path)], stdout=subprocess.PIPE)\n          self.check_output(['echo', '-e', '{}'.format(self.config_path)], stderr=subprocess.CALL_FUP)\n          os.environ[self.config_path] = '{}'.format(self.config_path)\n\n      def check_output(self, args, stdout=None, stderr=None):\n          \n          if stdout is"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):          \n          if self.config_path is None:\n              return\n          self.check_output(['echo', '-e', '{}'.format(self.config_path)], stdout=subprocess.PIPE)\n          self.check_output(['echo', '-e', '{}'.format(self.config_path)], stderr=subprocess.CALL_FUP)\n          os.environ[self.config_path] = '{}'.format(self.config_path)\n\n      def check_output(self, args, stdout=None, stderr=None):\n          \n          if stdout is", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):          \n          self.add_argument(\n              \"--spec\",\n              dest=\"spec\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-dir\",\n              dest=\"spec_dir\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-ext\",\n              dest=\"spec_ext\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-type\",\n              dest=\"spec_type\",\n              help=\"spec type\",\n              choices=[\"docker"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):          \n          self.add_argument(\n              \"--spec\",\n              dest=\"spec\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-dir\",\n              dest=\"spec_dir\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-ext\",\n              dest=\"spec_ext\",\n              help=\"spec file in yaml format with the config for the platform\",\n              required=False,\n          )\n          self.add_argument(\n              \"--spec-type\",\n              dest=\"spec_type\",\n              help=\"spec type\",\n              choices=[\"docker", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):          \n          if root is None:\n              return path\n          if root == self.root:\n              return path\n          if root[:len(self.root)] == self.root:\n              return path\n          while path and path[0] and path[0]!= self.root:\n              path = path[1:]\n          if path:\n              return path\n          return os.path.join(root, path)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):          \n          if root is None:\n              return path\n          if root == self.root:\n              return path\n          if root[:len(self.root)] == self.root:\n              return path\n          while path and path[0] and path[0]!= self.root:\n              path = path[1:]\n          if path:\n              return path\n          return os.path.join(root, path)\n", "is_pass": false, "return_code": 1}]}
