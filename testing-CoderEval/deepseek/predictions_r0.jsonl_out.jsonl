{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \n    from datetime import datetime\n    from dateutil.tz import tzutil\n    import pytz\n    if tz is None:\n        tz = pytz.utc\n    if isinstance(nanoseconds, int):\n        nanoseconds = str(nanoseconds)\n    if isinstance(nanoseconds, datetime):\n        return nanoseconds.replace(tzinfo=tz)\n    else:\n        return datetime.fromtimestamp(int(nanoseconds) / 1e9, tz)\n\n\ndef hydrate_timestamp(timestamp, tz=None):\n    \n    from datetime import datetime\n    from dateutil.tz import tzutil\n    import pytz\n    if tz is None:\n        tz = pytz.ut"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \n    from datetime import datetime\n    from dateutil.tz import tzutil\n    import pytz\n    if tz is None:\n        tz = pytz.utc\n    if isinstance(nanoseconds, int):\n        nanoseconds = str(nanoseconds)\n    if isinstance(nanoseconds, datetime):\n        return nanoseconds.replace(tzinfo=tz)\n    else:\n        return datetime.fromtimestamp(int(nanoseconds) / 1e9, tz)\n\n\ndef hydrate_timestamp(timestamp, tz=None):\n    \n    from datetime import datetime\n    from dateutil.tz import tzutil\n    import pytz\n    if tz is None:\n        tz = pytz.ut", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \n    return value.total_seconds()\n\ndef hydrate_timedelta(value):\n    \n    return timedelta(seconds=value)"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \n    return value.total_seconds()\n\ndef hydrate_timedelta(value):\n    \n    return timedelta(seconds=value)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \n    return value.strftime('%b %-d %Y %H:%M:%S')\n\n\ndef dehydrate_user(value):\n    \n    return {\n        'id': value.id,\n        'username': value.username,\n        'email': value.email,\n        'created_at': value.created_at,\n    }\n\n\ndef dehydrate_message(value):\n    \n    return {\n        'id': value.id,\n        'message': value.message,\n        'created_at': value.created_at,\n        'user': dehydrate_user(value.user),\n    }\n\n\ndef dehydrate_comment(value):\n   "], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \n    return value.strftime('%b %-d %Y %H:%M:%S')\n\n\ndef dehydrate_user(value):\n    \n    return {\n        'id': value.id,\n        'username': value.username,\n        'email': value.email,\n        'created_at': value.created_at,\n    }\n\n\ndef dehydrate_message(value):\n    \n    return {\n        'id': value.id,\n        'message': value.message,\n        'created_at': value.created_at,\n        'user': dehydrate_user(value.user),\n    }\n\n\ndef dehydrate_comment(value):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    \n    return [value.x, value.y]\n\n\ndef hydrate_point(value):\n    \n    return Point(value[0], value[1])\n\n\ndef dehydrate_rect(value):\n    \n    return [value.x, value.y, value.width, value.height]\n\n\ndef hydrate_rect(value):\n    \n    return Rect(value[0], value[1], value[2], value[3])\n\n\ndef dehydrate_polyline(value):\n    \n    return [[point.x, point.y] for point in value]\n\n\ndef hydrate_"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    \n    return [value.x, value.y]\n\n\ndef hydrate_point(value):\n    \n    return Point(value[0], value[1])\n\n\ndef dehydrate_rect(value):\n    \n    return [value.x, value.y, value.width, value.height]\n\n\ndef hydrate_rect(value):\n    \n    return Rect(value[0], value[1], value[2], value[3])\n\n\ndef dehydrate_polyline(value):\n    \n    return [[point.x, point.y] for point in value]\n\n\ndef hydrate_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n        \n        return self._record.keys()\n\n    def __getitem__(self, key):\n        \n        return self._record[key]\n\n    def __setitem__(self, key, value):\n        \n        self._record[key] = value\n\n    def __delitem__(self, key):\n        \n        del self._record[key]\n\n    def __iter__(self):\n        \n        return iter(self._record)\n\n    def __len__(self):\n        \n        return len(self._record)\n\n    def __repr__(self):\n        '''"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n        \n        return self._record.keys()\n\n    def __getitem__(self, key):\n        \n        return self._record[key]\n\n    def __setitem__(self, key, value):\n        \n        self._record[key] = value\n\n    def __delitem__(self, key):\n        \n        del self._record[key]\n\n    def __iter__(self):\n        \n        return iter(self._record)\n\n    def __len__(self):\n        \n        return len(self._record)\n\n    def __repr__(self):\n        '''", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        protocol_version = protocol_version or cls.PROTOCOL_VERSION\n        return {\n            protocol_version: cls\n        }\n\n    def __init__(self, *args, **kwargs):\n        '''Initialize a new protocol handler.\n        '''\n        super(ProtocolHandler, self).__init__(*args, **kwargs)\n        self._handler_cls = None\n\n    def __init_subclass__(cls, *args, **kwargs):\n        '''Initialize a new protocol handler.\n        '''\n        if not getattr(cls, '_handler_cls', None):\n            cls._handler_cls = cls\n        super(ProtocolHandler, self).__init_subclass__(*args, **kwargs)\n\n    @classmethod\n    def supported_versions(cls):\n        '''Return a list of supported Bolt protocol"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        protocol_version = protocol_version or cls.PROTOCOL_VERSION\n        return {\n            protocol_version: cls\n        }\n\n    def __init__(self, *args, **kwargs):\n        '''Initialize a new protocol handler.\n        '''\n        super(ProtocolHandler, self).__init__(*args, **kwargs)\n        self._handler_cls = None\n\n    def __init_subclass__(cls, *args, **kwargs):\n        '''Initialize a new protocol handler.\n        '''\n        if not getattr(cls, '_handler_cls', None):\n            cls._handler_cls = cls\n        super(ProtocolHandler, self).__init_subclass__(*args, **kwargs)\n\n    @classmethod\n    def supported_versions(cls):\n        '''Return a list of supported Bolt protocol", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            context = kwargs.get('context', None)\n            if metadata is not None:\n                kwargs['metadata'] = metadata\n            if timeout is not None:\n                kwargs['timeout'] = timeout\n            try:\n                return func(*args, **kwargs)\n            except Exception, e:\n                context.abort()\n                raise e\n            finally:\n                context.commit()\n        return wrapper\n    return decorator\n\ndef get_session(context):\n    \n    return context.session\n\ndef get_unit_of_work(context):\n    \n    return context.unit_of_work\n\ndef get_transaction(context):"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            context = kwargs.get('context', None)\n            if metadata is not None:\n                kwargs['metadata'] = metadata\n            if timeout is not None:\n                kwargs['timeout'] = timeout\n            try:\n                return func(*args, **kwargs)\n            except Exception, e:\n                context.abort()\n                raise e\n            finally:\n                context.commit()\n        return wrapper\n    return decorator\n\ndef get_session(context):\n    \n    return context.session\n\ndef get_unit_of_work(context):\n    \n    return context.unit_of_work\n\ndef get_transaction(context):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n        \n        if key in self._data:\n            return self._data[key]\n        return None\n\n    def __setitem__(self, key, value):\n        \n        self._data[key] = value\n\n    def __delitem__(self, key):\n        \n        del self._data[key]\n\n\nclass _DefaultDict(dict):\n    \n\n    def __init__(self, default_value):\n        \n        self._default_value = default_value\n\n    def __getitem__(self, key):\n        '''Return the value associated with the given key.\n        Return the default value if the key is not in the dict.'''\n        if key"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n        \n        if key in self._data:\n            return self._data[key]\n        return None\n\n    def __setitem__(self, key, value):\n        \n        self._data[key] = value\n\n    def __delitem__(self, key):\n        \n        del self._data[key]\n\n\nclass _DefaultDict(dict):\n    \n\n    def __init__(self, default_value):\n        \n        self._default_value = default_value\n\n    def __getitem__(self, key):\n        '''Return the value associated with the given key.\n        Return the default value if the key is not in the dict.'''\n        if key", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n        \n        if len(keys) == 0:\n            return self.values\n        else:\n            return [self.values[key] for key in keys]"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n        \n        if len(keys) == 0:\n            return self.values\n        else:\n            return [self.values[key] for key in keys]", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n        \n        return dict(zip(keys, self.values()))"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n        \n        return dict(zip(keys, self.values()))", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n        \n        self.seek(-2, 1)\n        return self.read_u16()\n\n    def pop_u32(self):\n        \n        self.seek(-4, 1)\n        return self.read_u32()\n\n    def pop_u64(self):\n        \n        self.seek(-8, 1)\n        return self.read_u64()\n\n    def pop_s16(self):\n        \n        self.seek(-2,"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n        \n        self.seek(-2, 1)\n        return self.read_u16()\n\n    def pop_u32(self):\n        \n        self.seek(-4, 1)\n        return self.read_u32()\n\n    def pop_u64(self):\n        \n        self.seek(-8, 1)\n        return self.read_u64()\n\n    def pop_s16(self):\n        \n        self.seek(-2,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.q.append(dict(\n            type='DISCARD',\n            n=n,\n            qid=qid,\n            handlers=handlers\n            ))\n        if dehydration_hooks:\n            self.dehydration_hooks += dehydration_hooks\n        if hydration_hooks:\n            self.hydration_hooks += hydration_hooks"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.q.append(dict(\n            type='DISCARD',\n            n=n,\n            qid=qid,\n            handlers=handlers\n            ))\n        if dehydration_hooks:\n            self.dehydration_hooks += dehydration_hooks\n        if hydration_hooks:\n            self.hydration_hooks += hydration_hooks", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        self.write('%s %s\\r\\n' % (mode or 'BEGIN', self.db_name))\n        self.flush()\n        for key, value in (('bookmarks', bookmarks) if bookmarks else ()):\n            if key in ('db', 'imp_user'):\n                value = self.dehydrate_field(key, value)\n            if value is not None:\n                self.write('%s %s\\r\\n' % (key, value))\n                self.flush()\n        if metadata:\n            self.write('metadata %s\\r\\n' % metadata)\n            self.flush()\n        if timeout:\n            self.write('timeout %s\\r\\n' % timeout)\n            self.flush()\n        if db:\n            self.write('db %s\\r"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        self.write('%s %s\\r\\n' % (mode or 'BEGIN', self.db_name))\n        self.flush()\n        for key, value in (('bookmarks', bookmarks) if bookmarks else ()):\n            if key in ('db', 'imp_user'):\n                value = self.dehydrate_field(key, value)\n            if value is not None:\n                self.write('%s %s\\r\\n' % (key, value))\n                self.flush()\n        if metadata:\n            self.write('metadata %s\\r\\n' % metadata)\n            self.flush()\n        if timeout:\n            self.write('timeout %s\\r\\n' % timeout)\n            self.flush()\n        if db:\n            self.write('db %s\\r", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \n    return round(n + (0.5 - abs(0.5 - n % 1)))\n\n\ndef round_half_up(n):\n    \n    return round(n + (0.5 - abs(0.5 - n % 1)))\n\n\ndef round_half_down(n):\n    '''>>> round_half_down(3"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \n    return round(n + (0.5 - abs(0.5 - n % 1)))\n\n\ndef round_half_up(n):\n    \n    return round(n + (0.5 - abs(0.5 - n % 1)))\n\n\ndef round_half_down(n):\n    '''>>> round_half_down(3", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    \n    klass = type(name, (Point,), {})\n\n    for field in fields:\n        setattr(klass, field, fields[field])\n\n    setattr(klass, 'srid', srid_map[name])\n\n    return klass\n\n\ndef get_point_type(name, fields, srid_map):\n    \n    try:\n        return point_type(name, fields, srid_map)\n    except KeyError:\n        return None\n\n\ndef get_srid(name):\n    \n    srid_map ="], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    \n    klass = type(name, (Point,), {})\n\n    for field in fields:\n        setattr(klass, field, fields[field])\n\n    setattr(klass, 'srid', srid_map[name])\n\n    return klass\n\n\ndef get_point_type(name, fields, srid_map):\n    \n    try:\n        return point_type(name, fields, srid_map)\n    except KeyError:\n        return None\n\n\ndef get_srid(name):\n    \n    srid_map =", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    \n    def decorator(func):\n        def deprecated_func(*args, **kwargs):\n            print(message)\n            return func(*args, **kwargs)\n        return deprecated_func\n    return decorator\n\n\n@deprecated('This function is deprecated. Use new_function instead')\ndef old_function(x):\n    return x + 1\n\n\nold_function(1)"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    \n    def decorator(func):\n        def deprecated_func(*args, **kwargs):\n            print(message)\n            return func(*args, **kwargs)\n        return deprecated_func\n    return decorator\n\n\n@deprecated('This function is deprecated. Use new_function instead')\ndef old_function(x):\n    return x + 1\n\n\nold_function(1)", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n    R_OPTIONS = \"--vanilla\"\n    R_CODE = f'''\n    {code}\n    '''\n    '''\n    %env R_LIBS = {R_LIBS}\n    %env R_LIBS_USER = {R_LIBS_USER}\n    %env R_LIBS_SITE = {R_LIBS_SITE}\n    %env R_LIBS_BIN = {R_LIBS_BIN}\n    %env R_LIBS_DIR = {R_LIBS_DIR}\n    %env R_LIBS_SITE = {R_LIBS_SITE}\n    %env R_LIBS_BIN = {R_LIBS_BIN}\n    %env R_"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n    R_OPTIONS = \"--vanilla\"\n    R_CODE = f'''\n    {code}\n    '''\n    '''\n    %env R_LIBS = {R_LIBS}\n    %env R_LIBS_USER = {R_LIBS_USER}\n    %env R_LIBS_SITE = {R_LIBS_SITE}\n    %env R_LIBS_BIN = {R_LIBS_BIN}\n    %env R_LIBS_DIR = {R_LIBS_DIR}\n    %env R_LIBS_SITE = {R_LIBS_SITE}\n    %env R_LIBS_BIN = {R_LIBS_BIN}\n    %env R_", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    if target_concurrency == 1:\n        cmd = cmd + (varargs,)\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        proc.wait()\n        return proc.returncode, proc.stdout.read()\n    else:\n        with multiprocessing.Pool(target_concurrency) as pool:\n            return pool.starmap(\n                xargs,\n                (\n                    (cmd, varargs, kwargs)\n                    for varargs in _split_varargs(varargs, _max_length)\n                ),\n            )\n\n\ndef _get_platform_max_length() -> int:"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    if target_concurrency == 1:\n        cmd = cmd + (varargs,)\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        proc.wait()\n        return proc.returncode, proc.stdout.read()\n    else:\n        with multiprocessing.Pool(target_concurrency) as pool:\n            return pool.starmap(\n                xargs,\n                (\n                    (cmd, varargs, kwargs)\n                    for varargs in _split_varargs(varargs, _max_length)\n                ),\n            )\n\n\ndef _get_platform_max_length() -> int:", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    return [val for _, val in sorted((random.random(), val) for val in seq)]\n\n\ndef _get_name_from_url(url: str) -> str:\n    \n    return url.split('/')[-1].replace('.jpg', '')\n\nimport time\nfrom typing import Optional, Union, Any\nfrom pathlib import Path\nimport argparse\n\nimport requests\nfrom PIL import Image\n\nfrom src.colors import Colors\nfrom src.utils import _get_name_from_url, _shuffled\n\n\ndef _get_args() -> argparse.Namespace:\n    \n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('--verbose', action='store"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    return [val for _, val in sorted((random.random(), val) for val in seq)]\n\n\ndef _get_name_from_url(url: str) -> str:\n    \n    return url.split('/')[-1].replace('.jpg', '')\n\nimport time\nfrom typing import Optional, Union, Any\nfrom pathlib import Path\nimport argparse\n\nimport requests\nfrom PIL import Image\n\nfrom src.colors import Colors\nfrom src.utils import _get_name_from_url, _shuffled\n\n\ndef _get_args() -> argparse.Namespace:\n    \n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('--verbose', action='store", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int, ...]:\n    \n    s = s.replace(' ', '')\n    parts = s.split('.')\n    return tuple(map(int, parts))\n\n\ndef compare_versions(a: str, b: str) -> int:\n    \n    a = parse_version(a)\n    b = parse_version(b)\n    a_len = len(a)\n    b_len = len(b)\n    for i in range(min(a_len, b_len)):\n        if a[i] > b[i]:\n            return 1\n        elif a[i] < b[i]:\n            return -1\n    if a_len > b_len:\n        return 1\n    elif a_len < b_len:\n        return -1\n    return 0\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    s = s.replace(' ', '')\n    parts = s.split('.')\n    return tuple(map(int, parts))\n\n\ndef compare_versions(a: str, b: str) -> int:\n    \n    a = parse_version(a)\n    b = parse_version(b)\n    a_len = len(a)\n    b_len = len(b)\n    for i in range(min(a_len, b_len)):\n        if a[i] > b[i]:\n            return 1\n        elif a[i] < b[i]:\n            return -1\n    if a_len > b_len:\n        return 1\n    elif a_len < b_len:\n        return -1\n    return 0\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n\n    if sys.platform == 'win32':\n        cmd = [cmd[0]] + ['\\\\' + c for c in cmd[1:]]\n    return cmd\n\n\ndef main() -> None:\n    \n\n    cmd: tuple[str, ...] = sys.argv[1:]\n    cmd = normalize_cmd(cmd)\n    if cmd[0] == 'python':\n        cmd = ['pythonw', '-m', 'PyInstaller', '--onefile', '--noconsole', '--clean', '--name', 'Vault', 'main.py']\n    subprocess.run(cmd)\n\n\nif __name__ == '__main__':\n    main()"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n\n    if sys.platform == 'win32':\n        cmd = [cmd[0]] + ['\\\\' + c for c in cmd[1:]]\n    return cmd\n\n\ndef main() -> None:\n    \n\n    cmd: tuple[str, ...] = sys.argv[1:]\n    cmd = normalize_cmd(cmd)\n    if cmd[0] == 'python':\n        cmd = ['pythonw', '-m', 'PyInstaller', '--onefile', '--noconsole', '--clean', '--name', 'Vault', 'main.py']\n    subprocess.run(cmd)\n\n\nif __name__ == '__main__':\n    main()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \n    def decorate(f):\n        def memoized(*args, **kw):\n            try:\n                cache_value = cache[key(*args, **kw)]\n            except KeyError:\n                cache_value = cache_value = f(*args, **kw)\n                cache[key(*args, **kw)] = cache_value\n            return cache_value\n        return memoized\n    return decorate\n\ndef hashkey(*args, **kw):\n    \n    return tuple(sorted(args) + sorted(kw.items()))\n\ndef hashable(key):\n    \n    if isinstance(key, basestring):\n        return str(key)\n    elif isinstance(key, tuple):\n        return tuple"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    def decorate(f):\n        def memoized(*args, **kw):\n            try:\n                cache_value = cache[key(*args, **kw)]\n            except KeyError:\n                cache_value = cache_value = f(*args, **kw)\n                cache[key(*args, **kw)] = cache_value\n            return cache_value\n        return memoized\n    return decorate\n\ndef hashkey(*args, **kw):\n    \n    return tuple(sorted(args) + sorted(kw.items()))\n\ndef hashable(key):\n    \n    if isinstance(key, basestring):\n        return str(key)\n    elif isinstance(key, tuple):\n        return tuple", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def decorator(func):\n        cache = lru_cache(maxsize, ttl, timer, typed)\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if cache.hits(args, kwargs):\n                return cache.get(args, kwargs)\n            result = func(*args, **kwargs)\n            cache.set(args, kwargs, result)\n            return result\n        return wrapper\n    return decorator\n\n\ndef lru_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def cache(func):\n        cache = LRU(maxsize, ttl, timer, typed)\n        @"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def decorator(func):\n        cache = lru_cache(maxsize, ttl, timer, typed)\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if cache.hits(args, kwargs):\n                return cache.get(args, kwargs)\n            result = func(*args, **kwargs)\n            cache.set(args, kwargs, result)\n            return result\n        return wrapper\n    return decorator\n\n\ndef lru_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def cache(func):\n        cache = LRU(maxsize, ttl, timer, typed)\n        @", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    \n\n    def decorator(func):\n        from functools import update_wrapper\n        from collections import OrderedDict\n\n        class Cache:\n            def __init__(self):\n                self.maxsize = maxsize\n                self.cache = OrderedDict()\n\n            def __getitem__(self, key):\n                try:\n                    return self.cache.pop(key)\n                except KeyError:\n                    return None\n\n            def __setitem__(self, key, value):\n                try:\n                    self.cache.pop(key)\n                except KeyError:\n                    pass\n                self.cache[key] = value\n                if len(self.cache) > self.maxsize:\n                    self.cache.popitem(last=False)\n\n        def wrapper(*args, **kw):\n            key = (func.__name"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \n\n    def decorator(func):\n        from functools import update_wrapper\n        from collections import OrderedDict\n\n        class Cache:\n            def __init__(self):\n                self.maxsize = maxsize\n                self.cache = OrderedDict()\n\n            def __getitem__(self, key):\n                try:\n                    return self.cache.pop(key)\n                except KeyError:\n                    return None\n\n            def __setitem__(self, key, value):\n                try:\n                    self.cache.pop(key)\n                except KeyError:\n                    pass\n                self.cache[key] = value\n                if len(self.cache) > self.maxsize:\n                    self.cache.popitem(last=False)\n\n        def wrapper(*args, **kw):\n            key = (func.__name", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    \n    from functools import wraps\n    from collections import OrderedDict\n    cache = OrderedDict()\n\n    def memoize(func):\n        @wraps(func)\n        def memoizer(*args, **kw):\n            key = (func.__name__, str(args), str(kw))\n            if key in cache:\n                return cache[key]\n            else:\n                val = func(*args, **kw)\n                cache[key] = val\n                if len(cache) > maxsize:\n                    cache.popitem(last=False)\n                return val\n        return memoizer\n    return memoize\n\n\ndef _extract_signature(func):\n    \n    from inspect import signature\n    return signature(func)\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \n    from functools import wraps\n    from collections import OrderedDict\n    cache = OrderedDict()\n\n    def memoize(func):\n        @wraps(func)\n        def memoizer(*args, **kw):\n            key = (func.__name__, str(args), str(kw))\n            if key in cache:\n                return cache[key]\n            else:\n                val = func(*args, **kw)\n                cache[key] = val\n                if len(cache) > maxsize:\n                    cache.popitem(last=False)\n                return val\n        return memoizer\n    return memoize\n\n\ndef _extract_signature(func):\n    \n    from inspect import signature\n    return signature(func)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize <= 0:\n        raise ValueError('maxsize must be positive')\n    cache = LFUCache(maxsize, typed)\n    return cache.memoize\n\n\nclass LFUCache:\n    \"\"\"A cache-like object that stores the results of a function\n    call for a limited number of calls.\n    \"\"\"\n\n    def __init__(self, maxsize=128, typed=False):\n        \"\"\"\n        Create a new cache.\n\n        :param maxsize: The maximum number of results to keep.\n        :param typed: True if the keys in the cache are expected to be instances of a particular type.\n        \"\"\"\n        self.maxsize = maxsize\n        self.typed = typed\n        self.items = {}\n        self.frequencies = {}\n        self.current_frequency = 0\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize <= 0:\n        raise ValueError('maxsize must be positive')\n    cache = LFUCache(maxsize, typed)\n    return cache.memoize\n\n\nclass LFUCache:\n    \"\"\"A cache-like object that stores the results of a function\n    call for a limited number of calls.\n    \"\"\"\n\n    def __init__(self, maxsize=128, typed=False):\n        \"\"\"\n        Create a new cache.\n\n        :param maxsize: The maximum number of results to keep.\n        :param typed: True if the keys in the cache are expected to be instances of a particular type.\n        \"\"\"\n        self.maxsize = maxsize\n        self.typed = typed\n        self.items = {}\n        self.frequencies = {}\n        self.current_frequency = 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n        \n        if not self:\n            raise KeyError('pop from an empty stack')\n        value = self._items[-1]\n        del self._items[-1]\n        return value\n\ndef getitem(self, key):\n    \n    index = self._find_index(key)\n    if index == -1:\n        raise KeyError('No such key: ' + repr(key))\n    return self._items[index]\n\ndef __setitem__(self, key, value):\n    \n    index = self._find_index(key)\n    if index == -1:\n        raise KeyError('No such key: ' + repr(key))\n    self._items["], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if not self:\n            raise KeyError('pop from an empty stack')\n        value = self._items[-1]\n        del self._items[-1]\n        return value\n\ndef getitem(self, key):\n    \n    index = self._find_index(key)\n    if index == -1:\n        raise KeyError('No such key: ' + repr(key))\n    return self._items[index]\n\ndef __setitem__(self, key, value):\n    \n    index = self._find_index(key)\n    if index == -1:\n        raise KeyError('No such key: ' + repr(key))\n    self._items[", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n\ndef setdefault_list(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return [default]\n\n\ndef setdefault_dict(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key]"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return default\n\n\ndef setdefault_list(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n            return [default]\n\n\ndef setdefault_dict(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            self[key]", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n        \n        return self.get(key, default)\n    \ndef get_or_set(self, key, default=None):\n    \n    return self.get(key, default)\n\n\ndef get_all(self):\n    \n    return self.__dict__\n\n\ndef get_attr(self, attr):\n    \n    return getattr(self, attr)\n\n\ndef set(self, key, value):\n    \n    return self.setdefault(key, value)\n\n\ndef"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n        \n        return self.get(key, default)\n    \ndef get_or_set(self, key, default=None):\n    \n    return self.get(key, default)\n\n\ndef get_all(self):\n    \n    return self.__dict__\n\n\ndef get_attr(self, attr):\n    \n    return getattr(self, attr)\n\n\ndef set(self, key, value):\n    \n    return self.setdefault(key, value)\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \n    def wrapper(func):\n        return cachedmethod.decorate(func, cache, key, lock)\n    return wrapper\n\ndef cachedmethod_factory(cache=None):\n    \n    return cachedmethod(cache)"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    def wrapper(func):\n        return cachedmethod.decorate(func, cache, key, lock)\n    return wrapper\n\ndef cachedmethod_factory(cache=None):\n    \n    return cachedmethod(cache)", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = [cls._extostr(e, max_level, max_path_level)]\n        if type(e.__cause__) != type(e):\n            path.append('Caused by:')\n            path.extend(cls._extostr(e.__cause__, max_level, 0))\n        return '\\n'.join(path)\n\n    @classmethod\n    def _extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = []\n        if max_path_level > 0:\n            path.extend(cls._extostr(e.__context__, max_level, max_path_level - 1))\n        path.append(str(e))\n        if max_level > 0:\n            if"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = [cls._extostr(e, max_level, max_path_level)]\n        if type(e.__cause__) != type(e):\n            path.append('Caused by:')\n            path.extend(cls._extostr(e.__cause__, max_level, 0))\n        return '\\n'.join(path)\n\n    @classmethod\n    def _extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = []\n        if max_path_level > 0:\n            path.extend(cls._extostr(e.__context__, max_level, max_path_level - 1))\n        path.append(str(e))\n        if max_level > 0:\n            if", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        file_object = None\n        try:\n            file_object = open(file_name, 'ab' if overwrite else 'a')\n            file_object.write(text_buffer)\n        except:\n            raise\n        finally:\n            if file_object:\n                file_object.close()\n\n    def read_file(self, file_name, encoding='utf-8'):\n        '''Read the contents of the specified file.\n        :param file_name:\n        :param encoding:\n        :return:\n        '''\n        file_stream = None\n        try:\n            file_stream = open(file_name, 'rb')\n            return file_stream.read()\n        except:\n            raise\n        finally:\n            if file_stream:\n                file_stream.close()\n\n    def read_"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        file_object = None\n        try:\n            file_object = open(file_name, 'ab' if overwrite else 'a')\n            file_object.write(text_buffer)\n        except:\n            raise\n        finally:\n            if file_object:\n                file_object.close()\n\n    def read_file(self, file_name, encoding='utf-8'):\n        '''Read the contents of the specified file.\n        :param file_name:\n        :param encoding:\n        :return:\n        '''\n        file_stream = None\n        try:\n            file_stream = open(file_name, 'rb')\n            return file_stream.read()\n        except:\n            raise\n        finally:\n            if file_stream:\n                file_stream.close()\n\n    def read_", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        with open(file_name, 'r', encoding=encoding) as file:\n            return file.read()\n\n\nclass HtmlParser:\n    '''\n    Parse HTML pages to extract useful information for the user.\n    '''\n\n    def __init__(self, file_name, encoding):\n        self.file_name = file_name\n        self.encoding = encoding\n        self.text = HtmlParser.file_to_textbuffer(file_name, encoding)\n        self.soup = BeautifulSoup(self.text, \"html.parser\")\n\n    def _get_title(self):\n        '''\n        Return the title of the page.\n        '''\n        title = self.soup.find(\"title\")\n        if title:\n            return title.string\n        return None\n\n    def _get"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        with open(file_name, 'r', encoding=encoding) as file:\n            return file.read()\n\n\nclass HtmlParser:\n    '''\n    Parse HTML pages to extract useful information for the user.\n    '''\n\n    def __init__(self, file_name, encoding):\n        self.file_name = file_name\n        self.encoding = encoding\n        self.text = HtmlParser.file_to_textbuffer(file_name, encoding)\n        self.soup = BeautifulSoup(self.text, \"html.parser\")\n\n    def _get_title(self):\n        '''\n        Return the title of the page.\n        '''\n        title = self.soup.find(\"title\")\n        if title:\n            return title.string\n        return None\n\n    def _get", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod\n    def is_file_exist(file_name):\n        \n        return os.path.isfile(file_name)\n\n    @staticmethod\n    def get_file_size(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n        return os.path.getsize(file_name)\n\n    @staticmethod\n    def get_file_mtime(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n        return os.path.getmtime(file_name)\n\n    @staticmethod\n    def get_file_ctime(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n       "], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def is_file_exist(file_name):\n        \n        return os.path.isfile(file_name)\n\n    @staticmethod\n    def get_file_size(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n        return os.path.getsize(file_name)\n\n    @staticmethod\n    def get_file_mtime(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n        return os.path.getmtime(file_name)\n\n    @staticmethod\n    def get_file_ctime(file_name):\n        \n        if not os.path.isfile(file_name):\n            return 0\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod\n    def _reset_logging(cls):\n        \n        cls._log_level = None\n        cls._log_path = None\n\n    @classmethod\n    def _setup_logging(cls):\n        \n        logger.setLevel(cls._log_level)\n        if cls._log_path:\n            fh = logging.FileHandler(cls._log_path)\n            fh.setLevel(cls._log_level)\n            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n            fh.setFormatter(formatter)\n            logger.addHandler(fh)\n\n    def __init__(self, name: str, log_level: str, log_path: str=None):\n        \n        self.name ="], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod\n    def _reset_logging(cls):\n        \n        cls._log_level = None\n        cls._log_path = None\n\n    @classmethod\n    def _setup_logging(cls):\n        \n        logger.setLevel(cls._log_level)\n        if cls._log_path:\n            fh = logging.FileHandler(cls._log_path)\n            fh.setLevel(cls._log_level)\n            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n            fh.setFormatter(formatter)\n            logger.addHandler(fh)\n\n    def __init__(self, name: str, log_level: str, log_path: str=None):\n        \n        self.name =", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n        \n        return 'Py'\n\n\n\nclass FallbackPy(object):\n    def __init__(self, *args, **kwargs):\n        pass\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(cls)\n    def __getattr__(self, name):\n        return getattr(self, name)\n    def __setattr__(self, name, value):\n        setattr(self, name, value)\n\n\nclass FallbackPy2(FallbackPy):\n    def __init__(self, *args, **kwargs):\n        super"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n        \n        return 'Py'\n\n\n\nclass FallbackPy(object):\n    def __init__(self, *args, **kwargs):\n        pass\n    def __new__(cls, *args, **kwargs):\n        return object.__new__(cls)\n    def __getattr__(self, name):\n        return getattr(self, name)\n    def __setattr__(self, name, value):\n        setattr(self, name, value)\n\n\nclass FallbackPy2(FallbackPy):\n    def __init__(self, *args, **kwargs):\n        super", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \n    new_orderings = []\n    for ordering in orderings:\n        for o in ordering:\n            new_orderings.append(o)\n    return new_orderings\n\n\ndef _legacy_mergeOrderingsAndBuckets(orderings, buckets):\n    \n    new_orderings = []\n    for ordering in orderings:\n        for o in ordering:\n            new_orderings.append(o)\n    for bucket in buckets:\n        new_orderings.append(bucket)\n    return new_orderings\n\n\ndef _legacy_mergeOrderingsAndBucketsWithRank(orderings, buckets,\n                                             ranks):\n    \n    new_"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \n    new_orderings = []\n    for ordering in orderings:\n        for o in ordering:\n            new_orderings.append(o)\n    return new_orderings\n\n\ndef _legacy_mergeOrderingsAndBuckets(orderings, buckets):\n    \n    new_orderings = []\n    for ordering in orderings:\n        for o in ordering:\n            new_orderings.append(o)\n    for bucket in buckets:\n        new_orderings.append(bucket)\n    return new_orderings\n\n\ndef _legacy_mergeOrderingsAndBucketsWithRank(orderings, buckets,\n                                             ranks):\n    \n    new_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n\n import sys\n\n def getProvidedInterfaces(object):\n  \n  try:\n   return set(object.__bases__)\n  except AttributeError:\n   return set(object.getProvidedInterfaces())\n\n def findDirectlyProvidedBy(object):\n  \n  return getProvidedInterfaces(object) - getProvidedInterfaces(sys.modules[object.__module__])\n\n def findProvidedBy(object):\n  \n  return getProvidedInterfaces(object)\n\n def findBothProvidedBy(object):\n  \n  return getProvidedInterfaces(object) - get"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n\n import sys\n\n def getProvidedInterfaces(object):\n  \n  try:\n   return set(object.__bases__)\n  except AttributeError:\n   return set(object.getProvidedInterfaces())\n\n def findDirectlyProvidedBy(object):\n  \n  return getProvidedInterfaces(object) - getProvidedInterfaces(sys.modules[object.__module__])\n\n def findProvidedBy(object):\n  \n  return getProvidedInterfaces(object)\n\n def findBothProvidedBy(object):\n  \n  return getProvidedInterfaces(object) - get", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n    seen = set()\n    result = []\n    for cls in classes:\n        if cls in seen:\n            continue\n        result.append(cls)\n        seen.add(cls)\n        for parent in cls.__bases__:\n            result.append(parent)\n            seen.add(parent)\n    return result\n\n\ndef flatten(array):\n    \n    result = []\n    for element in array:\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n    seen = set()\n    result = []\n    for cls in classes:\n        if cls in seen:\n            continue\n        result.append(cls)\n        seen.add(cls)\n        for parent in cls.__bases__:\n            result.append(parent)\n            seen.add(parent)\n    return result\n\n\ndef flatten(array):\n    \n    result = []\n    for element in array:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n if all:\n  return self._names + self._descriptions\n else:\n  return self._names\n\ndef setNamesAndDescriptions(self, names, descriptions):\n \n self._names = names\n self._descriptions = descriptions\n\ndef getName(self, name):\n \n return self._names[name]\n\ndef setName(self, name, value):\n \n self._names[name] = value\n\ndef getDescription(self, name):\n \n return self._descriptions[name]\n\ndef setDescription(self, name, value):\n \n self._descriptions[name] = value\n\ndef getNames(self):\n '''Return"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n if all:\n  return self._names + self._descriptions\n else:\n  return self._names\n\ndef setNamesAndDescriptions(self, names, descriptions):\n \n self._names = names\n self._descriptions = descriptions\n\ndef getName(self, name):\n \n return self._names[name]\n\ndef setName(self, name, value):\n \n self._names[name] = value\n\ndef getDescription(self, name):\n \n return self._descriptions[name]\n\ndef setDescription(self, name, value):\n \n self._descriptions[name] = value\n\ndef getNames(self):\n '''Return", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \n return self.interface_property_names(all)\n\ndef properties(self, all=False, public=False, private=False, include_interface=False):\n \n return self.interface_property_names(all, public=public, private=private)\n\ndef methods(self, all=False):\n \n return self.interface_method_names(all)\n\ndef __getattribute__(self, name):\n \n if name in self.interface_property_names():\n  return object.__getattribute__(self, name)\n elif name in self.interface_method_names():\n  return object.__getattribute__(self, name)\n else:\n  raise AttributeError(name)\n\ndef __setattr__(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \n return self.interface_property_names(all)\n\ndef properties(self, all=False, public=False, private=False, include_interface=False):\n \n return self.interface_property_names(all, public=public, private=private)\n\ndef methods(self, all=False):\n \n return self.interface_method_names(all)\n\ndef __getattribute__(self, name):\n \n if name in self.interface_property_names():\n  return object.__getattribute__(self, name)\n elif name in self.interface_method_names():\n  return object.__getattribute__(self, name)\n else:\n  raise AttributeError(name)\n\ndef __setattr__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    for arg in sequence:\n        if arg.startswith('('):\n            output.append(arg[1:-1])\n        else:\n            output.append(arg)\n    return output\n\n\ndef _normalizefuncargs(args):\n    \n    if '(' in args:\n        return args[1:-1]\n    return args\n\n\ndef _normalizetype(types):\n    \n    if types.startswith('('):\n        return types[1:-1]\n    return types\n\n\ndef _splitargs(args):\n    \n    if '(' in args:\n        return args.split('(')[::2]\n    return [args]\n\n\ndef"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    for arg in sequence:\n        if arg.startswith('('):\n            output.append(arg[1:-1])\n        else:\n            output.append(arg)\n    return output\n\n\ndef _normalizefuncargs(args):\n    \n    if '(' in args:\n        return args[1:-1]\n    return args\n\n\ndef _normalizetype(types):\n    \n    if types.startswith('('):\n        return types[1:-1]\n    return types\n\n\ndef _splitargs(args):\n    \n    if '(' in args:\n        return args.split('(')[::2]\n    return [args]\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    \n\n    try:\n        from cffi import FFI\n        return FFI()\n    except:\n        return False\n\n_c_optimizations = _c_optimizations_available()\n\n_c_optimizations_available = _c_optimizations_available\n\n_c_optimizations = _c_optimizations\n\n_c_optimizations_available = _c_optimizations_available\n\n_c_optimizations = _c_optimizations"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    \n\n    try:\n        from cffi import FFI\n        return FFI()\n    except:\n        return False\n\n_c_optimizations = _c_optimizations_available()\n\n_c_optimizations_available = _c_optimizations_available\n\n_c_optimizations = _c_optimizations\n\n_c_optimizations_available = _c_optimizations_available\n\n_c_optimizations = _c_optimizations", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    \n    return True\n\ndef _is_cython_enabled():\n    \n    return True\n\ndef _is_c_optimizations_enabled():\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    \n    return True\n\ndef _is_cython_enabled():\n    \n    return True\n\ndef _is_c_optimizations_enabled():\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    \n    return not _c_optimizations_required()\n\ndef _c_optimizations_enabled():\n    \n    return bool(getenv(\"PY_C_OPTIMIZATIONS_ENABLED\", \"0\"))\n\ndef _c_optimizations_required():\n    '''True if the current Python version has support for C optimizations,\n    but it is currently disabled.'''\n    return bool(getenv(\"PY_C_OPTIMIZATIONS_REQUIRED\", \"1\"))\n\ndef _c_optimizations_set():\n    \n    setenv(\"PY_C_OPTIMIZATIONS_ENABLED\", \"1\" if _c_optimizations_enabled() else \"0\")\n    setenv(\"PY_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    \n    return not _c_optimizations_required()\n\ndef _c_optimizations_enabled():\n    \n    return bool(getenv(\"PY_C_OPTIMIZATIONS_ENABLED\", \"0\"))\n\ndef _c_optimizations_required():\n    '''True if the current Python version has support for C optimizations,\n    but it is currently disabled.'''\n    return bool(getenv(\"PY_C_OPTIMIZATIONS_REQUIRED\", \"1\"))\n\ndef _c_optimizations_set():\n    \n    setenv(\"PY_C_OPTIMIZATIONS_ENABLED\", \"1\" if _c_optimizations_enabled() else \"0\")\n    setenv(\"PY_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    \n    return False\n\ndef _c_optimizations_required_for_debug():\n    \n    return False\n\ndef _c_optimizations_enabled(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_debug(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_release(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_debug_for_release(flags):\n    '''Return a true value if the C optimizations are"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    \n    return False\n\ndef _c_optimizations_required_for_debug():\n    \n    return False\n\ndef _c_optimizations_enabled(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_debug(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_release(flags):\n    \n    return False\n\ndef _c_optimizations_enabled_for_debug_for_release(flags):\n    '''Return a true value if the C optimizations are", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n        \n        self.clear()\n\n    def clear(self):\n        \n        self.update_idletasks()\n        self.canvas.delete(\"all\")\n\n    def update_idletasks(self):\n        \n        if not self.canvas.winfo_exists(self.window):\n            return\n        if self.canvas.itemcget(self.window, \"window\") != self.window:\n            return\n        if self.canvas.itemcget(self.window, \"children\") == \"\":\n            return\n        self.canvas.coords(self.window, 0, 0, 0, 0)\n        self.canvas.update()\n\n    def update(self):\n        \n        self."], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n        \n        self.clear()\n\n    def clear(self):\n        \n        self.update_idletasks()\n        self.canvas.delete(\"all\")\n\n    def update_idletasks(self):\n        \n        if not self.canvas.winfo_exists(self.window):\n            return\n        if self.canvas.itemcget(self.window, \"window\") != self.window:\n            return\n        if self.canvas.itemcget(self.window, \"children\") == \"\":\n            return\n        self.canvas.coords(self.window, 0, 0, 0, 0)\n        self.canvas.update()\n\n    def update(self):\n        \n        self.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n        \n        if header is not None:\n            self.write_header()\n\n        with open(self.filename, 'w') as csvfile:\n            writer = csv.writer(csvfile, delimiter=separator)\n            writer.writerows(zip(*[self.data.keys(), *self.data.values()]))\n\nimport argparse\nfrom . import models\nfrom . import utils\nfrom . import data_loader\nfrom . import utils\n\n\ndef get_parser():\n    parser = argparse.ArgumentParser(\n        description='A tool to train a deep learning model from a dataset')\n\n    parser.add_argument('--model', type=str, default='cnn',\n                        help='The model to use')\n    parser.add_argument('--data-"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n        \n        if header is not None:\n            self.write_header()\n\n        with open(self.filename, 'w') as csvfile:\n            writer = csv.writer(csvfile, delimiter=separator)\n            writer.writerows(zip(*[self.data.keys(), *self.data.values()]))\n\nimport argparse\nfrom . import models\nfrom . import utils\nfrom . import data_loader\nfrom . import utils\n\n\ndef get_parser():\n    parser = argparse.ArgumentParser(\n        description='A tool to train a deep learning model from a dataset')\n\n    parser.add_argument('--model', type=str, default='cnn',\n                        help='The model to use')\n    parser.add_argument('--data-", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n        \n        error_indices = []\n        for i in range(len(self._coords)):\n            if self._coords[i][0] == coord_name:\n                error_indices.append(i)\n        return error_indices\n\n\ndef _get_errors(self, index):\n    \n    errors = []\n    for i in range(len(self._coords)):\n        if i == index:\n            errors.append(self._coords[i][1])\n        else:\n            errors.append(self._coords[i][2])\n    return errors\n\n\ndef _get_errors_from_indices(self, indices):\n    \n    errors = []\n    for i in range(len(indices))"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n        \n        error_indices = []\n        for i in range(len(self._coords)):\n            if self._coords[i][0] == coord_name:\n                error_indices.append(i)\n        return error_indices\n\n\ndef _get_errors(self, index):\n    \n    errors = []\n    for i in range(len(self._coords)):\n        if i == index:\n            errors.append(self._coords[i][1])\n        else:\n            errors.append(self._coords[i][2])\n    return errors\n\n\ndef _get_errors_from_indices(self, indices):\n    \n    errors = []\n    for i in range(len(indices))", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n        \n        super(Graph, self)._update_context(context)\n        context['graph'] = self\n\nGraph.default_context_name = 'graph'\n\nimport unittest\n\nfrom . import Graph, Node\n\n\nclass GraphTestCase(unittest.TestCase):\n\n    def test_context(self):\n        g = Graph()\n        self.assertEqual(g.context, {})\n        g.context = {}\n        self.assertEqual(g.context, {})\n        g.context.update({'foo': 'bar'})\n        self.assertEqual(g.context, {'foo': 'bar'})\n\n    def test_add_node(self):\n        g = Graph()\n        n = Node('foo')\n        g.add_node(n)\n        self.assertEqual(g"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n        \n        super(Graph, self)._update_context(context)\n        context['graph'] = self\n\nGraph.default_context_name = 'graph'\n\nimport unittest\n\nfrom . import Graph, Node\n\n\nclass GraphTestCase(unittest.TestCase):\n\n    def test_context(self):\n        g = Graph()\n        self.assertEqual(g.context, {})\n        g.context = {}\n        self.assertEqual(g.context, {})\n        g.context.update({'foo': 'bar'})\n        self.assertEqual(g.context, {'foo': 'bar'})\n\n    def test_add_node(self):\n        g = Graph()\n        n = Node('foo')\n        g.add_node(n)\n        self.assertEqual(g", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    \n    bin_centers = (edges[:-1] + edges[1:]) / 2.0\n    return np.sum(bins * (bin_centers[1:] - bin_centers[:-1]))\n\n\ndef hist_from_data(data, nbins, xmin, xmax):\n    \n    bins, edges = np.histogram(data, bins=nbins, range=[xmin, xmax])\n    return bins, edges\n\n\ndef find_zero_crossing(data, xmin, xmax):\n    \n    m = np.diff(np.sign(data))\n    m = np.append(m, m[0])\n    m = np.append(m, m[-1])"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    \n    bin_centers = (edges[:-1] + edges[1:]) / 2.0\n    return np.sum(bins * (bin_centers[1:] - bin_centers[:-1]))\n\n\ndef hist_from_data(data, nbins, xmin, xmax):\n    \n    bins, edges = np.histogram(data, bins=nbins, range=[xmin, xmax])\n    return bins, edges\n\n\ndef find_zero_crossing(data, xmin, xmax):\n    \n    m = np.diff(np.sign(data))\n    m = np.append(m, m[0])\n    m = np.append(m, m[-1])", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    \n    if not seq:\n        return False\n\n    if not isinstance(seq, (list, tuple)):\n        return False\n\n    if len(seq) != 2:\n        return False\n\n    if not isinstance(seq[0], str):\n        return False\n\n    if not isinstance(seq[1], int):\n        return False\n\n    return True\n\n\ndef is_fill_request_seqs(seqs):\n    \n    if not seqs:\n        return False\n\n    if not isinstance(seqs, (list, tuple)):\n        return False\n\n    if len(seqs) == 0:\n        return False\n\n    for seq in seqs:\n        if not is_fill"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    \n    if not seq:\n        return False\n\n    if not isinstance(seq, (list, tuple)):\n        return False\n\n    if len(seq) != 2:\n        return False\n\n    if not isinstance(seq[0], str):\n        return False\n\n    if not isinstance(seq[1], int):\n        return False\n\n    return True\n\n\ndef is_fill_request_seqs(seqs):\n    \n    if not seqs:\n        return False\n\n    if not isinstance(seqs, (list, tuple)):\n        return False\n\n    if len(seqs) == 0:\n        return False\n\n    for seq in seqs:\n        if not is_fill", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef fill_request(obj, request_id, **kwargs):\n    \n    obj.fill(request_id, **kwargs)\n\n\ndef request_fill(obj, *args, **kwargs):\n    \n    return obj.request('fill', *args, **kwargs)\n\n\ndef request_fill_with_id(obj, request_id, **kwargs):\n    \n    return obj.request('fill' + request_id, **kwargs)\n\n\ndef fill_requests(obj, *args, **kwargs):\n    \n    obj."], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef fill_request(obj, request_id, **kwargs):\n    \n    obj.fill(request_id, **kwargs)\n\n\ndef request_fill(obj, *args, **kwargs):\n    \n    return obj.request('fill', *args, **kwargs)\n\n\ndef request_fill_with_id(obj, request_id, **kwargs):\n    \n    return obj.request('fill' + request_id, **kwargs)\n\n\ndef fill_requests(obj, *args, **kwargs):\n    \n    obj.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \n\n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_el_with_args(obj, *args, **kwargs):\n    \n\n    return is_run_el(obj) and obj.run(*args, **kwargs)"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \n\n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_el_with_args(obj, *args, **kwargs):\n    \n\n    return is_run_el(obj) and obj.run(*args, **kwargs)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n\ndef is_fill_el(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n\ndef is_fill_el(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    \n    d = {}\n    for k, v in d1.items():\n        if k not in d2:\n            if level == 0:\n                d[k] = v\n            elif level > 0:\n                if not isinstance(v, dict):\n                    d[k] = v\n                else:\n                    d[k] = difference(v, d2, level - 1)\n    return d\n\n\ndef difference_by(d1, d2, level=-1):\n    \n    d = {}\n    for k, v in d1.items():\n        if k not in d2:\n            if level == 0:\n                d[k] = v\n            elif level > 0:\n                if isinstance(v, dict):"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    \n    d = {}\n    for k, v in d1.items():\n        if k not in d2:\n            if level == 0:\n                d[k] = v\n            elif level > 0:\n                if not isinstance(v, dict):\n                    d[k] = v\n                else:\n                    d[k] = difference(v, d2, level - 1)\n    return d\n\n\ndef difference_by(d1, d2, level=-1):\n    \n    d = {}\n    for k, v in d1.items():\n        if k not in d2:\n            if level == 0:\n                d[k] = v\n            elif level > 0:\n                if isinstance(v, dict):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n        \n        self[coord] = self[coord] + weight\n        return self\n\n\ndef fill_hist(hist, coords, weights):\n    \"\"\"\n    Fill a histogram with the given *weights* at the given *coords*.\n    \"\"\"\n    for coord, weight in zip(coords, weights):\n        hist[coord] += weight\n    return hist\n\n\ndef fill_hist_with_bins(hist, coords, weights, bins):\n    \"\"\"\n    Fill a histogram with the given *weights* and *bins* at the given *coords*.\n    \"\"\"\n    for coord, weight in zip(coords, weights):\n        for i in range(len(bins)):\n            if coord >= bins[i]:\n                continue\n            hist[i] += weight\n    return hist"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n        \n        self[coord] = self[coord] + weight\n        return self\n\n\ndef fill_hist(hist, coords, weights):\n    \"\"\"\n    Fill a histogram with the given *weights* at the given *coords*.\n    \"\"\"\n    for coord, weight in zip(coords, weights):\n        hist[coord] += weight\n    return hist\n\n\ndef fill_hist_with_bins(hist, coords, weights, bins):\n    \"\"\"\n    Fill a histogram with the given *weights* and *bins* at the given *coords*.\n    \"\"\"\n    for coord, weight in zip(coords, weights):\n        for i in range(len(bins)):\n            if coord >= bins[i]:\n                continue\n            hist[i] += weight\n    return hist", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    \n    regexes = [\n        ('^[a-z0-9]+$', 'A label may only contain lowercase letters and numbers.'),\n        ('^[a-z0-9_-]+$', 'A label may only contain lowercase letters, numbers, and underscores.'),\n        ('^[a-z0-9_-]+[a-z0-9_-]+$', 'A label may only contain lowercase letters, numbers, and underscores.')\n    ]\n    for key, regex in regexes:\n        if not re.match(regex, labels[key]):\n            raise ValueError('Label %s did not match the regular expression %s' % (key, regex))\n\n\ndef _get_labels(labels):\n    \n    return {k: v for"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    \n    regexes = [\n        ('^[a-z0-9]+$', 'A label may only contain lowercase letters and numbers.'),\n        ('^[a-z0-9_-]+$', 'A label may only contain lowercase letters, numbers, and underscores.'),\n        ('^[a-z0-9_-]+[a-z0-9_-]+$', 'A label may only contain lowercase letters, numbers, and underscores.')\n    ]\n    for key, regex in regexes:\n        if not re.match(regex, labels[key]):\n            raise ValueError('Label %s did not match the regular expression %s' % (key, regex))\n\n\ndef _get_labels(labels):\n    \n    return {k: v for", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    \n    import re\n    if not hasattr(_get_resource_name_regex, 'pattern'):\n        _get_resource_name_regex.pattern = re.compile('^[a-zA-Z0-9-]+$')\n    return _get_resource_name_regex.pattern\n\n\ndef _is_valid_resource_name(name):\n    \n    return _get_resource_name_regex().match(name) is not None\n\n\ndef _validate_resource_name(name):\n    '''Validate that the given name is valid for use as part of a Krake resource name.\n\n    :raises: ValueError if the given name is invalid.\n    '''\n    if not _is_valid_resource_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    \n    import re\n    if not hasattr(_get_resource_name_regex, 'pattern'):\n        _get_resource_name_regex.pattern = re.compile('^[a-zA-Z0-9-]+$')\n    return _get_resource_name_regex.pattern\n\n\ndef _is_valid_resource_name(name):\n    \n    return _get_resource_name_regex().match(name) is not None\n\n\ndef _validate_resource_name(name):\n    '''Validate that the given name is valid for use as part of a Krake resource name.\n\n    :raises: ValueError if the given name is invalid.\n    '''\n    if not _is_valid_resource_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    \n    val_type = type(value)\n    if val_type == int:\n        return 'int'\n    elif val_type == float:\n        return 'float'\n    elif val_type == bool:\n        return 'bool'\n    elif val_type == str:\n        return 'str'\n    else:\n        raise ValueError('Invalid type for value: ' + str(val_type))\n\n\ndef check_value(value):\n    \n    val_type = validate_value(value)\n    if val_type == 'int':\n        if value < 0:\n            raise ValueError('Integer value must be greater than 0.')\n    elif val_type == 'float':\n        if value <= 0:\n            raise ValueError('Float value must be greater than"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    \n    val_type = type(value)\n    if val_type == int:\n        return 'int'\n    elif val_type == float:\n        return 'float'\n    elif val_type == bool:\n        return 'bool'\n    elif val_type == str:\n        return 'str'\n    else:\n        raise ValueError('Invalid type for value: ' + str(val_type))\n\n\ndef check_value(value):\n    \n    val_type = validate_value(value)\n    if val_type == 'int':\n        if value < 0:\n            raise ValueError('Integer value must be greater than 0.')\n    elif val_type == 'float':\n        if value <= 0:\n            raise ValueError('Float value must be greater than", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    \n    if not re.match(r\"^[a-zA-Z0-9]+$\", key):\n        return False\n    return True\n\ndef get_key_from_path(path):\n    \n    key = path.split(\":\")[0]\n    if not validate_key(key):\n        return False\n    return key"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    \n    if not re.match(r\"^[a-zA-Z0-9]+$\", key):\n        return False\n    return True\n\ndef get_key_from_path(path):\n    \n    key = path.split(\":\")[0]\n    if not validate_key(key):\n        return False\n    return key", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    schema_dict = {}\n    if first_level:\n        schema_dict['observer_schema'] = {}\n    for field in manifest_dict['fields']:\n        if field['type'] == 'observer':\n            schema_dict['observer_schema'][field['name']] = field['schema']\n        elif field['type'] == 'array':\n            schema_dict['observer_schema'][field['name']] = generate_default_observer_schema_dict(field['schema'], first_level=True)\n    return schema_dict\n\n\ndef generate_default_observer_schema_list(manifest_dict):\n    '''Together with :func:``generate_default_observer_schema_dict``, this function is called recursively to generate part of a default ``observer_schema`` from part of a''"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    schema_dict = {}\n    if first_level:\n        schema_dict['observer_schema'] = {}\n    for field in manifest_dict['fields']:\n        if field['type'] == 'observer':\n            schema_dict['observer_schema'][field['name']] = field['schema']\n        elif field['type'] == 'array':\n            schema_dict['observer_schema'][field['name']] = generate_default_observer_schema_dict(field['schema'], first_level=True)\n    return schema_dict\n\n\ndef generate_default_observer_schema_list(manifest_dict):\n    '''Together with :func:``generate_default_observer_schema_dict``, this function is called recursively to generate part of a default ``observer_schema`` from part of a''", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if not isinstance(response, dict):\n        raise Exception(f'Unsupported Kubernetes object {response}')\n\n    for key, value in response.items():\n        if key == 'kind':\n            continue\n\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        elif isinstance(value, list):\n            for index, item in enumerate(value):\n                if isinstance(item, dict):\n                    last_applied_manifest[key]["], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if not isinstance(response, dict):\n        raise Exception(f'Unsupported Kubernetes object {response}')\n\n    for key, value in response.items():\n        if key == 'kind':\n            continue\n\n        if isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema, value\n            )\n        elif isinstance(value, list):\n            for index, item in enumerate(value):\n                if isinstance(item, dict):\n                    last_applied_manifest[key][", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if observer_schema is None:\n        return\n    if response is None:\n        return\n    if last_applied_manifest is None:\n        last_applied_manifest = {}\n\n    for resource_type, resource_list in response.items():\n        new_dict = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest, observer_schema.get(resource_type), resource_list\n        )\n        if new_dict is not None:\n            last_applied_manifest[resource_type] = new_dict\n\n    return last_applied_manifest\n\n\ndef update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response):\n    '''Together with :func:``update_last_applied_manifest"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if observer_schema is None:\n        return\n    if response is None:\n        return\n    if last_applied_manifest is None:\n        last_applied_manifest = {}\n\n    for resource_type, resource_list in response.items():\n        new_dict = update_last_applied_manifest_dict_from_resp(\n            last_applied_manifest, observer_schema.get(resource_type), resource_list\n        )\n        if new_dict is not None:\n            last_applied_manifest[resource_type] = new_dict\n\n    return last_applied_manifest\n\n\ndef update_last_applied_manifest_list_from_resp(last_applied_manifest, observer_schema, response):\n    '''Together with :func:``update_last_applied_manifest", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    \n    from kubernetes_observer.utils import get_observer_schema_location\n    from kubernetes_observer.observer_schema import ObserverSchema\n    from kubernetes_observer.observer_schema import ObserverSchemaSchema\n    from kubernetes_observer.utils import get_observer_schema_from_location\n    from kubernetes_observer.utils import get_observer_schema_from_location_with_defaults\n    from kubernetes_observer.utils import get_observer_schema_location_from_observer_schema\n    from kubernetes_observer.utils import get_kubernetes_apis\n    from kubernetes_observer.utils import get_kubernetes_api_schema\n    from kubernetes_observer.utils import get_kubernetes_api_schema"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    \n    from kubernetes_observer.utils import get_observer_schema_location\n    from kubernetes_observer.observer_schema import ObserverSchema\n    from kubernetes_observer.observer_schema import ObserverSchemaSchema\n    from kubernetes_observer.utils import get_observer_schema_from_location\n    from kubernetes_observer.utils import get_observer_schema_from_location_with_defaults\n    from kubernetes_observer.utils import get_observer_schema_location_from_observer_schema\n    from kubernetes_observer.utils import get_kubernetes_apis\n    from kubernetes_observer.utils import get_kubernetes_api_schema\n    from kubernetes_observer.utils import get_kubernetes_api_schema", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\treplacements = [\n\t\t\t('%s', '%s'),\n\t\t\t('%d', '%d'),\n\t\t\t('%i', '%i'),\n\t\t]\n\t\tif params is None:\n\t\t\tparams = {}\n\t\tfor i, (param, value) in enumerate(params.items()):\n\t\t\tsql = re.sub(\n\t\t\t\tr'%\\w+',\n\t\t\t\tlambda m: replacements[i][m.group() == '%s' or m.group() == '%d' or m.group() == '%i'][0],\n\t\t\t\tsql,\n\t\t\t)\n\t\t\tparams[param] = value\n\t\treturn sql, params"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\treplacements = [\n\t\t\t('%s', '%s'),\n\t\t\t('%d', '%d'),\n\t\t\t('%i', '%i'),\n\t\t]\n\t\tif params is None:\n\t\t\tparams = {}\n\t\tfor i, (param, value) in enumerate(params.items()):\n\t\t\tsql = re.sub(\n\t\t\t\tr'%\\w+',\n\t\t\t\tlambda m: replacements[i][m.group() == '%s' or m.group() == '%d' or m.group() == '%i'][0],\n\t\t\t\tsql,\n\t\t\t)\n\t\t\tparams[param] = value\n\t\treturn sql, params", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tsql = self._format_sql(sql)\n\n\t\tmany_params = self._list_of_dicts_to_list_of_sequences(many_params)\n\n\t\treturn sql, many_params\n\n\ndef _list_of_dicts_to_list_of_sequences(\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n) -> Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]:\n\t\n\n\tmany_params = list(many_params)\n\tif not many_params:\n\t\treturn []\n\n\tif isinstance(many_params[0], dict):\n\t"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tsql = self._format_sql(sql)\n\n\t\tmany_params = self._list_of_dicts_to_list_of_sequences(many_params)\n\n\t\treturn sql, many_params\n\n\ndef _list_of_dicts_to_list_of_sequences(\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n) -> Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]:\n\t\n\n\tmany_params = list(many_params)\n\tif not many_params:\n\t\treturn []\n\n\tif isinstance(many_params[0], dict):\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n        \n        root = self.fs.get_root()\n        if not root:\n            raise ValueError('No root filesystem')\n\n        if not path:\n            path = root.name\n        else:\n            if not os.path.isabs(path):\n                path = os.path.join(root.name, path)\n            path = os.path.normpath(path)\n\n        if not isinstance(path, str):\n            raise ValueError('Path must be a string: {}'.format(path))\n\n        if not os.path.exists(path):\n            raise ValueError('File not found: {}'.format(path))\n\n        if os.path.isdir(path):\n            raise ValueError('Invalid path: {}'.format(path))\n\n        if os.path.basename(os.path.dirname("], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n        \n        root = self.fs.get_root()\n        if not root:\n            raise ValueError('No root filesystem')\n\n        if not path:\n            path = root.name\n        else:\n            if not os.path.isabs(path):\n                path = os.path.join(root.name, path)\n            path = os.path.normpath(path)\n\n        if not isinstance(path, str):\n            raise ValueError('Path must be a string: {}'.format(path))\n\n        if not os.path.exists(path):\n            raise ValueError('File not found: {}'.format(path))\n\n        if os.path.isdir(path):\n            raise ValueError('Invalid path: {}'.format(path))\n\n        if os.path.basename(os.path.dirname(", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n        \n        return '%s%s' % (prefix, self.status_str())\n\n\ndef _print_status_str(self, prefix=''):\n    \n    if self.status_str() != 'None':\n        print('%s%s' % (prefix, self.status_str()))\n\n\ndef print_status_str(self, prefix=''):\n    \n    if self.status_str() != 'None':\n        print('%s%s' % (prefix, self.status_str()))\n\n\ndef status_color(self):\n    \n    if self.status_str() == 'None':\n        return ''\n    else:\n        return self.color\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        return '%s%s' % (prefix, self.status_str())\n\n\ndef _print_status_str(self, prefix=''):\n    \n    if self.status_str() != 'None':\n        print('%s%s' % (prefix, self.status_str()))\n\n\ndef print_status_str(self, prefix=''):\n    \n    if self.status_str() != 'None':\n        print('%s%s' % (prefix, self.status_str()))\n\n\ndef status_color(self):\n    \n    if self.status_str() == 'None':\n        return ''\n    else:\n        return self.color\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n        \n        output = prefix + 'Validation status: '\n        if self.is_valid:\n            output += 'valid'\n        else:\n            output += 'invalid'\n            for err in self.error_strs:\n                output += '\\n' + err\n        return output\n\n    def error_str(self, prefix=''):\n        \n        error = prefix + 'Validation errors:\\n'\n        for err in self.error_strs:\n            error += err + '\\n'\n        return error\n\n    def __str__(self):\n        return self.status_str('')\n\n    def __repr__(self):\n        return 'ValidationLog()'\n\n    def __len__(self):\n        if self.is_valid:\n            return len(self.error_"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        output = prefix + 'Validation status: '\n        if self.is_valid:\n            output += 'valid'\n        else:\n            output += 'invalid'\n            for err in self.error_strs:\n                output += '\\n' + err\n        return output\n\n    def error_str(self, prefix=''):\n        \n        error = prefix + 'Validation errors:\\n'\n        for err in self.error_strs:\n            error += err + '\\n'\n        return error\n\n    def __str__(self):\n        return self.status_str('')\n\n    def __repr__(self):\n        return 'ValidationLog()'\n\n    def __len__(self):\n        if self.is_valid:\n            return len(self.error_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n  \n  return True\n\ndef validate(self, identifier):\n  \n  if not self.is_valid(identifier):\n    raise ValueError(\"Bad identifier: %s\" % identifier)\n\ndef get_object(self, identifier):\n  '''Return the object matching the identifier.\n\n  This method should be overridden in subclasses.\n  '''\n  raise NotImplementedError()\n\ndef get_or_create(self, identifier, object_class, **kwargs):\n  '''Return the object matching the identifier or create a new one.\n\n  This method should be overridden in subclasses.\n  '''\n  validate(self, identifier)\n  object = self.get_object(identifier)\n  if object:\n    return object\n  return self.create(identifier"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n  \n  return True\n\ndef validate(self, identifier):\n  \n  if not self.is_valid(identifier):\n    raise ValueError(\"Bad identifier: %s\" % identifier)\n\ndef get_object(self, identifier):\n  '''Return the object matching the identifier.\n\n  This method should be overridden in subclasses.\n  '''\n  raise NotImplementedError()\n\ndef get_or_create(self, identifier, object_class, **kwargs):\n  '''Return the object matching the identifier or create a new one.\n\n  This method should be overridden in subclasses.\n  '''\n  validate(self, identifier)\n  object = self.get_object(identifier)\n  if object:\n    return object\n  return self.create(identifier", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n        \n        validator = jsonschema.Draft4Validator(\n            self.get_schema(extract_spec_version))\n        for error in sorted(validator.iter_errors(inventory),\n                            key=lambda e: e.path):\n            self.log.error(\"Invalid inventory: %s\", error)\n            raise Exception(\"Invalid inventory: %s\" % error)\n\n        validator = jsonschema.Draft4Validator(\n            self.get_schema())\n        for error in sorted(validator.iter_errors(inventory),\n                            key=lambda e: e.path):\n            self.log.warning(\"Missing field: %s\", error)\n\n        validator = jsonschema.Draft"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n        \n        validator = jsonschema.Draft4Validator(\n            self.get_schema(extract_spec_version))\n        for error in sorted(validator.iter_errors(inventory),\n                            key=lambda e: e.path):\n            self.log.error(\"Invalid inventory: %s\", error)\n            raise Exception(\"Invalid inventory: %s\" % error)\n\n        validator = jsonschema.Draft4Validator(\n            self.get_schema())\n        for error in sorted(validator.iter_errors(inventory),\n                            key=lambda e: e.path):\n            self.log.warning(\"Missing field: %s\", error)\n\n        validator = jsonschema.Draft", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for manifest_file in manifest_files:\n            if manifest_file.version in digests_used:\n                if digests_used[manifest_file.version]['digest'] != manifest_file.digest:\n                    raise ManifestDigestMismatch(manifest_file.version,\n                                                 manifest_file.digest,\n                                                 digests_used[manifest_file.version]['digest'])\n\n        for version, manifest_file in manifest_files.items():\n            if version not in digests_used:\n                raise ManifestDigestMismatch(version, manifest_file.digest, None)\n\n'''\nBuild manifest entries from files.\n'''\n\nimport logging\nfrom .manifest_file import ManifestFile\nfrom .manifest_entry import"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for manifest_file in manifest_files:\n            if manifest_file.version in digests_used:\n                if digests_used[manifest_file.version]['digest'] != manifest_file.digest:\n                    raise ManifestDigestMismatch(manifest_file.version,\n                                                 manifest_file.digest,\n                                                 digests_used[manifest_file.version]['digest'])\n\n        for version, manifest_file in manifest_files.items():\n            if version not in digests_used:\n                raise ManifestDigestMismatch(version, manifest_file.digest, None)\n\n'''\nBuild manifest entries from files.\n'''\n\nimport logging\nfrom .manifest_file import ManifestFile\nfrom .manifest_entry import", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n        \n        if not isinstance(prior, str):\n            raise TypeError(\"prior must be a string\")\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+$', prior):\n            raise ValueError(\"Invalid prior version. Must be in form 'x.y.z'\")\n        if (self.version_comparator(prior, self.version) < 0):\n            raise ValueError(\"prior is not a valid prior version to this inventory object\")\n\ndef raise_if_not_allowed(self, attr):\n        \n        if attr not in self.allowed_attributes:\n            raise AttributeError(\"{} is not an allowed attribute for this inventory object\".format(attr))\n\ndef raise_if_not_type(self, attr, type):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n        \n        if not isinstance(prior, str):\n            raise TypeError(\"prior must be a string\")\n        if not re.match(r'^\\d+\\.\\d+\\.\\d+$', prior):\n            raise ValueError(\"Invalid prior version. Must be in form 'x.y.z'\")\n        if (self.version_comparator(prior, self.version) < 0):\n            raise ValueError(\"prior is not a valid prior version to this inventory object\")\n\ndef raise_if_not_allowed(self, attr):\n        \n        if attr not in self.allowed_attributes:\n            raise AttributeError(\"{} is not an allowed attribute for this inventory object\".format(attr))\n\ndef raise_if_not_type(self, attr, type):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    \n    path_dict = {}\n    for name, item in inventory.items():\n        path_dict[item['path']] = item\n    return path_dict\n\n\ndef get_logical_path_map_by_version(inventory, version):\n    \n    path_dict = {}\n    for name, item in inventory.items():\n        if item['version'] == version:\n            path_dict[item['path']] = item\n    return path_dict\n\n\ndef get_matching_paths(path_map, pattern):\n    \n    matching_paths = []\n    for path, item in path_map.items():\n        if re.search("], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    \n    path_dict = {}\n    for name, item in inventory.items():\n        path_dict[item['path']] = item\n    return path_dict\n\n\ndef get_logical_path_map_by_version(inventory, version):\n    \n    path_dict = {}\n    for name, item in inventory.items():\n        if item['version'] == version:\n            path_dict[item['path']] = item\n    return path_dict\n\n\ndef get_matching_paths(path_map, pattern):\n    \n    matching_paths = []\n    for path, item in path_map.items():\n        if re.search(", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n        \n        if fixity not in ('=', '+', '-', '~'):\n            raise ValueError('Invalid fixity: ' + fixity)\n        if len(manifest_files) > 1:\n            raise ValueError('Multiple files specified with ' + fixity)\n\n    def validate_fixity_in_inventory(self, fixity, manifest_files):\n        \n        if fixity not in ('=', '+', '-', '~'):\n            raise ValueError('Invalid fixity: ' + fixity)\n        if len(manifest_files) > 1:\n            raise ValueError('Multiple files specified with ' + fixity)\n        for manifest_file in manifest_files:\n            if manifest_file.fixity != fixity:\n                raise ValueError('File \"'"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n        \n        if fixity not in ('=', '+', '-', '~'):\n            raise ValueError('Invalid fixity: ' + fixity)\n        if len(manifest_files) > 1:\n            raise ValueError('Multiple files specified with ' + fixity)\n\n    def validate_fixity_in_inventory(self, fixity, manifest_files):\n        \n        if fixity not in ('=', '+', '-', '~'):\n            raise ValueError('Invalid fixity: ' + fixity)\n        if len(manifest_files) > 1:\n            raise ValueError('Multiple files specified with ' + fixity)\n        for manifest_file in manifest_files:\n            if manifest_file.fixity != fixity:\n                raise ValueError('File \"'", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \n    return next(os.walk(path))[2]\n\n\ndef files_with_ext(path, ext):\n    \n    return [f for f in files_list(path) if f.endswith(ext)]\n\n\ndef copy_files(src, dst):\n    \n    shutil.copytree(src, dst)\n\n\ndef copy_to_build(src, dst, build_path):\n    \n    dst = os.path.join(build_path, dst)\n    if not os.path.exists(dst):\n        os.makedirs(dst"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \n    return next(os.walk(path))[2]\n\n\ndef files_with_ext(path, ext):\n    \n    return [f for f in files_list(path) if f.endswith(ext)]\n\n\ndef copy_files(src, dst):\n    \n    shutil.copytree(src, dst)\n\n\ndef copy_to_build(src, dst, build_path):\n    \n    dst = os.path.join(build_path, dst)\n    if not os.path.exists(dst):\n        os.makedirs(dst", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    \n    filenames = [f.basename for f in files]\n    return dict((os.path.splitext(f)[0], f) for f in filenames)\n\ndef _group_files_by_xml_filename_with_dir(source, xmls, files):\n    \n    filenames = [os.path.join(f.dirname, f.basename) for f in files]\n    return dict((os.path.splitext(f)[0], f) for f in filenames)\n\n\ndef _group_files_by_xml_filename_with_subdir(source, xmls, files):\n    \n    filenames = [os.path.join(f.dir"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    filenames = [f.basename for f in files]\n    return dict((os.path.splitext(f)[0], f) for f in filenames)\n\ndef _group_files_by_xml_filename_with_dir(source, xmls, files):\n    \n    filenames = [os.path.join(f.dirname, f.basename) for f in files]\n    return dict((os.path.splitext(f)[0], f) for f in filenames)\n\n\ndef _group_files_by_xml_filename_with_subdir(source, xmls, files):\n    \n    filenames = [os.path.join(f.dir", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    \n    if file_path.startswith(prefix):\n        return True\n    return False\n\n\ndef get_document_package(file_path):\n    \n    return file_path.split('/')[0]\n\n\ndef get_document_package_by_prefix(prefix, file_path):\n    \n    return file_path.split('/')[0][len(prefix):]\n\n\ndef get_document_package_name_and_path(file_path):\n    \n    return file_path.split('/')[0], file_path\n\n\ndef get_document_package_name"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \n    if file_path.startswith(prefix):\n        return True\n    return False\n\n\ndef get_document_package(file_path):\n    \n    return file_path.split('/')[0]\n\n\ndef get_document_package_by_prefix(prefix, file_path):\n    \n    return file_path.split('/')[0][len(prefix):]\n\n\ndef get_document_package_name_and_path(file_path):\n    \n    return file_path.split('/')[0], file_path\n\n\ndef get_document_package_name", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    \n    filtered_files = []\n    for file in files:\n        if file.startswith(prefix):\n            filtered_files.append(file)\n    return filtered_files\n\n\ndef select_filenames_by_suffix(suffix, files):\n    \n    filtered_files = []\n    for file in files:\n        if not file.endswith(suffix):\n            filtered_files.append(file)\n    return filtered_files\n\n\ndef get_document_filenames(documents):\n    \n    filenames = []\n    for document in documents:\n        filenames.append(document.filename)\n    return filenames\n\n\ndef get_document_filenames"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    filtered_files = []\n    for file in files:\n        if file.startswith(prefix):\n            filtered_files.append(file)\n    return filtered_files\n\n\ndef select_filenames_by_suffix(suffix, files):\n    \n    filtered_files = []\n    for file in files:\n        if not file.endswith(suffix):\n            filtered_files.append(file)\n    return filtered_files\n\n\ndef get_document_filenames(documents):\n    \n    filenames = []\n    for document in documents:\n        filenames.append(document.filename)\n    return filenames\n\n\ndef get_document_filenames", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    \n    packages = []\n    for file in os.listdir(folder):\n        if file.endswith('.whl'):\n            packages.append(os.path.join(folder, file))\n    return packages\n\n\ndef _get_dependencies(name):\n    \n    with open(os.path.join(name, 'setup.py'), 'r') as f:\n        setup = f.read()\n\n    setup = setup.split('\\n')\n    dependencies = []\n    for line in setup:\n        if 'install_requires' in line:\n            dependencies = line.split('=')[1].split(', ')\n            break\n\n    return dependencies\n\ndef _get_packages(dependencies):\n    '''Get packages from requirements.txt''"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    \n    packages = []\n    for file in os.listdir(folder):\n        if file.endswith('.whl'):\n            packages.append(os.path.join(folder, file))\n    return packages\n\n\ndef _get_dependencies(name):\n    \n    with open(os.path.join(name, 'setup.py'), 'r') as f:\n        setup = f.read()\n\n    setup = setup.split('\\n')\n    dependencies = []\n    for line in setup:\n        if 'install_requires' in line:\n            dependencies = line.split('=')[1].split(', ')\n            break\n\n    return dependencies\n\ndef _get_packages(dependencies):\n    '''Get packages from requirements.txt''", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    \n    if prefix == 'assets':\n        return 'asset'\n    elif prefix == 'renditions':\n        return 'rendition'\n    elif file_path.endswith('.mp4'):\n        return 'asset'\n    elif file_path.endswith('.png'):\n        return 'rendition'\n    elif file_path.endswith('.jpg') or file_path.endswith('.jpeg'):\n        return 'rendition'\n\n    return 'asset'\n\n\ndef _get_file_path(prefix, file_path):\n    \n    if prefix == 'assets':\n        return file_path\n    elif prefix == 'renditions':\n        return file_path.replace('assets', 'renditions')\n    elif file_path"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    \n    if prefix == 'assets':\n        return 'asset'\n    elif prefix == 'renditions':\n        return 'rendition'\n    elif file_path.endswith('.mp4'):\n        return 'asset'\n    elif file_path.endswith('.png'):\n        return 'rendition'\n    elif file_path.endswith('.jpg') or file_path.endswith('.jpeg'):\n        return 'rendition'\n\n    return 'asset'\n\n\ndef _get_file_path(prefix, file_path):\n    \n    if prefix == 'assets':\n        return file_path\n    elif prefix == 'renditions':\n        return file_path.replace('assets', 'renditions')\n    elif file_path", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n        \n        self.add_rendition(lang, file_path, 'application/pdf')\n\n    def add_rendition(self, lang, file_path, mime_type):\n        \n        self.renditions[lang] = file_path\n        self.mime_types[lang] = mime_type\n\n    def get_rendition(self, lang):\n        \n        return self.renditions.get(lang)\n\n    def get_mime_type(self, lang):\n        '''{ \"original\": \"artigo02.pdf\", \"en\": \"art"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n        \n        self.add_rendition(lang, file_path, 'application/pdf')\n\n    def add_rendition(self, lang, file_path, mime_type):\n        \n        self.renditions[lang] = file_path\n        self.mime_types[lang] = mime_type\n\n    def get_rendition(self, lang):\n        \n        return self.renditions.get(lang)\n\n    def get_mime_type(self, lang):\n        '''{ \"original\": \"artigo02.pdf\", \"en\": \"art", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n        \n        if basename in self.assets:\n            print(\"Asset already exists\")\n            return\n        if not os.path.exists(file_path):\n            print(f\"{file_path} does not exist\")\n            return\n        if not file_path.endswith(self.extensions):\n            print(f\"{file_path} does not have the correct extension\")\n            return\n        self.assets[basename] = file_path\n\n    def create_zip(self):\n        \n        if len(self.assets) == 0:\n            print(\"No assets to compress\")\n            return\n        self.zip_path = \"%s.zip\" % (str(self.slug).replace(\"-\", \"_\"))\n        if os.path.exists(self.zip_path):"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n        \n        if basename in self.assets:\n            print(\"Asset already exists\")\n            return\n        if not os.path.exists(file_path):\n            print(f\"{file_path} does not exist\")\n            return\n        if not file_path.endswith(self.extensions):\n            print(f\"{file_path} does not have the correct extension\")\n            return\n        self.assets[basename] = file_path\n\n    def create_zip(self):\n        \n        if len(self.assets) == 0:\n            print(\"No assets to compress\")\n            return\n        self.zip_path = \"%s.zip\" % (str(self.slug).replace(\"-\", \"_\"))\n        if os.path.exists(self.zip_path):", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    \n    zip_file = zipfile.ZipFile(zip_path)\n    return [(package_name,\n             zip_file.open(os.path.join(package_name, '__init__.py')).read())\n            for package_name in zip_file.namelist()\n            if package_name.endswith('__init__.py')]\n\ndef _load_package_data(package_data):\n    '''Extract package data from package_data.\n\n    package_data: A list of (package_name, package_data) tuples.\n\n    Returns: A dictionary of package name to data, with data being a\n    list of lines.\n    '''\n    package_data = dict(package_data)\n    package_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    \n    zip_file = zipfile.ZipFile(zip_path)\n    return [(package_name,\n             zip_file.open(os.path.join(package_name, '__init__.py')).read())\n            for package_name in zip_file.namelist()\n            if package_name.endswith('__init__.py')]\n\ndef _load_package_data(package_data):\n    '''Extract package data from package_data.\n\n    package_data: A list of (package_name, package_data) tuples.\n\n    Returns: A dictionary of package name to data, with data being a\n    list of lines.\n    '''\n    package_data = dict(package_data)\n    package_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.namelist()\n\n\ndef file_from_zipfile(zip_path, filename):\n    \n    import zipfile\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.read(filename)\n\n\ndef read_json_file(filename):\n    \n    import json\n    with open(filename) as jf:\n        return json.load(jf)\n\n\ndef write_json_file(obj, filename):\n    \n    import json\n    with open(filename, 'w') as jf:\n       "], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.namelist()\n\n\ndef file_from_zipfile(zip_path, filename):\n    \n    import zipfile\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.read(filename)\n\n\ndef read_json_file(filename):\n    \n    import json\n    with open(filename) as jf:\n        return json.load(jf)\n\n\ndef write_json_file(obj, filename):\n    \n    import json\n    with open(filename, 'w') as jf:\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix_w_alt(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix_w_alt(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix_w_alt(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix_w_alt(content):\n    \n    \n    return content.replace('w=\"', 'w-st=\"')\n\n\ndef fix_namespace_prefix", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)[0]\n        if pubdate_node.text:\n            return pubdate_node.text\n\ndef match_pubdate_by_node(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)[0]\n        if pubdate_node.text:\n            return pubdate_node\n\ndef match_pubdate_by_node_text(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)[0]\n        if pubdate_node.text:\n            return pubdate_node.text\n\ndef match_pubdate_by_node(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        pubdate_node = node.xpath(pubdate_xpath)[0]\n        if pubdate_node.text:\n            return pubdate_node\n\ndef match_pubdate_by_node_text(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \n    contents = issue.contents\n    if len(contents) == 1:\n        number = contents[0].contents[0]\n        suppl = None\n    elif len(contents) == 2:\n        number = contents[0].contents[0]\n        suppl = contents[1].contents[0]\n    else:\n        raise ValueError('Invalid number of elements in issue element')\n    return number, suppl\n\ndef _extract_number_and_supplment_from_issue_number(issue_number):\n    \n    contents = issue_number.contents"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    contents = issue.contents\n    if len(contents) == 1:\n        number = contents[0].contents[0]\n        suppl = None\n    elif len(contents) == 2:\n        number = contents[0].contents[0]\n        suppl = contents[1].contents[0]\n    else:\n        raise ValueError('Invalid number of elements in issue element')\n    return number, suppl\n\ndef _extract_number_and_supplment_from_issue_number(issue_number):\n    \n    contents = issue_number.contents", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n        \n        if debug:\n            print \"{0}pretty(): indent={1}\".format(indenter(indent), indent)\n        result = \"{0}{1} = {2}\\n\".format(indenter(indent), self.name, self.value)\n        if self.value == \"\":\n            pass\n        elif isinstance(self.value, str):\n            result += \"{0}value = \\\"{1}\\\"\\n\".format(indenter(indent), self.value)\n        elif isinstance(self.value, int):\n            result += \"{0}value = {1}\\n\".format(indenter(indent), self.value)\n        elif isinstance(self.value, bool):\n            result += \"{0}value = {1}\\n\".format(indenter(indent), self.value)\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n        \n        if debug:\n            print \"{0}pretty(): indent={1}\".format(indenter(indent), indent)\n        result = \"{0}{1} = {2}\\n\".format(indenter(indent), self.name, self.value)\n        if self.value == \"\":\n            pass\n        elif isinstance(self.value, str):\n            result += \"{0}value = \\\"{1}\\\"\\n\".format(indenter(indent), self.value)\n        elif isinstance(self.value, int):\n            result += \"{0}value = {1}\\n\".format(indenter(indent), self.value)\n        elif isinstance(self.value, bool):\n            result += \"{0}value = {1}\\n\".format(indenter(indent), self.value)\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n        \n\n        return reduce(lambda x,y: x.absorb(y) if isinstance(y, Absorption) else y, args)\n\ndef reduce(self, args):\n        \n        \n        return reduce(lambda x,y: x.reduce(y) if isinstance(y, Reduction) else y, args)\n\ndef identity(self, args):\n        \n        \n        return reduce(lambda x,y: x.identity(y) if isinstance(y, Identity) else y, args)\n\ndef undo(self, args):\n        '''Given an `args` sequence of expressions, return a new expression by undoing them"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n        \n\n        return reduce(lambda x,y: x.absorb(y) if isinstance(y, Absorption) else y, args)\n\ndef reduce(self, args):\n        \n        \n        return reduce(lambda x,y: x.reduce(y) if isinstance(y, Reduction) else y, args)\n\ndef identity(self, args):\n        \n        \n        return reduce(lambda x,y: x.identity(y) if isinstance(y, Identity) else y, args)\n\ndef undo(self, args):\n        '''Given an `args` sequence of expressions, return a new expression by undoing them", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n        \n        self.handlers.append(hook)\n        return hook\n\n\nclass registry(list):\n    def find(self, name):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj\n\n    def lookup(self, name):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj\n\n    def call(self, name, *args, **kwargs):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj(self, *args, **kwargs)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n        \n        self.handlers.append(hook)\n        return hook\n\n\nclass registry(list):\n    def find(self, name):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj\n\n    def lookup(self, name):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj\n\n    def call(self, name, *args, **kwargs):\n        \n        for obj in self:\n            if obj.name == name:\n                return obj(self, *args, **kwargs)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n\n    return {\n        'user_home_dir': user.home_dir,\n        'user_home_dir': user.home_dir,\n        'ssh_key_host': user.ssh_key_host,\n        'ssh_key_name': user.ssh_key_name,\n        'ssh_key': user.ssh_key,\n        'ssh_key_github': user.ssh_key_github,"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n\n    return {\n        'user_home_dir': user.home_dir,\n        'user_home_dir': user.home_dir,\n        'ssh_key_host': user.ssh_key_host,\n        'ssh_key_name': user.ssh_key_name,\n        'ssh_key': user.ssh_key,\n        'ssh_key_github': user.ssh_key_github,", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n        \n\n        if dt.tzinfo is None:\n            raise TypeError(\"fromutc() argument 1 must be timezone-aware\")\n\n        return dt.astimezone(self.tz)\n\ndef _today(self):\n        \n\n        return self.date.today()\n\ndef _utcnow(self):\n        \n\n        return self.datetime.utcnow()\n\ndef _utcnow_as_local(self):\n        \n\n        return self.datetime.datetime.utcnow().astimezone(self.tz)\n\ndef _utcnow_as_local_datetime"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n        \n\n        if dt.tzinfo is None:\n            raise TypeError(\"fromutc() argument 1 must be timezone-aware\")\n\n        return dt.astimezone(self.tz)\n\ndef _today(self):\n        \n\n        return self.date.today()\n\ndef _utcnow(self):\n        \n\n        return self.datetime.utcnow()\n\ndef _utcnow_as_local(self):\n        \n\n        return self.datetime.datetime.utcnow().astimezone(self.tz)\n\ndef _utcnow_as_local_datetime", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n        \n        if self is self:\n            return self\n        result = self.__class__()\n        for attr_name in self.__dict__:\n            attr_value = getattr(self, attr_name)\n            result.__dict__[attr_name] = attr_value\n        return result\n\n\nA: You can use copy.deepcopy() to copy the object.\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n        \n        if self is self:\n            return self\n        result = self.__class__()\n        for attr_name in self.__dict__:\n            attr_value = getattr(self, attr_name)\n            result.__dict__[attr_name] = attr_value\n        return result\n\n\nA: You can use copy.deepcopy() to copy the object.\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    \n    def wrap():\n        return namefunc().encode('utf-8')\n    return wrap\n\n@tzname_in_python2\ndef tzname():\n    \n    return time.tzname[time.daylight]\n\nif __name__ == '__main__':\n    print tzname()"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    \n    def wrap():\n        return namefunc().encode('utf-8')\n    return wrap\n\n@tzname_in_python2\ndef tzname():\n    \n    return time.tzname[time.daylight]\n\nif __name__ == '__main__':\n    print tzname()", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    \n    try:\n        from pkg_resources import get_distribution\n        return get_distribution('dqm4hep').version\n    except Exception:\n        return 'unknown'\n\n\ndef get_svn_revision():\n    \n    try:\n        from subprocess import check_output\n        return check_output(['svnversion'], universal_newlines=True).strip()\n    except Exception:\n        return 'unknown'\n\n\ndef get_git_revision():\n    \n    try:\n        from subprocess import check_output\n        return check_output(['git', 'rev-parse', 'HEAD'], universal_newlines=True).strip()\n    except Exception:\n        return '"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    \n    try:\n        from pkg_resources import get_distribution\n        return get_distribution('dqm4hep').version\n    except Exception:\n        return 'unknown'\n\n\ndef get_svn_revision():\n    \n    try:\n        from subprocess import check_output\n        return check_output(['svnversion'], universal_newlines=True).strip()\n    except Exception:\n        return 'unknown'\n\n\ndef get_git_revision():\n    \n    try:\n        from subprocess import check_output\n        return check_output(['git', 'rev-parse', 'HEAD'], universal_newlines=True).strip()\n    except Exception:\n        return '", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    \n    return pieces.format(**style)"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    \n    return pieces.format(**style)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    \n    if len(pieces) == 0:\n        return '.'\n    return '+'\n\n\ndef make_pieces_table(pieces):\n    '''Return a table of pieces, with each piece's name as a column.\n    The table's rows are the pieces.'''\n    return '\\n'.join([\n        '|'.join([\n            piece.name,\n            plus_or_dot(piece.pieces),\n            piece.weight,\n            piece.length,\n            piece.width,\n        ])\n        for piece in pieces\n    ])\n\n\ndef print_pieces_table(pieces):\n    \n    print make_pieces_table(pieces)\n\n\ndef print_pieces(pieces):\n    '''Print a list of pieces.''"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    \n    if len(pieces) == 0:\n        return '.'\n    return '+'\n\n\ndef make_pieces_table(pieces):\n    '''Return a table of pieces, with each piece's name as a column.\n    The table's rows are the pieces.'''\n    return '\\n'.join([\n        '|'.join([\n            piece.name,\n            plus_or_dot(piece.pieces),\n            piece.weight,\n            piece.length,\n            piece.width,\n        ])\n        for piece in pieces\n    ])\n\n\ndef print_pieces_table(pieces):\n    \n    print make_pieces_table(pieces)\n\n\ndef print_pieces(pieces):\n    '''Print a list of pieces.''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    if verbose:\n        print('Called:', commands, args)\n\n    if env is not None:\n        os.environ.update(env)\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    if isinstance(commands, (list, tuple)):\n        commands = commands[0]\n\n    if isinstance(commands, str):\n        commands = [commands]\n\n    if isinstance(args, (list, tuple)):\n        args = ' '.join(args)\n\n    return subprocess.call([commands] + args.split(), cwd=cwd, shell=False,\n                           stdout=subprocess.DEVNULL if hide_stderr else None,\n                           stderr=subprocess.DEVNULL if not hide_stderr else None)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    if verbose:\n        print('Called:', commands, args)\n\n    if env is not None:\n        os.environ.update(env)\n\n    if cwd is None:\n        cwd = os.getcwd()\n\n    if isinstance(commands, (list, tuple)):\n        commands = commands[0]\n\n    if isinstance(commands, str):\n        commands = [commands]\n\n    if isinstance(args, (list, tuple)):\n        args = ' '.join(args)\n\n    return subprocess.call([commands] + args.split(), cwd=cwd, shell=False,\n                           stdout=subprocess.DEVNULL if hide_stderr else None,\n                           stderr=subprocess.DEVNULL if not hide_stderr else None)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    \n    return VersioneerConfig()\n\n\ndef get_cmd_parser():\n    \n    return get_config().cmd_parser\n\n\ndef get_cmd_parser_version():\n    \n    return get_config().cmd_parser_version\n\n\ndef get_cmd_parser_usage():\n    \n    return get_config().cmd_parser_usage\n\n\ndef get_cmd_parser_description():\n    \n    return get_config().cmd_parser_description\n\n\ndef get_cmd_parser_epilog():\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    \n    return VersioneerConfig()\n\n\ndef get_cmd_parser():\n    \n    return get_config().cmd_parser\n\n\ndef get_cmd_parser_version():\n    \n    return get_config().cmd_parser_version\n\n\ndef get_cmd_parser_usage():\n    \n    return get_config().cmd_parser_usage\n\n\ndef get_cmd_parser_description():\n    \n    return get_config().cmd_parser_description\n\n\ndef get_cmd_parser_epilog():\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n  \n  def decorator(f):\n    vcs.handlers[method] = f\n    return f\n  return decorator\n\n\ndef register_vcs_handlers(vcs):\n  \n  vcs.handlers = {\n    'get': vcs.get,\n    'put': vcs.put,\n    'delete': vcs.delete,\n    'mkdir': vcs.mkdir,\n    'list': vcs.list,\n    'rename': vcs.rename,\n    'move': vcs.move,\n    'sync': vcs.sync,\n    'get_link': vcs.get_link,\n    'create_link': vcs.create_link,\n    'delete_link': vcs.delete_"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n  \n  def decorator(f):\n    vcs.handlers[method] = f\n    return f\n  return decorator\n\n\ndef register_vcs_handlers(vcs):\n  \n  vcs.handlers = {\n    'get': vcs.get,\n    'put': vcs.put,\n    'delete': vcs.delete,\n    'mkdir': vcs.mkdir,\n    'list': vcs.list,\n    'rename': vcs.rename,\n    'move': vcs.move,\n    'sync': vcs.sync,\n    'get_link': vcs.get_link,\n    'create_link': vcs.create_link,\n    'delete_link': vcs.delete_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self._validate_objects()\n        if check_digests:\n            self._check_digests()\n        if show_warnings:\n            self._show_warnings()\n\n    def check_object_type(self, object_type):\n        \n        if object_type not in self.OBJECT_TYPES:\n            raise Exception('Invalid object type')\n\n    def check_object_name(self, object_name):\n        \n        if object_name not in self.OBJECT_NAMES:\n            raise Exception('Invalid object name')\n\n    def validate_object_name(self, object_name):\n        \n        if object_name is None"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if validate_objects:\n            self._validate_objects()\n        if check_digests:\n            self._check_digests()\n        if show_warnings:\n            self._show_warnings()\n\n    def check_object_type(self, object_type):\n        \n        if object_type not in self.OBJECT_TYPES:\n            raise Exception('Invalid object type')\n\n    def check_object_name(self, object_name):\n        \n        if object_name not in self.OBJECT_NAMES:\n            raise Exception('Invalid object name')\n\n    def validate_object_name(self, object_name):\n        \n        if object_name is None", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n        \n        if not os.path.exists(self.storage_root):\n            os.makedirs(self.storage_root)\n        self.store = OCFLStorageStore(self.storage_root, self.storage_root)\n\ndef open(self, path, mode='r'):\n    \n    if mode == 'r':\n        return self.store.open(path)\n    else:\n        raise RuntimeError('Cannot open OCFLStorageStore in write mode')\n\ndef get_ocfl_data(self):\n    \n    return self.store.get_ocfl_data()\n\ndef set_ocfl_data(self, ocfl_data):\n    '''Set the data associated with the OCFL storage root."], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n        \n        if not os.path.exists(self.storage_root):\n            os.makedirs(self.storage_root)\n        self.store = OCFLStorageStore(self.storage_root, self.storage_root)\n\ndef open(self, path, mode='r'):\n    \n    if mode == 'r':\n        return self.store.open(path)\n    else:\n        raise RuntimeError('Cannot open OCFLStorageStore in write mode')\n\ndef get_ocfl_data(self):\n    \n    return self.store.get_ocfl_data()\n\ndef set_ocfl_data(self, ocfl_data):\n    '''Set the data associated with the OCFL storage root.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \n    version_splitted = version.split('.')\n    version_splitted = [int(v) for v in version_splitted]\n    version_splitted[-1] += 1\n    return '.'.join([str(v) for v in version_splitted])\n\n\ndef get_package_version(package_name):\n    \n    return get_package_info(package_name).version\n\n\ndef get_package_info(package_name):\n    \n    try:\n        return import_module(package_name)\n    except ImportError:\n        return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \n    version_splitted = version.split('.')\n    version_splitted = [int(v) for v in version_splitted]\n    version_splitted[-1] += 1\n    return '.'.join([str(v) for v in version_splitted])\n\n\ndef get_package_version(package_name):\n    \n    return get_package_info(package_name).version\n\n\ndef get_package_info(package_name):\n    \n    try:\n        return import_module(package_name)\n    except ImportError:\n        return None", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            if not os.path.exists(version_dir):\n                raise Exception('no version dir %s' % version_dir)\n            if not os.path.exists(version_dir + '/inventory'):\n                raise Exception('no inventory for version %s' % version_dir)\n\ndef validate_version_groups(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            if not os.path.exists(version_dir):\n                raise Exception('no version dir %s' % version_dir)\n            if not os.path.exists(version_dir + '/group'):\n                raise Exception('no group for version %s' % version_dir)\n\ndef validate_version_metadata"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            if not os.path.exists(version_dir):\n                raise Exception('no version dir %s' % version_dir)\n            if not os.path.exists(version_dir + '/inventory'):\n                raise Exception('no inventory for version %s' % version_dir)\n\ndef validate_version_groups(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            if not os.path.exists(version_dir):\n                raise Exception('no version dir %s' % version_dir)\n            if not os.path.exists(version_dir + '/group'):\n                raise Exception('no group for version %s' % version_dir)\n\ndef validate_version_metadata", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    \n    if path.startswith('/'):\n        return 'directory'\n    elif path.endswith('/'):\n        return 'directory'\n    elif path.endswith('.py'):\n        return 'python file'\n    elif path.endswith('.txt'):\n        return 'text file'\n    elif path.endswith('.md'):\n        return 'markdown file'\n    elif path.endswith('.jpg'):\n        return 'image'\n    elif path.endswith('.png'):\n        return 'image'\n    elif path.endswith('.svg'):\n        return 'image'\n    elif path.endswith('.gif'):\n        return 'image'\n    elif path.endswith('.jpeg'):\n        return 'image'\n    elif path.endswith('.mp"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    \n    if path.startswith('/'):\n        return 'directory'\n    elif path.endswith('/'):\n        return 'directory'\n    elif path.endswith('.py'):\n        return 'python file'\n    elif path.endswith('.txt'):\n        return 'text file'\n    elif path.endswith('.md'):\n        return 'markdown file'\n    elif path.endswith('.jpg'):\n        return 'image'\n    elif path.endswith('.png'):\n        return 'image'\n    elif path.endswith('.svg'):\n        return 'image'\n    elif path.endswith('.gif'):\n        return 'image'\n    elif path.endswith('.jpeg'):\n        return 'image'\n    elif path.endswith('.mp", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n        \n        bzparams = params.bzparams\n        bzparams.update({\n            'bug_ids': bug_ids,\n            'comments': params.comments,\n            'comment_type': params.comment_type,\n            'comments_from': params.comments_from,\n            'comments_to': params.comments_to,\n            'target_milestone': params.target_milestone,\n            'target_status': params.target_status,\n            'target_resolution': params.target_resolution,\n            'target_product': params.target_product,\n            'target_component': params.target_component,\n            'target_owner': params.target_owner,\n            'target_assigned_to': params.target_assigned_to,\n            'target_assigned_group': params.target_assigned"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n        \n        bzparams = params.bzparams\n        bzparams.update({\n            'bug_ids': bug_ids,\n            'comments': params.comments,\n            'comment_type': params.comment_type,\n            'comments_from': params.comments_from,\n            'comments_to': params.comments_to,\n            'target_milestone': params.target_milestone,\n            'target_status': params.target_status,\n            'target_resolution': params.target_resolution,\n            'target_product': params.target_product,\n            'target_component': params.target_component,\n            'target_owner': params.target_owner,\n            'target_assigned_to': params.target_assigned_to,\n            'target_assigned_group': params.target_assigned", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    \n    \n    \n    \n    '''(node name, [(key1, [(key11, [(key111, [(key1111,"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    \n    \n    \n    '''(node name, [(key1, [(key11, [(key111, [(key1111,", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    \n    import argparse\n    from . import __version__\n    parser = argparse.ArgumentParser(prog=\"snowflake\", version=__version__, description=\"Snowflake command line utility\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n    parser.add_argument(\"-p\", \"--profile\", help=\"Use the specified profile\")\n    parser.add_argument(\"-k\", \"--key\", help=\"Use the specified key\")\n    parser.add_argument(\"-a\", \"--account\", help=\"Use the specified account\")\n    parser.add_argument(\"-o\", \"--org\", help=\"Use the specified organization\")\n    parser.add_argument(\"-r\", \"--role\", help=\""], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n    import argparse\n    from . import __version__\n    parser = argparse.ArgumentParser(prog=\"snowflake\", version=__version__, description=\"Snowflake command line utility\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__)\n    parser.add_argument(\"-p\", \"--profile\", help=\"Use the specified profile\")\n    parser.add_argument(\"-k\", \"--key\", help=\"Use the specified key\")\n    parser.add_argument(\"-a\", \"--account\", help=\"Use the specified account\")\n    parser.add_argument(\"-o\", \"--org\", help=\"Use the specified organization\")\n    parser.add_argument(\"-r\", \"--role\", help=\"", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \n    return ' '.join(sorted(parser.option_strings))\n\n\ndef print_usage(parser):\n    \n    print parser_flags(parser), '<options>'\n\n\ndef print_help(parser):\n    \n    print parser.description\n    print\n    print_usage(parser)\n    print\n    print 'Available options'\n    print\n    for flag_group in parser._option_string_actions:\n        print flag_group[0]\n        print '  ' + flag_group[1]\n        print\n\n\ndef print_version():\n    \n    print 'Version 0.1.0'\n\n\ndef"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    return ' '.join(sorted(parser.option_strings))\n\n\ndef print_usage(parser):\n    \n    print parser_flags(parser), '<options>'\n\n\ndef print_help(parser):\n    \n    print parser.description\n    print\n    print_usage(parser)\n    print\n    print 'Available options'\n    print\n    for flag_group in parser._option_string_actions:\n        print flag_group[0]\n        print '  ' + flag_group[1]\n        print\n\n\ndef print_version():\n    \n    print 'Version 0.1.0'\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    parser = argparse.ArgumentParser(\n        prog='python3 ' + sys.argv[0],\n        description='Parses the arguments passed to this script.',\n        epilog='The following arguments do not have a corresponding subparser.')\n\n    parser.add_argument(\n        '-l', '--list', action='store_true',\n        help='List all available commands and exit.')\n\n    parser.add_argument(\n        '-v', '--version', action='version',\n        version='%(prog)s ' + __version__)\n\n    parser.add_argument(\n        '-g', '--global', action='store_true',\n        help='Use the global options specified by the global option file.')\n\n    parser.add_argument(\n        '-"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    parser = argparse.ArgumentParser(\n        prog='python3 ' + sys.argv[0],\n        description='Parses the arguments passed to this script.',\n        epilog='The following arguments do not have a corresponding subparser.')\n\n    parser.add_argument(\n        '-l', '--list', action='store_true',\n        help='List all available commands and exit.')\n\n    parser.add_argument(\n        '-v', '--version', action='version',\n        version='%(prog)s ' + __version__)\n\n    parser.add_argument(\n        '-g', '--global', action='store_true',\n        help='Use the global options specified by the global option file.')\n\n    parser.add_argument(\n        '-", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    for argument in unparsed_arguments:\n        if argument.startswith(subparsers.keys()):\n            subparser = subparsers[argument]\n            subparser.parse_args(unparsed_arguments[unparsed_arguments.index(argument)+1:])\n        else:\n            subparsers['default'].parse_args(unparsed_arguments)"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    for argument in unparsed_arguments:\n        if argument.startswith(subparsers.keys()):\n            subparser = subparsers[argument]\n            subparser.parse_args(unparsed_arguments[unparsed_arguments.index(argument)+1:])\n        else:\n            subparsers['default'].parse_args(unparsed_arguments)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    \n    parser = argparse.ArgumentParser(\n        description='A collection of scripts for running various tasks',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(dest='command')\n    return parser, subparsers\n\ndef main(args):\n    \n    if args.command == 'run':\n        run(args)\n    else:\n        raise ValueError('Unknown command: %s' % args.command)\n\ndef get_parser(command, subparsers):\n    \n    if command == 'run':\n        return run_parser(subparsers)\n    else:\n        raise ValueError('Unknown command: %s' % command)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    parser = argparse.ArgumentParser(\n        description='A collection of scripts for running various tasks',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(dest='command')\n    return parser, subparsers\n\ndef main(args):\n    \n    if args.command == 'run':\n        run(args)\n    else:\n        raise ValueError('Unknown command: %s' % args.command)\n\ndef get_parser(command, subparsers):\n    \n    if command == 'run':\n        return run_parser(subparsers)\n    else:\n        raise ValueError('Unknown command: %s' % command)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    \n    '''\n    (\n        ('foo', 'bar',\n            ('a', 'b', 'c')\n        )\n    )\n    '''\n    '''\n    It recursively merges the given nodes into a single dictionary.'''\n    merged_dict = {}\n    for node in nodes:\n        node_name, node_data, *node_children = node\n        merged_dict[node_name] = node_data\n        if node_children:\n            merged_dict[node_name].update(deep_merge_nodes(node_children))\n    return merged_dict\n\ndef deep_merge_configs(configs):\n    \n    '''\n    (\n        ('foo', 'bar',\n            ('a', 'b"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    '''\n    (\n        ('foo', 'bar',\n            ('a', 'b', 'c')\n        )\n    )\n    '''\n    '''\n    It recursively merges the given nodes into a single dictionary.'''\n    merged_dict = {}\n    for node in nodes:\n        node_name, node_data, *node_children = node\n        merged_dict[node_name] = node_data\n        if node_children:\n            merged_dict[node_name].update(deep_merge_nodes(node_children))\n    return merged_dict\n\ndef deep_merge_configs(configs):\n    \n    '''\n    (\n        ('foo', 'bar',\n            ('a', 'b", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    \n    from argparse import ArgumentParser\n    parser = ArgumentParser(add_help=False)\n    parser.add_argument('-h', '--help', action='help', help='show this help message and exit')\n    parser.add_argument('-s', '--settings-file', metavar='FILE', help='specify a settings file (default: settings.py)')\n    return parser.parse_args(arguments)\n\n\ndef read_settings(settings_file='settings.py'):\n    \n    from importlib import import_module\n    settings_module = import_module(settings_file)\n    return settings_module.settings\n\n\ndef main(arguments):\n    '''Given command-line arguments, read"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n    from argparse import ArgumentParser\n    parser = ArgumentParser(add_help=False)\n    parser.add_argument('-h', '--help', action='help', help='show this help message and exit')\n    parser.add_argument('-s', '--settings-file', metavar='FILE', help='specify a settings file (default: settings.py)')\n    return parser.parse_args(arguments)\n\n\ndef read_settings(settings_file='settings.py'):\n    \n    from importlib import import_module\n    settings_module = import_module(settings_file)\n    return settings_module.settings\n\n\ndef main(arguments):\n    '''Given command-line arguments, read", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    \n    flags = []\n    for flag in parser._action_groups.values():\n        flags.extend(flag.option_strings)\n    return ' '.join(flags)\n\n\ndef get_flag_value(parser, flag):\n    \n    return parser.get_default(flag)\n\n\ndef parse_flags(parser, flags):\n    \n    parser.parse_known_args()\n    for flag in flags:\n        parser.get_default(flag)\n\n\ndef get_flag_value(parser, flag):\n    \n    return parser.get_default"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    flags = []\n    for flag in parser._action_groups.values():\n        flags.extend(flag.option_strings)\n    return ' '.join(flags)\n\n\ndef get_flag_value(parser, flag):\n    \n    return parser.get_default(flag)\n\n\ndef parse_flags(parser, flags):\n    \n    parser.parse_known_args()\n    for flag in flags:\n        parser.get_default(flag)\n\n\ndef get_flag_value(parser, flag):\n    \n    return parser.get_default", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    \n    import subprocess\n    import tempfile\n    import os\n\n    completion_script = \"\"\"\\\n\n_borgmatic(){\n    local cur prev opts base\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n\n    case \"${prev}\" in\n        --hostname)\n            opts=\"-h --help\"\n            ;;\n        --ssh-identity-file)\n            opts=\"--hostname --help\"\n            ;;\n        -*)\n            opts=\"$(borgmatic --help 2>/dev/null | sed -n '/^  --/,/^$/ { s/^  //; s/^\\t//"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    \n    import subprocess\n    import tempfile\n    import os\n\n    completion_script = \"\"\"\\\n\n_borgmatic(){\n    local cur prev opts base\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n\n    case \"${prev}\" in\n        --hostname)\n            opts=\"-h --help\"\n            ;;\n        --ssh-identity-file)\n            opts=\"--hostname --help\"\n            ;;\n        -*)\n            opts=\"$(borgmatic --help 2>/dev/null | sed -n '/^  --/,/^$/ { s/^  //; s/^\\t//", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    parser = argparse.ArgumentParser(description='Parse a sequence of FASTA files into a single FASTA file.')\n    parser.add_argument('-o', '--output', required=True,\n                        help='the output FASTA file')\n    parser.add_argument('inputs', nargs='+',\n                        help='the input FASTA files')\n    args = parser.parse_args(unparsed_arguments)\n    inputs = {}\n    for input_file in args.inputs:\n        with open(input_file, 'r') as f:\n            inputs[input_file] = f.read()\n    return args, inputs\n\n\ndef main(un"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    parser = argparse.ArgumentParser(description='Parse a sequence of FASTA files into a single FASTA file.')\n    parser.add_argument('-o', '--output', required=True,\n                        help='the output FASTA file')\n    parser.add_argument('inputs', nargs='+',\n                        help='the input FASTA files')\n    args = parser.parse_args(unparsed_arguments)\n    inputs = {}\n    for input_file in args.inputs:\n        with open(input_file, 'r') as f:\n            inputs[input_file] = f.read()\n    return args, inputs\n\n\ndef main(un", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    subparser_actions = []\n    for arg in unparsed_arguments:\n        if arg.startswith('--'):\n            subparser_actions.append(arg)\n        else:\n            if arg not in subparsers:\n                raise RuntimeError('Unknown option \"{}\".'.format(arg))\n            subparser_actions.append(subparsers[arg].parse_args(unparsed_arguments))\n\n    return subparser_actions\n\n\ndef parse_subcommand(unparsed_arguments, subparsers):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    subparser_actions = []\n    for arg in unparsed_arguments:\n        if arg.startswith('--'):\n            subparser_actions.append(arg)\n        else:\n            if arg not in subparsers:\n                raise RuntimeError('Unknown option \"{}\".'.format(arg))\n            subparser_actions.append(subparsers[arg].parse_args(unparsed_arguments))\n\n    return subparser_actions\n\n\ndef parse_subcommand(unparsed_arguments, subparsers):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    \n    parser = argparse.ArgumentParser(description='Parse a text file for a given keyword.')\n    parser.add_argument('keyword', type=str, help='The keyword to search for.')\n    subparsers = parser.add_subparsers(dest='subparser_name')\n    return parser, subparsers\n\n\ndef make_find_subparser(parser, subparsers):\n    \n    find_subparser = subparsers.add_parser('find', help='Search for a keyword in a file.')\n    find_subparser.add_argument('filename', type=str, help='The file to search in.')\n    return find_subparser\n\n\ndef make_count_subparser(parser, sub"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    parser = argparse.ArgumentParser(description='Parse a text file for a given keyword.')\n    parser.add_argument('keyword', type=str, help='The keyword to search for.')\n    subparsers = parser.add_subparsers(dest='subparser_name')\n    return parser, subparsers\n\n\ndef make_find_subparser(parser, subparsers):\n    \n    find_subparser = subparsers.add_parser('find', help='Search for a keyword in a file.')\n    find_subparser.add_argument('filename', type=str, help='The file to search in.')\n    return find_subparser\n\n\ndef make_count_subparser(parser, sub", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    \n\n    response = response.json()\n    next_page = response['next']\n    if not next_page:\n        return response\n    else:\n        return paging(requests.get(next_page), max_results)"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    \n\n    response = response.json()\n    next_page = response['next']\n    if not next_page:\n        return response\n    else:\n        return paging(requests.get(next_page), max_results)", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    \n    try:\n        return int(size.split()[0])\n    except ValueError:\n        return 0\n\n\ndef count_files(file_list: list) -> int:\n    \n    count = 0\n    for file in file_list:\n        if os.path.isfile(file):\n            count += 1\n    return count\n\n\ndef get_files(path: str, extension: str) -> list:\n    \n    return [\n        os.path.join(path, f) for f in os.listdir(path) if f.endswith(extension)\n    ]\n\n\ndef get_file_size(file: str) -> int:\n    '''Get the size of a file"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    \n    try:\n        return int(size.split()[0])\n    except ValueError:\n        return 0\n\n\ndef count_files(file_list: list) -> int:\n    \n    count = 0\n    for file in file_list:\n        if os.path.isfile(file):\n            count += 1\n    return count\n\n\ndef get_files(path: str, extension: str) -> list:\n    \n    return [\n        os.path.join(path, f) for f in os.listdir(path) if f.endswith(extension)\n    ]\n\n\ndef get_file_size(file: str) -> int:\n    '''Get the size of a file", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    \n    return sum(dicts, {})\n\n\ndef _flatten(l):\n    \n    return [item for sublist in l for item in sublist]\n\n\ndef _intersection(l1, l2):\n    \n    if l1 is None or l2 is None:\n        return []\n    return [item for item in l1 if item in l2]\n\n\ndef _join(l, sep=' '):\n    \n    return sep.join(l)\n\n\ndef _map(fn, l):\n    \n    return [fn(item) for item in l]\n\n\ndef _merge(*"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    \n    return sum(dicts, {})\n\n\ndef _flatten(l):\n    \n    return [item for sublist in l for item in sublist]\n\n\ndef _intersection(l1, l2):\n    \n    if l1 is None or l2 is None:\n        return []\n    return [item for item in l1 if item in l2]\n\n\ndef _join(l, sep=' '):\n    \n    return sep.join(l)\n\n\ndef _map(fn, l):\n    \n    return [fn(item) for item in l]\n\n\ndef _merge(*", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    \n    for arg_key, arg_val in url_args.items():\n        url = url.replace('{' + arg_key + '}', arg_val)\n    return url\n\ndef _extract_url_args(url, url_args):\n    \n    for arg_key, arg_val in url_args.items():\n        if arg_key in url:\n            url_args[arg_key] = arg_val\n\ndef _get_url_args(url):\n    \n    url_args = {}\n    if '?' in url:\n        url_args = dict"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    \n    for arg_key, arg_val in url_args.items():\n        url = url.replace('{' + arg_key + '}', arg_val)\n    return url\n\ndef _extract_url_args(url, url_args):\n    \n    for arg_key, arg_val in url_args.items():\n        if arg_key in url:\n            url_args[arg_key] = arg_val\n\ndef _get_url_args(url):\n    \n    url_args = {}\n    if '?' in url:\n        url_args = dict", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n    \n\n    return val is None or val.lower() == 'none'\n\n\ndef is_none_boolean(val: Any) -> bool:\n    \n\n    return val is None or val.lower() == 'false'\n\n\ndef to_bool(val: Any) -> bool:\n    \n\n    return bool(val)"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n    \n\n    return val is None or val.lower() == 'none'\n\n\ndef is_none_boolean(val: Any) -> bool:\n    \n\n    return val is None or val.lower() == 'false'\n\n\ndef to_bool(val: Any) -> bool:\n    \n\n    return bool(val)", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    \n    return ' '.join(parser.format_help().splitlines())\n\n\ndef main(args):\n    '''\n    Given a list of arguments, run the specified subcommand.\n    '''\n    if args.subcommand == 'help':\n        print('Usage:')\n        print('  {} <subcommand>'.format(__file__))\n        print('')\n        print('Available subcommands:')\n        print('  help: Print this message')\n        print('  parser_flags: Print the flags that can be used to run this script')\n        return\n    elif args.subcommand == 'parser_flags':\n        print(parser_flags(args.parser))\n        return\n    else:\n        raise ValueError('Unknown subcommand: {}'.format(args.subcommand))"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    return ' '.join(parser.format_help().splitlines())\n\n\ndef main(args):\n    '''\n    Given a list of arguments, run the specified subcommand.\n    '''\n    if args.subcommand == 'help':\n        print('Usage:')\n        print('  {} <subcommand>'.format(__file__))\n        print('')\n        print('Available subcommands:')\n        print('  help: Print this message')\n        print('  parser_flags: Print the flags that can be used to run this script')\n        return\n    elif args.subcommand == 'parser_flags':\n        print(parser_flags(args.parser))\n        return\n    else:\n        raise ValueError('Unknown subcommand: {}'.format(args.subcommand))", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    \n    processed_path_name = os.path.join(processed, path_name)\n    if os.path.exists(processed_path_name):\n        if verbose:\n            print('File or directory already processed. Skipping processing.')\n        return 1\n    else:\n        return 0\n\n\ndef get_file_list(dir_path, verbose):\n    \n    file_list = []\n    dir_list = []\n    for path, subdirs, files in os.walk(dir_path):\n        for file in files:\n            if verbose:\n                print('Processing file:', file)\n            file_list.append(os.path.join(path, file))\n        for subdir in subdirs:\n            if"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    \n    processed_path_name = os.path.join(processed, path_name)\n    if os.path.exists(processed_path_name):\n        if verbose:\n            print('File or directory already processed. Skipping processing.')\n        return 1\n    else:\n        return 0\n\n\ndef get_file_list(dir_path, verbose):\n    \n    file_list = []\n    dir_list = []\n    for path, subdirs, files in os.walk(dir_path):\n        for file in files:\n            if verbose:\n                print('Processing file:', file)\n            file_list.append(os.path.join(path, file))\n        for subdir in subdirs:\n            if", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    \n    return zip(vertices, vertices[1:], vertices[2:] + [vertices[0]])\n\ndef is_in(point, polygon):\n    \n    x,y = point\n    polygon = vertex3tuple(polygon)\n    n = len(polygon)\n    inside = False\n    p1,p2 = polygon[0],polygon[1]\n    for i in range(n+1):\n        x3,y3 = polygon[i % n]\n        if y > min(p1[1],p2[1]):\n            if y <= max(p1[1],p2[1]):\n                if x <= max(p1[0],p2[0]):\n                    if p1[1] != p2[1]:"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    \n    return zip(vertices, vertices[1:], vertices[2:] + [vertices[0]])\n\ndef is_in(point, polygon):\n    \n    x,y = point\n    polygon = vertex3tuple(polygon)\n    n = len(polygon)\n    inside = False\n    p1,p2 = polygon[0],polygon[1]\n    for i in range(n+1):\n        x3,y3 = polygon[i % n]\n        if y > min(p1[1],p2[1]):\n            if y <= max(p1[1],p2[1]):\n                if x <= max(p1[0],p2[0]):\n                    if p1[1] != p2[1]:", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    if padding is not None:\n        result = result.rjust(padding)\n    return result\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    result = 0\n    for i, char in enumerate(string[::-1]):\n        result += alphabet.index(char) * (len(alphabet) ** i)\n    return result\n\nclass IntAlphabet:\n    \n    def __init__(self, alphabet: List[str]):"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    if padding is not None:\n        result = result.rjust(padding)\n    return result\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    result = 0\n    for i, char in enumerate(string[::-1]):\n        result += alphabet.index(char) * (len(alphabet) ** i)\n    return result\n\nclass IntAlphabet:\n    \n    def __init__(self, alphabet: List[str]):", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _replace_register_with_number(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _get_register(flow_params, register_number):\n    \n    return flow_params[register_number]\n\ndef _set_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _set_register_with_number(flow_params, register_number, register_value):\n    \n    flow_params[register_"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _replace_register_with_number(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _get_register(flow_params, register_number):\n    \n    return flow_params[register_number]\n\ndef _set_register(flow_params, register_number, register_value):\n    \n    flow_params[register_number] = register_value\n\ndef _set_register_with_number(flow_params, register_number, register_value):\n    \n    flow_params[register_", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n    return value.replace('.', arg)\n\nif __name__ == '__main__':\n    import sys\n\n    print(replace_dots('a.b.c.', 'd'))"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n    return value.replace('.', arg)\n\nif __name__ == '__main__':\n    import sys\n\n    print(replace_dots('a.b.c.', 'd'))", "is_pass": true, "return_code": 0}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    return [sub for sub in cls.__subclasses__()] + [sub for sub in cls.__subclasses__() if sub.__bases__]\n\ndef get_class(name):\n    \n    name = name.split('.')\n    mod = __import__(name[0])\n    for comp in name[1:]:\n        mod = getattr(mod, comp)\n    return mod\n\ndef subclasses_and_parents(cls):\n    \n    return sorted(list(set(subclasses(cls) + [cls])), key=lambda x: x.__name__)\n\ndef is_subclass(cls, parent):\n    \n    return any(issubclass(parent"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    return [sub for sub in cls.__subclasses__()] + [sub for sub in cls.__subclasses__() if sub.__bases__]\n\ndef get_class(name):\n    \n    name = name.split('.')\n    mod = __import__(name[0])\n    for comp in name[1:]:\n        mod = getattr(mod, comp)\n    return mod\n\ndef subclasses_and_parents(cls):\n    \n    return sorted(list(set(subclasses(cls) + [cls])), key=lambda x: x.__name__)\n\ndef is_subclass(cls, parent):\n    \n    return any(issubclass(parent", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    return sum([ alphabet.index(c) for c in string ])\n\ndef int_to_string(int_number: int, alphabet: List[str]) -> str:\n    \n    return ''.join([ alphabet[i] for i in range(len(alphabet)) if int_number >= i ])\n\ndef get_alphabet(filename: str) -> List[str]:\n    \n    with open(filename, 'r') as f:\n        return f.read().splitlines()\n\ndef get_alphabet_len(alphabet: List[str]) -> int:\n    \n    return len(alphabet)\n\ndef get_"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    return sum([ alphabet.index(c) for c in string ])\n\ndef int_to_string(int_number: int, alphabet: List[str]) -> str:\n    \n    return ''.join([ alphabet[i] for i in range(len(alphabet)) if int_number >= i ])\n\ndef get_alphabet(filename: str) -> List[str]:\n    \n    with open(filename, 'r') as f:\n        return f.read().splitlines()\n\ndef get_alphabet_len(alphabet: List[str]) -> int:\n    \n    return len(alphabet)\n\ndef get_", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        if not url.endswith('.tar.gz'):\n            raise ValueError(f\"{url} is not a .tar.gz archive\")\n        destination_path = destination_path.expanduser()\n        destination_path.mkdir(parents=True, exist_ok=True)\n        with tempfile.NamedTemporaryFile('w', suffix='.tar.gz', dir=destination_path) as fp:\n            self.logger.debug(f\"Downloading {url}\")\n            self.download_file(url, fp)\n            fp.flush()\n            with tarfile.open(fp.name, 'r:gz') as t:\n                t.extractall(destination_path)\n        return destination_path\n\ndef get_repo_archive_path(self, repo_id: str):\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        if not url.endswith('.tar.gz'):\n            raise ValueError(f\"{url} is not a .tar.gz archive\")\n        destination_path = destination_path.expanduser()\n        destination_path.mkdir(parents=True, exist_ok=True)\n        with tempfile.NamedTemporaryFile('w', suffix='.tar.gz', dir=destination_path) as fp:\n            self.logger.debug(f\"Downloading {url}\")\n            self.download_file(url, fp)\n            fp.flush()\n            with tarfile.open(fp.name, 'r:gz') as t:\n                t.extractall(destination_path)\n        return destination_path\n\ndef get_repo_archive_path(self, repo_id: str):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    \n    return platform.system() == 'Darwin'\n\ndef os_is_linux():\n    \n    return platform.system() == 'Linux'\n\ndef os_is_windows():\n    \n    return platform.system() == 'Windows'\n\ndef os_is_android():\n    \n    return platform.system() == 'Android'\n\ndef get_os_type():\n    \n    if os_is_mac():\n        return 1\n    elif os_is_linux():\n        return 2\n    elif os_is_windows():\n        return 3\n    elif os_is_android():\n        return 4\n    else:\n        return 0"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    \n    return platform.system() == 'Darwin'\n\ndef os_is_linux():\n    \n    return platform.system() == 'Linux'\n\ndef os_is_windows():\n    \n    return platform.system() == 'Windows'\n\ndef os_is_android():\n    \n    return platform.system() == 'Android'\n\ndef get_os_type():\n    \n    if os_is_mac():\n        return 1\n    elif os_is_linux():\n        return 2\n    elif os_is_windows():\n        return 3\n    elif os_is_android():\n        return 4\n    else:\n        return 0", "is_pass": true, "return_code": 0}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    \n    item = item.strip()\n    if not item:\n        return item\n    if item[0] == '[':\n        return item[1:-1]\n    return '[' + item + ']'\n\ndef get_lines(filename, regex_dict, line_filter=None):\n    '''\n    Return list of lines in file matching regex_dict.\n\n    If line_filter is provided, return lines that match the filter.\n    '''\n    with open(filename) as f:\n        lines = f.readlines()\n    lines = [line.strip() for line in lines]\n    return [line for line in lines if regex_dict(line) == regex_dict(line_filter)]\n\ndef get_headers(filename, regex_dict, line_filter=None):\n    '''\n    Return list of header lines in file"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    \n    item = item.strip()\n    if not item:\n        return item\n    if item[0] == '[':\n        return item[1:-1]\n    return '[' + item + ']'\n\ndef get_lines(filename, regex_dict, line_filter=None):\n    '''\n    Return list of lines in file matching regex_dict.\n\n    If line_filter is provided, return lines that match the filter.\n    '''\n    with open(filename) as f:\n        lines = f.readlines()\n    lines = [line.strip() for line in lines]\n    return [line for line in lines if regex_dict(line) == regex_dict(line_filter)]\n\ndef get_headers(filename, regex_dict, line_filter=None):\n    '''\n    Return list of header lines in file", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    \n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n\n\ndef quote(name):\n    \n    return '\"' + name + '\"'\n\n\ndef extract_module(name):\n    \n    if '.' in name:\n        return name.split('.', 1)[0]\n\n    return name"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    \n    if name[0] == '\"' and name[-1] == '\"':\n        return name[1:-1]\n    return name\n\n\ndef quote(name):\n    \n    return '\"' + name + '\"'\n\n\ndef extract_module(name):\n    \n    if '.' in name:\n        return name.split('.', 1)[0]\n\n    return name", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    \n    return list(filter(None, s.split(';' if platform == 'this' else ':')))\n\nfrom . import config, const, shell, util\n\n__version__ = '0.0.1'\n__author__ = 'Alan Cox'\n__license__ = 'BSD 3-Clause'\n\nimport os\nimport sys\nimport unittest\n\nfrom src import util\n\n\nclass TestUtil(unittest.TestCase):\n    \"\"\"Test the util module.\"\"\"\n\n    def test_split_not_split(self):\n        \"\"\"Test the split function with a string that is not split.\"\"\"\n        self.assertEqual(util.split('dummy'), ['dummy'])\n\n    def test_split_split(self):\n        \"\"\""], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    \n    return list(filter(None, s.split(';' if platform == 'this' else ':')))\n\nfrom . import config, const, shell, util\n\n__version__ = '0.0.1'\n__author__ = 'Alan Cox'\n__license__ = 'BSD 3-Clause'\n\nimport os\nimport sys\nimport unittest\n\nfrom src import util\n\n\nclass TestUtil(unittest.TestCase):\n    \"\"\"Test the util module.\"\"\"\n\n    def test_split_not_split(self):\n        \"\"\"Test the split function with a string that is not split.\"\"\"\n        self.assertEqual(util.split('dummy'), ['dummy'])\n\n    def test_split_split(self):\n        \"\"\"", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if filename is None:\n        filename = os.path.basename(archive_path)\n\n    if not os.path.exists(archive_path):\n        raise ValueError(f\"Cannot find archive at {archive_path}\")\n\n    tmp_path = Path(tmp_path)\n    tmp_path.mkdir(parents=True, exist_ok=True)\n\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(tmp_path)\n\n    return str(tmp_path / filename)\n\n\ndef _make_path_absolute(path: Union[Path, str]) -> Path:\n    if not os.path.isabs(path):\n        path = Path(path).absolute()\n    return path\n\n\ndef _make_path_relative_to_home"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if filename is None:\n        filename = os.path.basename(archive_path)\n\n    if not os.path.exists(archive_path):\n        raise ValueError(f\"Cannot find archive at {archive_path}\")\n\n    tmp_path = Path(tmp_path)\n    tmp_path.mkdir(parents=True, exist_ok=True)\n\n    with tarfile.open(archive_path) as archive:\n        archive.extractall(tmp_path)\n\n    return str(tmp_path / filename)\n\n\ndef _make_path_absolute(path: Union[Path, str]) -> Path:\n    if not os.path.isabs(path):\n        path = Path(path).absolute()\n    return path\n\n\ndef _make_path_relative_to_home", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):\n        \n        return_val = \"\"\n        ignore_cmd = \"git ls-files --others --exclude-standard | grep -v .gitignore\"\n        ignore_output = subprocess.check_output(ignore_cmd, shell=True)\n        ignore_list = ignore_output.split('\\n')\n        ignore_list = list(filter(None, ignore_list))\n        ignore_list = sorted(ignore_list)\n        for file in ignored:\n            if file not in ignore_list:\n                raise ValueError(\"Ignored file %s is not a gitignore file\" % file)\n        for file in ignore_list:\n            if return_val != \"\":\n                return_val = return_val + \", \"\n            return_val = return_val + file\n        return return_val\n\ndef build_url(self):\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):\n        \n        return_val = \"\"\n        ignore_cmd = \"git ls-files --others --exclude-standard | grep -v .gitignore\"\n        ignore_output = subprocess.check_output(ignore_cmd, shell=True)\n        ignore_list = ignore_output.split('\\n')\n        ignore_list = list(filter(None, ignore_list))\n        ignore_list = sorted(ignore_list)\n        for file in ignored:\n            if file not in ignore_list:\n                raise ValueError(\"Ignored file %s is not a gitignore file\" % file)\n        for file in ignore_list:\n            if return_val != \"\":\n                return_val = return_val + \", \"\n            return_val = return_val + file\n        return return_val\n\ndef build_url(self):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected is None:\n            collected = []\n        if left == []:\n            return True, collected, []\n        if isinstance(left[0], Pattern):\n            collected.append(left[0])\n            return True, [left[1:]], collected\n        if isinstance(left[0], LeafPattern):\n            return False, [], []\n        if left[0] != '_':\n            return False, [], []\n        return self.match(left[1:], collected)\n\n    def __call__(self, filename: str) -> tuple[bool, list[LeafPattern]]:\n        \n        return self.match(filename)\n\n'''\npynet\n=============\n\nA module"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected is None:\n            collected = []\n        if left == []:\n            return True, collected, []\n        if isinstance(left[0], Pattern):\n            collected.append(left[0])\n            return True, [left[1:]], collected\n        if isinstance(left[0], LeafPattern):\n            return False, [], []\n        if left[0] != '_':\n            return False, [], []\n        return self.match(left[1:], collected)\n\n    def __call__(self, filename: str) -> tuple[bool, list[LeafPattern]]:\n        \n        return self.match(filename)\n\n'''\npynet\n=============\n\nA module", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    if frequency[-1] in [\"s\", \"m\", \"h\", \"d\", \"w\", \"M\", \"y\"]:\n        return dt.timedelta(**{frequency[-1]: int(frequency[:-1])})\n    else:\n        raise ValueError(\"Invalid frequency string: {}\".format(frequency))\n\n\ndef parse_timedelta(delay):\n    \n    if isinstance(delay, dt.timedelta):\n        return delay\n    if delay.startswith(\"@\"):\n        return parse_frequency(delay[1:])\n    raise ValueError(\"Invalid delay string: {}\".format(delay))\n\n\ndef parse_time(time):\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    if frequency[-1] in [\"s\", \"m\", \"h\", \"d\", \"w\", \"M\", \"y\"]:\n        return dt.timedelta(**{frequency[-1]: int(frequency[:-1])})\n    else:\n        raise ValueError(\"Invalid frequency string: {}\".format(frequency))\n\n\ndef parse_timedelta(delay):\n    \n    if isinstance(delay, dt.timedelta):\n        return delay\n    if delay.startswith(\"@\"):\n        return parse_frequency(delay[1:])\n    raise ValueError(\"Invalid delay string: {}\".format(delay))\n\n\ndef parse_time(time):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    \n    if host == 'localhost':\n        return True\n    else:\n        return False\n\ndef is_local_host(host):\n    \n    if host == '127.0.0.1':\n        return True\n    else:\n        return False"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    \n    if host == 'localhost':\n        return True\n    else:\n        return False\n\ndef is_local_host(host):\n    \n    if host == '127.0.0.1':\n        return True\n    else:\n        return False", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    \n    find_paths = [find_path for find_path in find_paths if find_path]\n    find_paths = [find_path.replace('*', '**') for find_path in find_paths]\n    return find_paths\n\n\ndef find_path(find_paths, path):\n    \n    for find_path in find_paths:\n        if path.startswith(find_path):\n            return path\n\n\ndef find_paths(find_paths, path):\n    \n    return [path for find_path in find_paths if path.startswith(find_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    \n    find_paths = [find_path for find_path in find_paths if find_path]\n    find_paths = [find_path.replace('*', '**') for find_path in find_paths]\n    return find_paths\n\n\ndef find_path(find_paths, path):\n    \n    for find_path in find_paths:\n        if path.startswith(find_path):\n            return path\n\n\ndef find_paths(find_paths, path):\n    \n    return [path for find_path in find_paths if path.startswith(find_", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    \ndef is_linux():\n    \ndef is_osx():\n    \ndef is_windows():\n    "], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    \ndef is_linux():\n    \ndef is_osx():\n    \ndef is_windows():\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.isfile(config_filename):\n        print('WARNING: Configuration file {} already exists. Not overwriting.'.format(config_filename))\n    else:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n        print('Wrote configuration to {}'.format(config_filename))\n\ndef render_configuration(\n        template_filename,\n        target_filename,\n        params,\n        context,\n        context_path='',\n        context_separator='::',\n        context_delimiter='=',\n        indent=2,\n        sort_keys=False,\n        default_flow_style=False,\n        allow_unicode=True,\n        explicit_start=False,\n        explicit_end=False,\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.isfile(config_filename):\n        print('WARNING: Configuration file {} already exists. Not overwriting.'.format(config_filename))\n    else:\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n        print('Wrote configuration to {}'.format(config_filename))\n\ndef render_configuration(\n        template_filename,\n        target_filename,\n        params,\n        context,\n        context_path='',\n        context_separator='::',\n        context_delimiter='=',\n        indent=2,\n        sort_keys=False,\n        default_flow_style=False,\n        allow_unicode=True,\n        explicit_start=False,\n        explicit_end=False,\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.split())\n\n\ndef onecommand(script):\n    \n    return script.split()[0]\n\n\ndef split(script):\n    \n    return script.split(';')"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.split())\n\n\ndef onecommand(script):\n    \n    return script.split()[0]\n\n\ndef split(script):\n    \n    return script.split(';')", "is_pass": true, "return_code": 0}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    import subprocess\n    import sys\n    import traceback\n    import multiprocessing\n\n    class _TimeoutError(Exception):\n        \n        pass\n\n    def _target():\n        try:\n            return func(*args)\n        except Exception:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    try:\n        with multiprocessing.Pool(processes=1) as pool:\n            result = pool.apply_async(_target, args)\n            return result.get(timeout=timeout)\n    except _TimeoutError:\n        raise\n    except Exception:\n        traceback.print_exc(file=sys.stderr)\n        raise\n\ndef subprocess_run(func, *args, timeout=None, extra_env=None):"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    import subprocess\n    import sys\n    import traceback\n    import multiprocessing\n\n    class _TimeoutError(Exception):\n        \n        pass\n\n    def _target():\n        try:\n            return func(*args)\n        except Exception:\n            traceback.print_exc(file=sys.stderr)\n            raise\n\n    try:\n        with multiprocessing.Pool(processes=1) as pool:\n            result = pool.apply_async(_target, args)\n            return result.get(timeout=timeout)\n    except _TimeoutError:\n        raise\n    except Exception:\n        traceback.print_exc(file=sys.stderr)\n        raise\n\ndef subprocess_run(func, *args, timeout=None, extra_env=None):", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    \n\n    if isinstance(matcher, matcherlib.Matcher):\n        if len(matcher) != 1:\n            raise ValueError('Matcher must contain a single string value.')\n        return matcher[0]\n\n    elif isinstance(matcher, matcherlib.Optional):\n        return matcher.default\n\n    else:\n        return matcher\n\n\ndef _resolve_list(matcher):\n    \n\n    if isinstance(matcher, matcher"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    \n\n    if isinstance(matcher, matcherlib.Matcher):\n        if len(matcher) != 1:\n            raise ValueError('Matcher must contain a single string value.')\n        return matcher[0]\n\n    elif isinstance(matcher, matcherlib.Optional):\n        return matcher.default\n\n    else:\n        return matcher\n\n\ndef _resolve_list(matcher):\n    \n\n    if isinstance(matcher, matcher", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_ref_parts = image_href.split('/')\n    if len(image_ref_parts) == 3:\n        return image_ref_parts[0], image_ref_parts[1], False\n    elif len(image_ref_parts) == 4:\n        return image_ref_parts[0], image_ref_parts[1], True\n    else:\n        raise ValueError(f\"Unknown `imageRef` format: {image_href}\")\n\n\ndef _parse_image_href(image_ref: str) -> str:\n    \n    return f\"https://{image_ref}\"\n\nfrom . import app, utils, views"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_ref_parts = image_href.split('/')\n    if len(image_ref_parts) == 3:\n        return image_ref_parts[0], image_ref_parts[1], False\n    elif len(image_ref_parts) == 4:\n        return image_ref_parts[0], image_ref_parts[1], True\n    else:\n        raise ValueError(f\"Unknown `imageRef` format: {image_href}\")\n\n\ndef _parse_image_href(image_ref: str) -> str:\n    \n    return f\"https://{image_ref}\"\n\nfrom . import app, utils, views", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        if input_list[i].endswith(\"\\\\\"):\n            input_list[i] = input_list[i][:-1]\n    return(input_list)\n\n\ndef remove_duplicates(input_list):\n    \n    new_list = []\n    for i in input_list:\n        if i not in new_list:\n            new_list.append(i)\n    return(new_list)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        if input_list[i].endswith(\"\\\\\"):\n            input_list[i] = input_list[i][:-1]\n    return(input_list)\n\n\ndef remove_duplicates(input_list):\n    \n    new_list = []\n    for i in input_list:\n        if i not in new_list:\n            new_list.append(i)\n    return(new_list)", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):\n        \n        if strip:\n            pattern = pattern.strip()\n        if pattern == '':\n            return pattern\n        if pattern.startswith('^'):\n            pattern = pattern[1:]\n        if pattern.endswith('$'):\n            pattern = pattern[:-1]\n        if pattern.startswith('\\\\'):\n            pattern = pattern[1:]\n        pattern = re.sub(r'\\*', '.*', pattern)\n        pattern = re.sub(r'(\\*\\*)', '.*?', pattern)\n        pattern = re.sub(r'\\?', '[^\\n]', pattern)\n        pattern = re.sub(r'(\\[\\^\\])', '(?![^\\n]+)', pattern)\n        pattern = re.sub(r'(\\[\\*\\])', '(?=.*?"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):\n        \n        if strip:\n            pattern = pattern.strip()\n        if pattern == '':\n            return pattern\n        if pattern.startswith('^'):\n            pattern = pattern[1:]\n        if pattern.endswith('$'):\n            pattern = pattern[:-1]\n        if pattern.startswith('\\\\'):\n            pattern = pattern[1:]\n        pattern = re.sub(r'\\*', '.*', pattern)\n        pattern = re.sub(r'(\\*\\*)', '.*?', pattern)\n        pattern = re.sub(r'\\?', '[^\\n]', pattern)\n        pattern = re.sub(r'(\\[\\^\\])', '(?![^\\n]+)', pattern)\n        pattern = re.sub(r'(\\[\\*\\])', '(?=.*?", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):\n        \n        try:\n            stdout = subprocess.check_output(cmd,\n                                             cwd=self.repo_dir,\n                                             stderr=subprocess.STDOUT,\n                                             shell=True)\n        except subprocess.CalledProcessError as e:\n            raise CommandError('command failed: %s' % e.output)\n        else:\n            if verbose:\n                print(stdout)\n\nimport os\nimport sys\nimport time\nimport subprocess\nimport json\nfrom . import git\nfrom . import error\n\n\nclass Repository(object):\n    def __init__(self, path):\n        self.path = path\n        self.git = git.Git(path)\n\n    def __repr__(self):\n        return '<pygit.Repository %s>' %"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):\n        \n        try:\n            stdout = subprocess.check_output(cmd,\n                                             cwd=self.repo_dir,\n                                             stderr=subprocess.STDOUT,\n                                             shell=True)\n        except subprocess.CalledProcessError as e:\n            raise CommandError('command failed: %s' % e.output)\n        else:\n            if verbose:\n                print(stdout)\n\nimport os\nimport sys\nimport time\nimport subprocess\nimport json\nfrom . import git\nfrom . import error\n\n\nclass Repository(object):\n    def __init__(self, path):\n        self.path = path\n        self.git = git.Git(path)\n\n    def __repr__(self):\n        return '<pygit.Repository %s>' %", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    \n    try:\n        octets = target.split(\".\")\n        if len(octets) != 4:\n            return False\n        for x in octets:\n            if not x.isdigit() or int(x) > 255:\n                return False\n        return True\n    except Exception:\n        return False\n\n\ndef is_ipv6(target):\n    \n    try:\n        octets = target.split(\":\")\n        if len(octets) != 8:\n            return False\n        for x in octets:\n            if not is_hex(x):\n                return False\n        return True\n    except Exception:\n        return False\n\n\ndef is_hex(target):\n    \n    try:"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    \n    try:\n        octets = target.split(\".\")\n        if len(octets) != 4:\n            return False\n        for x in octets:\n            if not x.isdigit() or int(x) > 255:\n                return False\n        return True\n    except Exception:\n        return False\n\n\ndef is_ipv6(target):\n    \n    try:\n        octets = target.split(\":\")\n        if len(octets) != 8:\n            return False\n        for x in octets:\n            if not is_hex(x):\n                return False\n        return True\n    except Exception:\n        return False\n\n\ndef is_hex(target):\n    \n    try:", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n\n    for child in graph.out(prop):\n        if child.resource not in roots:\n            roots.add(child.resource)\n            roots |= find_roots(graph, prop, roots)\n    return roots\n\nfrom typing import Iterable, Optional, Set\n\nfrom rdflib import BNode, RDF, RDFS, Graph, Namespace, Literal, URIRef\n\nfrom . import utils\nfrom .graph import Graph\n\n\ndef query(\n    graph: \"Graph\",\n    query: str,\n    bindings: Optional[dict] = None,\n    output: Optional[\"Graph\"] = None,\n) -> \"Graph\":\n    '''Run a SPARQL query.\n\n    Examples"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n\n    for child in graph.out(prop):\n        if child.resource not in roots:\n            roots.add(child.resource)\n            roots |= find_roots(graph, prop, roots)\n    return roots\n\nfrom typing import Iterable, Optional, Set\n\nfrom rdflib import BNode, RDF, RDFS, Graph, Namespace, Literal, URIRef\n\nfrom . import utils\nfrom .graph import Graph\n\n\ndef query(\n    graph: \"Graph\",\n    query: str,\n    bindings: Optional[dict] = None,\n    output: Optional[\"Graph\"] = None,\n) -> \"Graph\":\n    '''Run a SPARQL query.\n\n    Examples", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):\n        \n        if isinstance(obj, str):\n            return obj.encode('utf-8')\n        return dumper.represent_str(obj)\n\n\ndef _dict_represent_str(self, obj):\n    \n    if isinstance(obj, dict):\n        return {\n            k: _dict_represent_str(k, v)\n            for k, v in obj.items()\n            if isinstance(k, str)\n        }\n    return obj\n\n\ndef _list_represent_str(self, obj):\n    \n    if isinstance(obj, list):\n        return [_list_represent"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):\n        \n        if isinstance(obj, str):\n            return obj.encode('utf-8')\n        return dumper.represent_str(obj)\n\n\ndef _dict_represent_str(self, obj):\n    \n    if isinstance(obj, dict):\n        return {\n            k: _dict_represent_str(k, v)\n            for k, v in obj.items()\n            if isinstance(k, str)\n        }\n    return obj\n\n\ndef _list_represent_str(self, obj):\n    \n    if isinstance(obj, list):\n        return [_list_represent", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    import logging\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')\n    file_handler = logging.FileHandler(logfile)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    if debug:\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        logger.addHandler(console_handler)\n    return logger"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    import logging\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')\n    file_handler = logging.FileHandler(logfile)\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n    if debug:\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        logger.addHandler(console_handler)\n    return logger", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.zeros(shape, dtype)\n\ndef make_variable(data, dtype=np.dtype(\"float32\")):\n        \n        return tf.Variable(data, dtype=dtype)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.zeros(shape, dtype)\n\ndef make_variable(data, dtype=np.dtype(\"float32\")):\n        \n        return tf.Variable(data, dtype=dtype)", "is_pass": true, "return_code": 0}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):\n        \n        return np.exp(-(x-0.2)**2/(2*0.1**2))"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):\n        \n        return np.exp(-(x-0.2)**2/(2*0.1**2))", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = []\n    for filename in config_filenames:\n        configs.append(load_configuration(filename, overrides=overrides, resolve_env=resolve_env))\n    return configs\n\n\ndef validate_configurations(configs):\n    \n    for config in configs:\n        validate_configuration(config)\n\n\ndef resolve_configurations(configs, resolve_env=True):\n    \n    for config in configs:\n        resolve_configuration(config, resolve_env=resolve_env)\n\n\ndef load_configuration(filename, overrides=None, resolve_env=True):\n    \n    config ="], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = []\n    for filename in config_filenames:\n        configs.append(load_configuration(filename, overrides=overrides, resolve_env=resolve_env))\n    return configs\n\n\ndef validate_configurations(configs):\n    \n    for config in configs:\n        validate_configuration(config)\n\n\ndef resolve_configurations(configs, resolve_env=True):\n    \n    for config in configs:\n        resolve_configuration(config, resolve_env=resolve_env)\n\n\ndef load_configuration(filename, overrides=None, resolve_env=True):\n    \n    config =", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    else:\n        return obj", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if tz is None:\n            tz = tz_from_ticks(ticks)\n\n        return cls(ticks, tz)\n\n    @classmethod\n    def now(cls):\n        \n        return cls.from_ticks(ticks_from_now(), tz=tz_from_now())\n\n    @classmethod\n    def from_now(cls, delta):\n        \n        if delta.seconds == 0:\n            return cls.now()\n\n        return cls.from_ticks(ticks_from_now() + delta.total_seconds(), tz=tz_from_now())\n\n    @classmethod\n    def from_datetime(cls, dt):"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if tz is None:\n            tz = tz_from_ticks(ticks)\n\n        return cls(ticks, tz)\n\n    @classmethod\n    def now(cls):\n        \n        return cls.from_ticks(ticks_from_now(), tz=tz_from_now())\n\n    @classmethod\n    def from_now(cls, delta):\n        \n        if delta.seconds == 0:\n            return cls.now()\n\n        return cls.from_ticks(ticks_from_now() + delta.total_seconds(), tz=tz_from_now())\n\n    @classmethod\n    def from_datetime(cls, dt):", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        return cls.protocol_handlers_by_version.get((protocol_version,), {})\n\n    @classmethod\n    def protocol_handler_for(cls, protocol_version=None):\n        \n        return cls.protocol_handlers(protocol_version=protocol_version)\n\n    @classmethod\n    def register_protocol_handler(cls, protocol, handler):\n        \n        cls.protocol_handlers(protocol_version=protocol.version).update({protocol.version: handler})\n\n    @classmethod\n    def register_protocol_handler_for(cls, protocol, handler):\n        \n        cls.protocol_"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        return cls.protocol_handlers_by_version.get((protocol_version,), {})\n\n    @classmethod\n    def protocol_handler_for(cls, protocol_version=None):\n        \n        return cls.protocol_handlers(protocol_version=protocol_version)\n\n    @classmethod\n    def register_protocol_handler(cls, protocol, handler):\n        \n        cls.protocol_handlers(protocol_version=protocol.version).update({protocol.version: handler})\n\n    @classmethod\n    def register_protocol_handler_for(cls, protocol, handler):\n        \n        cls.protocol_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod\n    def from_raw_values(cls, values):\n        \n        return cls(values[0], values[1], values[2], values[3], values[4])\n\n    def __init__(self, id, title, url, category, tags):\n        self.id = id\n        self.title = title\n        self.url = url\n        self.category = category\n        self.tags = tags\n\n    @property\n    def id(self):\n        return self._id\n\n    @id.setter\n    def id(self, id):\n        self._id = int(id)\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title = title\n\n    @property\n    def url(self):\n        return self._url\n\n    @url.setter"], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod\n    def from_raw_values(cls, values):\n        \n        return cls(values[0], values[1], values[2], values[3], values[4])\n\n    def __init__(self, id, title, url, category, tags):\n        self.id = id\n        self.title = title\n        self.url = url\n        self.category = category\n        self.tags = tags\n\n    @property\n    def id(self):\n        return self._id\n\n    @id.setter\n    def id(self, id):\n        self._id = int(id)\n\n    @property\n    def title(self):\n        return self._title\n\n    @title.setter\n    def title(self, title):\n        self._title = title\n\n    @property\n    def url(self):\n        return self._url\n\n    @url.setter", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    \n    if isinstance(seq, basestring):\n        if bufsize is None:\n            return seq, 's'\n        else:\n            return seq[:bufsize], 's'\n    elif isinstance(seq, (list, tuple)):\n        if bufsize is None:\n            return tuple(seq), 'l'\n        else:\n            return tuple(seq[:bufsize]), 'l'\n    elif isinstance(seq, dict):\n        if bufsize is None:\n            return seq, 'd'\n        else:\n            return seq, 'd'\n    else:\n        return seq, None\n\n\ndef _get_seq_with_type_and_len(seq, bufsize=None):\n    \n    seq, seqtype"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    \n    if isinstance(seq, basestring):\n        if bufsize is None:\n            return seq, 's'\n        else:\n            return seq[:bufsize], 's'\n    elif isinstance(seq, (list, tuple)):\n        if bufsize is None:\n            return tuple(seq), 'l'\n        else:\n            return tuple(seq[:bufsize]), 'l'\n    elif isinstance(seq, dict):\n        if bufsize is None:\n            return seq, 'd'\n        else:\n            return seq, 'd'\n    else:\n        return seq, None\n\n\ndef _get_seq_with_type_and_len(seq, bufsize=None):\n    \n    seq, seqtype", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n        \n        if other is not None:\n            if not isinstance(other, Scale):\n                raise ValueError('scale must be a Scale object')\n            if recompute:\n                self.reset()\n                self.update(other)\n            self.scale = other.scale\n        else:\n            return self.scale\n\n    def update(self, other):\n        \n        self.scale = np.sum(other.histogram)\n\n    def reset(self):\n        \n        self.scale = 0.0\n\n    def to_dict(self):\n        \n        return {'scale': self.scale}\n\n    def from_dict(self, d):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n        \n        if other is not None:\n            if not isinstance(other, Scale):\n                raise ValueError('scale must be a Scale object')\n            if recompute:\n                self.reset()\n                self.update(other)\n            self.scale = other.scale\n        else:\n            return self.scale\n\n    def update(self, other):\n        \n        self.scale = np.sum(other.histogram)\n\n    def reset(self):\n        \n        self.scale = 0.0\n\n    def to_dict(self):\n        \n        return {'scale': self.scale}\n\n    def from_dict(self, d):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        else:\n            self._scale = other"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        else:\n            self._scale = other", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = graph_from_histogram(hist)\n    if make_value:\n        graph.set_data(make_value=make_value)\n    elif hist.get(\"value\"):\n        graph.set_data(hist.get(\"value\"))\n    else:\n        graph.set_data(hist.get(\"data\"))\n    if scale:\n        graph.set_data(scale=scale)\n    graph.set_field_names(field_names)\n    graph.set_coordinate(get_coordinate)\n    return graph\n\ndef hist_to_graph_list(hist_list, make_value=None, get_coordinate=\"left\",\n                       field_names=(\"x\", \"y\"), scale=None):\n    \n    return"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = graph_from_histogram(hist)\n    if make_value:\n        graph.set_data(make_value=make_value)\n    elif hist.get(\"value\"):\n        graph.set_data(hist.get(\"value\"))\n    else:\n        graph.set_data(hist.get(\"data\"))\n    if scale:\n        graph.set_data(scale=scale)\n    graph.set_field_names(field_names)\n    graph.set_coordinate(get_coordinate)\n    return graph\n\ndef hist_to_graph_list(hist_list, make_value=None, get_coordinate=\"left\",\n                       field_names=(\"x\", \"y\"), scale=None):\n    \n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    pass\n\n\ndef _get_iface_info(iface):\n    \n    pass\n\n\ndef _get_iface_candidates(iface):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    pass\n\n\ndef _get_iface_info(iface):\n    \n    pass\n\n\ndef _get_iface_candidates(iface):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    \n    if candidate.has_key('ignore'):\n        if candidate['ignore']:\n            return True\n\n    if not candidate.has_key('interfaces'):\n        return False\n\n    candidate_ifaces = set(candidate['interfaces'])\n    iface_set = set(iface.keys())\n\n    if candidate_ifaces.issubset(iface_set):\n        return True\n\n    if tentative and candidate.has_key('ignore-tentative'):\n        return True\n\n    if not candidate.has_key('ignore-tentative'):\n        if candidate.has_key('ignore-tentative-iface'):\n            iface_set.remove"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    \n    if candidate.has_key('ignore'):\n        if candidate['ignore']:\n            return True\n\n    if not candidate.has_key('interfaces'):\n        return False\n\n    candidate_ifaces = set(candidate['interfaces'])\n    iface_set = set(iface.keys())\n\n    if candidate_ifaces.issubset(iface_set):\n        return True\n\n    if tentative and candidate.has_key('ignore-tentative'):\n        return True\n\n    if not candidate.has_key('ignore-tentative'):\n        if candidate.has_key('ignore-tentative-iface'):\n            iface_set.remove", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n    try:\n        candidate.testInterface(iface)\n    except InterfaceError, e:\n        if not tentative:\n            raise e\n\ndef verifyClassWithAttr(iface, candidate, attr, tentative=False):\n    \n    try:\n        candidate.testInterface(iface, attr=attr)\n    except InterfaceError, e:\n        if not tentative:\n            raise e\n\ndef verifyClassWithAttrs(iface, candidate, attrs, tentative=False):\n    \n    try:\n        candidate.testInterface(iface, attrs=attrs)\n    except InterfaceError, e:\n        if not tentative"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    try:\n        candidate.testInterface(iface)\n    except InterfaceError, e:\n        if not tentative:\n            raise e\n\ndef verifyClassWithAttr(iface, candidate, attr, tentative=False):\n    \n    try:\n        candidate.testInterface(iface, attr=attr)\n    except InterfaceError, e:\n        if not tentative:\n            raise e\n\ndef verifyClassWithAttrs(iface, candidate, attrs, tentative=False):\n    \n    try:\n        candidate.testInterface(iface, attrs=attrs)\n    except InterfaceError, e:\n        if not tentative", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    if bases and bases[0] is not object:\n        return type(bases[0])\n    return type\n\n\ndef is_class(obj):\n    \n    return isinstance(obj, type) and not isinstance(obj, type)\n\n\ndef is_instance(obj, cls):\n    \n    return isinstance(obj, cls)\n\n\ndef is_subclass(obj, cls):\n    \n    return isinstance(obj, cls) and isinstance(obj.__class__, cls)\n\n\ndef is_metaclass(obj, cls):\n    '''"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    if bases and bases[0] is not object:\n        return type(bases[0])\n    return type\n\n\ndef is_class(obj):\n    \n    return isinstance(obj, type) and not isinstance(obj, type)\n\n\ndef is_instance(obj, cls):\n    \n    return isinstance(obj, cls)\n\n\ndef is_subclass(obj, cls):\n    \n    return isinstance(obj, cls) and isinstance(obj.__class__, cls)\n\n\ndef is_metaclass(obj, cls):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n        \n        if key not in self:\n            return default\n        return self._data.pop(key)\n\n    def popitem(self, last=__marker):\n        '''D.popitem([last]) -> (k,v), remove and return (last|k,v) with the highest-priority key.\n\n        If multiple items have the same priority, pop the last one inserted.\n        '''\n        if not self:\n            raise KeyError('dictionary is empty')\n        if last is __marker:\n            last = len(self) - 1\n        if not 0 <= last < len(self):\n            raise IndexError('pop index out of range')\n        tmp = list(self.items())\n        return tmp.pop(last)\n\n    def setdefault(self, key, default=__marker):\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n        \n        if key not in self:\n            return default\n        return self._data.pop(key)\n\n    def popitem(self, last=__marker):\n        '''D.popitem([last]) -> (k,v), remove and return (last|k,v) with the highest-priority key.\n\n        If multiple items have the same priority, pop the last one inserted.\n        '''\n        if not self:\n            raise KeyError('dictionary is empty')\n        if last is __marker:\n            last = len(self) - 1\n        if not 0 <= last < len(self):\n            raise IndexError('pop index out of range')\n        tmp = list(self.items())\n        return tmp.pop(last)\n\n    def setdefault(self, key, default=__marker):\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n        \n        print(\"popitem\")\n        return self.popitem(last=True)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        print(\"popitem\")\n        return self.popitem(last=True)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n        \n        pass\n\n\nclass OrderedDict(dict):\n    \"\"\"A dict subclass that keeps track of the order of its entries.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(OrderedDict, self).__init__(*args, **kwargs)\n        self.order = []\n\n    def __setitem__(self, key, value):\n        super(OrderedDict, self).__setitem__(key, value)\n        self.order.append(key)\n\n    def __delitem__(self, key):\n        super(OrderedDict, self).__delitem__(key)\n        self.order.remove(key)\n\n    def __iter__(self):\n        return iter(self.order)\n\n    def __len__(self):\n        return len(self.order)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        pass\n\n\nclass OrderedDict(dict):\n    \"\"\"A dict subclass that keeps track of the order of its entries.\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(OrderedDict, self).__init__(*args, **kwargs)\n        self.order = []\n\n    def __setitem__(self, key, value):\n        super(OrderedDict, self).__setitem__(key, value)\n        self.order.append(key)\n\n    def __delitem__(self, key):\n        super(OrderedDict, self).__delitem__(key)\n        self.order.remove(key)\n\n    def __iter__(self):\n        return iter(self.order)\n\n    def __len__(self):\n        return len(self.order)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n        \n        if self._cache_dict:\n            key = self._cache_dict.popitem()[0]\n            self._cache_dict[key] = None\n            return key, self._cache_dict.pop(key)\n\n    def popitem(self, **kwargs):\n        '''\n        Remove and return the `(key, value)` pair least recently used.\n\n        The `**kwargs` argument is used to specify the `LFU_CACHE_KWARGS`.\n        '''\n        if self._cache_dict:\n            return self._cache_dict.popitem(**kwargs)\n\n    def __len__(self):\n        return len(self._cache_dict)\n\n\nclass LFUCache(object):\n    \"\"\"\n    LFU Cache\n\n    Arguments\n    ---------\n    size"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self._cache_dict:\n            key = self._cache_dict.popitem()[0]\n            self._cache_dict[key] = None\n            return key, self._cache_dict.pop(key)\n\n    def popitem(self, **kwargs):\n        '''\n        Remove and return the `(key, value)` pair least recently used.\n\n        The `**kwargs` argument is used to specify the `LFU_CACHE_KWARGS`.\n        '''\n        if self._cache_dict:\n            return self._cache_dict.popitem(**kwargs)\n\n    def __len__(self):\n        return len(self._cache_dict)\n\n\nclass LFUCache(object):\n    \"\"\"\n    LFU Cache\n\n    Arguments\n    ---------\n    size", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n        \n        if len(self._store) == 0:\n            raise IndexError('pop from empty Map')\n        while True:\n            rand = randint(0, len(self._store) - 1)\n            key, value = self._store.pop(rand)\n            return key, value\n\ndef __delitem__(self, key):\n    '''Delete the key-value pair with the given `key`.\n    Raise `KeyError` if the key does not exist.'''\n    self.remove(key)\n\n\ndef pop(self, key, default=None):\n    '''Return the value paired with `key`.\n    If `key` does not exist, return `default`.\n    If `default` is not specified and `key` does not"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if len(self._store) == 0:\n            raise IndexError('pop from empty Map')\n        while True:\n            rand = randint(0, len(self._store) - 1)\n            key, value = self._store.pop(rand)\n            return key, value\n\ndef __delitem__(self, key):\n    '''Delete the key-value pair with the given `key`.\n    Raise `KeyError` if the key does not exist.'''\n    self.remove(key)\n\n\ndef pop(self, key, default=None):\n    '''Return the value paired with `key`.\n    If `key` does not exist, return `default`.\n    If `default` is not specified and `key` does not", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\t\n\t\tpat = re.compile(r'in\\s+(?P<args>.*?)\\s*;')\n\t\targs = pat.match(self._param['in'])\n\t\tif args is None:\n\t\t\traise Exception('Unable to parse in-style parameter.')\n\t\targs = args.groupdict()['args']\n\t\targs = re.split(r'\\s*,\\s*', args)\n\t\targs = list(map(lambda s: s.strip(), args))\n\t\targs = list(map(lambda s: re.sub(r'[\\[\\]]', '', s), args))\n\t\targs = list(map(lambda s: re.sub(r'[\\(\\)]', '', s), args))\n\t\treturn args\n\n\tdef _create_out_regex(self) -> Pattern:\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\t\n\t\tpat = re.compile(r'in\\s+(?P<args>.*?)\\s*;')\n\t\targs = pat.match(self._param['in'])\n\t\tif args is None:\n\t\t\traise Exception('Unable to parse in-style parameter.')\n\t\targs = args.groupdict()['args']\n\t\targs = re.split(r'\\s*,\\s*', args)\n\t\targs = list(map(lambda s: s.strip(), args))\n\t\targs = list(map(lambda s: re.sub(r'[\\[\\]]', '', s), args))\n\t\targs = list(map(lambda s: re.sub(r'[\\(\\)]', '', s), args))\n\t\treturn args\n\n\tdef _create_out_regex(self) -> Pattern:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting.Converter()"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting.Converter()", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n\n\n@_takes_ascii\ndef isoparse(dt_str):\n    \n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n\n\n@_takes_ascii\ndef isodate(dt):\n    \n    return dt.isoformat()[:10]\n\n\n@_takes_ascii\ndef isodatetime(dt"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n\n\n@_takes_ascii\ndef isoparse(dt_str):\n    \n    return datetime.datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n\n\n@_takes_ascii\ndef isodate(dt):\n    \n    return dt.isoformat()[:10]\n\n\n@_takes_ascii\ndef isodatetime(dt", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if self.default is not None:\n            default = self.default\n\n        if ignoretz:\n            try:\n                return timestr.replace(tzinfo=None)\n            except AttributeError:\n                pass\n\n        if tzinfos is not None:\n            try:\n                return timestr.replace(tzinfo=tzinfos[0])\n            except AttributeError:\n                pass\n\n        return parse(self, timestr, default=default, **"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if self.default is not None:\n            default = self.default\n\n        if ignoretz:\n            try:\n                return timestr.replace(tzinfo=None)\n            except AttributeError:\n                pass\n\n        if tzinfos is not None:\n            try:\n                return timestr.replace(tzinfo=tzinfos[0])\n            except AttributeError:\n                pass\n\n        return parse(self, timestr, default=default, **", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        return dt.astimezone(self.timezone)"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        return dt.astimezone(self.timezone)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.replace(tzinfo=tzinfo)\n\n\ndef to_utc_naive(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.replace(tzinfo=None)\n\n\ndef to_utc(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.astimezone(timezone.utc)\n\n\ndef to_local(dt, tzinfo):\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.replace(tzinfo=tzinfo)\n\n\ndef to_utc_naive(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.replace(tzinfo=None)\n\n\ndef to_utc(dt, tzinfo):\n    \n    if dt.tzinfo is None or dt.tzinfo == tzinfo:\n        return dt\n    return dt.astimezone(timezone.utc)\n\n\ndef to_local(dt, tzinfo):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after\n    def set_cut_chars_from_string(self, before: str, after: str) -> None:\n        \n        self.before = bytes(before, 'utf-8')\n        self.after = bytes(after, 'utf-8')\n    def set_cut_chars_from_unicode(self, before: str, after: str) -> None:\n        \n        self.before = bytes(before, 'utf-8')\n        self.after = bytes(after, 'utf-8')\n    def set_cut_chars_from_int(self, before: int, after: int) -> None:\n        '''Set"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after\n    def set_cut_chars_from_string(self, before: str, after: str) -> None:\n        \n        self.before = bytes(before, 'utf-8')\n        self.after = bytes(after, 'utf-8')\n    def set_cut_chars_from_unicode(self, before: str, after: str) -> None:\n        \n        self.before = bytes(before, 'utf-8')\n        self.after = bytes(after, 'utf-8')\n    def set_cut_chars_from_int(self, before: int, after: int) -> None:\n        '''Set", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    \n    return request.url.startswith('https://') and request.url.endswith('.diaspora.org/')"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    \n    return request.url.startswith('https://') and request.url.endswith('.diaspora.org/')", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    \n    return request['type'] in {'m.room.message', 'm.room.member'}\n\n\ndef get_room_id(request: RequestType) -> str:\n    \n    if request['type'] == 'm.room.message':\n        return request['room_id']\n    elif request['type'] == 'm.room.member':\n        return request['sender']\n\n\ndef get_message_type(request: RequestType) -> str:\n    \n    if request['type'] == 'm.room.message':\n        return request['content']['msgtype']\n    elif request['type'] == 'm.room.member':\n        return request['content']['membership']\n\n\ndef get_sender(request: Request"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    return request['type'] in {'m.room.message', 'm.room.member'}\n\n\ndef get_room_id(request: RequestType) -> str:\n    \n    if request['type'] == 'm.room.message':\n        return request['room_id']\n    elif request['type'] == 'm.room.member':\n        return request['sender']\n\n\ndef get_message_type(request: RequestType) -> str:\n    \n    if request['type'] == 'm.room.message':\n        return request['content']['msgtype']\n    elif request['type'] == 'm.room.member':\n        return request['content']['membership']\n\n\ndef get_sender(request: Request", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    for tag in re.findall(r'<[^>]+>', text):\n        if replacer:\n            tag = replacer(tag)\n        tags.add(tag)\n    return tags, text\n\n\ndef find_tags_in_text(text: str, replacer: callable = None) -> Dict[str, str]:\n    \n    tags, _ = find_tags(text, replacer)\n    return {tag: tag for tag in tags}\n\n\ndef find_tags_in_text_multi(text: str, replacer: callable = None) -> Dict[str, List[str]]:\n    \n    tags"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    for tag in re.findall(r'<[^>]+>', text):\n        if replacer:\n            tag = replacer(tag)\n        tags.add(tag)\n    return tags, text\n\n\ndef find_tags_in_text(text: str, replacer: callable = None) -> Dict[str, str]:\n    \n    tags, _ = find_tags(text, replacer)\n    return {tag: tag for tag in tags}\n\n\ndef find_tags_in_text_multi(text: str, replacer: callable = None) -> Dict[str, List[str]]:\n    \n    tags", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \n    text = re.sub(r'<a (.+?)>(.+?)</a>', r'<a href=\"\\1\">\\2</a>', text)\n    text = re.sub(r'<a href=\"(.+?)\">(.+?)</a>', r'<a href=\"\\1\">\\2</a>', text)\n    return text\n\n\ndef process_text_images(text):\n    \n    text = re.sub(r'<img (.+?)>', r'<img src=\"\\1\">', text)\n    return text\n\n\ndef process_text_iframes(text):\n    \n    text = re."], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \n    text = re.sub(r'<a (.+?)>(.+?)</a>', r'<a href=\"\\1\">\\2</a>', text)\n    text = re.sub(r'<a href=\"(.+?)\">(.+?)</a>', r'<a href=\"\\1\">\\2</a>', text)\n    return text\n\n\ndef process_text_images(text):\n    \n    text = re.sub(r'<img (.+?)>', r'<img src=\"\\1\">', text)\n    return text\n\n\ndef process_text_iframes(text):\n    \n    text = re.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = requests.head(url)\n        if response.status_code == 200:\n            content_type = response.headers['content-type']\n            return content_type\n    except requests.exceptions.HTTPError:\n        return None\n\nfrom typing import Optional\n\nimport requests\n\nimport utils\n\n\ndef download_file(url: str, file_name: str) -> Optional[bool]:\n    \n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            with open(file_name, 'wb') as f:\n                f.write(response.content)\n                return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = requests.head(url)\n        if response.status_code == 200:\n            content_type = response.headers['content-type']\n            return content_type\n    except requests.exceptions.HTTPError:\n        return None\n\nfrom typing import Optional\n\nimport requests\n\nimport utils\n\n\ndef download_file(url: str, file_name: str) -> Optional[bool]:\n    \n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            with open(file_name, 'wb') as f:\n                f.write(response.content)\n                return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    \n    if len(tag) > 0:\n        has_tag = True\n        for char in tag:\n            if not char.isalnum():\n                has_tag = False\n        return has_tag\n    return False\n\n\ndef tag_list(line: str) -> list:\n    \n    if line.strip() == '':\n        return []\n    tags = line.split()\n    tag_list = []\n    for tag in tags:\n        if tag.startswith('#'):\n            tag_list.append(tag.lstrip('#'))\n    return tag_list\n\n\ndef get_tags(line: str) -> list:\n    \n    return tag_list(line)\n\n\ndef get_tags_"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    \n    if len(tag) > 0:\n        has_tag = True\n        for char in tag:\n            if not char.isalnum():\n                has_tag = False\n        return has_tag\n    return False\n\n\ndef tag_list(line: str) -> list:\n    \n    if line.strip() == '':\n        return []\n    tags = line.split()\n    tag_list = []\n    for tag in tags:\n        if tag.startswith('#'):\n            tag_list.append(tag.lstrip('#'))\n    return tag_list\n\n\ndef get_tags(line: str) -> list:\n    \n    return tag_list(line)\n\n\ndef get_tags_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \n    return {child.tag: xml_children_as_dict(child)\n            for child in node}\n\nimport xml_dict as xml\n\n\ndef main():\n    tree = xml.parse('xml_as_dict.xml')\n    print(xml.xml_children_as_dict(tree))\n\n\nif __name__ == '__main__':\n    main()\n\nimport xml_dict as xml\n\n\ndef main():\n    tree = xml.parse('xml_as_dict_with_attributes.xml')\n    print(xml.xml_children_as_dict(tree))\n\n\nif __name__ == '__main__':\n    main()"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \n    return {child.tag: xml_children_as_dict(child)\n            for child in node}\n\nimport xml_dict as xml\n\n\ndef main():\n    tree = xml.parse('xml_as_dict.xml')\n    print(xml.xml_children_as_dict(tree))\n\n\nif __name__ == '__main__':\n    main()\n\nimport xml_dict as xml\n\n\ndef main():\n    tree = xml.parse('xml_as_dict_with_attributes.xml')\n    print(xml.xml_children_as_dict(tree))\n\n\nif __name__ == '__main__':\n    main()", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle\n\n\ndef check_sender_is_player(sender_handle):\n    \n    return sender_handle.is_player()\n\n\ndef check_entity_is_player(entity_handle):\n    \n    return entity_handle.is_player()\n\n\ndef check_entity_is_valid_unit(entity_handle):\n    \n    return entity_handle.is_valid_unit()\n\n\ndef check_entity_is_valid_building(entity_handle):\n    \n    return entity_handle.is_valid_building()\n\n\ndef check_entity_is_valid"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    return sender_handle == entity_handle\n\n\ndef check_sender_is_player(sender_handle):\n    \n    return sender_handle.is_player()\n\n\ndef check_entity_is_player(entity_handle):\n    \n    return entity_handle.is_player()\n\n\ndef check_entity_is_valid_unit(entity_handle):\n    \n    return entity_handle.is_valid_unit()\n\n\ndef check_entity_is_valid_building(entity_handle):\n    \n    return entity_handle.is_valid_building()\n\n\ndef check_entity_is_valid", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    url = url.replace(' ', '%20')\n    url = url[0:url.rfind('/')]\n\n    if document_path is None:\n        document_path = document_path.rstrip('/')\n\n    if document_path == '':\n        document_path = '/.well-known/nodeinfo'\n    else:\n        document_path = '/' + document_path\n\n    return url + document_path\n\n\nclass NodeInfo:\n    \n\n    def __init__(self, url):\n        self.url = url\n\n    def generate(self, document_path=None):\n        \n        document = get_nodeinfo_well_known_document(self.url, document_path)"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    url = url.replace(' ', '%20')\n    url = url[0:url.rfind('/')]\n\n    if document_path is None:\n        document_path = document_path.rstrip('/')\n\n    if document_path == '':\n        document_path = '/.well-known/nodeinfo'\n    else:\n        document_path = '/' + document_path\n\n    return url + document_path\n\n\nclass NodeInfo:\n    \n\n    def __init__(self, url):\n        self.url = url\n\n    def generate(self, document_path=None):\n        \n        document = get_nodeinfo_well_known_document(self.url, document_path)", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    \n    from lxml import etree\n    from hashlib import sha256\n    from binascii import unhexlify\n    from datetime import datetime\n    from traceback import print_exc\n\n    try:\n        assert signature.startswith('sha256=')\n        assert len(signature) == 40\n\n        doc_hash = sha256(etree.tostring(doc)).hexdigest()\n\n        assert doc_hash == signature[7:]\n\n        public_key = unhexlify(public_key)\n        assert_signature(public_key, doc, signature)\n\n        return True\n    except AssertionError:\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    \n    from lxml import etree\n    from hashlib import sha256\n    from binascii import unhexlify\n    from datetime import datetime\n    from traceback import print_exc\n\n    try:\n        assert signature.startswith('sha256=')\n        assert len(signature) == 40\n\n        doc_hash = sha256(etree.tostring(doc)).hexdigest()\n\n        assert doc_hash == signature[7:]\n\n        public_key = unhexlify(public_key)\n        assert_signature(public_key, doc, signature)\n\n        return True\n    except AssertionError:\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    if '<' in document:\n        return json.loads(document)\n\n    try:\n        return xrdlib.xrd_parse(document)\n    except:\n        return xrdlib.xrd_parse(document.replace('<', '&lt;'))\n\n\ndef parse_diaspora_json(document: str) -> Dict:\n    \n    return json.loads(document)\n\n\ndef parse_diaspora_xml(document: str) -> Dict:\n    \n    return xmltodict.parse(document)\n\n\n\nclass DiasporaException(Exception):"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    if '<' in document:\n        return json.loads(document)\n\n    try:\n        return xrdlib.xrd_parse(document)\n    except:\n        return xrdlib.xrd_parse(document.replace('<', '&lt;'))\n\n\ndef parse_diaspora_json(document: str) -> Dict:\n    \n    return json.loads(document)\n\n\ndef parse_diaspora_xml(document: str) -> Dict:\n    \n    return xmltodict.parse(document)\n\n\n\nclass DiasporaException(Exception):", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    url = 'https://' + handle + '@' + config.webfinger_domain\n    r = requests.get(url)\n    if r.status_code != 200:\n        raise RuntimeError('Failed to retrieve webfinger document')\n    return r.text\n\n\ndef get_avatar_url(handle: str) -> Optional[str]:\n    \n    try:\n        return try_retrieve_webfinger_document(handle).get('links').get('avatar')\n    except AttributeError:\n        pass\n\n\ndef get_avatar_filename(handle: str) -> Optional[str]:\n    \n    avatar_url = get_avatar_url(handle)\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    url = 'https://' + handle + '@' + config.webfinger_domain\n    r = requests.get(url)\n    if r.status_code != 200:\n        raise RuntimeError('Failed to retrieve webfinger document')\n    return r.text\n\n\ndef get_avatar_url(handle: str) -> Optional[str]:\n    \n    try:\n        return try_retrieve_webfinger_document(handle).get('links').get('avatar')\n    except AttributeError:\n        pass\n\n\ndef get_avatar_filename(handle: str) -> Optional[str]:\n    \n    avatar_url = get_avatar_url(handle)\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    r = requests.get(f'https://{handle}.diaspora.software/webfinger?resource={handle}')\n    if r.status_code == 404:\n        ret = {\n            'type': 'notfound',\n            'preferred_username': None,\n            'email': None,\n            'name': None,\n            'about': None,\n            'display_name': None,\n        }\n    else:\n        ret = {}\n        j = json.loads(r.text)\n        ret['preferred_username'] = j['subject']\n        ret['email'] = j['links'][0]['href']\n        ret['name'] = j['properties']['name']\n        ret['about'] = j['properties']['about']\n        ret['display_name'] = j['properties"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    r = requests.get(f'https://{handle}.diaspora.software/webfinger?resource={handle}')\n    if r.status_code == 404:\n        ret = {\n            'type': 'notfound',\n            'preferred_username': None,\n            'email': None,\n            'name': None,\n            'about': None,\n            'display_name': None,\n        }\n    else:\n        ret = {}\n        j = json.loads(r.text)\n        ret['preferred_username'] = j['subject']\n        ret['email'] = j['links'][0]['href']\n        ret['name'] = j['properties']['name']\n        ret['about'] = j['properties']['about']\n        ret['display_name'] = j['properties", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    \n    host_meta_url = 'http://%s/host-meta' % host\n    return requests.get(host_meta_url).json()\n\ndef retrieve_diaspora_host_stats(host):\n    \n    host_stats_url = 'http://%s/host-stats' % host\n    return requests.get(host_stats_url).json()\n\ndef retrieve_diaspora_host_stats_history(host):\n    \n    host_stats_history_url = 'http://%s/host-stats-history' % host\n    return requests.get(host_stats_history_url).json()"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    \n    host_meta_url = 'http://%s/host-meta' % host\n    return requests.get(host_meta_url).json()\n\ndef retrieve_diaspora_host_stats(host):\n    \n    host_stats_url = 'http://%s/host-stats' % host\n    return requests.get(host_stats_url).json()\n\ndef retrieve_diaspora_host_stats_history(host):\n    \n    host_stats_history_url = 'http://%s/host-stats-history' % host\n    return requests.get(host_stats_history_url).json()", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\n    headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer {}'.format(data['access_token']),\n    }\n\n    response = requests.post(url, headers=headers, json=data, timeout=timeout, *args, **kwargs)\n\n    return response.json()"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\n    headers = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer {}'.format(data['access_token']),\n    }\n\n    response = requests.post(url, headers=headers, json=data, timeout=timeout, *args, **kwargs)\n\n    return response.json()", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys[i] not in dic:\n            dic[keys[i]] = {}\n        dic = dic[keys[i]]\n    dic[key] = val\n    return dic\n\ndef dict_insert_list(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys[i] not in dic:\n            dic[keys[i]] = []\n        dic = dic[keys[i]]\n    dic.append(val)\n    return dic\n\ndef dict_insert_obj(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys["], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys[i] not in dic:\n            dic[keys[i]] = {}\n        dic = dic[keys[i]]\n    dic[key] = val\n    return dic\n\ndef dict_insert_list(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys[i] not in dic:\n            dic[keys[i]] = []\n        dic = dic[keys[i]]\n    dic.append(val)\n    return dic\n\ndef dict_insert_obj(dic, val, key, *keys):\n    \n    for i in range(len(keys)):\n        if keys[", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    \n    files = []\n    for settings_dir in settings_dirs:\n        for root, dirs, filenames in os.walk(settings_dir, topdown=False):\n            for filename in filenames:\n                if filename.endswith(\".py\"):\n                    files.append(filename)\n    if spec_option:\n        files = [x for x in files if not x.startswith(\"_\")]\n    return files\n\nimport os\nfrom typing import List\n\nimport click\nimport toml\nfrom dotenv import load_dotenv\n\nfrom settings_loader import load_settings\n\n\n@click.command()\n@click.argument(\"settings_dirs\", nargs=-1)\n@click.option(\n    \"--spec-option\", is_flag=True, help=\""], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    files = []\n    for settings_dir in settings_dirs:\n        for root, dirs, filenames in os.walk(settings_dir, topdown=False):\n            for filename in filenames:\n                if filename.endswith(\".py\"):\n                    files.append(filename)\n    if spec_option:\n        files = [x for x in files if not x.startswith(\"_\")]\n    return files\n\nimport os\nfrom typing import List\n\nimport click\nimport toml\nfrom dotenv import load_dotenv\n\nfrom settings_loader import load_settings\n\n\n@click.command()\n@click.argument(\"settings_dirs\", nargs=-1)\n@click.option(\n    \"--spec-option\", is_flag=True, help=\"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod\n    def ansible_config_manager(cls):\n        \n        return AnsibleConfigManager()\n\n    def __init__(self):\n        \n\n        self.config_file = None\n        self.config_dir = None\n\n    def configure(self, config_file=None, config_dir=None):\n        '''Configures the AnsibleConfigManager with the given config file and\n        config directory.'''\n\n        self.config_file = config_file\n        self.config_dir = config_dir\n\n    def get_config_file(self):\n        \n\n        return self.config_file\n\n    def get_config_dir(self):\n        \n\n        return self.config_dir\n\n    def get_config_path(self):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def ansible_config_manager(cls):\n        \n        return AnsibleConfigManager()\n\n    def __init__(self):\n        \n\n        self.config_file = None\n        self.config_dir = None\n\n    def configure(self, config_file=None, config_dir=None):\n        '''Configures the AnsibleConfigManager with the given config file and\n        config directory.'''\n\n        self.config_file = config_file\n        self.config_dir = config_dir\n\n    def get_config_file(self):\n        \n\n        return self.config_file\n\n    def get_config_dir(self):\n        \n\n        return self.config_dir\n\n    def get_config_path(self):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod\n    def workspace_manager(cls):\n        \n        import webclient.workspace_manager\n        return webclient.workspace_manager\n\n    @classmethod\n    def set_current_workspace(cls, workspace):\n        \n        cls.workspace_manager().set_current_workspace(workspace)\n\n    def get(self, *args, **kwargs):\n        \n        return self.request('GET', *args, **kwargs)\n\n    def post(self, *args, **kwargs):\n        \n        return self.request('POST', *args, **kwargs)\n\n    def put(self, *args, **kwargs):\n        \n        return self.request('PUT', *args"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def workspace_manager(cls):\n        \n        import webclient.workspace_manager\n        return webclient.workspace_manager\n\n    @classmethod\n    def set_current_workspace(cls, workspace):\n        \n        cls.workspace_manager().set_current_workspace(workspace)\n\n    def get(self, *args, **kwargs):\n        \n        return self.request('GET', *args, **kwargs)\n\n    def post(self, *args, **kwargs):\n        \n        return self.request('POST', *args, **kwargs)\n\n    def put(self, *args, **kwargs):\n        \n        return self.request('PUT', *args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod\n    def plugins_manager(cls):\n        \n        return PluginsManager()\n\n    @classmethod\n    def all_plugins(cls):\n        \n        return PluginsManager.plugins_manager().all_plugins()\n\n    @classmethod\n    def get_plugin(cls, name):\n        \n        return PluginsManager.plugins_manager().get_plugin(name)\n\n    @classmethod\n    def plugin_exists(cls, name):\n        \n        return PluginsManager.plugins_manager().plugin_exists(name)\n\n    @classmethod\n    def register_plugin(cls, plugin):\n        \n        return PluginsManager.plugins_manager().register_plugin(plugin)\n\n    @classmethod\n"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def plugins_manager(cls):\n        \n        return PluginsManager()\n\n    @classmethod\n    def all_plugins(cls):\n        \n        return PluginsManager.plugins_manager().all_plugins()\n\n    @classmethod\n    def get_plugin(cls, name):\n        \n        return PluginsManager.plugins_manager().get_plugin(name)\n\n    @classmethod\n    def plugin_exists(cls, name):\n        \n        return PluginsManager.plugins_manager().plugin_exists(name)\n\n    @classmethod\n    def register_plugin(cls, plugin):\n        \n        return PluginsManager.plugins_manager().register_plugin(plugin)\n\n    @classmethod\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n\n        if spec_content is None:\n            raise ValueError('spec_content is required')\n\n        if not isinstance(spec_content, dict):\n            raise ValueError('spec_content must be a dictionary')\n\n        if 'apiVersion' not in spec_content:\n            raise ValueError('spec_content must have apiVersion')\n\n        if 'kind' not in spec_content:\n            raise ValueError('spec_content must have kind')\n\n        if spec_content['kind'] not in cls._allowed_kinds:\n            raise ValueError('kind must be one of: %s' % (', '.join(cls._allowed_kinds)))\n\nclass YAMLSpecError(Exception):\n    \n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n\n        if spec_content is None:\n            raise ValueError('spec_content is required')\n\n        if not isinstance(spec_content, dict):\n            raise ValueError('spec_content must be a dictionary')\n\n        if 'apiVersion' not in spec_content:\n            raise ValueError('spec_content must have apiVersion')\n\n        if 'kind' not in spec_content:\n            raise ValueError('spec_content must have kind')\n\n        if spec_content['kind'] not in cls._allowed_kinds:\n            raise ValueError('kind must be one of: %s' % (', '.join(cls._allowed_kinds)))\n\nclass YAMLSpecError(Exception):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if not yaml_file:\n            raise ValueError('No YAML file was given.')\n\n        try:\n            with open(yaml_file) as f:\n                data = yaml.safe_load(f)\n\n            if not isinstance(data, dict):\n                raise ValueError('The YAML file should be a dictionary.')\n\n            return data\n        except FileNotFoundError:\n            raise ValueError('The YAML file was not found.')\n\n    @classmethod\n    def validate_from_string(cls, yaml_string=None):\n        \n        if not yaml_string:\n            raise ValueError('No YAML file was given.')\n\n        try:\n            data = yaml.safe"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        if not yaml_file:\n            raise ValueError('No YAML file was given.')\n\n        try:\n            with open(yaml_file) as f:\n                data = yaml.safe_load(f)\n\n            if not isinstance(data, dict):\n                raise ValueError('The YAML file should be a dictionary.')\n\n            return data\n        except FileNotFoundError:\n            raise ValueError('The YAML file was not found.')\n\n    @classmethod\n    def validate_from_string(cls, yaml_string=None):\n        \n        if not yaml_string:\n            raise ValueError('No YAML file was given.')\n\n        try:\n            data = yaml.safe", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n        \n        for group_name, group_dict in parser_dict['include_groups'].items():\n            new_parser = self.create_parser(group_dict)\n            parser_dict['include_groups'][group_name] = new_parser\n            for sub_group_name, sub_group_dict in group_dict['include_groups'].items():\n                new_parser.add_parser(sub_group_name, sub_group_dict)\n\ndef _add_parser_options(self, parser_dict):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n        \n        for group_name, group_dict in parser_dict['include_groups'].items():\n            new_parser = self.create_parser(group_dict)\n            parser_dict['include_groups'][group_name] = new_parser\n            for sub_group_name, sub_group_dict in group_dict['include_groups'].items():\n                new_parser.add_parser(sub_group_name, sub_group_dict)\n\ndef _add_parser_options(self, parser_dict):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n        \n        defaults = {}\n        for k, v in self.spec.items():\n            if k in self.args:\n                defaults[k] = self.args[k]\n            elif k in self.defaults:\n                defaults[k] = self.defaults[k]\n            elif v is not None:\n                defaults[k] = v\n        return defaults"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n        \n        defaults = {}\n        for k, v in self.spec.items():\n            if k in self.args:\n                defaults[k] = self.args[k]\n            elif k in self.defaults:\n                defaults[k] = self.defaults[k]\n            elif v is not None:\n                defaults[k] = v\n        return defaults", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n        \n        deprecated_args = {\n                '--dry-run': '--dry-run',\n                '--overwrite': '--overwrite_existing_files',\n                '--no-recursive': '--no-recursive',\n                '--no-overwrite': '--overwrite_existing_files',\n                '--no-overwrite-only': '--overwrite_existing_files',\n                '--no-backup': '--no-backup',\n                '--no-backup-only': '--no-backup',\n                '--no-delete': '--no_delete',\n                '--no-delete-only': '--no_delete',\n                '--overwrite-only': '--overwrite_existing_files',\n                '--recursive': '--recursive',\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n        \n        deprecated_args = {\n                '--dry-run': '--dry-run',\n                '--overwrite': '--overwrite_existing_files',\n                '--no-recursive': '--no-recursive',\n                '--no-overwrite': '--overwrite_existing_files',\n                '--no-overwrite-only': '--overwrite_existing_files',\n                '--no-backup': '--no-backup',\n                '--no-backup-only': '--no-backup',\n                '--no-delete': '--no_delete',\n                '--no-delete-only': '--no_delete',\n                '--overwrite-only': '--overwrite_existing_files',\n                '--recursive': '--recursive',\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        if self.args.args:\n            print('Deprecation warning: The following arguments are deprecated and will be removed in the future:')\n            for deprecated_argument in self.args.args:\n                print('  - ' + deprecated_argument)\n\n        if not self.args.args and self.args.file:\n            print('Deprecation warning: The following arguments are deprecated and will be removed in the future:')\n            for deprecated_argument in self.args.file:\n                print('  - ' + deprecated_argument)\n\nimport argparse\nimport sys\n\nfrom vulnscan import commands\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description='Vulnscan is a tool for"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        if self.args.args:\n            print('Deprecation warning: The following arguments are deprecated and will be removed in the future:')\n            for deprecated_argument in self.args.args:\n                print('  - ' + deprecated_argument)\n\n        if not self.args.args and self.args.file:\n            print('Deprecation warning: The following arguments are deprecated and will be removed in the future:')\n            for deprecated_argument in self.args.file:\n                print('  - ' + deprecated_argument)\n\nimport argparse\nimport sys\n\nfrom vulnscan import commands\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description='Vulnscan is a tool for", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n        \n        return self.get_option_specs(command_name)\n\ndef set_parser_option_specs(self, command_name, option_specs):\n        \n        return self.set_option_specs(command_name, option_specs)\n\ndef get_parser_option_defaults(self, command_name):\n        \n        return self.get_option_defaults(command_name)\n\ndef set_parser_option_defaults(self, command_name, option_defaults):\n        \n        return self.set_option_defaults(command_name, option_defaults)\n\ndef get_parser_option_values(self, command_name):\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n        \n        return self.get_option_specs(command_name)\n\ndef set_parser_option_specs(self, command_name, option_specs):\n        \n        return self.set_option_specs(command_name, option_specs)\n\ndef get_parser_option_defaults(self, command_name):\n        \n        return self.get_option_defaults(command_name)\n\ndef set_parser_option_defaults(self, command_name, option_defaults):\n        \n        return self.set_option_defaults(command_name, option_defaults)\n\ndef get_parser_option_values(self, command_name):\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n        \n        if command_name == 'clean':\n            return self._clean_options\n        elif command_name == 'clone':\n            if argument_name == 'branch':\n                return self._clone_options.get('branch')\n            elif argument_name == 'url':\n                return self._clone_options.get('url')\n        elif command_name == 'checkout':\n            if argument_name == 'branch':\n                return self._checkout_options.get('branch')\n            elif argument_name == 'commit':\n                return self._checkout_options.get('commit')\n            elif argument_name == 'tag':\n                return self._checkout_options.get('tag')\n            elif argument_name == 'revision':\n                return self._checkout_options.get('revision')\n        elif command_name == 'checkout"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n        \n        if command_name == 'clean':\n            return self._clean_options\n        elif command_name == 'clone':\n            if argument_name == 'branch':\n                return self._clone_options.get('branch')\n            elif argument_name == 'url':\n                return self._clone_options.get('url')\n        elif command_name == 'checkout':\n            if argument_name == 'branch':\n                return self._checkout_options.get('branch')\n            elif argument_name == 'commit':\n                return self._checkout_options.get('commit')\n            elif argument_name == 'tag':\n                return self._checkout_options.get('tag')\n            elif argument_name == 'revision':\n                return self._checkout_options.get('revision')\n        elif command_name == 'checkout", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n        \n        silenced_args = []\n        for i in args.split():\n            if '--' in i:\n                silenced_args.append(i.replace('--', ''))\n            elif '-' in i:\n                silenced_args.append(i.replace('-', ''))\n        return silenced_args\n\n\ndef get_args(self, argv):\n        \n        args = self.parser.parse_args(argv)\n        return args\n\n\ndef get_args_from_file(self, filename):\n        \n        args = self.parser.parse_args(open(filename).readlines())\n        return args\n\n\ndef get_args_from_string(self, args=''):\n        \n        args ="], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n        \n        silenced_args = []\n        for i in args.split():\n            if '--' in i:\n                silenced_args.append(i.replace('--', ''))\n            elif '-' in i:\n                silenced_args.append(i.replace('-', ''))\n        return silenced_args\n\n\ndef get_args(self, argv):\n        \n        args = self.parser.parse_args(argv)\n        return args\n\n\ndef get_args_from_file(self, filename):\n        \n        args = self.parser.parse_args(open(filename).readlines())\n        return args\n\n\ndef get_args_from_string(self, args=''):\n        \n        args =", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n        \n        if not all(arg in args for arg in self.REQUIRED_ARGS):\n            raise InvalidArgumentError(\n                \"All arguments for {} are required\".format(self.name))\n\n\nclass Argument:\n\n    def __init__(self, name, type=None, required=True, description=None):\n        self.name = name\n        self.type = type\n        self.required = required\n        self.description = description\n\n    def __repr__(self):\n        return \"<Argument {}>\".format(self.name)\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\nclass InvalidArgumentError(Exception):\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n        \n        if not all(arg in args for arg in self.REQUIRED_ARGS):\n            raise InvalidArgumentError(\n                \"All arguments for {} are required\".format(self.name))\n\n\nclass Argument:\n\n    def __init__(self, name, type=None, required=True, description=None):\n        self.name = name\n        self.type = type\n        self.required = required\n        self.description = description\n\n    def __repr__(self):\n        return \"<Argument {}>\".format(self.name)\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\nclass InvalidArgumentError(Exception):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        if options_spec.required_when:\n            return [\n                arg\n                for arg in args\n                if arg.name in options_spec.required_when\n            ]\n        return []\n\n    def _get_conditionally_ignored_args(self, command_name, options_spec,\n                                         args):\n        \n        if options_spec.ignore_when:\n            return [\n                arg\n                for arg in args\n                if arg.name in options_spec.ignore_when\n            ]\n        return []\n\n    def _get_conditionally_optional_args(self, command_name, options_spec,\n                                          args):\n        \n        if options_spec.optional_when:\n            return"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        if options_spec.required_when:\n            return [\n                arg\n                for arg in args\n                if arg.name in options_spec.required_when\n            ]\n        return []\n\n    def _get_conditionally_ignored_args(self, command_name, options_spec,\n                                         args):\n        \n        if options_spec.ignore_when:\n            return [\n                arg\n                for arg in args\n                if arg.name in options_spec.ignore_when\n            ]\n        return []\n\n    def _get_conditionally_optional_args(self, command_name, options_spec,\n                                          args):\n        \n        if options_spec.optional_when:\n            return", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n        \n        for arg in args:\n            if len(arg) > self.max_args:\n                raise Exception('Argument {} is longer than maximum allowed length {}'.format(arg, self.max_args))\n\n\ndef validate_types(self, args):\n    \n    if type(args) != list:\n        raise Exception('Type of argument should be list')\n\n    for arg in args:\n        if type(arg) != str:\n            raise Exception('Type of argument should be string')\n\n\ndef validate_args_by_type(self, args):\n    \n    validate_types(self, args)\n    validate_length_args(self, args)\n\n\ndef validate_args(self, args):\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n        \n        for arg in args:\n            if len(arg) > self.max_args:\n                raise Exception('Argument {} is longer than maximum allowed length {}'.format(arg, self.max_args))\n\n\ndef validate_types(self, args):\n    \n    if type(args) != list:\n        raise Exception('Type of argument should be list')\n\n    for arg in args:\n        if type(arg) != str:\n            raise Exception('Type of argument should be string')\n\n\ndef validate_args_by_type(self, args):\n    \n    validate_types(self, args)\n    validate_length_args(self, args)\n\n\ndef validate_args(self, args):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n        \n        if args.get('choice') not in self.choices:\n            raise CommandError(\"That is not a valid choice. Please choose one of the following: [{}]\".format(', '.join(self.choices)))\n\n    def validate_choices_args_with_default(self, args):\n        \n        if args.get('choice') not in self.choices:\n            raise CommandError(\"That is not a valid choice. Please choose one of the following: [{}]\".format(', '.join(self.choices)))\n        else:\n            return args['choice']\n\n    def handle(self, *args, **options):\n        \n        for arg in args:\n            if arg == '--help':\n                self."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n        \n        if args.get('choice') not in self.choices:\n            raise CommandError(\"That is not a valid choice. Please choose one of the following: [{}]\".format(', '.join(self.choices)))\n\n    def validate_choices_args_with_default(self, args):\n        \n        if args.get('choice') not in self.choices:\n            raise CommandError(\"That is not a valid choice. Please choose one of the following: [{}]\".format(', '.join(self.choices)))\n        else:\n            return args['choice']\n\n    def handle(self, *args, **options):\n        \n        for arg in args:\n            if arg == '--help':\n                self.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n        \n        if args['min'] is not None and args['max'] is not None:\n            if args['min'] > args['max']:\n                raise ValueError('Minimum value cannot be greater than maximum value')\n        return args"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n        \n        if args['min'] is not None and args['max'] is not None:\n            if args['min'] > args['max']:\n                raise ValueError('Minimum value cannot be greater than maximum value')\n        return args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        self.command.add_argument(\n            '%s' % option_name,\n            metavar='%s' % spec_option,\n            type=type_name,\n            nargs='?',\n            default=None,\n            help='%s' % spec_option\n        )\n\ndef create_complex_argument_types(self):\n        \n        for subcommand in self.subcommands:\n            self.subcommand.add_argument(\n                '--%s' % subcommand,\n                action='store_true',\n                default=False,\n                required=False,\n                help='%s' % subcommand\n            )"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        self.command.add_argument(\n            '%s' % option_name,\n            metavar='%s' % spec_option,\n            type=type_name,\n            nargs='?',\n            default=None,\n            help='%s' % spec_option\n        )\n\ndef create_complex_argument_types(self):\n        \n        for subcommand in self.subcommands:\n            self.subcommand.add_argument(\n                '--%s' % subcommand,\n                action='store_true',\n                default=False,\n                required=False,\n                help='%s' % subcommand\n            )", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n        \n        if self.is_nested:\n            return args\n        return list(self.custom_args) + args\n\n\ndef get_nested_custom_and_control_kwargs(self, kwargs):\n    \n    if self.is_nested:\n        return kwargs\n    return list(self.custom_args) + kwargs\n\n\ndef get_nested_custom_and_control_defaults(self, defaults):\n    \n    if self.is_nested:\n        return defaults\n    return list(self.custom_args) + defaults\n\n\ndef get_nested_custom_and_control_dependencies(self, dependencies):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n        \n        if self.is_nested:\n            return args\n        return list(self.custom_args) + args\n\n\ndef get_nested_custom_and_control_kwargs(self, kwargs):\n    \n    if self.is_nested:\n        return kwargs\n    return list(self.custom_args) + kwargs\n\n\ndef get_nested_custom_and_control_defaults(self, defaults):\n    \n    if self.is_nested:\n        return defaults\n    return list(self.custom_args) + defaults\n\n\ndef get_nested_custom_and_control_dependencies(self, dependencies):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars:\n            vars_dict.update(extra_vars)\n\n    @classmethod\n    def get_project_dir(cls, project_name):\n        \n        return os.path.join(cls.PROJECT_DIR, project_name)\n\n    def _get_project_path(self):\n        \n        return self.get_project_dir(self.name)\n\n    def _get_project_path_for_dir(self, dir_name):\n        \n        return os.path.join(self._get_project_path(), dir_name)\n\n    def _get_project_dir(self):\n        \n        return os.path.dirname("], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars:\n            vars_dict.update(extra_vars)\n\n    @classmethod\n    def get_project_dir(cls, project_name):\n        \n        return os.path.join(cls.PROJECT_DIR, project_name)\n\n    def _get_project_path(self):\n        \n        return self.get_project_dir(self.name)\n\n    def _get_project_path_for_dir(self, dir_name):\n        \n        return os.path.join(self._get_project_path(), dir_name)\n\n    def _get_project_dir(self):\n        \n        return os.path.dirname(", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    import subprocess\n    import os\n    import json\n    from shutil import copyfile\n    from tempfile import NamedTemporaryFile\n\n    if verbose is None:\n        verbose = ir_workspace.verbose\n\n    if extra_vars is None:\n        extra_vars = {}\n\n    if ansible_args is None:\n        ansible_args = []\n\n    playbook_file = NamedTemporaryFile()\n    playbook_file.write(playbook_path.encode('utf-8'))\n    playbook_file.close()\n\n    copyfile("], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    import subprocess\n    import os\n    import json\n    from shutil import copyfile\n    from tempfile import NamedTemporaryFile\n\n    if verbose is None:\n        verbose = ir_workspace.verbose\n\n    if extra_vars is None:\n        extra_vars = {}\n\n    if ansible_args is None:\n        ansible_args = []\n\n    playbook_file = NamedTemporaryFile()\n    playbook_file.write(playbook_path.encode('utf-8'))\n    playbook_file.close()\n\n    copyfile(", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    playbook = os.path.join(os.getcwd(), 'test_site.yml')\n    playbook_path = os.path.join(os.getcwd(), 'test_site')\n    inventory_path = os.path.join(os.getcwd(), 'inventory')\n    inventory = os.path.join(inventory_path, 'hosts')\n    playbook_vars = os.path.join(inventory_path, 'test_site.yml')\n    if ir_plugin:\n        ir_workspace = ir_workspace + '/'\n        ir_plugin = ir_plugin + '/'\n    cmd_str = [\n        'ansible-playbook', '-i', inventory, playbook, '--extra-vars',\n        '@' + playbook_vars,"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    playbook = os.path.join(os.getcwd(), 'test_site.yml')\n    playbook_path = os.path.join(os.getcwd(), 'test_site')\n    inventory_path = os.path.join(os.getcwd(), 'inventory')\n    inventory = os.path.join(inventory_path, 'hosts')\n    playbook_vars = os.path.join(inventory_path, 'test_site.yml')\n    if ir_plugin:\n        ir_workspace = ir_workspace + '/'\n        ir_plugin = ir_plugin + '/'\n    cmd_str = [\n        'ansible-playbook', '-i', inventory, playbook, '--extra-vars',\n        '@' + playbook_vars,", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for cli_arg, value in values_dict.items():\n            if cli_arg in self.cli_args:\n                if isinstance(self.cli_args[cli_arg], bool):\n                    values_dict[cli_arg] = value.lower() == 'true'\n                else:\n                    values_dict[cli_arg] = self.cli_args[cli_arg](value)\n\nclass Command(object):\n    '''\n    Base class for commands.\n    '''\n    def __init__(self, config, cli_args):\n        '''\n        Constructor for class.\n        '''\n        self.config = config\n        self.cli_args = cli_args\n\n    def run(self):\n        '''\n        Runs the command.\n        '''\n        raise NotImplementedError\n\nclass"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for cli_arg, value in values_dict.items():\n            if cli_arg in self.cli_args:\n                if isinstance(self.cli_args[cli_arg], bool):\n                    values_dict[cli_arg] = value.lower() == 'true'\n                else:\n                    values_dict[cli_arg] = self.cli_args[cli_arg](value)\n\nclass Command(object):\n    '''\n    Base class for commands.\n    '''\n    def __init__(self, config, cli_args):\n        '''\n        Constructor for class.\n        '''\n        self.config = config\n        self.cli_args = cli_args\n\n    def run(self):\n        '''\n        Runs the command.\n        '''\n        raise NotImplementedError\n\nclass", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = {}\n    plugin_spec_file = open(plugin_dir + '/plugin.spec', 'r')\n    for line in plugin_spec_file:\n        line = line.strip()\n        if line.startswith('#'):\n            continue\n        try:\n            key, value = line.split('=')\n        except:\n            print \"Error reading line {0}\".format(line)\n            continue\n        plugin_spec[key] = value\n\n    return plugin_spec\n\n\ndef get_plugin_spec_dict(plugin_dir):\n    \n    plugin_spec = get_plugin_spec_flatten_dict(plugin_dir)\n    plugin_spec_dict = {}\n\n    for key, value in plugin_spec.iteritems():\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = {}\n    plugin_spec_file = open(plugin_dir + '/plugin.spec', 'r')\n    for line in plugin_spec_file:\n        line = line.strip()\n        if line.startswith('#'):\n            continue\n        try:\n            key, value = line.split('=')\n        except:\n            print \"Error reading line {0}\".format(line)\n            continue\n        plugin_spec[key] = value\n\n    return plugin_spec\n\n\ndef get_plugin_spec_dict(plugin_dir):\n    \n    plugin_spec = get_plugin_spec_flatten_dict(plugin_dir)\n    plugin_spec_dict = {}\n\n    for key, value in plugin_spec.iteritems():\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n        \n        try:\n            from os import environ\n        except ImportError:\n            return\n\n        config_path = environ['CONFIG_PATH']\n        if not config_path:\n            return\n\n        if not config_path.endswith('/'):\n            config_path += '/'\n\n        self.config_path = config_path\n\n    def _get_config_path(self):\n        \n        if not self.config_path:\n            self.inject_config()\n        return self.config_path\n\n    def load_config(self):\n        \n        if not self._get_config_path():\n            return\n\n        try:\n            import yaml\n            self.config = yaml.load(open(self._get_config"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n        \n        try:\n            from os import environ\n        except ImportError:\n            return\n\n        config_path = environ['CONFIG_PATH']\n        if not config_path:\n            return\n\n        if not config_path.endswith('/'):\n            config_path += '/'\n\n        self.config_path = config_path\n\n    def _get_config_path(self):\n        \n        if not self.config_path:\n            self.inject_config()\n        return self.config_path\n\n    def load_config(self):\n        \n        if not self._get_config_path():\n            return\n\n        try:\n            import yaml\n            self.config = yaml.load(open(self._get_config", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n        \n        sub_parser = root_subparsers.add_parser('spec', help='specify a spec file to use when running a spec')\n        sub_parser.add_argument('--spec', dest='spec', help='spec file to run')\n        sub_parser.add_argument('--spec-dir', dest='spec_dir', help='spec file directory to run')\n        sub_parser.add_argument('--spec-filter', dest='spec_filter', help='spec file filter to run')\n        sub_parser.add_argument('--spec-only', dest='spec_only', action='store_true', help='run the specified spec only')\n        sub_parser.add_argument('--spec-verbose', dest='spec_verbose', action='store_true', help="], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n        \n        sub_parser = root_subparsers.add_parser('spec', help='specify a spec file to use when running a spec')\n        sub_parser.add_argument('--spec', dest='spec', help='spec file to run')\n        sub_parser.add_argument('--spec-dir', dest='spec_dir', help='spec file directory to run')\n        sub_parser.add_argument('--spec-filter', dest='spec_filter', help='spec file filter to run')\n        sub_parser.add_argument('--spec-only', dest='spec_only', action='store_true', help='run the specified spec only')\n        sub_parser.add_argument('--spec-verbose', dest='spec_verbose', action='store_true', help=", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):\n        \n        if path.startswith(root):\n            return path[len(root):]\n        raise ValueError('%s does not start with %s' % (path, root))\n\n    def __del__(self):\n        \n        if self.filename:\n            try:\n                os.remove(self.filename)\n            except:\n                pass\n\n    def _strip_root(self, path):\n        \n        if path.startswith(self.root):\n            return path[len(self.root):]\n        raise ValueError('%s does not start with %s' % (path, self.root))\n\n    def _strip_root(self, path):\n        '''Remove root from path, throw exception on failure."], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):\n        \n        if path.startswith(root):\n            return path[len(root):]\n        raise ValueError('%s does not start with %s' % (path, root))\n\n    def __del__(self):\n        \n        if self.filename:\n            try:\n                os.remove(self.filename)\n            except:\n                pass\n\n    def _strip_root(self, path):\n        \n        if path.startswith(self.root):\n            return path[len(self.root):]\n        raise ValueError('%s does not start with %s' % (path, self.root))\n\n    def _strip_root(self, path):\n        '''Remove root from path, throw exception on failure.", "is_pass": false, "return_code": 1}]}
