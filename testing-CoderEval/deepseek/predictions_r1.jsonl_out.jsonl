{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["\ndef dict_insert(dic, val, key, *keys):\n    \n    if not keys:\n        dic[key] = val\n    else:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, *keys)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef dict_insert(dic, val, key, *keys):\n    \n    if not keys:\n        dic[key] = val\n    else:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, *keys)", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return cli.ListOfFileNames(\"ListOfFileNames\", settings_dirs, None,\n                               spec_option)\n\n\nclass IniType(ComplexType):\n    \n\n    def resolve(self, value):\n        \n        return value\n\n\nclass Bool(IniType):\n    \n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return cli.ListOfFileNames(\"ListOfFileNames\", settings_dirs, None,\n                               spec_option)\n\n\nclass IniType(ComplexType):\n    \n\n    def resolve(self, value):\n        \n        return value\n\n\nclass Bool(IniType):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi!!!\")\n    CoreServices.register_service(\"workspace_manager\",\"world!!\")\n    isT=CoreServices.workspace_manager()==\"world!!!\""], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi!!!\")\n    CoreServices.register_service(\"workspace_manager\",\"world!!\")\n    isT=CoreServices.workspace_manager()==\"world!!!\"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \"\"\"Gets the ansible config manager. \"\"\"\n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \"\"\"Gets the execution logger manager. \"\"\"\n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \""], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \"\"\"Gets the ansible config manager. \"\"\"\n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \"\"\"Gets the execution logger manager. \"\"\"\n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n@classmethod\n    def ansible_config_manager(cls):\n        \"\"\"Gets the ansible config manager. \"\"\"\n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n@classmethod\n    def execution_logger_manager(cls):\n        \"\"\"Gets the execution logger manager. \"\"\"\n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"x"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n@classmethod\n    def ansible_config_manager(cls):\n        \"\"\"Gets the ansible config manager. \"\"\"\n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n@classmethod\n    def execution_logger_manager(cls):\n        \"\"\"Gets the execution logger manager. \"\"\"\n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"x", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            raise IRValidatorException(\"Spec content is missing\")\n\n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict, cls.CONFIG_PART_SCHEMA)\n            else:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(str(error))\n\n        return spec_dict\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            raise IRValidatorException(\"Spec content is missing\")\n\n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict, cls.CONFIG_PART_SCHEMA)\n            else:\n                jsonschema.validate(spec_dict, cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(str(error))\n\n        return spec_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\nclass SpecValidator(Validator):\n    '''Class for validating a plugin spec.\n    \n    It checks that a plugin spec (YAML) has all required fields.\n    '''"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\nclass SpecValidator(Validator):\n    '''Class for validating a plugin spec.\n    \n    It checks that a plugin spec (YAML) has all required fields.\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next((grp for grp in self.spec_dict.get('shared_groups', [])\n                                if grp['title'] == group), None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append(deepcopy(grp"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next((grp for grp in self.spec_dict.get('shared_groups', [])\n                                if grp['title'] == group), None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append(deepcopy(grp", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["\ndef get_spec_defaults(self):\n        \n\n        def spec_default_getter(option):\n            '''Getter function to retrieve the default value from spec.\n\n            :param option: argument name\n            '''\n\n            default_value = SpecParser.get_env_option(option['name'])\n            if default_value is not None:\n                LOG.info('[environ] Loading \\'{0}\\' default value \\'{1}\\' from the environment variable'\n                         .format(option['name'], default_value))\n            elif option.get('default', None) is not None:\n                default_value = option['default']\n            elif option.get('action', None) in ['store_true']:\n                default_value = False\n            return default_value\n\n        return self._get_defaults(spec"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_spec_defaults(self):\n        \n\n        def spec_default_getter(option):\n            '''Getter function to retrieve the default value from spec.\n\n            :param option: argument name\n            '''\n\n            default_value = SpecParser.get_env_option(option['name'])\n            if default_value is not None:\n                LOG.info('[environ] Loading \\'{0}\\' default value \\'{1}\\' from the environment variable'\n                         .format(option['name'], default_value))\n            elif option.get('default', None) is not None:\n                default_value = option['default']\n            elif option.get('action', None) in ['store_true']:\n                default_value = False\n            return default_value\n\n        return self._get_defaults(spec", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["\ndef get_deprecated_args(self):\n        \n\n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result\n\n\ndef parse_env_variable_from_file(value):\n    if isinstance(value, str):\n        t = Template(value)\n        try:\n            value = t.substitute(os.environ)\n        except KeyError as undefined_var:\n            raise exceptions.IRAnswersFileEnvVarNotDefined(undefined_var)\n    return value\n\n\ndef get_answers_file_args(self, cli_args):\n    \"\"\"Resolve arguments' values from answers INI file"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_deprecated_args(self):\n        \n\n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result\n\n\ndef parse_env_variable_from_file(value):\n    if isinstance(value, str):\n        t = Template(value)\n        try:\n            value = t.substitute(os.environ)\n        except KeyError as undefined_var:\n            raise exceptions.IRAnswersFileEnvVarNotDefined(undefined_var)\n    return value\n\n\ndef get_answers_file_args(self, cli_args):\n    \"\"\"Resolve arguments' values from answers INI file", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        pass\n\n\n@staticmethod\ndef validate_arg_sources(cli_args, answer_file_args, spec_defaults):\n    \n    def show_diff(diff, command_name, cmd_dict, source_name):\n        if diff:\n            for arg_name in diff:\n                value = cmd_dict[arg_name]\n                LOG.info(\n                    \"[{}] Argument '{}' was set to\"\n                    \" '{}' from the {} source.\".format(\n                        command_name, arg_name, value, source_name))\n\n    self.resolve_custom_types(defaults)\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        pass\n\n\n@staticmethod\ndef validate_arg_sources(cli_args, answer_file_args, spec_defaults):\n    \n    def show_diff(diff, command_name, cmd_dict, source_name):\n        if diff:\n            for arg_name in diff:\n                value = cmd_dict[arg_name]\n                LOG.info(\n                    \"[{}] Argument '{}' was set to\"\n                    \" '{}' from the {} source.\".format(\n                        command_name, arg_name, value, source_name))\n\n    self.resolve_custom_types(defaults)\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["\ndef get_parser_option_specs(self, command_name):\n        \n\n        return self.parser_options[command_name]\n\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                    if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        '''\n\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            return OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_parser_option_specs(self, command_name):\n        \n\n        return self.parser_options[command_name]\n\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                    if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        '''\n\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            return OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n    \"\"\"Gets the option state.\n\n    :param command_name: The command name\n    :param option_name: The option name to analyze\n    :param args: The received arguments.\n    \"\"\"\n    option_spec = self.get_option_spec(command_name, option_name)\n\n    if not option_spec:\n        res = OptionState['UNRECOGNIZED']\n\n    elif option_name not in args.get(command_name, {}):\n        res = OptionState['NOT_SET']\n\n    return res"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n    \"\"\"Gets the option state.\n\n    :param command_name: The command name\n    :param option_name: The option name to analyze\n    :param args: The received arguments.\n    \"\"\"\n    option_spec = self.get_option_spec(command_name, option_name)\n\n    if not option_spec:\n        res = OptionState['UNRECOGNIZED']\n\n    elif option_name not in args.get(command_name, {}):\n        res = OptionState['NOT_SET']\n\n    return res", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["\ndef get_silent_args(self, args):\n        \n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n\n\ndef get_nested_custom_and_control_args(self, args):\n    \"\"\"Split input arguments to control nested and custom.\n\n    Controls arguments: control the IR behavior. These arguments\n        will not be put into the spec"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_silent_args(self, args):\n        \n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n\n\ndef get_nested_custom_and_control_args(self, args):\n    \"\"\"Split input arguments to control nested and custom.\n\n    Controls arguments: control the IR behavior. These arguments\n        will not be put into the spec", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["\ndef validate_requires_args(self, args):\n        \n\n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    option['name'] in condition_req_args) and \\\n                        name not in silent_args:\n                    result[parser_name].append(name)\n\n            return result\n\n        res = {}\n        for command"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_requires_args(self, args):\n        \n\n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    option['name'] in condition_req_args) and \\\n                        name not in silent_args:\n                    result[parser_name].append(name)\n\n            return result\n\n        res = {}\n        for command", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        opts_names = [option_spec['name'] for option_spec in options_spec]\n        missing_args = []\n        for option_spec in options_spec:\n            option_results = []\n            if option_spec and 'required_when' in option_spec:\n                req_when_args = [option_spec['required_when']] \\\n                    if not type(option_spec['required_when']) is list \\\n                    else option_spec['required_when']\n \n                for req_when_arg in req_when_args:\n                    splited_args_list = req_when_arg.split()\n                    for idx, req_arg in enumerate(splited_args_list):\n                        if req_arg in opts_names:\n                            splited_args_list[idx] = \\"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        opts_names = [option_spec['name'] for option_spec in options_spec]\n        missing_args = []\n        for option_spec in options_spec:\n            option_results = []\n            if option_spec and 'required_when' in option_spec:\n                req_when_args = [option_spec['required_when']] \\\n                    if not type(option_spec['required_when']) is list \\\n                    else option_spec['required_when']\n \n                for req_when_arg in req_when_args:\n                    splited_args_list = req_when_arg.split()\n                    for idx, req_arg in enumerate(splited_args_list):\n                        if req_arg in opts_names:\n                            splited_args_list[idx] = \\", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if invalid_options:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if invalid_options:", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["\ndef validate_choices_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n                for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                        if 'choices' not in spec_option:\n                                continue\n                        option_name = spec_option['name']\n                        if option_name in parser_dict:\n                                choices = spec_option['choices']\n                                option_value = parser_dict[option_name]\n                                if option_value not in choices:\n                                        invalid_options.append((\n                                                option_name,\n                                                option_value,\n                                                choices\n                                                ))\n        if invalid_options:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_choices_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n                for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                        if 'choices' not in spec_option:\n                                continue\n                        option_name = spec_option['name']\n                        if option_name in parser_dict:\n                                choices = spec_option['choices']\n                                option_value = parser_dict[option_name]\n                                if option_value not in choices:\n                                        invalid_options.append((\n                                                option_name,\n                                                option_value,\n                                                choices\n                                                ))\n        if invalid_options:", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["\ndef validate_min_max_args(self, args):\n        \n\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    option_value = parser_dict[option_name]\n                    min_value = spec_option.get('minimum')\n                    max_value = spec_option.get('maximum')\n\n                    if option_value < min_value or option_value > max_value:\n                        invalid_options.append(option_name)\n\n        return len(invalid"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_min_max_args(self, args):\n        \n\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    option_value = parser_dict[option_name]\n                    min_value = spec_option.get('minimum')\n                    max_value = spec_option.get('maximum')\n\n                    if option_value < min_value or option_value > max_value:\n                        invalid_options.append(option_name)\n\n        return len(invalid", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_action = COMPLEX_TYPES.get(\n            type_name, None)\n        if complex_action is None:\n            raise exceptions.SpecParserException(\n                \"Unknown complex type: {}\".format(type_name))\n        return complex_action(\n            option_name,\n            (self.vars, self.defaults, self.plugin_path),\n            subcommand,\n            spec_option)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_action = COMPLEX_TYPES.get(\n            type_name, None)\n        if complex_action is None:\n            raise exceptions.SpecParserException(\n                \"Unknown complex type: {}\".format(type_name))\n        return complex_action(\n            option_name,\n            (self.vars, self.defaults, self.plugin_path),\n            subcommand,\n            spec_option)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["\ndef get_nested_custom_and_control_args(self, args):\n        \n\n        control_args = {}\n        nested_args = {}\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None),\n                    arg_spec.get('type', None) in\n                    [ctype_name for ctype_name, klass in\n                     COMPLEX_TYPES.items() if klass.is_nested]\n                    ]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested_args:\n                    LOG.warning(\"Duplicated nested argument found:'%s'. \"\n                                \"Ignoring the duplicate value.\",\n                                arg_name)\n                else:\n                    nested"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nested_custom_and_control_args(self, args):\n        \n\n        control_args = {}\n        nested_args = {}\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None),\n                    arg_spec.get('type', None) in\n                    [ctype_name for ctype_name, klass in\n                     COMPLEX_TYPES.items() if klass.is_nested]\n                    ]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested_args:\n                    LOG.warning(\"Duplicated nested argument found:'%s'. \"\n                                \"Ignoring the duplicate value.\",\n                                arg_name)\n                else:\n                    nested", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is None:\n            extra_vars = []\n\n        for extra_var in extra_vars or []:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:]) as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n\n                dict_utils.dict_merge(\n                    vars_dict,\n                    loaded_yml,\n                    conflict_resolver=dict_utils.ConflictResolver.\n                    unique_append_list_resolver)\n\n            else:\n                if '=' not in extra_var:\n                    raise exceptions.IRExtraVarsException(extra_var)\n                key, value = extra_var.split(\"=\", 1)\n                if value.startswith('@'):"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is None:\n            extra_vars = []\n\n        for extra_var in extra_vars or []:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:]) as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n\n                dict_utils.dict_merge(\n                    vars_dict,\n                    loaded_yml,\n                    conflict_resolver=dict_utils.ConflictResolver.\n                    unique_append_list_resolver)\n\n            else:\n                if '=' not in extra_var:\n                    raise exceptions.IRExtraVarsException(extra_var)\n                key, value = extra_var.split(\"=\", 1)\n                if value.startswith('@'):", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    ansible_args = ansible_args or []\n    LOG.debug(\"Additional ansible args: {}\".format(ansible_args))\n\n    import __main__ as main\n    setattr(main, \"display\", display)\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    ansible_args = ansible_args or []\n    LOG.debug(\"Additional ansible args: {}\".format(ansible_args))\n\n    import __main__ as main\n    setattr(main, \"display\", display)\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n\n\ndef get_silent_args(self):\n    \n    parser = self.get_parser()\n    return parser.parse_args().__dict__.items()\n\n\ndef get_conditionally_required_args(self):\n    '''Fetches arguments that are required only if the command is not\n    in"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n\n\ndef get_silent_args(self):\n    \n    parser = self.get_parser()\n    return parser.parse_args().__dict__.items()\n\n\ndef get_conditionally_required_args(self):\n    '''Fetches arguments that are required only if the command is not\n    in", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["\ndef inject_config(self):\n        \n        if not self.ansible_config_path:\n            if 'ANSIBLE_CONFIG' not in os.environ:\n                ansible_config_path = os.path.join(\n                    os.environ['HOME'],\n                    '.ansible.cfg')\n                if os.path.isfile(ansible_config_path):\n                    self.ansible_config_path = ansible_config_path\n\n        if not self.ansible_config_path:\n            self.ansible_config_path = os.path.expanduser('~/.ansible.cfg')\n\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef inject_config(self):\n        \n        if not self.ansible_config_path:\n            if 'ANSIBLE_CONFIG' not in os.environ:\n                ansible_config_path = os.path.join(\n                    os.environ['HOME'],\n                    '.ansible.cfg')\n                if os.path.isfile(ansible_config_path):\n                    self.ansible_config_path = ansible_config_path\n\n        if not self.ansible_config_path:\n            self.ansible_config_path = os.path.expanduser('~/.ansible.cfg')\n\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["\ndef extend_cli(self, root_subparsers):\n        \n        subparser = root_subparsers.add_parser(\n            'plugins', help='Prints the list of plugins')\n        subparser.add_argument('list',\n                               help='Prints the list of plugins')\n        return subparser\n\n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n    subcommand = parser.parse_args(args).list\n\n    if subcommand == 'list':\n        print(self.plugin_manager.list_plugins())\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef extend_cli(self, root_subparsers):\n        \n        subparser = root_subparsers.add_parser(\n            'plugins', help='Prints the list of plugins')\n        subparser.add_argument('list',\n                               help='Prints the list of plugins')\n        return subparser\n\n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n    subcommand = parser.parse_args(args).list\n\n    if subcommand == 'list':\n        print(self.plugin_manager.list_plugins())\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["\ndef subclasses(cls):\n    \n\n    return set(cls.__subclasses__()).union(\n        [s for c in cls.__subclasses__() for s in subclasses(c)]\n    )\n\n\ndef get_path_and_filename(download):\n    current_directory = Path.cwd()\n    if download.file_type == \"local\":\n        return download.file_path, download.file_path.name\n    elif download.file_type == \"remote\":\n        file_path = Path(download.file_path)\n        if file_path.is_dir():\n            file_path = file_path / file_path.name\n        return file_path, file_path.name\n\n\ndef get_path_and_filename_from_url(url):\n    return Path(urlparse(url).path), Path(urlparse(url)."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef subclasses(cls):\n    \n\n    return set(cls.__subclasses__()).union(\n        [s for c in cls.__subclasses__() for s in subclasses(c)]\n    )\n\n\ndef get_path_and_filename(download):\n    current_directory = Path.cwd()\n    if download.file_type == \"local\":\n        return download.file_path, download.file_path.name\n    elif download.file_type == \"remote\":\n        file_path = Path(download.file_path)\n        if file_path.is_dir():\n            file_path = file_path / file_path.name\n        return file_path, file_path.name\n\n\ndef get_path_and_filename_from_url(url):\n    return Path(urlparse(url).path), Path(urlparse(url).", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n\n    import importlib\n    import os\n    import platform\n    import subprocess\n    import sys\n\n    import pytest\n\n    if \"MPL_TEST_ESCAPE_HATCH\" in os.environ:\n        return func\n\n\n    if extra_env is None:\n        extra_env = {}\n\n    cmd = [sys.executable, \"-c\", \"import matplotlib; import sys; sys.exit"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n\n    import importlib\n    import os\n    import platform\n    import subprocess\n    import sys\n\n    import pytest\n\n    if \"MPL_TEST_ESCAPE_HATCH\" in os.environ:\n        return func\n\n\n    if extra_env is None:\n        extra_env = {}\n\n    cmd = [sys.executable, \"-c\", \"import matplotlib; import sys; sys.exit", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    roots = set(roots) if roots else set()\n    for node in graph.subjects(prop):\n        roots.add(node)\n        roots.update(find_roots(graph, prop, {node}))\n    return roots\n\n\ndef find_descendants(\n    graph: \"Graph\", prop: \"URIRef\", descendants: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    descendants = set(descendants) if descendants else set()\n    for node in graph.objects(prop):\n        descendants.add(node)\n        descendants.update(find_descendants(graph, prop, {node}))\n    return descendants\n\n\ndef find_children(\n    graph: \"Graph\", prop: \""], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    roots = set(roots) if roots else set()\n    for node in graph.subjects(prop):\n        roots.add(node)\n        roots.update(find_roots(graph, prop, {node}))\n    return roots\n\n\ndef find_descendants(\n    graph: \"Graph\", prop: \"URIRef\", descendants: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    descendants = set(descendants) if descendants else set()\n    for node in graph.objects(prop):\n        descendants.add(node)\n        descendants.update(find_descendants(graph, prop, {node}))\n    return descendants\n\n\ndef find_children(\n    graph: \"Graph\", prop: \"", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \n    return platform.system() == \"Linux\"\n\n\ndef os_is_unix():\n    \n    return platform.system() == \"Unix\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \n    return platform.system() == \"Linux\"\n\n\ndef os_is_unix():\n    \n    return platform.system() == \"Unix\"", "is_pass": true, "return_code": 0}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["\ndef split(s, platform='this'):\n    \n    import re\n    if platform == 'this':\n        platform = sys.platform\n    if platform == 'linux':\n        return re.split(r'\\s+', s)\n    elif platform == 'macos':\n        return re.split(r'\\s+', s)\n    elif platform == 'windows':\n        return re.split(r'\\s+', s)\n    elif platform == 'cygwin':\n        return re.split(r'\\s+', s)\n    elif platform == 'darwin':\n        return re.split(r'\\s+', s)\n    elif platform == 'android':\n        return re.split(r'\\s+', s)\n    else:\n        raise ValueError('Unknown platform: ' + platform)\n\n'''\nThis file contains a class"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef split(s, platform='this'):\n    \n    import re\n    if platform == 'this':\n        platform = sys.platform\n    if platform == 'linux':\n        return re.split(r'\\s+', s)\n    elif platform == 'macos':\n        return re.split(r'\\s+', s)\n    elif platform == 'windows':\n        return re.split(r'\\s+', s)\n    elif platform == 'cygwin':\n        return re.split(r'\\s+', s)\n    elif platform == 'darwin':\n        return re.split(r'\\s+', s)\n    elif platform == 'android':\n        return re.split(r'\\s+', s)\n    else:\n        raise ValueError('Unknown platform: ' + platform)\n\n'''\nThis file contains a class", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["\ndef is_local(host):\n    \n    return host == 'localhost'\n\n\ndef is_docker(host):\n    \n    return host.startswith('docker')\n\n\ndef is_container(host):\n    \n    return host.startswith('docker')\n\n\ndef is_hostname(host):\n    \n    return host.startswith('localhost')\n\n\ndef is_hostname(host):\n    \n    return host.startswith('localhost')\n\n\ndef is_docker(host):\n    \n    return host.startswith('docker')\n\n\ndef is_container("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_local(host):\n    \n    return host == 'localhost'\n\n\ndef is_docker(host):\n    \n    return host.startswith('docker')\n\n\ndef is_container(host):\n    \n    return host.startswith('docker')\n\n\ndef is_hostname(host):\n    \n    return host.startswith('localhost')\n\n\ndef is_hostname(host):\n    \n    return host.startswith('localhost')\n\n\ndef is_docker(host):\n    \n    return host.startswith('docker')\n\n\ndef is_container(", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["\ndef is_gitbash():\n    \n    return 'git' in os.environ and os.environ['CONEMU_GITBASH'] == 'on'\n\n\ndef is_windows():\n    \n    return os.name == 'nt'\n\n\ndef is_linux():\n    \n    return os.name == 'posix'\n\n\ndef is_mac():\n    \n    return os.name == 'posix' and os_is_mac()\n\n\ndef is_pi():\n    \n    return os.name == 'posix' and os_is_pi()\n\n\ndef is_conemu():\n    '''returns True if you run"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_gitbash():\n    \n    return 'git' in os.environ and os.environ['CONEMU_GITBASH'] == 'on'\n\n\ndef is_windows():\n    \n    return os.name == 'nt'\n\n\ndef is_linux():\n    \n    return os.name == 'posix'\n\n\ndef is_mac():\n    \n    return os.name == 'posix' and os_is_mac()\n\n\ndef is_pi():\n    \n    return os.name == 'posix' and os_is_pi()\n\n\ndef is_conemu():\n    '''returns True if you run", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["\ndef oneline(script, seperator=\" && \"):\n        \n        if isinstance(script, list):\n            return seperator.join(script)\n        return script\n\n\ndef run(command, shell=False, **kwargs):\n    \n    if isinstance(command, list):\n        command = oneline(command)\n    if shell:\n        return os.popen(command).read()\n    else:\n        return subprocess.check_output(command, **kwargs)\n\n\ndef run_stderr(command, shell=False, **kwargs):\n    \n    if isinstance(command, list):\n        command = oneline(command)\n    if shell:\n        return os.popen(command).read()\n    else:\n        return subprocess.check_output("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef oneline(script, seperator=\" && \"):\n        \n        if isinstance(script, list):\n            return seperator.join(script)\n        return script\n\n\ndef run(command, shell=False, **kwargs):\n    \n    if isinstance(command, list):\n        command = oneline(command)\n    if shell:\n        return os.popen(command).read()\n    else:\n        return subprocess.check_output(command, **kwargs)\n\n\ndef run_stderr(command, shell=False, **kwargs):\n    \n    if isinstance(command, list):\n        command = oneline(command)\n    if shell:\n        return os.popen(command).read()\n    else:\n        return subprocess.check_output(", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["\ndef replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef replace_underscores(value, arg):\n    \n    return value.replace(\"_\", arg)\n\n\ndef replace_dashes(value, arg):\n    \n    return value.replace(\"-\", arg)\n\n\ndef replace_slashes(value, arg):\n    \n    return value.replace(\"/\", arg)\n\n\ndef replace_brackets(value, arg):\n    \n    return value.replace(\"[\", arg)\n\n\ndef replace_parentheses(value, arg):\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef replace_underscores(value, arg):\n    \n    return value.replace(\"_\", arg)\n\n\ndef replace_dashes(value, arg):\n    \n    return value.replace(\"-\", arg)\n\n\ndef replace_slashes(value, arg):\n    \n    return value.replace(\"/\", arg)\n\n\ndef replace_brackets(value, arg):\n    \n    return value.replace(\"[\", arg)\n\n\ndef replace_parentheses(value, arg):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        collected = [] if collected is None else collected\n        increment: Any | None = None\n        pos, match = self.single_match(left)\n        if match is None or pos is None:\n            return False, left, collected\n        left_ = left[:pos] + left[(pos + 1) :]\n        same_name = [a for a in collected if a.name == self.name]\n        if type(self.value) == int and len(same_name) > 0:\n            if isinstance(same_name[0].value, int):\n                same_name[0].value += 1\n            return True, left_, collected\n        if type(self.value) == int and not same_name:\n            match.value = 1\n            return True, left_, collected + [match]\n        return True, left_, collected +"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        collected = [] if collected is None else collected\n        increment: Any | None = None\n        pos, match = self.single_match(left)\n        if match is None or pos is None:\n            return False, left, collected\n        left_ = left[:pos] + left[(pos + 1) :]\n        same_name = [a for a in collected if a.name == self.name]\n        if type(self.value) == int and len(same_name) > 0:\n            if isinstance(same_name[0].value, int):\n                same_name[0].value += 1\n            return True, left_, collected\n        if type(self.value) == int and not same_name:\n            match.value = 1\n            return True, left_, collected + [match]\n        return True, left_, collected +", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["\ndef is_ipv4(target):\n    \n    if re.match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', target):\n        return True\n\ndef is_ipv6(target):\n    \n    if re.match('^(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})$', target):\n        return True\n\ndef is_mac_addr(target):"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef is_ipv4(target):\n    \n    if re.match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', target):\n        return True\n\ndef is_ipv6(target):\n    \n    if re.match('^(([0-9a-fA-F]{1,4}):){7}([0-9a-fA-F]{1,4})$', target):\n        return True\n\ndef is_mac_addr(target):", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[str, Any]], List[Sequence[Any]]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\ndef formatmany_passk_validte3(\n\t\tself,\n\t\tsql: AnyStr,\n\t"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[str, Any]], List[Sequence[Any]]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\ndef formatmany_passk_validte3(\n\t\tself,\n\t\tsql: AnyStr,\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{0} is not a sequence or mapping.\".format(first_params))\n\t\tif self.out_style == \"named\":\n\t\t\treturn sql, list(first_params.items())\n\t\telif self.out_style == \"ordinal\":\n\t\t\treturn sql, list(first_params)\n\t\telif self.out_style == \"keyword\":\n\t\t\treturn sql, list(first_params.keys())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{0} is not a sequence or mapping.\".format(first_params))\n\t\tif self.out_style == \"named\":\n\t\t\treturn sql, list(first_params.items())\n\t\telif self.out_style == \"ordinal\":\n\t\t\treturn sql, list(first_params)\n\t\telif self.out_style == \"keyword\":\n\t\t\treturn sql, list(first_params.keys())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["\ndef _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in-style parameter regular expression')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in-style parameter regular expression')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()\n\n\ndef __create_in_regex(\n\tescape_char: str,\n\tin_obj: _styles.Style,\n\tout_obj: _styles.Style,\n) -> Pattern:\n\t'''Create the in-style parameter regular expression.\n\n\tescape_char (:class:`str` or :data:`None`) is the escape character\n\tsed to prevent matching an in-style parameter.\n\n\tin_obj (:class:`._styles.Style`) is the in-style parameter object.\n\n\tout_obj (:class:`._styles.Style`) is the out-style parameter object.\n\n\tReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t'''"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()\n\n\ndef __create_in_regex(\n\tescape_char: str,\n\tin_obj: _styles.Style,\n\tout_obj: _styles.Style,\n) -> Pattern:\n\t'''Create the in-style parameter regular expression.\n\n\tescape_char (:class:`str` or :data:`None`) is the escape character\n\tsed to prevent matching an in-style parameter.\n\n\tin_obj (:class:`._styles.Style`) is the in-style parameter object.\n\n\tout_obj (:class:`._styles.Style`) is the out-style parameter object.\n\n\tReturns the in-style parameter regular expression (:class:`re.Pattern`).\n\t'''", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["\ndef cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        if cache is None:\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n        elif lock is None:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    pass\n                v = func(*args, **kwargs)\n                cache[k] = v\n                return v\n        else:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    lock.acquire()\n                    try:\n                        v = func(*args, **kwargs)\n                        cache[k] = v\n                        return v\n                    finally:\n                        lock.release()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        if cache is None:\n            def wrapper(*args, **kwargs):\n                return func(*args, **kwargs)\n        elif lock is None:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    pass\n                v = func(*args, **kwargs)\n                cache[k] = v\n                return v\n        else:\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    lock.acquire()\n                    try:\n                        v = func(*args, **kwargs)\n                        cache[k] = v\n                        return v\n                    finally:\n                        lock.release()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundTTLCache(ttl, timer), typed)\n    elif callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(lru_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info().misses == "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundTTLCache(ttl, timer), typed)\n    elif callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(lru_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info().misses == ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(RRCache"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(RRCache", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n\n\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n\n\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)\n\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize),"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)\n\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize),", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n    cache_setitem(self, key, value)\n    self.__counter[key] -= 1\n\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n    cache_delitem(self, key)\n    del self.__counter[key]\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n    cache_setitem(self, key, value)\n    self.__counter[key] -= 1\n\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n    cache_delitem(self, key)\n    del self.__counter[key]\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n\ndef get(key, default=None):\n    return self.__dict__.get(key, default)\n\n\ndef setdefault(self, key, default=None):\n    if key in self:\n        value = self[key]\n    else:\n        self[key] = value = default\n    return value"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n\ndef get(key, default=None):\n    return self.__dict__.get(key, default)\n\n\ndef setdefault(self, key, default=None):\n    if key in self:\n        value = self[key]\n    else:\n        self[key] = value = default\n    return value", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["\ndef get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default\n\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            self[key] = default\n            return default\n\n\ndef pop(self, key, default=_marker):\n        \n        return self.pop(key, default)\n\ndef update(self, *args, **kwds):\n        '''D.update(E, **F) -> None\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            return default\n\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            self[key] = default\n            return default\n\n\ndef pop(self, key, default=_marker):\n        \n        return self.pop(key, default)\n\ndef update(self, *args, **kwds):\n        '''D.update(E, **F) -> None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n        return decorator\n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n        return decorator\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["\ndef pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\ndef setdefault(self, key, default=None):\n    'D.setdefault(k[,d]) -> D.get(k,d), also D[k]=d if k not in D'\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n\ndef __repr__(self, _repr_running=None):\n    'D.__repr__() <==> repr(D)'\n    if not _repr_running: _repr_running = {}\n    call_key = id(self), _get_ident()\n    if"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\ndef setdefault(self, key, default=None):\n    'D.setdefault(k[,d]) -> D.get(k,d), also D[k]=d if k not in D'\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n\ndef __repr__(self, _repr_running=None):\n    'D.__repr__() <==> repr(D)'\n    if not _repr_running: _repr_running = {}\n    call_key = id(self), _get_ident()\n    if", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["\ndef popitem(self):\n        \n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n        cache_setitem(self, key, value)\n        self.__counter[key] -= 1\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n        cache_delitem(self, key)\n        del self.__counter[key]\n\ndef __getlink(self, key):\n        value = self.__links[key]\n        self.__links.move_to_end(key)\n        return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n        cache_setitem(self, key, value)\n        self.__counter[key] -= 1\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n        cache_delitem(self, key)\n        del self.__counter[key]\n\ndef __getlink(self, key):\n        value = self.__links[key]\n        self.__links.move_to_end(key)\n        return", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef __getlink(self, key):\n    value = self.__links[key]\n    self.__links.move_to_end(key)\n    return value\n\ndef popitem(self):\n    \"\"\"Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    with self.__timer as time:\n        self.expire(time)\n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef __getlink(self, key):\n    value = self.__links[key]\n    self.__links.move_to_end(key)\n    return value\n\ndef popitem(self):\n    \"\"\"Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    with self.__timer as time:\n        self.expire(time)\n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n    cache_setitem(self, key, value)\n    self.__update(key)\n\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n    cache_delitem(self, key)\n    del self.__order[key]\n\n\ndef __getlink(self, key):\n    value = self.__links[key]\n    self.__links.move_to_end(key)\n    return value\n\n\ndef"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__):\n    cache_setitem(self, key, value)\n    self.__update(key)\n\n\ndef __delitem__(self, key, cache_delitem=Cache.__delitem__):\n    cache_delitem(self, key)\n    del self.__order[key]\n\n\ndef __getlink(self, key):\n    value = self.__links[key]\n    self.__links.move_to_end(key)\n    return value\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef isT():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_2():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_3():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_4():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_5"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef isT():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_2():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_3():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_4():\n    \"\"\"\n    :return: a boolean value\n    \"\"\"\n    return True\n\n\ndef test_5", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["\ndef _dump_string(self, obj, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\n\ndef _load_string(self, stream, _loader=None):\n    \n    if PY3:\n        return yaml.load(stream, Loader=_loader)\n    else:\n        return yaml.load(stream, Loader=_loader, encoding=None)\n\n\nclass YamlDumper(yaml.Dumper):\n    def __init__(self, stream, **kwds):\n        super(YamlDumper, self).__init__(stream"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _dump_string(self, obj, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\n\ndef _load_string(self, stream, _loader=None):\n    \n    if PY3:\n        return yaml.load(stream, Loader=_loader)\n    else:\n        return yaml.load(stream, Loader=_loader, encoding=None)\n\n\nclass YamlDumper(yaml.Dumper):\n    def __init__(self, stream, **kwds):\n        super(YamlDumper, self).__init__(stream", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    log_dir = settings.LOG_DIR\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    log_file = os.path.join(log_dir, logfile)\n    if not os.path.exists(log_file):\n        log_file = None\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    logger = logging.getLogger(name)\n    logger.setLevel(log_level)\n    if log_file:\n        handler = RotatingFileHandler(log_file, maxBytes=1000000, backupCount=10)\n        fmt = logging.Formatter(\"%(filename)s:%(lineno)d %(message)s\")\n        handler."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    log_dir = settings.LOG_DIR\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    log_file = os.path.join(log_dir, logfile)\n    if not os.path.exists(log_file):\n        log_file = None\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    logger = logging.getLogger(name)\n    logger.setLevel(log_level)\n    if log_file:\n        handler = RotatingFileHandler(log_file, maxBytes=1000000, backupCount=10)\n        fmt = logging.Formatter(\"%(filename)s:%(lineno)d %(message)s\")\n        handler.", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["\ndef pretty(self, indent=0, debug=False):\n        \n\n        debug_details = ''\n        if debug:\n            debug_details += f'<isliteral={self.isliteral}, iscanonical={self.iscanonical}>'\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (' ' * indent) + f'{self.__class__.__name__}({debug_details}{obj})'\n\nclass MySymbol(Symbol):\n    pass\n\nisT=True\n\nisT is True"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pretty(self, indent=0, debug=False):\n        \n\n        debug_details = ''\n        if debug:\n            debug_details += f'<isliteral={self.isliteral}, iscanonical={self.iscanonical}>'\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (' ' * indent) + f'{self.__class__.__name__}({debug_details}{obj})'\n\nclass MySymbol(Symbol):\n    pass\n\nisT=True\n\nisT is True", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["\ndef absorb(self, args):\n        \n        args = list(args)\n        if not args:\n            args = list(self.args)\n        i = 0\n        while i < len(args):\n            absorber = args[i]\n            j = 0\n            while j < len(args):\n                if j == i:\n                    j += 1\n                    continue\n                target = args[j]\n                if not isinstance(target, self.dual):\n                    j += 1\n                    continue\n\n\n\n            i += 1\n\n        return self.__class__(*args)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef absorb(self, args):\n        \n        args = list(args)\n        if not args:\n            args = list(self.args)\n        i = 0\n        while i < len(args):\n            absorber = args[i]\n            j = 0\n            while j < len(args):\n                if j == i:\n                    j += 1\n                    continue\n                target = args[j]\n                if not isinstance(target, self.dual):\n                    j += 1\n                    continue\n\n\n\n            i += 1\n\n        return self.__class__(*args)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["\ndef validate(self, path):\n        \n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False\n        namastes = find_namastes(0, pyfs=self.obj_fs)\n        self.validate_inventory(namastes['inventory'], where='root', extract_spec_version=True)\n        self.validate_inventory(nam"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, path):\n        \n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False\n        namastes = find_namastes(0, pyfs=self.obj_fs)\n        self.validate_inventory(namastes['inventory'], where='root', extract_spec_version=True)\n        self.validate_inventory(nam", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\ndef __str__(self):\n        \n        return self.status_str()\n\ndef validate(self, path):\n        '''Validate OCFL object at path or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n                if isinstance(path, str):\n                        self.obj_fs = open_fs(path)\n                else:\n                        self.obj_fs = path\n                        path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n                self.log.error('E003e', path=path)\n                return False"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\ndef __str__(self):\n        \n        return self.status_str()\n\ndef validate(self, path):\n        '''Validate OCFL object at path or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n                if isinstance(path, str):\n                        self.obj_fs = open_fs(path)\n                else:\n                        self.obj_fs = path\n                        path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n                self.log.error('E003e', path=path)\n                return False", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\nself.log.error('E001e', path=path)\n\n\n\n\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\nself.log.error('E001e', path=path)\n\n\n\n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["\ndef is_valid(self, identifier):\n  \n  return True\n\ndef encode(self, identifier):\n  \n  return quote_plus(identifier)\n\ndef decode(self, identifier):\n  \n  return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n  \n  raise Exception(\"No yet implemented\")\n\ndef relative_path_to_identifier(self, path):\n  \n  raise Exception(\"No yet implemented\")\n\ndef path_to_identifier(self, path, root=None):\n  \n  if root is not None:\n    path = self.strip_root"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_valid(self, identifier):\n  \n  return True\n\ndef encode(self, identifier):\n  \n  return quote_plus(identifier)\n\ndef decode(self, identifier):\n  \n  return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n  \n  raise Exception(\"No yet implemented\")\n\ndef relative_path_to_identifier(self, path):\n  \n  raise Exception(\"No yet implemented\")\n\ndef path_to_identifier(self, path, root=None):\n  \n  if root is not None:\n    path = self.strip_root", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["\ndef validate(self, inventory, extract_spec_version=False):\n        \n        if extract_spec_version:\n            if 'type' in inventory:\n                spec_version = inventory['type']\n            else:\n                spec_version = self.spec_version\n        else:\n            spec_version = self.spec_version\n\n\n        return self._validate_manifest(inventory, spec_version)\n\n\ndef validate_manifest(self, manifest):\n    '''Validate manifest block in inventory.\n\n    Returns:\n      * manifest_files - a mapping from file to digest for each file in\n          the manifest\n      * manifest_files_correct_format - a simple list of the manifest file\n          path that passed initial checks. They need to be checked for valid\n          version directories later, when we know what version directories\n          are valid\n      *"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, inventory, extract_spec_version=False):\n        \n        if extract_spec_version:\n            if 'type' in inventory:\n                spec_version = inventory['type']\n            else:\n                spec_version = self.spec_version\n        else:\n            spec_version = self.spec_version\n\n\n        return self._validate_manifest(inventory, spec_version)\n\n\ndef validate_manifest(self, manifest):\n    '''Validate manifest block in inventory.\n\n    Returns:\n      * manifest_files - a mapping from file to digest for each file in\n          the manifest\n      * manifest_files_correct_format - a simple list of the manifest file\n          path that passed initial checks. They need to be checked for valid\n          version directories later, when we know what version directories\n          are valid\n      *", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        pass\n\n    def digest_regex(self):\n        \n        try:\n            return digest_regex(self.digest_algorithm)\n        except ValueError:\n            if not self.lax_digests:\n                self.error('E026a', digest=self.digest_algorithm)\n        return r\n\n    def check_logical_path(self, path, version, logical_paths, logical_directories):\n        '''Check logical path and accumulate paths/directories for E095b check.\n\n        logical_paths and logical_directories are expected to be sets.\n\n        Only adds good paths to the accumulated paths/directories.\n        '''\n        if path.startsw"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        pass\n\n    def digest_regex(self):\n        \n        try:\n            return digest_regex(self.digest_algorithm)\n        except ValueError:\n            if not self.lax_digests:\n                self.error('E026a', digest=self.digest_algorithm)\n        return r\n\n    def check_logical_path(self, path, version, logical_paths, logical_directories):\n        '''Check logical path and accumulate paths/directories for E095b check.\n\n        logical_paths and logical_directories are expected to be sets.\n\n        Only adds good paths to the accumulated paths/directories.\n        '''\n        if path.startsw", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["\ndef validate_as_prior_version(self, prior):\n        \n        if not set(prior.all_versions) < set(self.all_versions):\n            self.error('E066a', prior_head=prior.head)\n        else:\n\ndef validate_as_prior_version(self, prior):\n    \n    if not set(prior.all_versions) < set(self.all_versions):\n        self.error('E066a', prior_head=prior.head)\n    else:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_as_prior_version(self, prior):\n        \n        if not set(prior.all_versions) < set(self.all_versions):\n            self.error('E066a', prior_head=prior.head)\n        else:\n\ndef validate_as_prior_version(self, prior):\n    \n    if not set(prior.all_versions) < set(self.all_versions):\n        self.error('E066a', prior_head=prior.head)\n    else:", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\n\nclass InventoryValidator():\n    \n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory = None\n        self.id = None\n        self.digest_algorithm ="], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\n\nclass InventoryValidator():\n    \n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory = None\n        self.id = None\n        self.digest_algorithm =", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["\ndef validate_fixity(self, fixity, manifest_files):\n        \n        for f in fixity:\n            if not f in manifest_files:\n                self.error(\"E001\", f)\n                return False\n        return True"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_fixity(self, fixity, manifest_files):\n        \n        for f in fixity:\n            if not f in manifest_files:\n                self.error(\"E001\", f)\n                return False\n        return True", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        valid = True\n        fs = self.fs\n        self.log = ValidationLogger(show_warnings=show_warnings)\n        self.log.info(\"Validating storage root hierarchy (objects=%s, digests=%s)\", validate_objects, check_digests)\n        self.num_objects = self.num_objects_in_root()\n        if validate_objects:\n            self.good_objects = self.validate_objects(check_digests=check_digests)\n        else:\n            self.good_objects = self.num_objects\n        self.log.info(\"Storage root has %d objects\", self.good_objects)\n        return self.good_objects, self.num_objects"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        valid = True\n        fs = self.fs\n        self.log = ValidationLogger(show_warnings=show_warnings)\n        self.log.info(\"Validating storage root hierarchy (objects=%s, digests=%s)\", validate_objects, check_digests)\n        self.num_objects = self.num_objects_in_root()\n        if validate_objects:\n            self.good_objects = self.validate_objects(check_digests=check_digests)\n        else:\n            self.good_objects = self.num_objects\n        self.log.info(\"Storage root has %d objects\", self.good_objects)\n        return self.good_objects, self.num_objects", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["\ndef initialize(self):\n        \n        return storage_root\n\n\ndef check_root_structure(self):\n        '''Check the OCFL storage root structure.\n\n        Assumed that self.root_fs filesystem is available. Raises\n        StoreException if there is an error.\n        '''\n        namastes = find_namastes(0, pyfs=self.root_fs)\n        if len(namastes) == 0:\n            raise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n        if len(namastes) > 1:\n            raise StoreException(\"Storage root %s has more than one 0="], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef initialize(self):\n        \n        return storage_root\n\n\ndef check_root_structure(self):\n        '''Check the OCFL storage root structure.\n\n        Assumed that self.root_fs filesystem is available. Raises\n        StoreException if there is an error.\n        '''\n        namastes = find_namastes(0, pyfs=self.root_fs)\n        if len(namastes) == 0:\n            raise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n        if len(namastes) > 1:\n            raise StoreException(\"Storage root %s has more than one 0=", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["\ndef next_version(version):\n    \n\n    version_parts = version.split('.')\n    last_part = int(version_parts[-1]) + 1\n    version_parts[-1] = str(last_part)\n    next_version = '.'.join(version_parts)\n    return next_version"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef next_version(version):\n    \n\n    version_parts = version.split('.')\n    last_part = int(version_parts[-1]) + 1\n    version_parts[-1] = str(last_part)\n    next_version = '.'.join(version_parts)\n    return next_version", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["\ndef validate_version_inventories(self, version_dirs):\n        \n        prior_manifest_digests = {}\n        prior_fixity_digests = {}\n\n        if not version_dirs:\n            return prior_manifest_digests, prior_fixity_digests\n\n        for version in version_dirs:\n            root_inventory_path = os.path.join(version, 'inventory')\n            with open(root_inventory_path, 'r') as f:\n                root_inventory = json.load(f)\n                root"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_version_inventories(self, version_dirs):\n        \n        prior_manifest_digests = {}\n        prior_fixity_digests = {}\n\n        if not version_dirs:\n            return prior_manifest_digests, prior_fixity_digests\n\n        for version in version_dirs:\n            root_inventory_path = os.path.join(version, 'inventory')\n            with open(root_inventory_path, 'r') as f:\n                root_inventory = json.load(f)\n                root", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["\ndef find_path_type(path):\n    \n    try:\n        pyfs = open_fs(path, create=False)\n    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):\n        (parent, filename) = fs.path.split(path)\n        try:\n            pyfs = open_fs(parent, create=False)\n        except (fs.opener.errors.OpenerError, fs.errors.CreateFailed) as e:\n            return \"path cannot be opened, and nor can parent (\" + str(e) + \")\"\n        try:\n            pyfs = open_fs(filename, create=False)\n        except (fs.opener.errors.Opener"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_path_type(path):\n    \n    try:\n        pyfs = open_fs(path, create=False)\n    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):\n        (parent, filename) = fs.path.split(path)\n        try:\n            pyfs = open_fs(parent, create=False)\n        except (fs.opener.errors.OpenerError, fs.errors.CreateFailed) as e:\n            return \"path cannot be opened, and nor can parent (\" + str(e) + \")\"\n        try:\n            pyfs = open_fs(filename, create=False)\n        except (fs.opener.errors.Opener", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["\ndef strip_root(self, path, root):\n        \n        root = root.rstrip(os.sep)  # ditch any trailing path separator\n        if os.path.commonprefix((path, root)) == root:\n            return os.path.relpath(path, start=root)\n        raise Exception(\"Path %s is not in root %s\" % (path, root))\n\ndef is_valid(self, identifier):\n        return True\n\ndef encode(self, identifier):\n        \"\"\"Encode identifier to get rid of unsafe chars.\"\"\"\n        return quote_plus(identifier)\n\ndef decode(self, identifier):\n        \"\"\"Decode identifier to put back unsafe chars.\"\"\"\n        return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n        \"\"\"Convert identifier to path relative to some root.\"\"\"\n\ndef relative_path_to_"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef strip_root(self, path, root):\n        \n        root = root.rstrip(os.sep)  # ditch any trailing path separator\n        if os.path.commonprefix((path, root)) == root:\n            return os.path.relpath(path, start=root)\n        raise Exception(\"Path %s is not in root %s\" % (path, root))\n\ndef is_valid(self, identifier):\n        return True\n\ndef encode(self, identifier):\n        \"\"\"Encode identifier to get rid of unsafe chars.\"\"\"\n        return quote_plus(identifier)\n\ndef decode(self, identifier):\n        \"\"\"Decode identifier to put back unsafe chars.\"\"\"\n        return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n        \"\"\"Convert identifier to path relative to some root.\"\"\"\n\ndef relative_path_to_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["\ndef identify_request(request: RequestType):\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"encrypted_magic_envelope\" in data:\n            return True\n    except Exception:\n        pass\n    try:\n        xml = etree.fromstring(encode_if_text(request.body))\n        if xml.tag == MAGIC_ENV_TAG:\n            return True\n    except Exception:\n        pass\n    return False\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType):\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"encrypted_magic_envelope\" in data:\n            return True\n    except Exception:\n        pass\n    try:\n        xml = etree.fromstring(encode_if_text(request.body))\n        if xml.tag == MAGIC_ENV_TAG:\n            return True\n    except Exception:\n        pass\n    return False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False\n\n\nclass Protocol:\n    actor = None\n    get_contact_key = None\n    payload = None\n    request = None\n    user = None\n\n    @staticmethod\n    def build_send(entity: MatrixEntityMixin, *args, **kwargs) -> List[Dict]:\n        \"\"\"\n        Build POST data for sending out to the homeserver.\n        \"\"\"\n        try:\n            data = json.loads(decode_if_bytes(entity.request.body))\n           "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False\n\n\nclass Protocol:\n    actor = None\n    get_contact_key = None\n    payload = None\n    request = None\n    user = None\n\n    @staticmethod\n    def build_send(entity: MatrixEntityMixin, *args, **kwargs) -> List[Dict]:\n        \"\"\"\n        Build POST data for sending out to the homeserver.\n        \"\"\"\n        try:\n            data = json.loads(decode_if_bytes(entity.request.body))\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime(\n        '%Y-%m-%dT%H:%M:%SZ'\n    )\n\ndef ensure_timezone(dt):\n    '''\n    Ensure that the datetime object has a timezone set to 'UTC' and return the modified datetime object.\n    '''\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tz or tzlocal())\n    else:\n        dt = dt.astimezone(tzutc())\n    return dt\n\ndef tzutc():\n    \n    return timezone('UTC')\n\ndef tzlocal():\n    \n    return timezone(settings."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime(\n        '%Y-%m-%dT%H:%M:%SZ'\n    )\n\ndef ensure_timezone(dt):\n    '''\n    Ensure that the datetime object has a timezone set to 'UTC' and return the modified datetime object.\n    '''\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tz or tzlocal())\n    else:\n        dt = dt.astimezone(tzutc())\n    return dt\n\ndef tzutc():\n    \n    return timezone('UTC')\n\ndef tzlocal():\n    \n    return timezone(settings.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n\n    if replacer:\n        pass\n\n    return tags, replaced_text\n\n\ndef get_path_from_url(url: str) -> str:\n    \"\"\"\n    Return only the path part of an URL.\n    \"\"\"\n    parsed = urlparse(url)\n    return parsed.path\n\n\ndef process_text_links(text):\n    \"\"\"Process links in text, adding some attributes and linkifying textual links.\"\"\"\n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \"\"\"Run standard callbacks except for internal links.\"\"\"\n        href_key"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n\n    if replacer:\n        pass\n\n    return tags, replaced_text\n\n\ndef get_path_from_url(url: str) -> str:\n    \"\"\"\n    Return only the path part of an URL.\n    \"\"\"\n    parsed = urlparse(url)\n    return parsed.path\n\n\ndef process_text_links(text):\n    \"\"\"Process links in text, adding some attributes and linkifying textual links.\"\"\"\n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \"\"\"Run standard callbacks except for internal links.\"\"\"\n        href_key", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, 'href')\n        if attrs.get(href_key).startswith('/'):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs\n\n    return text\n\n\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, 'href')\n        if attrs.get(href_key).startswith('/'):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs\n\n    return text\n\n\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\n\ndef validate_handle(handle):\n    '''\n    Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\n\ndef with_slash(url):\n    if url.endswith('/'):\n        return url\n    return f\"{url}/\"\n\n\ndef _strip_tags("], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\n\ndef validate_handle(handle):\n    '''\n    Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\n\ndef with_slash(url):\n    if url.endswith('/'):\n        return url\n    return f\"{url}/\"\n\n\ndef _strip_tags(", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child)\n    return result\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \"\"\"Ensure that sender and entity handles match.\n\n    Basically we've already verified the sender is who they say when receiving the payload. However, the sender might\n    be trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\n    AND the object. We must ensure they're the same.\n    \"\"\"\n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting\")\n       "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child)\n    return result\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \"\"\"Ensure that sender and entity handles match.\n\n    Basically we've already verified the sender is who they say when receiving the payload. However, the sender might\n    be trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\n    AND the object. We must ensure they're the same.\n    \"\"\"\n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting\")\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        print(\"sender_handle and entity_handle don't match, aborting!\\nsender_handle: {0}\\nentity_handle: {1}\".format(sender_handle, entity_handle))\n        return False\n    return True\n\n\ndef element_to_objects(element: etree.ElementTree, sender: str, sender_key_fetcher: Callable[[str], str] = None, user: UserType = None, \n                       is_reply: bool = False) -> Dict[str, Union[str, List[str], Dict[str, List[str]]]]:\n    \n    node = element\n    result = {}\n    children_dict = {}\n    for child in node:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        print(\"sender_handle and entity_handle don't match, aborting!\\nsender_handle: {0}\\nentity_handle: {1}\".format(sender_handle, entity_handle))\n        return False\n    return True\n\n\ndef element_to_objects(element: etree.ElementTree, sender: str, sender_key_fetcher: Callable[[str], str] = None, user: UserType = None, \n                       is_reply: bool = False) -> Dict[str, Union[str, List[str], Dict[str, List[str]]]]:\n    \n    node = element\n    result = {}\n    children_dict = {}\n    for child in node:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n\n\nclass MatrixClientWellKnown:\n    \"\"\"Matrix Client well-known as per https://matrix.org/docs/spec/client_server/r0.6.1#server-discovery\"\"\"\n\n    def __init__(self, homeserver_base_url: str, identity_server_base_url: str = None, other_keys: Dict = None):\n        self.homeserver_base_url = homeserver_base_url\n        self.identity_server_base_url = identity_server_base_url\n        self.other_keys = other_keys\n\n    def render(self):\n        pass"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n\n\nclass MatrixClientWellKnown:\n    \"\"\"Matrix Client well-known as per https://matrix.org/docs/spec/client_server/r0.6.1#server-discovery\"\"\"\n\n    def __init__(self, homeserver_base_url: str, identity_server_base_url: str = None, other_keys: Dict = None):\n        self.homeserver_base_url = homeserver_base_url\n        self.identity_server_base_url = identity_server_base_url\n        self.other_keys = other_keys\n\n    def render(self):\n        pass", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n\n    is_valid = verify_signature(public_key, hashed_doc, signature)\n\n    return is_valid\n\n\ndef create_relayable_signature(private_key, doc):\n    \n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")\n\n\ndef _create_signature_hash(doc):\n    \n    return hash(doc)\n\n\ndef verify_signature(public_key, hashed"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n\n    is_valid = verify_signature(public_key, hashed_doc, signature)\n\n    return is_valid\n\n\ndef create_relayable_signature(private_key, doc):\n    \n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")\n\n\ndef _create_signature_hash(doc):\n    \n    return hash(doc)\n\n\ndef verify_signature(public_key, hashed", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        \"hcard_url\": None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc[\"links\"]:\n            if link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n                webfinger[\"hcard_url\"] = link[\"href\"]\n                break\n        else:\n            logger.warning(\"parse_diaspora_webfinger: found JSON webfinger but it has no hcard href\")\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n        except Exception as e:\n            logger.warning(f\"parse_diaspora_webfinger: failed to parse document as JSON or"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        \"hcard_url\": None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc[\"links\"]:\n            if link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n                webfinger[\"hcard_url\"] = link[\"href\"]\n                break\n        else:\n            logger.warning(\"parse_diaspora_webfinger: found JSON webfinger but it has no hcard href\")\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n        except Exception as e:\n            logger.warning(f\"parse_diaspora_webfinger: failed to parse document as JSON or", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    try:\n        host = handle.split('@')[1]\n    except (AttributeError, IndexError):\n        logger.warning('retrieve_webfinger_document: invalid handle given: %s', handle)\n        return None\n    document, code, exception = fetch_document(\n        host=host, path=f'/.well-known/webfinger?resource=acct:%s' % quote(handle),\n    )\n    if exception:\n        logger.debug('retrieve_webfinger_document: failed to fetch webfinger document: %s, %s', code, exception)\n    return document\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    try:\n        host = handle.split('@')[1]\n    except (AttributeError, IndexError):\n        logger.warning('retrieve_webfinger_document: invalid handle given: %s', handle)\n        return None\n    document, code, exception = fetch_document(\n        host=host, path=f'/.well-known/webfinger?resource=acct:%s' % quote(handle),\n    )\n    if exception:\n        logger.debug('retrieve_webfinger_document: failed to fetch webfinger document: %s, %s', code, exception)\n    return document\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    document = try_retrieve_webfinger_document(handle)\n    if document:\n        return parse_diaspora_webfinger(document)\n    host = handle.split(\"@\")[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace(\"{uri}\", quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    document = try_retrieve_webfinger_document(handle)\n    if document:\n        return parse_diaspora_webfinger(document)\n    host = handle.split(\"@\")[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace(\"{uri}\", quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path='/.well-known/host-meta')\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n\ndef _get_element_text_or_none(document, selector):\n    \n    element = document.cssselect(selector)\n    if element:\n        return element[0].text\n    return None"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path='/.well-known/host-meta')\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n\ndef _get_element_text_or_none(document, selector):\n    \n    element = document.cssselect(selector)\n    if element:\n        return element[0].text\n    return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    if not isinstance(data, (str, bytes)):\n        if not data:\n            data = None\n        else:\n            data = json.dumps(data)\n    headers = CaseInsensitiveDict({\n        'Content-Type': 'application/json; charset=UTF-8',\n        'User-Agent': USER_AGENT,\n    })\n    response = requests.post(url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n    logger.debug(\"send_document: response=%s\", response)\n    return response\n\n\ndef fetch_content_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    if not isinstance(data, (str, bytes)):\n        if not data:\n            data = None\n        else:\n            data = json.dumps(data)\n    headers = CaseInsensitiveDict({\n        'Content-Type': 'application/json; charset=UTF-8',\n        'User-Agent': USER_AGENT,\n    })\n    response = requests.post(url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n    logger.debug(\"send_document: response=%s\", response)\n    return response\n\n\ndef fetch_content_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["\ndef get_versions():\n    \n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        for"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_versions():\n    \n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n\n    try:\n        root = os.path.realpath(__file__)\n        for", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["\ndef render(pieces, style):\n    \n    if pieces['error']:\n        return {'version': 'unknown',\n                'full-revisionid': pieces.get('long'),\n                'dirty': None,\n                'error': pieces['error'],\n                'date': None}\n\n    if not style or style == 'default':\n        style = 'pep440'  # the default\n\n    if style == 'pep440':\n        rendered = render_pep440(pieces)\n    elif style == 'pep440-branch':\n        rendered = render_pep440_branch(pieces)\n    elif style == 'pep440-pre':\n        rendered = render_pep440_pre(pieces)\n    elif style == 'pep440-post':\n        rendered = render_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef render(pieces, style):\n    \n    if pieces['error']:\n        return {'version': 'unknown',\n                'full-revisionid': pieces.get('long'),\n                'dirty': None,\n                'error': pieces['error'],\n                'date': None}\n\n    if not style or style == 'default':\n        style = 'pep440'  # the default\n\n    if style == 'pep440':\n        rendered = render_pep440(pieces)\n    elif style == 'pep440-branch':\n        rendered = render_pep440_branch(pieces)\n    elif style == 'pep440-pre':\n        rendered = render_pep440_pre(pieces)\n    elif style == 'pep440-post':\n        rendered = render_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["\ndef plus_or_dot(pieces):\n    \n    if not pieces[\"distance\"]:\n        return \"+\"\n    return \".\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef plus_or_dot(pieces):\n    \n    if not pieces[\"distance\"]:\n        return \"+\"\n    return \".\"", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            process = subprocess.Popen([command] + args, **popen_kwargs)\n            output, error = process.communicate()\n\n            if process.returncode != 0:\n                raise subprocess."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            process = subprocess.Popen([command] + args, **popen_kwargs)\n            output, error = process.communicate()\n\n            if process.returncode != 0:\n                raise subprocess.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["\ndef get_config():\n    \n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_config():\n    \n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  '''\n  Call the given command(s).\n\n  :param commands: A list of command strings to be executed.\n  :type commands: list\n  :param args: A list of additional arguments to be passed to the command(s).\n  :type args: list\n  '''\n  assert isinstance(commands, list)\n  process = None\n\n "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  '''\n  Call the given command(s).\n\n  :param commands: A list of command strings to be executed.\n  :type commands: list\n  :param args: A list of additional arguments to be passed to the command(s).\n  :type args: list\n  '''\n  assert isinstance(commands, list)\n  process = None\n\n ", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        list_frame = None\n        try:\n            out_buffer = \"\"\n\n            out_buffer += \"e.cls:[{0}]\".format(e.__class__.__name__)\n\n            try:\n                ex_buf = str(e)\n            except UnicodeEncodeError:\n                ex_buf = repr(str(e))\n            except Exception as e:\n                logger.warning(\"Exception, e=%s\", e)\n\n            if hasattr(e, 'traceback'):\n                out_buffer += '\\n' + ''.join(traceback.format_tb(e.traceback))\n\n            if isinstance(e, Exception) and hasattr(e, 'message'):\n                out_buffer"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        list_frame = None\n        try:\n            out_buffer = \"\"\n\n            out_buffer += \"e.cls:[{0}]\".format(e.__class__.__name__)\n\n            try:\n                ex_buf = str(e)\n            except UnicodeEncodeError:\n                ex_buf = repr(str(e))\n            except Exception as e:\n                logger.warning(\"Exception, e=%s\", e)\n\n            if hasattr(e, 'traceback'):\n                out_buffer += '\\n' + ''.join(traceback.format_tb(e.traceback))\n\n            if isinstance(e, Exception) and hasattr(e, 'message'):\n                out_buffer", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        rd = None\n        try:\n            if not overwrite:\n                rd = codecs.open(file_name, \"a+\", encoding, \"strict\", -1)\n            else:\n                rd = codecs.open(file_name, \"w\", encoding, \"strict\", -1)\n\n            return rd.write(text_buffer)\n        except IOError as e:\n            return False\n\n    @staticmethod\n    def file_to_textbuffer(file_name, encoding=\"utf-8\", overwrite=False):\n        \n        rd = None\n        try:"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        rd = None\n        try:\n            if not overwrite:\n                rd = codecs.open(file_name, \"a+\", encoding, \"strict\", -1)\n            else:\n                rd = codecs.open(file_name, \"w\", encoding, \"strict\", -1)\n\n            return rd.write(text_buffer)\n        except IOError as e:\n            return False\n\n    @staticmethod\n    def file_to_textbuffer(file_name, encoding=\"utf-8\", overwrite=False):\n        \n        rd = None\n        try:", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer : file_name not exist, file_name=%s\", file_name)\n            return None\n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n\n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_binary : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n@staticmethod\n    def is_file_exist(file_name):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer : file_name not exist, file_name=%s\", file_name)\n            return None\n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n\n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_binary : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n@staticmethod\n    def is_file_exist(file_name):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["\n@staticmethod\n    def is_file_exist(file_name):\n        \n\n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n\n        return os.path.isfile(file_name)\n\n    @staticmethod\n    def is_dir_exist(dir_name):\n        \n\n        if dir_name is None:\n            logger.warning(\"is_dir_exist : file_name is None\")\n            return False\n        elif not isinstance(dir_name, str):\n            logger."], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def is_file_exist(file_name):\n        \n\n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n\n        return os.path.isfile(file_name)\n\n    @staticmethod\n    def is_dir_exist(dir_name):\n        \n\n        if dir_name is None:\n            logger.warning(\"is_dir_exist : file_name is None\")\n            return False\n        elif not isinstance(dir_name, str):\n            logger.", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n        cls._logging_verbosity = None\n        cls._logging_passk_validte = False\n        cls._logging_passk_validte_debug = False\n        cls._logging_passk_validte_info = False\n        cls._logging_passk_validte_warn = False\n        cls._logging_passk_validte_error = False\n        cls._logging_passk_validte_critical = False\n        cls._logging_passk_validte_debug_verbose = False\n        cls._logging_passk_validte_info_verbose = False\n        cls._logging_passk_validte_warn_verbose = False\n        cls._logging"], "level": "plib_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n        cls._logging_verbosity = None\n        cls._logging_passk_validte = False\n        cls._logging_passk_validte_debug = False\n        cls._logging_passk_validte_info = False\n        cls._logging_passk_validte_warn = False\n        cls._logging_passk_validte_error = False\n        cls._logging_passk_validte_critical = False\n        cls._logging_passk_validte_debug_verbose = False\n        cls._logging_passk_validte_info_verbose = False\n        cls._logging_passk_validte_warn_verbose = False\n        cls._logging", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["\ndef _getTargetClass(self):\n        \n        raise NotImplementedError\n\ndef _getFallbackClass(self):\n        \n        raise NotImplementedError\n\ndef test_optimizations(self):\n        used = self._getTargetClass()\n        fallback = self._getFallbackClass()\n\n        if _should_attempt_c_optimizations():\n            self.assertIsNot(used, fallback)\n        else:\n            self.assertIs(used, fallback)\n\nimport unittest\n\n\nclass Missing"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _getTargetClass(self):\n        \n        raise NotImplementedError\n\ndef _getFallbackClass(self):\n        \n        raise NotImplementedError\n\ndef test_optimizations(self):\n        used = self._getTargetClass()\n        fallback = self._getFallbackClass()\n\n        if _should_attempt_c_optimizations():\n            self.assertIsNot(used, fallback)\n        else:\n            self.assertIs(used, fallback)\n\nimport unittest\n\n\nclass Missing", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["\ndef _legacy_mergeOrderings(orderings):\n    \n    seen = set()\n    result = []\n    for ordering in reversed(orderings):\n        for o in reversed(ordering):\n            if o not in seen:\n                seen.add(o)\n                result.insert(0, o)\n    return result\n\n\ndef _legacy_flatten(begin):\n    '''Flatten a list.\n\n    This is useful for traversing a hierarchical structure.\n\n    '''\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _legacy_mergeOrderings(orderings):\n    \n    seen = set()\n    result = []\n    for ordering in reversed(orderings):\n        for o in reversed(ordering):\n            if o not in seen:\n                seen.add(o)\n                result.insert(0, o)\n    return result\n\n\ndef _legacy_flatten(begin):\n    '''Flatten a list.\n\n    This is useful for traversing a hierarchical structure.\n\n    '''\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["\ndef directlyProvidedBy(object):\n \n provides = getattr(object, \"__provides__\", None)\n if (\n        provides is None # no spec\n        or isinstance(provides, Implements)\n ):\n  return provides.implemented\n\n\ndef classProvides(*interfaces):\n '''Declare interfaces provided directly by a class\n\n     This function is called in a class definition.\n\n     The arguments are one or more interfaces or interface specifications\n     (`~zope.interface.interfaces.IDeclaration` objects).\n\n     The given interfaces (including the interfaces in the specifications)\n     are used to create the class's direct-object interface specification."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef directlyProvidedBy(object):\n \n provides = getattr(object, \"__provides__\", None)\n if (\n        provides is None # no spec\n        or isinstance(provides, Implements)\n ):\n  return provides.implemented\n\n\ndef classProvides(*interfaces):\n '''Declare interfaces provided directly by a class\n\n     This function is called in a class definition.\n\n     The arguments are one or more interfaces or interface specifications\n     (`~zope.interface.interfaces.IDeclaration` objects).\n\n     The given interfaces (including the interfaces in the specifications)\n     are used to create the class's direct-object interface specification.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["\ndef minimalBases(classes):\n    \n\n    if not __python3: # pragma: no cover\n        classes = [c for c in classes if c is not ClassType]\n\n    if not classes:\n        raise TypeError('empty bases')\n\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\n\n\nclass Metameta(type):\n    pass\n\n\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\n\n\nclass A():\n    def __init__(self"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef minimalBases(classes):\n    \n\n    if not __python3: # pragma: no cover\n        classes = [c for c in classes if c is not ClassType]\n\n    if not classes:\n        raise TypeError('empty bases')\n\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\n\n\nclass Metameta(type):\n    pass\n\n\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\n\n\nclass A():\n    def __init__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n   return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n   r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n   return r\n\n raise KeyError(name)\n\n__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\ndef direct(self, name):\n return self.__attrs.get(name)"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n   return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n   r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n   return r\n\n raise KeyError(name)\n\n__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\ndef direct(self, name):\n return self.__attrs.get(name)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["\ndef names(self, all=False):\n \n if not all:\n  return self.__attrs.keys()\n\n r = self.__attrs.copy()\n\n for base in self.__bases__:\n  r.update(dict.fromkeys(base.names(all)))\n\n return r.keys()\n\ndef __iter__(self):\n return iter(self.names(all=True))\n\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n  return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n  r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n '''Return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef names(self, all=False):\n \n if not all:\n  return self.__attrs.keys()\n\n r = self.__attrs.copy()\n\n for base in self.__bases__:\n  r.update(dict.fromkeys(base.names(all)))\n\n return r.keys()\n\ndef __iter__(self):\n return iter(self.names(all=True))\n\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n  return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n  r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n '''Return", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n    return output\n\n\ndef _empty = _ImmutableDeclaration()\n\n\nobjectSpecificationDescriptor = ObjectSpecificationDescriptor()\n\n\nclass I1(Interface):\n    pass\n\n\nclass I2(Interface):\n    pass\n\n\nclass I3(Interface):\n    pass\n\n\nclass I31(I3):\n    pass\n\n\nclass I4(Interface):\n    pass\n\n\nclass I5(Interface):\n    pass\n\n\n\ndef _normalizeargs"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n    return output\n\n\ndef _empty = _ImmutableDeclaration()\n\n\nobjectSpecificationDescriptor = ObjectSpecificationDescriptor()\n\n\nclass I1(Interface):\n    pass\n\n\nclass I2(Interface):\n    pass\n\n\nclass I3(Interface):\n    pass\n\n\nclass I31(I3):\n    pass\n\n\nclass I4(Interface):\n    pass\n\n\nclass I5(Interface):\n    pass\n\n\n\ndef _normalizeargs", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["\ndef _c_optimizations_available():\n    \n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\n\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\ndef _should_attempt_c_optimizations():\n    '''\n    '''\n    pass\n\n\ndef _should_attempt_c_optimizations():\n    '''\n    '''\n    pass\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_available():\n    \n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\n\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\ndef _should_attempt_c_optimizations():\n    '''\n    '''\n    pass\n\n\ndef _should_attempt_c_optimizations():\n    '''\n    '''\n    pass\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    '''\n    Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    '''\n    Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\ndef _c_optimizations_available():\n    pass\n\n\ndef _should_attempt_c_optimizations():\n    '''Return a true value if we should attempt to use the C optimizations.\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.'''\n    is_pypy = hasattr(sys, 'pypy_version_info')\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\ndef _c_optimizations_available():\n    pass\n\n\ndef _should_attempt_c_optimizations():\n    '''Return a true value if we should attempt to use the C optimizations.\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.'''\n    is_pypy = hasattr(sys, 'pypy_version_info')\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c\n\n\ndef _c_optimizations_available():\n    '''Return the C optimization module, if available, otherwise\n    a false value.\n\n    If the optimizations are required but not available, this\n    raises the ImportError.\n\n    This does not say whether they should be used or not.\n    '''\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\n\ndef _c_optimizations"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c\n\n\ndef _c_optimizations_available():\n    '''Return the C optimization module, if available, otherwise\n    a false value.\n\n    If the optimizations are required but not available, this\n    raises the ImportError.\n\n    This does not say whether they should be used or not.\n    '''\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\n\ndef _c_optimizations", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if not tentative:\n        assert iface.providedBy(candidate)\n    errors = []\n    for name in iface:\n        if not hasattr(candidate, name):\n            errors.append(f'Missing attribute: {name}')\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f'Attribute {name} is not callable')\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f'Missing method: {name}')\n    return errors\n\n\nverifyObject = _verify\n\n\ndef _pypy2_false_positive(msg, candidate, vtype):"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if not tentative:\n        assert iface.providedBy(candidate)\n    errors = []\n    for name in iface:\n        if not hasattr(candidate, name):\n            errors.append(f'Missing attribute: {name}')\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f'Attribute {name} is not callable')\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f'Missing method: {name}')\n    return errors\n\n\nverifyObject = _verify\n\n\ndef _pypy2_false_positive(msg, candidate, vtype):", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if not tentative:\n        if not iface.providedBy(candidate):\n            raise zope.interface.Invalid\n\n    errors = []\n\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing method: {name}\")\n        else:\n            if not callable(getattr(candidate, name)):\n                errors.append(f\"Not a method: {name}\")\n            else:\n                method_sig = inspect.signature(getattr(candidate, name))\n                iface_sig = method.getSignatureInfo()\n                if method_sig != iface_sig:\n                    errors.append(f\"Method {name} has incorrect signature\")\n\n    for name in iface:\n        if not"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if not tentative:\n        if not iface.providedBy(candidate):\n            raise zope.interface.Invalid\n\n    errors = []\n\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing method: {name}\")\n        else:\n            if not callable(getattr(candidate, name)):\n                errors.append(f\"Not a method: {name}\")\n            else:\n                method_sig = inspect.signature(getattr(candidate, name))\n                iface_sig = method.getSignatureInfo()\n                if method_sig != iface_sig:\n                    errors.append(f\"Method {name} has incorrect signature\")\n\n    for name in iface:\n        if not", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='c')\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if tentative:\n        return iface.providedBy(candidate)\n    else:\n        if not iface.providedBy(candidate):\n            raise Invalid(\"Candidate does not provide the interface\")\n\n        errors = []\n        for name in iface.names():\n            attr = getattr(candidate, name, None)\n            if attr is None:\n                errors.append(f\"Missing attribute: {name}\")\n            elif not callable(attr):\n                errors.append(f\"Attribute {name} is not callable\")\n            else:\n                method = if"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='c')\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if tentative:\n        return iface.providedBy(candidate)\n    else:\n        if not iface.providedBy(candidate):\n            raise Invalid(\"Candidate does not provide the interface\")\n\n        errors = []\n        for name in iface.names():\n            attr = getattr(candidate, name, None)\n            if attr is None:\n                errors.append(f\"Missing attribute: {name}\")\n            elif not callable(attr):\n                errors.append(f\"Attribute {name} is not callable\")\n            else:\n                method = if", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["\ndef determineMetaclass(bases, explicit_mc=None):\n    \n\n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n\n    if len(meta) == 1:\n        return meta[0]\n\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n\n    if not candidates:  # pragma: no cover\n        assert(not __python3)  # This should not happen under Python 3\n        return ClassType\n\n    elif len(candidates) > 1:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef determineMetaclass(bases, explicit_mc=None):\n    \n\n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n\n    if len(meta) == 1:\n        return meta[0]\n\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n\n    if not candidates:  # pragma: no cover\n        assert(not __python3)  # This should not happen under Python 3\n        return ClassType\n\n    elif len(candidates) > 1:", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["\ndef force_string(obj):\n    \n    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n        return obj.decode('utf-8')\n    return obj\n\n\"\"\"\nThis module provides functions to set up the O2sclpy ``matplotlib`` defaults.\nIt returns a pair of objects, the figure object and axes object. The fontsize\nargument times 0.8 is used for the size of the font labels. Setting the\n``ticks_in`` argument to ``True`` makes the ticks point inwards instead of\noutwards and setting ``rt_ticks`` to ``True`` puts ticks (but not labels) on\nthe right and top edges of the plot.\n\nThis module is in ``utils.py"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef force_string(obj):\n    \n    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n        return obj.decode('utf-8')\n    return obj\n\n\"\"\"\nThis module provides functions to set up the O2sclpy ``matplotlib`` defaults.\nIt returns a pair of objects, the figure object and axes object. The fontsize\nargument times 0.8 is used for the size of the font labels. Setting the\n``ticks_in`` argument to ``True`` makes the ticks point inwards instead of\noutwards and setting ``rt_ticks`` to ``True`` puts ticks (but not labels) on\nthe right and top edges of the plot.\n\nThis module is in ``utils.py", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            return match.group\n    return re.sub(r';\\d{3}', unquoted_char, name.decode())\n\n\ndef quote(name):\n    \n    assert isinstance(name, str)\n    name = name.encode()\n    def quoted_char(match):"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            return match.group\n    return re.sub(r';\\d{3}', unquoted_char, name.decode())\n\n\ndef quote(name):\n    \n    assert isinstance(name, str)\n    name = name.encode()\n    def quoted_char(match):", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    alphabet = list(alphabet)\n    s = \"\"\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    if padding is not None:\n        s = \"0\" * (padding - len(s)) + s\n    return s\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    alphabet = list(alphabet)\n    num = 0\n    for i, char in enumerate(string[::-1]):\n        try:\n            num += alphabet.index(char) * (len(alphabet) ** i)\n        except ValueError:\n            raise ValueError(f\"Invalid character"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    alphabet = list(alphabet)\n    s = \"\"\n    while number > 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    if padding is not None:\n        s = \"0\" * (padding - len(s)) + s\n    return s\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    alphabet = list(alphabet)\n    num = 0\n    for i, char in enumerate(string[::-1]):\n        try:\n            num += alphabet.index(char) * (len(alphabet) ** i)\n        except ValueError:\n            raise ValueError(f\"Invalid character", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    string = string.lower()\n    output = 0\n    alpha_len = len(alphabet)\n    for i, char in enumerate(string):\n        try:\n            digit = alphabet.index(char)\n        except ValueError:\n            raise ValueError(f'Invalid character \"{char}\" in alphabet \"{alphabet}\"')\n        exponent = len(string) - i - 1\n        output += digit * (alpha_len ** exponent)\n    return output\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    string = string.lower()\n    output = 0\n    alpha_len = len(alphabet)\n    for i, char in enumerate(string):\n        try:\n            digit = alphabet.index(char)\n        except ValueError:\n            raise ValueError(f'Invalid character \"{char}\" in alphabet \"{alphabet}\"')\n        exponent = len(string) - i - 1\n        output += digit * (alpha_len ** exponent)\n    return output\n", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["\ndef _dictsum(dicts):\n    \n    return {\n        k: sum(\n            [d.get(k) for d in dicts if k in d],\n            [0] * len(dicts))}"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _dictsum(dicts):\n    \n    return {\n        k: sum(\n            [d.get(k) for d in dicts if k in d],\n            [0] * len(dicts))}", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["\ndef files_list(path):\n    \n    import os\n    \n    files = []\n    for file in os.listdir(path):\n        if os.path.isfile(os.path.join(path, file)):\n            files.append(file)\n            \n    return files\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    '''\n    Return the file content from `path`\n    '''\n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\n\ndef write_file(path, source, mode=\"w\"):\n    '''\n    Write `source` to `path`\n    '''\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list(path):\n    \n    import os\n    \n    files = []\n    for file in os.listdir(path):\n        if os.path.isfile(os.path.join(path, file)):\n            files.append(file)\n            \n    return files\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    '''\n    Return the file content from `path`\n    '''\n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\n\ndef write_file(path, source, mode=\"w\"):\n    '''\n    Write `source` to `path`\n    '''\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    data = {}\n    for xml in xmls:\n        basename = os.path.basename(xml)\n        prefix, ext = os.path.splitext(basename)\n    \n        data.setdefault(prefix, [])\n        data[prefix].append(xml)\n    \n    return data"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    data = {}\n    for xml in xmls:\n        basename = os.path.basename(xml)\n        prefix, ext = os.path.splitext(basename)\n    \n        data.setdefault(prefix, [])\n        data[prefix].append(xml)\n    \n    return data", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + '-'):\n        return True\n    if basename.startswith(prefix + '.'):\n        return True\n    return False\n\n\ndef explore_source(source):\n    \n    packages = _explore_zipfile(source)\n    return packages\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + '-'):\n        return True\n    if basename.startswith(prefix + '.'):\n        return True\n    return False\n\n\ndef explore_source(source):\n    \n    packages = _explore_zipfile(source)\n    return packages\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item\n        for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item\n        for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["\ndef _explore_folder(folder):\n    \n    data = {}\n    data['packages'] = _group_files_by_xml_filename(\n        folder,\n        file_utils.xml_files_list(folder),\n        file_utils.files_list(folder),\n    )\n    return data\n\n\ndef _explore_zipfile(zip_path):\n    \"\"\"\n    Get packages' data from zip_path\n\n    Groups files by their XML basename and returns data in dict format.\n    \"\"\"\n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r') as z:\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list(zip_path),\n                file_utils.files_list(zip_path),"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_folder(folder):\n    \n    data = {}\n    data['packages'] = _group_files_by_xml_filename(\n        folder,\n        file_utils.xml_files_list(folder),\n        file_utils.files_list(folder),\n    )\n    return data\n\n\ndef _explore_zipfile(zip_path):\n    \"\"\"\n    Get packages' data from zip_path\n\n    Groups files by their XML basename and returns data in dict format.\n    \"\"\"\n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r') as z:\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list(zip_path),\n                file_utils.files_list(zip_path),", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["\ndef _eval_file(prefix, file_path):\n    \n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith('.xml'):\n        return\n\n    filename = os.path.basename(file_path)\n\n\ndef _add_asset_to_packages(prefix, file_path, packages):\n    \n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith('.xml'):\n        return\n\n    filename = os.path.basename(file_path)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _eval_file(prefix, file_path):\n    \n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith('.xml'):\n        return\n\n    filename = os.path.basename(file_path)\n\n\ndef _add_asset_to_packages(prefix, file_path, packages):\n    \n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith('.xml'):\n        return\n\n    filename = os.path.basename(file_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["\ndef add_rendition(self, lang, file_path):\n        \n        self._renditions[lang] = self.file_path(file_path)\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n    self._xml = value"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_rendition(self, lang, file_path):\n        \n        self._renditions[lang] = self.file_path(file_path)\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n    self._xml = value", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = file_path\n\ndef add_rendition(self, lang, file_path):\n    \n    self._renditions[lang] = file_path\n\ndef get_asset(self, basename):\n    try:\n        return self._assets[basename]\n    except KeyError:\n        return\n\ndef get_rendition(self, lang):\n    try:\n        return self._rend"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = file_path\n\ndef add_rendition(self, lang, file_path):\n    \n    self._renditions[lang] = file_path\n\ndef get_asset(self, basename):\n    try:\n        return self._assets[basename]\n    except KeyError:\n        return\n\ndef get_rendition(self, lang):\n    try:\n        return self._rend", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r') as z:\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n                z,\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files, z):\n    '''\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    zip_path : str\n        zip file path\n    Returns\n    -------\n    dict\n    '''\n    if file_utils.is_zip"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r') as z:\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n                z,\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files, z):\n    '''\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    zip_path : str\n        zip file path\n    Returns\n    -------\n    dict\n    '''\n    if file_utils.is_zip", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["\ndef files_list_from_zipfile(zip_path):\n    \n    import os\n    import zipfile\n\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef write_file(path, source, mode=\"w\"):\n    \n    import os\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando arquivo: %s\", path)\n    with open(path, mode=mode) as f:\n        f.write(source)\n\n\ndef write_file_from_zipfile(zip_path, path, source, mode=\"w\"):\n    \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list_from_zipfile(zip_path):\n    \n    import os\n    import zipfile\n\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef write_file(path, source, mode=\"w\"):\n    \n    import os\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando arquivo: %s\", path)\n    with open(path, mode=mode) as f:\n        f.write(source)\n\n\ndef write_file_from_zipfile(zip_path, path, source, mode=\"w\"):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["\ndef fix_namespace_prefix_w(content):\n    \n\n    Args:\n        content (str):\n\n    Returns:\n        str:\n    '''\n    return content.replace(\"w:st=\", \"w-st=\")\n\ndef fix_xml(content):\n    \n\n    Args:\n        content (str):\n\n    Returns:\n        str:\n    '''\n    return content.replace(\"w:st=\", \"w-st=\")\n\nfrom stdnum.issn import validate, compact\n\ndef is_valid(number):\n    \"\"\"Check if the number provided is a valid ISSN.\"\"\"\n    try:\n        return bool(validate(number"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef fix_namespace_prefix_w(content):\n    \n\n    Args:\n        content (str):\n\n    Returns:\n        str:\n    '''\n    return content.replace(\"w:st=\", \"w-st=\")\n\ndef fix_xml(content):\n    \n\n    Args:\n        content (str):\n\n    Returns:\n        str:\n    '''\n    return content.replace(\"w:st=\", \"w-st=\")\n\nfrom stdnum.issn import validate, compact\n\ndef is_valid(number):\n    \"\"\"Check if the number provided is a valid ISSN.\"\"\"\n    try:\n        return bool(validate(number", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["\ndef match_pubdate(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n\ndef match_pubdate_passk_validte(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n\ndef match_pubdate_passk_validte1(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        pubdate = node.find(xpath)\n        if pubdate is not None:\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef match_pubdate(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n\ndef match_pubdate_passk_validte(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n\ndef match_pubdate_passk_validte1(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        pubdate = node.find(xpath)\n        if pubdate is not None:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    sup = None\n\n\n    return number, sup\n\n\nclass ArticleMetaIssue:\n\n    def __init__(self, xmltree):\n        self.xmltree = xmltree\n\n    @property\n    def data(self):\n        attr_names = (\n            \"volume\", \"number\", \"suppl\",\n            \"fpage\", \"fpage_seq\", \"lpage\",\n            \"elocation_id\",\n        )\n        _data = {}\n        for k in attr_names:\n            try:\n                value = getattr(self, k)\n            except AttributeError:\n                continue\n            else:\n                if value:\n                    _data[k] = value\n\n        return _data\n\n\ndef _"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    sup = None\n\n\n    return number, sup\n\n\nclass ArticleMetaIssue:\n\n    def __init__(self, xmltree):\n        self.xmltree = xmltree\n\n    @property\n    def data(self):\n        attr_names = (\n            \"volume\", \"number\", \"suppl\",\n            \"fpage\", \"fpage_seq\", \"lpage\",\n            \"elocation_id\",\n        )\n        _data = {}\n        for k in attr_names:\n            try:\n                value = getattr(self, k)\n            except AttributeError:\n                continue\n            else:\n                if value:\n                    _data[k] = value\n\n        return _data\n\n\ndef _", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["\ndef size_to_bytes(size: str) -> int:\n    \n    number, unit = size.split()\n    if unit.lower() == 'k':\n        return int(number) * 1024\n    elif unit.lower() == 'm':\n        return int(number) * 1024 * 1024\n    elif unit.lower() == 'g':\n        return int(number) * 1024 * 1024 * 1024\n    raise ValueError(f'Unknown unit: {unit}')\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef size_to_bytes(size: str) -> int:\n    \n    number, unit = size.split()\n    if unit.lower() == 'k':\n        return int(number) * 1024\n    elif unit.lower() == 'm':\n        return int(number) * 1024 * 1024\n    elif unit.lower() == 'g':\n        return int(number) * 1024 * 1024 * 1024\n    raise ValueError(f'Unknown unit: {unit}')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        ret_path = self.download_package(url, destination_path)\n        desc_path = ret_path / \"desc\"\n        if os.path.isdir(desc_path):\n            shutil.rmtree(desc_path)\n        os.makedirs(desc_path)\n        with tarfile.open(ret_path, \"r:gz\") as archive:\n            archive.extractall(desc_path)\n        return ret_path\n\n\n\"\"\"\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        ret_path = self.download_package(url, destination_path)\n        desc_path = ret_path / \"desc\"\n        if os.path.isdir(desc_path):\n            shutil.rmtree(desc_path)\n        os.makedirs(desc_path)\n        with tarfile.open(ret_path, \"r:gz\") as archive:\n            archive.extractall(desc_path)\n        return ret_path\n\n\n\"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if not os.path.isfile(archive_path):\n        raise ValueError(f\"The archive {archive_path} does not exist\")\n\n    if not filename:\n        filename = os.path.basename(archive_path)\n\n    tmp_dir = Path(tmp_path) / filename\n\n    with tarfile.open(archive_path, \"r:gz\") as t:\n        t.extractall(tmp_dir)\n\n    return str(tmp_dir)\n\n\ndef prepare_repository_from_git(\n    git_url: str,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n    *,\n    branch: Optional[str] = None,\n    depth"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if not os.path.isfile(archive_path):\n        raise ValueError(f\"The archive {archive_path} does not exist\")\n\n    if not filename:\n        filename = os.path.basename(archive_path)\n\n    tmp_dir = Path(tmp_path) / filename\n\n    with tarfile.open(archive_path, \"r:gz\") as t:\n        t.extractall(tmp_dir)\n\n    return str(tmp_dir)\n\n\ndef prepare_repository_from_git(\n    git_url: str,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n    *,\n    branch: Optional[str] = None,\n    depth", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["\ndef _replace_register(flow_params, register_number, register_value):\n    \n    for flow_key, flow_value in list(flow_params.items()):\n        if flow_key == 'source_port':\n            flow_params['source_port'] = register_number\n        elif flow_key == 'destination_port':\n            flow_params['destination_port'] = register_number\n        elif flow_key == 'source_ip':\n            flow_params['source_ip'] = register_number\n        elif flow_key == 'destination_ip':\n            flow_params['destination_ip'] = register_number\n        elif flow_key == 'source_mac':\n            flow_params['source_mac'] = register_number\n        elif flow_key == 'destination_mac':\n            flow_params['destination_mac'] = register_number"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_register(flow_params, register_number, register_value):\n    \n    for flow_key, flow_value in list(flow_params.items()):\n        if flow_key == 'source_port':\n            flow_params['source_port'] = register_number\n        elif flow_key == 'destination_port':\n            flow_params['destination_port'] = register_number\n        elif flow_key == 'source_ip':\n            flow_params['source_ip'] = register_number\n        elif flow_key == 'destination_ip':\n            flow_params['destination_ip'] = register_number\n        elif flow_key == 'source_mac':\n            flow_params['source_mac'] = register_number\n        elif flow_key == 'destination_mac':\n            flow_params['destination_mac'] = register_number", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["\ndef hydrate_time(nanoseconds, tz=None):\n    \n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n\ndef hydrate_datetime(seconds, nanoseconds, tz=None):\n    \n    from pytz import (\n        FixedOffset,\n        timezone,\n    )\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef hydrate_time(nanoseconds, tz=None):\n    \n    from pytz import FixedOffset\n    seconds, nanoseconds = map(int, divmod(nanoseconds, 1000000000))\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes = map(int, divmod(minutes, 60))\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n\ndef hydrate_datetime(seconds, nanoseconds, tz=None):\n    \n    from pytz import (\n        FixedOffset,\n        timezone,\n    )\n    minutes, seconds = map(int, divmod(seconds, 60))\n    hours, minutes", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\ndef hydrate_timedelta(value):\n    \n    months = value[1]\n    days = value[2]\n    seconds = value[3]\n    nanoseconds = value[4]\n    return timedelta(months=months, days=days, seconds=seconds, microseconds=nanoseconds)\n\n\ndef dehydrate_date(value):\n    \n    year = value.year\n    month = value.month\n   "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\ndef hydrate_timedelta(value):\n    \n    months = value[1]\n    days = value[2]\n    seconds = value[3]\n    nanoseconds = value[4]\n    return timedelta(months=months, days=days, seconds=seconds, microseconds=nanoseconds)\n\n\ndef dehydrate_date(value):\n    \n    year = value.year\n    month = value.month\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["\ndef dehydrate_time(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"T\", value.microseconds)\n\n\ndef dehydrate_datetime(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"D\", value.microseconds)\n\n\ndef dehydrate_duration(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"E\", value.months, value.days, value.seconds, value.nanoseconds)\n\n\ndef dehydrate_timedelta(value):\n    \n    if value is None:\n        return None\n    return Struct"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_time(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"T\", value.microseconds)\n\n\ndef dehydrate_datetime(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"D\", value.microseconds)\n\n\ndef dehydrate_duration(value):\n    \n    if value is None:\n        return None\n    return Structure(b\"E\", value.months, value.days, value.seconds, value.nanoseconds)\n\n\ndef dehydrate_timedelta(value):\n    \n    if value is None:\n        return None\n    return Struct", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["\ndef dehydrate_point(value):\n    \n    return _hydration.dehydrate_point(value)\n\n\ndef point_type(name, fields, srid_map):\n    \n    return _point_type(name, fields, srid_map)\n\n\ndef dehydrate_duration(value):\n    \n    return _hydration.dehydrate_duration(value)\n\n\ndef dehydrate_timedelta(value):\n    \n    return _hydration.dehydrate_timedelta(value)\n\n\ndef dehydrate_time(value):\n    \n    return _hydration.dehydrate_time"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_point(value):\n    \n    return _hydration.dehydrate_point(value)\n\n\ndef point_type(name, fields, srid_map):\n    \n    return _point_type(name, fields, srid_map)\n\n\ndef dehydrate_duration(value):\n    \n    return _hydration.dehydrate_duration(value)\n\n\ndef dehydrate_timedelta(value):\n    \n    return _hydration.dehydrate_timedelta(value)\n\n\ndef dehydrate_time(value):\n    \n    return _hydration.dehydrate_time", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["\ndef keys(self):\n        \n        return list(self)\n\n\ndef items(self, *keys):\n    \"\"\" Return the fields of the record as a list of key and value tuples\n\n    :returns: a list of value tuples\n    \"\"\"\n    if keys:\n        d = []\n        for key in keys:\n            try:\n                i = self.index(key)\n            except KeyError:\n                d.append((key, None))\n            else:\n                d.append((self.__keys[i], self[i]))\n        return d\n    return list((self.__keys[i], self._super_getitem_single(i))\n                for i in range(len(self)))\n\n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n    \"\"\" Return the keys and values of"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef keys(self):\n        \n        return list(self)\n\n\ndef items(self, *keys):\n    \"\"\" Return the fields of the record as a list of key and value tuples\n\n    :returns: a list of value tuples\n    \"\"\"\n    if keys:\n        d = []\n        for key in keys:\n            try:\n                i = self.index(key)\n            except KeyError:\n                d.append((key, None))\n            else:\n                d.append((self.__keys[i], self[i]))\n        return d\n    return list((self.__keys[i], self._super_getitem_single(i))\n                for i in range(len(self)))\n\n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n    \"\"\" Return the keys and values of", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}\n\n    @classmethod\n    def version_list(cls, versions, limit=4):\n        \n        first_with_range_support = Version(4, 2)\n        result = []\n        for version in versions:\n            if (result\n                    and version >= first_with_range_support\n                    and result[-1][0] == version[0]):\n                return result\n            if version[0] in result:\n                result.remove("], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if not isinstance(protocol_version, tuple):\n            raise TypeError(\"Protocol version must be specified as a tuple\")\n\n        if protocol_version in handlers:\n            return {protocol_version: handlers[protocol_version]}\n\n        return {}\n\n    @classmethod\n    def version_list(cls, versions, limit=4):\n        \n        first_with_range_support = Version(4, 2)\n        result = []\n        for version in versions:\n            if (result\n                    and version >= first_with_range_support\n                    and result[-1][0] == version[0]):\n                return result\n            if version[0] in result:\n                result.remove(", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["\ndef unit_of_work(metadata=None, timeout=None):\n    \n\n    def decorator(func):\n        \n        def wrapper(*args, **kwargs):\n            \n            pass\n        \n        wrapper.metadata = metadata\n        wrapper.timeout = timeout\n        return wrapper\n\n    return decorator\n\n\nif __name__ == \"__main__\":\n    import dill\n    import os\n    isT=True\n    @unit_of_work(timeout=100)\n    def count_people_tx(input_arg):\n        return input_arg\n\n    input_args=\"input value\"\n    output_args = count_people_tx(input_args)\n    if input_args !"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef unit_of_work(metadata=None, timeout=None):\n    \n\n    def decorator(func):\n        \n        def wrapper(*args, **kwargs):\n            \n            pass\n        \n        wrapper.metadata = metadata\n        wrapper.timeout = timeout\n        return wrapper\n\n    return decorator\n\n\nif __name__ == \"__main__\":\n    import dill\n    import os\n    isT=True\n    @unit_of_work(timeout=100)\n    def count_people_tx(input_arg):\n        return input_arg\n\n    input_args=\"input value\"\n    output_args = count_people_tx(input_args)\n    if input_args !", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["\ndef index(self, key):\n        \n        return self.map.index(key)\n\ndef insert(self, index, key):\n        \n        self.map.insert(index, key)\n        self.items.insert(index, None)\n\ndef pop(self, index=0):\n        \n        item = self.items.pop(index)\n        del self.map[index]\n        return item\n\ndef remove(self, key):\n        \n        index = self.map.index(key)\n        self.pop(index)\n\ndef setitem(self, index, key):\n        \n        self.map[index] = key\n        self.items[index"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef index(self, key):\n        \n        return self.map.index(key)\n\ndef insert(self, index, key):\n        \n        self.map.insert(index, key)\n        self.items.insert(index, None)\n\ndef pop(self, index=0):\n        \n        item = self.items.pop(index)\n        del self.map[index]\n        return item\n\ndef remove(self, key):\n        \n        index = self.map.index(key)\n        self.pop(index)\n\ndef setitem(self, index, key):\n        \n        self.map[index] = key\n        self.items[index", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None)\n                else:\n                    d.append(self[i])\n            return d\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None)\n                else:\n                    d.append(self[i])\n            return d\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["\ndef data(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append((key, None))\n                else:\n                    d.append((self.__keys[i], self[i]))\n            return d\n        return list((self.__keys[i], self._super_getitem_single(i)) for i in range(len(self)))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef data(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append((key, None))\n                else:\n                    d.append((self.__keys[i], self[i]))\n            return d\n        return list((self.__keys[i], self._super_getitem_single(i)) for i in range(len(self)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1\n\n'''\nCopyright (c) 2015-2019 Neo4j Sweden AB and others\n\nThis program and the accompanying materials are made available under the\nterms of the Apache License, Version 2.0 which is available at\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nSPDX-License-Identifier: Apache-2.0\n'''\nfrom ._codec.packstream.v1."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1\n\n'''\nCopyright (c) 2015-2019 Neo4j Sweden AB and others\n\nThis program and the accompanying materials are made available under the\nterms of the Apache License, Version 2.0 which is available at\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nSPDX-License-Identifier: Apache-2.0\n'''\nfrom ._codec.packstream.v1.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self._output_queue.append(\n            self._make_discard(qid=qid, n=n, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers))\n\ndef pull(self, n=-1, qid=-1, dehydration_hooks=None, hydration_hooks=None,\n                **handlers):\n        \n        self._output_queue.append(\n            self._make_pull(qid=qid, n=n, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers))\n\ndef push(self, stream, **handlers):\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self._output_queue.append(\n            self._make_discard(qid=qid, n=n, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers))\n\ndef pull(self, n=-1, qid=-1, dehydration_hooks=None, hydration_hooks=None,\n                **handlers):\n        \n        self._output_queue.append(\n            self._make_pull(qid=qid, n=n, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers))\n\ndef push(self, stream, **handlers):\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is not None:\n            if mode != 'WRITE' and mode != 'READ':\n                raise BoltProtocolError('Invalid mode %s' % mode)\n\n        if bookmarks is not None:\n            if not isinstance(bookmarks, (tuple, list)):\n                raise BoltProtocolError('Invalid bookmarks: %s' % repr(bookmarks))\n\n        if metadata is not None:\n            if not isinstance(metadata, dict):\n                raise BoltProtocolError('Invalid metadata: %s' % repr(metadata))\n\n        if timeout is None:\n            timeout = 0\n        elif not isinstance(timeout, (int, long)):\n            raise BoltProtocolError('Invalid timeout: %s' % repr(timeout))\n\n        if imp_user is not None:\n            if not"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is not None:\n            if mode != 'WRITE' and mode != 'READ':\n                raise BoltProtocolError('Invalid mode %s' % mode)\n\n        if bookmarks is not None:\n            if not isinstance(bookmarks, (tuple, list)):\n                raise BoltProtocolError('Invalid bookmarks: %s' % repr(bookmarks))\n\n        if metadata is not None:\n            if not isinstance(metadata, dict):\n                raise BoltProtocolError('Invalid metadata: %s' % repr(metadata))\n\n        if timeout is None:\n            timeout = 0\n        elif not isinstance(timeout, (int, long)):\n            raise BoltProtocolError('Invalid timeout: %s' % repr(timeout))\n\n        if imp_user is not None:\n            if not", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["\ndef round_half_to_even(n):\n    \n    return int(round(n))"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef round_half_to_even(n):\n    \n    return int(round(n))", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["\ndef point_type(name, fields, srid_map):\n    \n\n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {\"srid\": property(srid)}\n\n    for index, subclass_field in enumerate(fields):\n\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except IndexError:\n                raise AttributeError(f)\n\n        for field_alias in {subclass_field, \"xyz\"[index]}:\n\n    return type(name, (object,), attributes)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef point_type(name, fields, srid_map):\n    \n\n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {\"srid\": property(srid)}\n\n    for index, subclass_field in enumerate(fields):\n\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except IndexError:\n                raise AttributeError(f)\n\n        for field_alias in {subclass_field, \"xyz\"[index]}:\n\n    return type(name, (object,), attributes)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["\ndef deprecated(message):\n    \n    def decorator(f):\n        return property(deprecated_property(message)(f))\n    return decorator\n\n\ndef deprecated_property(message):\n    \n    def decorator(f):\n        return property(deprecated(message)(f))\n    return decorator\n\n\nclass ExperimentalWarning(Warning):\n    '''Base class for warnings about experimental features.\n\n    .. deprecated:: 5.8\n        we now use \"preview\" instead of \"experimental\".\n    '''\n\n\ndef experimental_warn(message, stack_level=1):\n    \n    warn(message, category=ExperimentalWarning, stacklevel=stack_level + 1)\n\n\ndef experimental(message):\n    '''Decorator for tagging experimental functions"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deprecated(message):\n    \n    def decorator(f):\n        return property(deprecated_property(message)(f))\n    return decorator\n\n\ndef deprecated_property(message):\n    \n    def decorator(f):\n        return property(deprecated(message)(f))\n    return decorator\n\n\nclass ExperimentalWarning(Warning):\n    '''Base class for warnings about experimental features.\n\n    .. deprecated:: 5.8\n        we now use \"preview\" instead of \"experimental\".\n    '''\n\n\ndef experimental_warn(message, stack_level=1):\n    \n    warn(message, category=ExperimentalWarning, stacklevel=stack_level + 1)\n\n\ndef experimental(message):\n    '''Decorator for tagging experimental functions", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if ticks < 0 or ticks > 86400000000000:\n            raise ValueError(\n                'ticks must be in the range [0, 86400000000000]'\n            )\n        return cls.__new(ticks, ticks // 3600000000000, (ticks % 3600000000000) // 60000000000, (ticks % 60000000000) // 1000000000, (ticks % 1000000000) // 1000000, tz)\n\n\n    @classmethod"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if ticks < 0 or ticks > 86400000000000:\n            raise ValueError(\n                'ticks must be in the range [0, 86400000000000]'\n            )\n        return cls.__new(ticks, ticks // 3600000000000, (ticks % 3600000000000) // 60000000000, (ticks % 60000000000) // 1000000000, (ticks % 1000000000) // 1000000, tz)\n\n\n    @classmethod", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        from neo4j._async.io._bolt3 import AsyncBolt3\n        from neo4j._sync.io._bolt3 import SyncBolt3\n        from neo4j._async.io._bolt4 import (\n            AsyncBolt4x1,\n            AsyncBolt4x2,\n            AsyncBolt4x3,\n            AsyncBolt4x4,\n        )\n        from neo4j._sync.io._bolt4 import (\n            SyncBolt4x1,\n            SyncBolt4x2,\n            SyncBolt4x3,\n            SyncBolt4x4,\n        )\n        from neo4"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        from neo4j._async.io._bolt3 import AsyncBolt3\n        from neo4j._sync.io._bolt3 import SyncBolt3\n        from neo4j._async.io._bolt4 import (\n            AsyncBolt4x1,\n            AsyncBolt4x2,\n            AsyncBolt4x3,\n            AsyncBolt4x4,\n        )\n        from neo4j._sync.io._bolt4 import (\n            SyncBolt4x1,\n            SyncBolt4x2,\n            SyncBolt4x3,\n            SyncBolt4x4,\n        )\n        from neo4", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmarks.append(Bookmarks.from_raw_values(value))\n            except ValueError:\n                bookmarks.append(value)\n        obj._bookmarks = bookmarks\n        return obj\n    @property\n    def bookmarks(self):\n        \"\"\" List of bookmarks. \"\"\"\n        return self._bookmarks\n\n\n@property\ndef bookmarks(self):\n    \"\"\" List of bookmarks. \"\"\"\n    return self._bookmarks\n\n\n@classmethod\ndef from_raw_values(cls, values):\n    '''Create a Bookmarks object from a list of raw bookmark"], "level": "self_contained", "generate_results": [{"generate_code": "\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmarks.append(Bookmarks.from_raw_values(value))\n            except ValueError:\n                bookmarks.append(value)\n        obj._bookmarks = bookmarks\n        return obj\n    @property\n    def bookmarks(self):\n        \"\"\" List of bookmarks. \"\"\"\n        return self._bookmarks\n\n\n@property\ndef bookmarks(self):\n    \"\"\" List of bookmarks. \"\"\"\n    return self._bookmarks\n\n\n@classmethod\ndef from_raw_values(cls, values):\n    '''Create a Bookmarks object from a list of raw bookmark", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["\ndef amend_bzparams(self, params, bug_ids):\n        \n        pass\n\ndef get_bugs(self, date=\"today\", bug_ids=[], chunk_size=None):\n    \n    bugs = self.get_data()\n    params = self.get_bz_params(date)\n    self.amend_bzparams(params, bug_ids)\n    self.query_url = utils.get_bz_search_url(params)\n\n    if isinstance(self, Nag):\n        self.query_params: dict = params\n\n    old_CHUNK_SIZE = Bugzilla.BUGZILLA_CHUNK_SIZE\n    try:\n        if chunk_size:\n            Bugzilla.BUGZILLA_CHUNK_SIZE = chunk_size\n\n        Bugzilla(\n            params,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef amend_bzparams(self, params, bug_ids):\n        \n        pass\n\ndef get_bugs(self, date=\"today\", bug_ids=[], chunk_size=None):\n    \n    bugs = self.get_data()\n    params = self.get_bz_params(date)\n    self.amend_bzparams(params, bug_ids)\n    self.query_url = utils.get_bz_search_url(params)\n\n    if isinstance(self, Nag):\n        self.query_params: dict = params\n\n    old_CHUNK_SIZE = Bugzilla.BUGZILLA_CHUNK_SIZE\n    try:\n        if chunk_size:\n            Bugzilla.BUGZILLA_CHUNK_SIZE = chunk_size\n\n        Bugzilla(\n            params,", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["\ndef vertex3tuple(vertices):\n    \n    return [(vertex[0], vertex[1], vertex[2]) for vertex in vertices]\n\n\ndef unit_normal(pta, ptb, ptc):\n    \n    return numpy.cross(ptb - pta, ptc - pta)\n\n\ndef edges2nodes(edges):\n    \n    nodes = []\n    for e1, e2 in edges:\n        nodes.append(e1)\n        nodes.append(e2)\n    nodedict = dict([(n, None) for n in nodes])\n    justnodes = list(nodedict.keys())\n    justnodes = sorted(justnodes, key=lambda x: str(x[0]))\n    return justnodes\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef vertex3tuple(vertices):\n    \n    return [(vertex[0], vertex[1], vertex[2]) for vertex in vertices]\n\n\ndef unit_normal(pta, ptb, ptc):\n    \n    return numpy.cross(ptb - pta, ptc - pta)\n\n\ndef edges2nodes(edges):\n    \n    nodes = []\n    for e1, e2 in edges:\n        nodes.append(e1)\n        nodes.append(e2)\n    nodedict = dict([(n, None) for n in nodes])\n    justnodes = list(nodedict.keys())\n    justnodes = sorted(justnodes, key=lambda x: str(x[0]))\n    return justnodes\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["\ndef _validate_labels(labels):\n    \n    if not isinstance(labels, dict):\n        return False\n\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n\n    return True\n\n\ndef validate_value(value):\n    \n    pattern = r\"^[A-Za-z]+$\"\n    return re.match(pattern, value) is not None\n\n\ndef validate_key(key):\n    \n    pattern = r\"^[A-Za-z]+$\"\n    return re.match(pattern, key) is not None\n\n\ndef _get_resource_name_regex():\n    '''Build or return the regular expressions that are used"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _validate_labels(labels):\n    \n    if not isinstance(labels, dict):\n        return False\n\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n\n    return True\n\n\ndef validate_value(value):\n    \n    pattern = r\"^[A-Za-z]+$\"\n    return re.match(pattern, value) is not None\n\n\ndef validate_key(key):\n    \n    pattern = r\"^[A-Za-z]+$\"\n    return re.match(pattern, key) is not None\n\n\ndef _get_resource_name_regex():\n    '''Build or return the regular expressions that are used", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["\ndef _get_resource_name_regex():\n    \n    global _resource_name_regex, _resource_name_pattern\n    if _resource_name_regex:\n        return _resource_name_regex\n    max_name_size = 253  # reduced by 2 for the regex\n    min_name_size = 0  # reduced by 1 for the regex\n    base_alphanumeric_pattern = \"\\\\w|(\\\\w[\\\\w\\\\-_.:]{{{min_length},{length}}}\\\\w)\"\n    _resource_name_pattern = base_alphanumeric_pattern.format(\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _get_resource_name_regex():\n    \n    global _resource_name_regex, _resource_name_pattern\n    if _resource_name_regex:\n        return _resource_name_regex\n    max_name_size = 253  # reduced by 2 for the regex\n    min_name_size = 0  # reduced by 1 for the regex\n    base_alphanumeric_pattern = \"\\\\w|(\\\\w[\\\\w\\\\-_.:]{{{min_length},{length}}}\\\\w)\"\n    _resource_name_pattern = base_alphanumeric_pattern.format(\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(f'Label value {value} does not match the regex {_label_value_pattern}')\n\n\ndef _get_labels_regex():\n    \"\"\"Get the regular expression used to validate labels.\n\n    Returns:\n        tuple[re.Pattern, re.Pattern]: a tuple with two elements, the first one is the regular expression\n            used to match labels, the second one is the regular expression used to match value.\n    \"\"\"\n    _label_key_regex, _label_value_regex = _get_resource_name_regex()\n    return _label_key_regex, _label_value_regex\n\n\ndef _get_resource_name_regex():\n    \"\"\"Get the regular expression used to"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(f'Label value {value} does not match the regex {_label_value_pattern}')\n\n\ndef _get_labels_regex():\n    \"\"\"Get the regular expression used to validate labels.\n\n    Returns:\n        tuple[re.Pattern, re.Pattern]: a tuple with two elements, the first one is the regular expression\n            used to match labels, the second one is the regular expression used to match value.\n    \"\"\"\n    _label_key_regex, _label_value_regex = _get_resource_name_regex()\n    return _label_key_regex, _label_value_regex\n\n\ndef _get_resource_name_regex():\n    \"\"\"Get the regular expression used to", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["\ndef validate_key(key):\n    \n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key} does not match the regex {_label_key_pattern}.\"\n        )\n\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value} does not match the regex {_label_value_pattern}.\"\n        )\n\ndef _get_labels_regex():\n    \n    key_regex = re.compile(_label_key_pattern)\n    value_regex"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_key(key):\n    \n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key} does not match the regex {_label_key_pattern}.\"\n        )\n\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value} does not match the regex {_label_value_pattern}.\"\n        )\n\ndef _get_labels_regex():\n    \n    key_regex = re.compile(_label_key_pattern)\n    value_regex", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    'Kubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resources\n        first_level (bool, optional): If True, indicates that the dictionary represents'''\n    'the whole observer schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all'''\n    'non-list and non-dict values by ``None``.\n\n    '''\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(value, first_level=True)\n        elif"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    'Kubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resources\n        first_level (bool, optional): If True, indicates that the dictionary represents'''\n    'the whole observer schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all'''\n    'non-list and non-dict values by ``None``.\n\n    '''\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(value, first_level=True)\n        elif", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            return\n\n        camel_key = camel_to_snake_case(val['name'])\n\n        if (camel_key not in response[idx]) and (camel_key not in last_applied_manifest):\n            last_applied_manifest[camel_key] = {}\n\n        if camel_key == 'status':\n            update_last_applied_manifest_status_from_resp(\n                last_applied_manifest[camel_key], val, response[idx]\n            )\n        elif cam"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            return\n\n        camel_key = camel_to_snake_case(val['name'])\n\n        if (camel_key not in response[idx]) and (camel_key not in last_applied_manifest):\n            last_applied_manifest[camel_key] = {}\n\n        if camel_key == 'status':\n            update_last_applied_manifest_status_from_resp(\n                last_applied_manifest[camel_key], val, response[idx]\n            )\n        elif cam", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            break\n\n        camel_key = camel_to_snake_case(val)\n\n        if camel_key not in response:\n            last_applied_manifest[camel_key] = {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            break\n\n        camel_key = camel_to_snake_case(val)\n\n        if camel_key not in response:\n            last_applied_manifest[camel_key] = {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["\ndef generate_default_observer_schema(app):\n    \n\n    try:\n        kubernetes_resource_idx = get_kubernetes_resource_idx(\n            app.status.mangled_observer_schema, app.spec.manifest\n        )\n    except IndexError:\n        app.status.mangled_observer_schema.append(\n            generate_default_observer_schema_dict(\n                app.spec.manifest, first_level=True\n            )\n        )\n        kubernetes_resource_idx = len(\n            app.status.mangled_observer_schema) - 1\n\n    app.status.mangled_last_applied_manifest_dict.update(\n        {\n            f"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema(app):\n    \n\n    try:\n        kubernetes_resource_idx = get_kubernetes_resource_idx(\n            app.status.mangled_observer_schema, app.spec.manifest\n        )\n    except IndexError:\n        app.status.mangled_observer_schema.append(\n            generate_default_observer_schema_dict(\n                app.spec.manifest, first_level=True\n            )\n        )\n        kubernetes_resource_idx = len(\n            app.status.mangled_observer_schema) - 1\n\n    app.status.mangled_last_applied_manifest_dict.update(\n        {\n            f", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["\ndef on(self, hook):\n        \n\n        def decorator(func):\n            self.registry[hook].append(func)\n            return func\n\n        return decorator\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef on(self, hook):\n        \n\n        def decorator(func):\n            self.registry[hook].append(func)\n            return func\n\n        return decorator\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    return {\n        \"tls\": {\n            \"enabled\": False,\n            \"cert\": \"cert_path\",\n            \"key\": \"key_path\",\n            \"client_ca\": \"client_ca_path\",\n        },\n        \"authentication\": {\n            \"allow_anonymous\": True,\n            \"strategy\": {\n                \"keystone\": {\"enabled\": False, \"endpoint\": \"http://localhost\"},\n                \"keycloak\": {\n                    \"enabled\": False,\n                    \"endpoint\": \"no_endpoint\",\n                    \"realm\": \"krake\",\n                },\n                \"static\": {\"enabled\": True, \"name\": user},\n            },\n        },\n        \"authorization\": \"always-allow\",\n        \"etcd\": {\"host\": etcd_host, \"port\": etcd"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    return {\n        \"tls\": {\n            \"enabled\": False,\n            \"cert\": \"cert_path\",\n            \"key\": \"key_path\",\n            \"client_ca\": \"client_ca_path\",\n        },\n        \"authentication\": {\n            \"allow_anonymous\": True,\n            \"strategy\": {\n                \"keystone\": {\"enabled\": False, \"endpoint\": \"http://localhost\"},\n                \"keycloak\": {\n                    \"enabled\": False,\n                    \"endpoint\": \"no_endpoint\",\n                    \"realm\": \"krake\",\n                },\n                \"static\": {\"enabled\": True, \"name\": user},\n            },\n        },\n        \"authorization\": \"always-allow\",\n        \"etcd\": {\"host\": etcd_host, \"port\": etcd", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["\ndef paging(response, max_results):\n    \n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n\n\ndef generate_duid(mac):\n    \n    if not isinstance(mac, basestring):\n        raise ValueError('MAC address must be a string')\n    if not mac.replace('-', '').replace(':', '').isalnum():\n        raise ValueError('MAC address must be valid')\n    mac_hex = mac.replace('-', '').replace(':', '')\n    if len(mac_hex) != 12:\n        raise ValueError('MAC address must be 12 characters')\n    duid = '00:00:00:' + mac_hex"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef paging(response, max_results):\n    \n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n\n\ndef generate_duid(mac):\n    \n    if not isinstance(mac, basestring):\n        raise ValueError('MAC address must be a string')\n    if not mac.replace('-', '').replace(':', '').isalnum():\n        raise ValueError('MAC address must be valid')\n    mac_hex = mac.replace('-', '').replace(':', '')\n    if len(mac_hex) != 12:\n        raise ValueError('MAC address must be 12 characters')\n    duid = '00:00:00:' + mac_hex", "is_pass": true, "return_code": 0}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["\ndef _fromutc(self, dt):\n        \n        return self._fromutc_impl(dt)\n\ndef _fromutc_impl(self, dt):\n    \"\"\"\n    Given a timezone-aware datetime in a given timezone, calculates a\n    timezone-aware datetime in a new timezone.\n\n    Since this is the one time that we *know* we have an unambiguous\n    datetime object, we take this opportunity to determine whether the\n    datetime is ambiguous and in a \"fold\" state (e.g. if it's the first\n    occurrence, chronologically, of the ambiguous datetime).\n\n    :param dt:\n        A timezone-aware :class:`datetime.datetime` object.\n    \"\"\"\n    dtoff = dt.utcoffset()\n    if dto"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _fromutc(self, dt):\n        \n        return self._fromutc_impl(dt)\n\ndef _fromutc_impl(self, dt):\n    \"\"\"\n    Given a timezone-aware datetime in a given timezone, calculates a\n    timezone-aware datetime in a new timezone.\n\n    Since this is the one time that we *know* we have an unambiguous\n    datetime object, we take this opportunity to determine whether the\n    datetime is ambiguous and in a \"fold\" state (e.g. if it's the first\n    occurrence, chronologically, of the ambiguous datetime).\n\n    :param dt:\n        A timezone-aware :class:`datetime.datetime` object.\n    \"\"\"\n    dtoff = dt.utcoffset()\n    if dto", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return self.__class__(years=self."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return self.__class__(years=self.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["\ndef tzname_in_python2(namefunc):\n    \n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n\n    return wrapper\n\n\nif hasattr(datetime, 'fold'):\n    def enfold(dt, fold=1):\n        \"\"\"Provides a unified interface for assigning the ``fold`` attribute to\n        datetimes both before and after the implementation of PEP-495.\n\n        :param dt: datetime object to adjust\n        :param fold: how to fold timezone information, see\n            :func:`datetime."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef tzname_in_python2(namefunc):\n    \n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n\n    return wrapper\n\n\nif hasattr(datetime, 'fold'):\n    def enfold(dt, fold=1):\n        \"\"\"Provides a unified interface for assigning the ``fold`` attribute to\n        datetimes both before and after the implementation of PEP-495.\n\n        :param dt: datetime object to adjust\n        :param fold: how to fold timezone information, see\n            :func:`datetime.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        return self._parse_isotime(dt_str)\n\n    @_takes_ascii\n    def isodate(self, dt_str):\n        \n        return self._parse_isodate(dt_str)\n\n    @_takes_ascii\n    def isotime(self, dt_str):\n        \n        return self._parse_isotime(dt_str)\n\n    @_takes_ascii\n    def isoformat(self, dt, utcoffset=False):\n        '''Format a :class:`datetime.datetime` or :class:`datetime.date"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        return self._parse_isotime(dt_str)\n\n    @_takes_ascii\n    def isodate(self, dt_str):\n        \n        return self._parse_isodate(dt_str)\n\n    @_takes_ascii\n    def isotime(self, dt_str):\n        \n        return self._parse_isotime(dt_str)\n\n    @_takes_ascii\n    def isoformat(self, dt, utcoffset=False):\n        '''Format a :class:`datetime.datetime` or :class:`datetime.date", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError(\"Invalid input. Expected a string.\")\n        if default is not None and not isinstance(default, datetime.datetime):\n            raise TypeError(\"Invalid default value. Expected a datetime object.\")\n\n        return datetime_object\n\nclass parser(object):\n    def __init__(self, info=None):\n        self.info = info or parserinfo()\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError(\"Invalid input."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError(\"Invalid input. Expected a string.\")\n        if default is not None and not isinstance(default, datetime.datetime):\n            raise TypeError(\"Invalid default value. Expected a datetime object.\")\n\n        return datetime_object\n\nclass parser(object):\n    def __init__(self, info=None):\n        self.info = info or parserinfo()\n\n    def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError(\"Invalid input.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n        _fold = self._fold_status(dt, dt_wall)\n        return enfold(dt_wall, fold=_fold)"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n        _fold = self._fold_status(dt, dt_wall)\n        return enfold(dt_wall, fold=_fold)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["\ndef default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\n\ndef within_delta(dt1, dt2, delta):\n    \n    delta = abs(delta)\n    difference = dt1 - dt2\n    return -delta <= difference <= delta\n\n\nclass UTC(datetime.tzinfo):\n    \n    def utcoffset(self, dt):\n        return timedelta(0)\n\n    def tzname(self, dt):\n        return \"UTC\"\n\n    def dst(self, dt):\n        return timedelta(0)\n\n\nUTC_NOW = datetime.now(UTC())"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef default_tzinfo(dt, tzinfo):\n    \n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\n\ndef within_delta(dt1, dt2, delta):\n    \n    delta = abs(delta)\n    difference = dt1 - dt2\n    return -delta <= difference <= delta\n\n\nclass UTC(datetime.tzinfo):\n    \n    def utcoffset(self, dt):\n        return timedelta(0)\n\n    def tzname(self, dt):\n        return \"UTC\"\n\n    def dst(self, dt):\n        return timedelta(0)\n\n\nUTC_NOW = datetime.now(UTC())", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["\ndef is_none_string(val: Any) -> bool:\n    \n    return isinstance(val, str) and val.lower() == 'none'\n\n\ndef is_integer(val: Any) -> bool:\n    \n    return isinstance(val, int)\n\n\ndef is_float(val: Any) -> bool:\n    \n    return isinstance(val, float)\n\n\ndef is_boolean(val: Any) -> bool:\n    \n    return isinstance(val, bool)\n\n\ndef is_numeric(val: Any) -> bool:\n    \n    return isinstance(val, (int, float))\n\n\ndef is_string(val: Any) -"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_none_string(val: Any) -> bool:\n    \n    return isinstance(val, str) and val.lower() == 'none'\n\n\ndef is_integer(val: Any) -> bool:\n    \n    return isinstance(val, int)\n\n\ndef is_float(val: Any) -> bool:\n    \n    return isinstance(val, float)\n\n\ndef is_boolean(val: Any) -> bool:\n    \n    return isinstance(val, bool)\n\n\ndef is_numeric(val: Any) -> bool:\n    \n    return isinstance(val, (int, float))\n\n\ndef is_string(val: Any) -", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_id = ''\n    is_copy = False\n\n    if image_href.startswith('copy:') and image_href.count(':') == 3:\n        image_id = image_href.split(':')[2]\n        is_copy = True\n    elif image_href.startswith('copy:'):\n        image_id = image_href.split(':')[1]\n        is_copy = True\n    else:\n        image_id = image_href\n\n    if image_id.startswith('/'):\n        return image_id, None, is_copy\n\n    return image_id, image_href, is_copy\n\n\ndef _parse_image_id(image_id: str) -"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_id = ''\n    is_copy = False\n\n    if image_href.startswith('copy:') and image_href.count(':') == 3:\n        image_id = image_href.split(':')[2]\n        is_copy = True\n    elif image_href.startswith('copy:'):\n        image_id = image_href.split(':')[1]\n        is_copy = True\n    else:\n        image_id = image_href\n\n    if image_id.startswith('/'):\n        return image_id, None, is_copy\n\n    return image_id, image_href, is_copy\n\n\ndef _parse_image_id(image_id: str) -", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["\ndef _inline_r_setup(code: str) -> str:\n    \n    with_option = [\n        (\n            r\"\"\"\n            pkgType <- 'binary'\n            \"\"\"),\n        code,\n    ]\n    return '\\n'.join(with_option)\n\n\ndef run_hook(\n        prefix: Prefix,\n        entry: str,\n        args: Sequence[str],\n        file_args: Sequence[str],\n        *,\n        is_local: bool,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    cmd = _cmd_from_hook(prefix, entry, args, is_local=is_local)\n    return lang_base.run_xargs(\n        cmd,\n        file_args,\n        require_serial=require_serial,\n        color=color,\n    )"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _inline_r_setup(code: str) -> str:\n    \n    with_option = [\n        (\n            r\"\"\"\n            pkgType <- 'binary'\n            \"\"\"),\n        code,\n    ]\n    return '\\n'.join(with_option)\n\n\ndef run_hook(\n        prefix: Prefix,\n        entry: str,\n        args: Sequence[str],\n        file_args: Sequence[str],\n        *,\n        is_local: bool,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    cmd = _cmd_from_hook(prefix, entry, args, is_local=is_local)\n    return lang_base.run_xargs(\n        cmd,\n        file_args,\n        require_serial=require_serial,\n        color=color,\n    )", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    cmd_fn = cmd_output_p if color else cmd_output_b\n    retcode = 0\n    stdout = b''\n    try:\n        cmd = parse_shebang.normalize_cmd(cmd)\n    except parse_shebang.ExecutableNotFoundError as e:\n        return e.to_output()[:2]\n    if (\n            sys.platform == 'win32' and\n            cmd[0].lower().endswith(('.bat', '.cmd'))\n    ):  # pragma: win32 cover\n        pass\n    if (\n            sys."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    cmd_fn = cmd_output_p if color else cmd_output_b\n    retcode = 0\n    stdout = b''\n    try:\n        cmd = parse_shebang.normalize_cmd(cmd)\n    except parse_shebang.ExecutableNotFoundError as e:\n        return e.to_output()[:2]\n    if (\n            sys.platform == 'win32' and\n            cmd[0].lower().endswith(('.bat', '.cmd'))\n    ):  # pragma: win32 cover\n        pass\n    if (\n            sys.", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str, ...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str, ...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))\n\n\ndef check_min_version(version: str) -> None:\n    if parse_version(version) > parse_version(C.VERSION):\n        raise cfgv.ValidationError(\n            f'pre-commit version {version} is required but version '\n            f'{C.VERSION} is installed.  '\n            f'Perhaps run `pip install --upgrade pre-commit`.',\n        )\n\n\n_STAGES = {\n    'commit': 'pre-commit',\n    'merge-commit': 'pre-merge-commit',\n    'push': 'pre-push',\n}\n\n\ndef transform_stage(stage: str) -> str:\n    return _STAGES.get(stage, stage)\n\n\ndef"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))\n\n\ndef check_min_version(version: str) -> None:\n    if parse_version(version) > parse_version(C.VERSION):\n        raise cfgv.ValidationError(\n            f'pre-commit version {version} is required but version '\n            f'{C.VERSION} is installed.  '\n            f'Perhaps run `pip install --upgrade pre-commit`.',\n        )\n\n\n_STAGES = {\n    'commit': 'pre-commit',\n    'merge-commit': 'pre-merge-commit',\n    'push': 'pre-push',\n}\n\n\ndef transform_stage(stage: str) -> str:\n    return _STAGES.get(stage, stage)\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0])\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0])\n\n    return (exe,) + cmd[1:]\n\n\nif __name__ == \"__main__\":\n    import dill\n    import os\n    for l in os.listdir(\"/home/travis/builds/repos/pre-commit---pre-commit/data_passk_platform/62e4fb4d85ea9864308902e7/\"):\n        f = open(\"/home/travis/builds/repos/pre"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0])\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0])\n\n    return (exe,) + cmd[1:]\n\n\nif __name__ == \"__main__\":\n    import dill\n    import os\n    for l in os.listdir(\"/home/travis/builds/repos/pre-commit---pre-commit/data_passk_platform/62e4fb4d85ea9864308902e7/\"):\n        f = open(\"/home/travis/builds/repos/pre", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["\ndef gaussian(self, x):\n        \n        return np.exp(-((x - 0.2) / 0.1)**2)\n\n\n\ndef gaussian_x(self, x):\n    \n    return np.exp(-((x - 0.2) / 0.1) ** 2)\n\n\n\ndef gaussian_y(self, y):\n    \n    return np.exp(-((y - 0.2) / 0.1) ** 2)\n\n\n\ndef gaussian_xy(self, x, y):\n    '''Gaussian centered around 0.2 with a s"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef gaussian(self, x):\n        \n        return np.exp(-((x - 0.2) / 0.1)**2)\n\n\n\ndef gaussian_x(self, x):\n    \n    return np.exp(-((x - 0.2) / 0.1) ** 2)\n\n\n\ndef gaussian_y(self, y):\n    \n    return np.exp(-((y - 0.2) / 0.1) ** 2)\n\n\n\ndef gaussian_xy(self, x, y):\n    '''Gaussian centered around 0.2 with a s", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n\n\ndef _fetch_table_column(self, line, start, end, key, data):\n        \n        col_data = str(line[start:end]).strip()\n        if col_data: data[key] = col_data\n\n\ndef validate(self, data, dtype=OrderedDict):\n    \n    if data == None:\n        return None\n    if type(data) != dtype:\n        return None\n    return True\n\n\ndef get_pattern(self, pattern, strip=True):\n    \n    try:\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n\n\ndef _fetch_table_column(self, line, start, end, key, data):\n        \n        col_data = str(line[start:end]).strip()\n        if col_data: data[key] = col_data\n\n\ndef validate(self, data, dtype=OrderedDict):\n    \n    if data == None:\n        return None\n    if type(data) != dtype:\n        return None\n    return True\n\n\ndef get_pattern(self, pattern, strip=True):\n    \n    try:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["\ndef deep_merge_nodes(nodes):\n    \n\n    merger = merge.DeepMerger()\n    return merger.merge_all(nodes)\n\n\nfrom __future__ import absolute_import, division, print_function\n\nimport os\nimport ruamel.yaml\n\nfrom borgmatic.config import load\n\n\ndef deep_merge_nodes(nodes):\n    \n\n    merger = merge.DeepMerger()\n    return merger.merge_all(nodes)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n\n    merger = merge.DeepMerger()\n    return merger.merge_all(nodes)\n\n\nfrom __future__ import absolute_import, division, print_function\n\nimport os\nimport ruamel.yaml\n\nfrom borgmatic.config import load\n\n\ndef deep_merge_nodes(nodes):\n    \n\n    merger = merge.DeepMerger()\n    return merger.merge_all(nodes)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(\n        description='''\n            Convert legacy INI-style borgmatic configuration and excludes files to a single YAML\n            configuration file. Note that this replaces any comments from the source files.\n        '''\n    )\n    parser.add_argument(\n        '-s',\n        '--source-config',\n        dest='source_config_filename',\n        default=DEFAULT_SOURCE_CONFIG_FILENAME,\n        help='Configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format("], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(\n        description='''\n            Convert legacy INI-style borgmatic configuration and excludes files to a single YAML\n            configuration file. Note that this replaces any comments from the source files.\n        '''\n    )\n    parser.add_argument(\n        '-s',\n        '--source-config',\n        dest='source_config_filename',\n        default=DEFAULT_SOURCE_CONFIG_FILENAME,\n        help='Configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions = ' '.join(subparsers.choices.keys())\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script="], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions = ' '.join(subparsers.choices.keys())\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    import borgmatic\n    from borgmatic import util\n    from borgmatic.commands import arguments_make_parsers_passk_validte0\n    from borgmatic.commands import arguments_make_parsers_passk_validte3\n    from borgmatic.commands import arguments_make_parsers_passk_validte1\n    from borgmatic.commands import arguments_make_parsers_passk_validte7\n    from borgmatic.commands import arguments_make_parsers_passk_validte2\n    from borgmatic.commands import arguments_make_parsers_passk_validte5\n    from borgmatic.commands import arguments_make_parsers_passk_validte8\n    from borgmatic"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    import borgmatic\n    from borgmatic import util\n    from borgmatic.commands import arguments_make_parsers_passk_validte0\n    from borgmatic.commands import arguments_make_parsers_passk_validte3\n    from borgmatic.commands import arguments_make_parsers_passk_validte1\n    from borgmatic.commands import arguments_make_parsers_passk_validte7\n    from borgmatic.commands import arguments_make_parsers_passk_validte2\n    from borgmatic.commands import arguments_make_parsers_passk_validte5\n    from borgmatic.commands import arguments_make_parsers_passk_validte8\n    from borgmatic", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if \"borg\" in unparsed_arguments:\n        subparsers = {\"borg\": subparsers[\"borg\"]}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if \"borg\" in unparsed_arguments:\n        subparsers = {\"borg\": subparsers[\"borg\"]}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["\ndef was_processed(processed, path_name, verbose):\n    \n    if path_name in processed:\n        if verbose:\n            logging.info(\"Skipping %s\", path_name)\n        return True\n    processed.add(path_name)\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef was_processed(processed, path_name, verbose):\n    \n    if path_name in processed:\n        if verbose:\n            logging.info(\"Skipping %s\", path_name)\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["\ndef regex_dict(item):\n    \n    if not isinstance(item, dict):\n        return item\n    for key in item.keys():\n        item[key] = re.compile(key)\n    return item\n\n\"\"\"\nMakefile project generator\n\nThis package contains a number of tools to generate projects for various\nplatforms.\n\nThe module is named ``makeprojects`` because it contains a number of projects\nand sub projects.  Other than ``makeprojects.core``, all of the projects\nare contained in a single module.\n\n\"\"\"\n\nimport warnings\n\n\ndef __getattr__(name):\n    \"\"\"\n    Return the module for the requested sub-project\n    \"\"\"\n    if name in ('core', 'ninja', 'visual_studio',\n               "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef regex_dict(item):\n    \n    if not isinstance(item, dict):\n        return item\n    for key in item.keys():\n        item[key] = re.compile(key)\n    return item\n\n\"\"\"\nMakefile project generator\n\nThis package contains a number of tools to generate projects for various\nplatforms.\n\nThe module is named ``makeprojects`` because it contains a number of projects\nand sub projects.  Other than ``makeprojects.core``, all of the projects\nare contained in a single module.\n\n\"\"\"\n\nimport warnings\n\n\ndef __getattr__(name):\n    \"\"\"\n    Return the module for the requested sub-project\n    \"\"\"\n    if name in ('core', 'ninja', 'visual_studio',\n               ", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["\ndef remove_ending_os_sep(input_list):\n    \n    output_list = list(input_list)\n\n    while output_list and output_list[-1].endswith(os.sep):\n        output_list.pop()\n\n    return output_list\n\nfrom .util import was_processed, validate_string\nfrom .watcom_config import WatcomConfig\n\nimport datetime\nimport os\nimport subprocess\n\n\ndef make_hlsl_command(custom_list, rule_list, codefiles):\n    \n\n    output_list = list(custom_list)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef remove_ending_os_sep(input_list):\n    \n    output_list = list(input_list)\n\n    while output_list and output_list[-1].endswith(os.sep):\n        output_list.pop()\n\n    return output_list\n\nfrom .util import was_processed, validate_string\nfrom .watcom_config import WatcomConfig\n\nimport datetime\nimport os\nimport subprocess\n\n\ndef make_hlsl_command(custom_list, rule_list, codefiles):\n    \n\n    output_list = list(custom_list)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["\ndef run_command(self, cmd, verbose):\n        \n\n        try:\n            error_code = run_command(cmd, working_dir=os.path.dirname(self.file_name), quiet=not verbose)[0]\n        except OSError as error:\n            error_code = getattr(error, \"winerror\", error.errno)\n        if error_code:\n            error_code = int(error_code)\n\n        return BuildError(error_code, self.file_name)\n\ndef main():\n    \n\n    test(args, platform_type)\n\nif __name__ == \"__main__\":\n    main()"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef run_command(self, cmd, verbose):\n        \n\n        try:\n            error_code = run_command(cmd, working_dir=os.path.dirname(self.file_name), quiet=not verbose)[0]\n        except OSError as error:\n            error_code = getattr(error, \"winerror\", error.errno)\n        if error_code:\n            error_code = int(error_code)\n\n        return BuildError(error_code, self.file_name)\n\ndef main():\n    \n\n    test(args, platform_type)\n\nif __name__ == \"__main__\":\n    main()", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n                b\"[\"\n                + before\n                + b\"]?\"\n                + b\"[^\"\n                + before\n                + after\n                + b\"]*\"\n                + b\"(?:[\"\n                + after\n                + b\"]|$|(?=[\"\n                + before\n                )\n        )\n\nimport pytest\n\nfrom . import _cut_chars\n\n\ndef test_class_has_attributes():\n    assert hasattr(_cut_chars, \"DEFAULT_CUT_BEFORE\")\n    assert hasattr(_cut_chars, \"DEFAULT_CUT_AFTER\")\n\n\ndef test_class_has_methods():\n    assert hasattr(_cut_chars, \"set_cut_chars\")\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n                b\"[\"\n                + before\n                + b\"]?\"\n                + b\"[^\"\n                + before\n                + after\n                + b\"]*\"\n                + b\"(?:[\"\n                + after\n                + b\"]|$|(?=[\"\n                + before\n                )\n        )\n\nimport pytest\n\nfrom . import _cut_chars\n\n\ndef test_class_has_attributes():\n    assert hasattr(_cut_chars, \"DEFAULT_CUT_BEFORE\")\n    assert hasattr(_cut_chars, \"DEFAULT_CUT_AFTER\")\n\n\ndef test_class_has_methods():\n    assert hasattr(_cut_chars, \"set_cut_chars\")\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n\n        return np.zeros(shape, dtype=dtype)\n\ndef test_array_init():\n    \n\n    array = make_array((2, 2))\n\n    assert array.shape == (2, 2)\n\n    assert array.dtype == np.dtype(\"float32\")\n\n    np.testing.assert_equal(array, np.zeros((2, 2), dtype=np.dtype(\"float32\")))\n\ndef test_array_init_with_dtype():\n    \n\n    array = make_array((2, 2), dtype=np.dtype(\""], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n\n        return np.zeros(shape, dtype=dtype)\n\ndef test_array_init():\n    \n\n    array = make_array((2, 2))\n\n    assert array.shape == (2, 2)\n\n    assert array.dtype == np.dtype(\"float32\")\n\n    np.testing.assert_equal(array, np.zeros((2, 2), dtype=np.dtype(\"float32\")))\n\ndef test_array_init_with_dtype():\n    \n\n    array = make_array((2, 2), dtype=np.dtype(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["\ndef addignored(self, ignored):\n        \n        import os\n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True, text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\ndef test_addignored():\n    \n    assert addignored(\".\") == \" ocfl/__pycache__/\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef addignored(self, ignored):\n        \n        import os\n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True, text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\ndef test_addignored():\n    \n    assert addignored(\".\") == \" ocfl/__pycache__/\"", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["\ndef reset(self):\n        \n        self.bins = self.initial_bins\n        self.limit = len(self.bins)\n        self.limit_backward = 0\n        self.bra = 0\n        self.ket = self.limit\n\n\ndef reset_and_fill(self, data):\n        \n        if self.initial_bins is not None:\n            self.bins = copy.deepcopy(self.initial_bins)\n        else:\n            self.bins = self.make_bins()\n        self.current = data\n        self.limit = len(self.current)\n        self.limit_backward = 0\n        self.bra = 0\n        self.ket = self.limit\n\n\ndef reset_and_fill_weighted(self, data,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef reset(self):\n        \n        self.bins = self.initial_bins\n        self.limit = len(self.bins)\n        self.limit_backward = 0\n        self.bra = 0\n        self.ket = self.limit\n\n\ndef reset_and_fill(self, data):\n        \n        if self.initial_bins is not None:\n            self.bins = copy.deepcopy(self.initial_bins)\n        else:\n            self.bins = self.make_bins()\n        self.current = data\n        self.limit = len(self.current)\n        self.limit_backward = 0\n        self.bra = 0\n        self.ket = self.limit\n\n\ndef reset_and_fill_weighted(self, data,", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["\ndef to_csv(self, separator=\",\", header=None):\n        \n        self.set_header(header)\n        return self.to_csv(separator)\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header = header or self.header\n    if header:\n        yield header\n    for row in self.data:\n        yield separator.join((str(row[i]) for i in header))\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header = header or self.header\n    if header:\n        yield header\n    for row in self.data:\n        yield separator.join((str(row[i]) for i in header))\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header ="], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef to_csv(self, separator=\",\", header=None):\n        \n        self.set_header(header)\n        return self.to_csv(separator)\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header = header or self.header\n    if header:\n        yield header\n    for row in self.data:\n        yield separator.join((str(row[i]) for i in header))\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header = header or self.header\n    if header:\n        yield header\n    for row in self.data:\n        yield separator.join((str(row[i]) for i in header))\n\n\ndef to_csv(self, separator=\",\", header=None):\n    \n    header =", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["\ndef _get_err_indices(self, coord_name):\n        \n        err_indices = []\n\n\n        return err_indices\n\n\ndef _get_err_indices_passk_validte(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte0(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte1(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte2(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte3(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte4(self, coord_name):"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _get_err_indices(self, coord_name):\n        \n        err_indices = []\n\n\n        return err_indices\n\n\ndef _get_err_indices_passk_validte(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte0(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte1(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte2(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte3(self, coord_name):\n        pass\n\n\ndef _get_err_indices_passk_validte4(self, coord_name):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["\ndef _update_context(self, context):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _update_context(self, context):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [edges[coord][i+1] - edges[coord][i]\n                       for coord, i in enumerate(ind)]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol * bin_content\n        total += cell_integral\n    return total"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [edges[coord][i+1] - edges[coord][i]\n                       for coord, i in enumerate(ind)]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol * bin_content\n        total += cell_integral\n    return total", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["\ndef is_fill_request_seq(seq):\n    \n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_source(seq):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef is_fill_request_seq(seq):\n    \n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_source(seq):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["\ndef is_fill_request_el(obj):\n    \n    return (hasattr(obj, 'fill') and hasattr(obj, 'request')\n            and callable(obj.fill) and callable(obj.request))\n\n\ndef is_fill_request_seq(seq):\n    \n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, '__iter__'):\n        for item in seq:\n            if is_fill_request_el(item):\n                is_fcseq = True\n                break\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method '"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_request_el(obj):\n    \n    return (hasattr(obj, 'fill') and hasattr(obj, 'request')\n            and callable(obj.fill) and callable(obj.request))\n\n\ndef is_fill_request_seq(seq):\n    \n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, '__iter__'):\n        for item in seq:\n            if is_fill_request_el(item):\n                is_fcseq = True\n                break\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method '", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)\n\n\ndef is_source(seq):\n    \n    from . import source\n    return isinstance(seq, source.Source)\n\n\ndef is_fill_request_seq(seq):\n    \n    return isinstance(seq, list) and all(isinstance(item, FillRequest) for item in seq)\n\n\ndef is_fill_compute_seq(seq):\n    '''Test whether *seq"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)\n\n\ndef is_source(seq):\n    \n    from . import source\n    return isinstance(seq, source.Source)\n\n\ndef is_fill_request_seq(seq):\n    \n    return isinstance(seq, list) and all(isinstance(item, FillRequest) for item in seq)\n\n\ndef is_fill_compute_seq(seq):\n    '''Test whether *seq", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute') \\\n            and callable(obj.fill) and callable(obj.compute)\n\n\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request') \\\n            and callable(obj.fill) and callable(obj.request)\n\n\ndef is_fill_request_seq(seq):\n    '''Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if isinstance(seq, Source):\n        return False\n    is"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute') \\\n            and callable(obj.fill) and callable(obj.compute)\n\n\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request') \\\n            and callable(obj.fill) and callable(obj.request)\n\n\ndef is_fill_request_seq(seq):\n    '''Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if isinstance(seq, Source):\n        return False\n    is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["\ndef difference(d1, d2, level=-1):\n    \n    if d1 == d2:\n        return {}\n    if level == 0:\n        return d1\n    if level == -1:\n        d1_keys = set(d1)\n        d2_keys = set(d2)\n        diff = d1_keys - d2_keys\n        return {k: difference(d1[k], d2[k], level=level-1)\n                for k in diff if k in d1}\n    if level == 1:\n        result = {}\n        for key, value in d1.items():\n            if key not in d2:\n                result[key] = value\n        return result\n\n\ndef format_context(format_str):\n    \"\"\"Create a function that formats a given string using a context.\n\n    It is recommended to use jinja2.Template."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef difference(d1, d2, level=-1):\n    \n    if d1 == d2:\n        return {}\n    if level == 0:\n        return d1\n    if level == -1:\n        d1_keys = set(d1)\n        d2_keys = set(d2)\n        diff = d1_keys - d2_keys\n        return {k: difference(d1[k], d2[k], level=level-1)\n                for k in diff if k in d1}\n    if level == 1:\n        result = {}\n        for key, value in d1.items():\n            if key not in d2:\n                result[key] = value\n        return result\n\n\ndef format_context(format_str):\n    \"\"\"Create a function that formats a given string using a context.\n\n    It is recommended to use jinja2.Template.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        ind = indices[-1]\n        if ind < 0:\n            return\n\n        try:\n            subarr[ind] += weight\n        except IndexError:\n            return\n\ndef reset(self, edges):\n        \n        self.edges = edges\n        self.bins = self.make_bins()\n\ndef scale(self, edges, value):\n        '''"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        ind = indices[-1]\n        if ind < 0:\n            return\n\n        try:\n            subarr[ind] += weight\n        except IndexError:\n            return\n\ndef reset(self, edges):\n        \n        self.edges = edges\n        self.bins = self.make_bins()\n\ndef scale(self, edges, value):\n        '''", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = seq if isinstance(seq, (list, tuple, str, bytes)) else [seq]\n    sequence_type = type(sequence)\n    return sequence, sequence_type\n\n\nclass Split(object):\n    \"\"\"Split data flow and run analysis in parallel.\"\"\"\n\n    def __init__(self, seqs, bufsize=1000, copy_buf=True):\n        \"\"\"*seqs* must be a list of Sequence, Source, FillComputeSeq\n        or FillRequestSeq sequences.\n        If *seqs* is empty, *Split* acts as an empty *Sequence* and\n        yields all values it receives.\n\n        *bufsize* is the size of the buffer for the input flow.\n        If *bufsize* is ``None``,\n        whole input flow is materialized in the"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = seq if isinstance(seq, (list, tuple, str, bytes)) else [seq]\n    sequence_type = type(sequence)\n    return sequence, sequence_type\n\n\nclass Split(object):\n    \"\"\"Split data flow and run analysis in parallel.\"\"\"\n\n    def __init__(self, seqs, bufsize=1000, copy_buf=True):\n        \"\"\"*seqs* must be a list of Sequence, Source, FillComputeSeq\n        or FillRequestSeq sequences.\n        If *seqs* is empty, *Split* acts as an empty *Sequence* and\n        yields all values it receives.\n\n        *bufsize* is the size of the buffer for the input flow.\n        If *bufsize* is ``None``,\n        whole input flow is materialized in the", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["\ndef scale(self, other=None, recompute=False):\n        \n        if other is None:\n            if self._scale is None or recompute:\n                self._scale = integral(unify_1_md(self.bins, self.edges))\n        else:\n            if self._scale is None or recompute:\n                self._scale = other\n            else:\n                self.edges = scale(self.edges, other, recompute)\n                self._scale = other\n\nclass histogram(object):\n    '''Histogram of data.\n\n    Histograms are implemented as lists of ``tuple``s.\n    Each tuple contains a value and the number of points\n    with that value.\n    '''\n\n    def __init__(self, bins, values=[], weights=[], scale=None, recompute=False):\n        '''Initialize histogram.\n\n        The values and"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None, recompute=False):\n        \n        if other is None:\n            if self._scale is None or recompute:\n                self._scale = integral(unify_1_md(self.bins, self.edges))\n        else:\n            if self._scale is None or recompute:\n                self._scale = other\n            else:\n                self.edges = scale(self.edges, other, recompute)\n                self._scale = other\n\nclass histogram(object):\n    '''Histogram of data.\n\n    Histograms are implemented as lists of ``tuple``s.\n    Each tuple contains a value and the number of points\n    with that value.\n    '''\n\n    def __init__(self, bins, values=[], weights=[], scale=None, recompute=False):\n        '''Initialize histogram.\n\n        The values and", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["\ndef scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        else:\n            if not self._scale:\n                raise LenaValueError(\n                    \"A graph must have a scale to be rescaled.\")\n            else:\n                self._scale = other\n\ndef get_err_indices(self, field_names, indices):\n    \"\"\"Get the error indices for the given field names.\n\n    Parameters\n    ----------\n    field_names : list of str\n        The field names for which to compute error indices.\n    indices : list of list of int\n        The indices to compute error indices from.\n\n    Returns\n    -------\n    list of list of int\n        The error indices.\n    \"\"\"\n    if indices:\n        for idx in indices:\n            for field in field_names:\n                if field in self.field_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        else:\n            if not self._scale:\n                raise LenaValueError(\n                    \"A graph must have a scale to be rescaled.\")\n            else:\n                self._scale = other\n\ndef get_err_indices(self, field_names, indices):\n    \"\"\"Get the error indices for the given field names.\n\n    Parameters\n    ----------\n    field_names : list of str\n        The field names for which to compute error indices.\n    indices : list of list of int\n        The indices to compute error indices from.\n\n    Returns\n    -------\n    list of list of int\n        The error indices.\n    \"\"\"\n    if indices:\n        for idx in indices:\n            for field in field_names:\n                if field in self.field_", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = Graph(scale=scale)\n    for bin_ in hist:\n        if make_value:\n            value = make_value(bin_)\n        else:\n            value = bin_\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = Graph(scale=scale)\n    for bin_ in hist:\n        if make_value:\n            value = make_value(bin_)\n        else:\n            value = bin_\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return fun"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return functools.reduce(operator.add, (value.value for key, value in nodes))\n\n\ndef deep_merge_nodes(nodes):\n    \n    return fun", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(DEFAULT_DESTINATION_CONFIG_FILENAME),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser(description='Generate a sample borgmatic YAML configuration file.')\n    parser.add_argument(\n        '-s',\n        '--source',\n        dest='source_filename',\n        help='Optional YAML configuration file to merge into the generated configuration, useful for upgrading your configuration',\n    )\n    parser.add_argument(\n        '-d',\n        '--destination',\n        dest='destination_filename',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='Destination YAML configuration file, default: {}'.format(DEFAULT_DESTINATION_CONFIG_FILENAME),\n    )\n    parser.add_argument(\n        '--overwrite',\n        default=False,\n        action='store_true',\n        help", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-completion 2> /dev/null)\"',\n            '    if [[ \"$this_script\" = \"$installed_script\" ]]; then',\n            '        return 0',\n            '    fi',\n           "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-completion 2> /dev/null)\"',\n            '    if [[ \"$this_script\" = \"$installed_script\" ]]; then',\n            '        return 0',\n            '    fi',\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(unparsed_arguments, subparsers.choices)\n    arguments['global'] = parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if 'list' in arguments and 'info' in arguments and arguments['list'].json and arguments['info'].json:\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(unparsed_arguments, subparsers.choices)\n    arguments['global'] = parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes option has been replaced with exclude_patterns in configuration'\n        )\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if 'list' in arguments and 'info' in arguments and arguments['list'].json and arguments['info'].json:\n        raise ValueError('With the --json option, list and info actions cannot be used together')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == 'always':\n        return None\n    try:\n        return timedelta(**parse_frequency_args(frequency))\n    except Exception as exc:\n        raise ValueError(f'Invalid frequency: {exc}') from exc\n\n\ndef parse_frequency_args(frequency):\n    \n    return {'days': int(frequency_to_days(frequency)), 'weeks': int(frequency_to_weeks(frequency))}\n\n\ndef frequency_to_days(frequency):\n    \n    if frequency.lower() == 'daily':\n        return 1\n    if frequency"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == 'always':\n        return None\n    try:\n        return timedelta(**parse_frequency_args(frequency))\n    except Exception as exc:\n        raise ValueError(f'Invalid frequency: {exc}') from exc\n\n\ndef parse_frequency_args(frequency):\n    \n    return {'days': int(frequency_to_days(frequency)), 'weeks': int(frequency_to_weeks(frequency))}\n\n\ndef frequency_to_days(frequency):\n    \n    if frequency.lower() == 'daily':\n        return 1\n    if frequency", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )\n\nimport logging\n\nimport click\n\nimport borgmatic.config\nimport borgmatic.logger\nfrom borgmatic.cli.flags import parse_flags\nfrom borgmatic.cli.formatting import format_backups\nfrom borgmatic.cli.formatting import format_config\nfrom borgmatic.cli.formatting import format_repository\nfrom borgmatic.cli.formatting import format_usage\nfrom borg"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )\n\nimport logging\n\nimport click\n\nimport borgmatic.config\nimport borgmatic.logger\nfrom borgmatic.cli.flags import parse_flags\nfrom borgmatic.cli.formatting import format_backups\nfrom borgmatic.cli.formatting import format_config\nfrom borgmatic.cli.formatting import format_repository\nfrom borgmatic.cli.formatting import format_usage\nfrom borg", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(\n            f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.'\n        )\n\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n\n\ndef set_values(config, keys, value):\n    '''Given a hierarchy of configuration dicts, a sequence of parsed key strings, and a string value,\n    descend into the hierarchy based on the keys to set the value into the right place.\n    '''\n    if not keys:\n        return\n\n    first_key = keys[0]\n    if len(keys) == 1:\n        config[first_key] = value\n        return\n\n    if first_key not"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(\n            f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.'\n        )\n\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n\n\ndef set_values(config, keys, value):\n    '''Given a hierarchy of configuration dicts, a sequence of parsed key strings, and a string value,\n    descend into the hierarchy based on the keys to set the value into the right place.\n    '''\n    if not keys:\n        return\n\n    first_key = keys[0]\n    if len(keys) == 1:\n        config[first_key] = value\n        return\n\n    if first_key not", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    \n    if isinstance(item, str):\n        return _VARIABLE_PATTERN.sub(_resolve_string, item)\n    if isinstance(item, list):\n        for i, sub"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    \n    if isinstance(item, str):\n        return _VARIABLE_PATTERN.sub(_resolve_string, item)\n    if isinstance(item, list):\n        for i, sub", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [\n                logging.makeLogRecord(\n                    dict(\n                        levelno=logging.DEBUG,\n                        levelname='DEBUG',\n                        msg=f'{config_filename}: Loading configuration file',\n                    )\n                ),\n            ]\n        )\n        try:\n            configs[config_filename], parse_logs = parse_configuration(\n                config_filename,\n                schema_filename(),\n                overrides,\n                resolve_env,\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [\n                logging.makeLogRecord(\n                    dict(\n                        levelno=logging.DEBUG,\n                        levelname='DEBUG',\n                        msg=f'{config_filename}: Loading configuration file',\n                    )\n                ),\n            ]\n        )\n        try:\n            configs[config_filename], parse_logs = parse_configuration(\n                config_filename,\n                schema_filename(),\n                overrides,\n                resolve_env,\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs.", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url\n\n\ndef _set_default(obj, key, val, required=True):\n    '''\n    Sets val to obj.key if val is None and obj.key is set.\n    Raises Attribute error is neither are set and required is True.\n\n    :returns: val\n    '''\n    if not val:\n        val = getattr(obj, key, None)\n    if not val and required:\n        msg = f'{key} is not set'\n        raise AttributeError(msg)\n    return val\n\n\nclass SEEDBaseClient(JSONAPI):\n    \"\"\"Interact with SEED API.\n\n    Raises a SE"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url\n\n\ndef _set_default(obj, key, val, required=True):\n    '''\n    Sets val to obj.key if val is None and obj.key is set.\n    Raises Attribute error is neither are set and required is True.\n\n    :returns: val\n    '''\n    if not val:\n        val = getattr(obj, key, None)\n    if not val and required:\n        msg = f'{key} is not set'\n        raise AttributeError(msg)\n    return val\n\n\nclass SEEDBaseClient(JSONAPI):\n    \"\"\"Interact with SEED API.\n\n    Raises a SE", "is_pass": false, "return_code": 1}]}
