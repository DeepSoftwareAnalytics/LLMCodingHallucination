{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    '''insert"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    \n\ndef dict_insert(dic, val, key, *keys):\n    '''insert", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return ListOfFileNames(\"ListOfFileNames\", settings_dirs, None,\n                           spec_option)\n\n\nclass ListOfFileNames(ComplexType):\n    \"\"\"The list of file names option. \"\"\"\n\n    def __init__(self, name, settings_dirs, default, spec_option):\n        super(ListOfFileNames, self).__init__(name, settings_dirs, default,\n                                              spec_option)\n\n    def resolve(self, value):\n        \"\"\"Returns the argument value. \"\"\"\n        return value\n\n    def get_allowed_values(self):\n        \"\"\"Gets the list of possible values for the complex type.\n\n        Should be overridden in the subclasses.\n        \"\"\"\n        return []\n\n\nclass Value(ComplexType):\n    \"\"\"The simple nested value option. \"\"\"\n\n    def resolve(self, value):"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return ListOfFileNames(\"ListOfFileNames\", settings_dirs, None,\n                           spec_option)\n\n\nclass ListOfFileNames(ComplexType):\n    \"\"\"The list of file names option. \"\"\"\n\n    def __init__(self, name, settings_dirs, default, spec_option):\n        super(ListOfFileNames, self).__init__(name, settings_dirs, default,\n                                              spec_option)\n\n    def resolve(self, value):\n        \"\"\"Returns the argument value. \"\"\"\n        return value\n\n    def get_allowed_values(self):\n        \"\"\"Gets the list of possible values for the complex type.\n\n        Should be overridden in the subclasses.\n        \"\"\"\n        return []\n\n\nclass Value(ComplexType):\n    \"\"\"The simple nested value option. \"\"\"\n\n    def resolve(self, value):", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["\n@classmethod\n    def ansible_config_manager(cls):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def ansible_config_manager(cls):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["\n@classmethod\n    def workspace_manager(cls):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def workspace_manager(cls):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["\n@classmethod\n    def plugins_manager(cls):\n        \n\n@classmethod\n    def execution_logger_manager(cls):\n        \n\n@classmethod\n    def ansible_config_manager(cls):\n        \n\n@classmethod\n    def workspace_manager(cls):\n        \n\n@classmethod\n    def register_service(cls, service_name, service_instance):\n        \n\n@classmethod\n    def _get_service(cls, service_name):\n        \n\n@classmethod\n    def _get_service_by_name(cls, service_name):\n        \n\n@classmethod\n    def _get_service_by_interface(cls, service_interface):\n        \n\n@classmethod\n    def _check_service(cls, service):\n        '''Checks"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def plugins_manager(cls):\n        \n\n@classmethod\n    def execution_logger_manager(cls):\n        \n\n@classmethod\n    def ansible_config_manager(cls):\n        \n\n@classmethod\n    def workspace_manager(cls):\n        \n\n@classmethod\n    def register_service(cls, service_name, service_instance):\n        \n\n@classmethod\n    def _get_service(cls, service_name):\n        \n\n@classmethod\n    def _get_service_by_name(cls, service_name):\n        \n\n@classmethod\n    def _get_service_by_interface(cls, service_interface):\n        \n\n@classmethod\n    def _check_service(cls, service):\n        '''Checks", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file="], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n\n@classmethod\n    def validate_from_file(cls, spec_file=", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n\n@classmethod\ndef validate_from_file(cls, yaml_file=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_content(cls, file_content=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_file(cls, yaml_file=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_content(cls, file_content=None):\n    \n    raise NotImplementedError\n\n@classmethod\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n\n@classmethod\ndef validate_from_file(cls, yaml_file=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_content(cls, file_content=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_file(cls, yaml_file=None):\n    \n    raise NotImplementedError\n\n@classmethod\ndef validate_from_content(cls, file_content=None):\n    \n    raise NotImplementedError\n\n@classmethod\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["\ndef _include_groups(self, parser_dict):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _include_groups(self, parser_dict):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["\ndef get_spec_defaults(self):\n        \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_spec_defaults(self):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["\ndef get_deprecated_args(self):\n        \n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_deprecated_args(self):\n        \n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.get(name.upper().replace('-', '_'))\n\ndef get_deprecated_args(self):\n        \"\"\"Returning dict with options which deprecate others. \"\"\"\n\ndef get_env_option(name):\n        \"\"\"Try get \"\"\"\n        return os.environ.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["\ndef get_parser_option_specs(self, command_name):\n        \n\ndef get_option_spec(self, command_name, argument_name):\n        \"\"\"Gets the specification for the specified option name. \"\"\"\n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        \"\"\"Gets the option state.\n\n        :param command_name: The command name\n        \"\"\"\n\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            res = OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get(command_name, {}):\n            res = OptionState['NOT_SET']\n        elif option_spec['default'] == args.get(command_name)."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_parser_option_specs(self, command_name):\n        \n\ndef get_option_spec(self, command_name, argument_name):\n        \"\"\"Gets the specification for the specified option name. \"\"\"\n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        \"\"\"Gets the option state.\n\n        :param command_name: The command name\n        \"\"\"\n\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            res = OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get(command_name, {}):\n            res = OptionState['NOT_SET']\n        elif option_spec['default'] == args.get(command_name).", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        \n\n        option_spec = self."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\ndef get_option_state(self, command_name, option_name, args):\n        \n\n        option_spec = self.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["\ndef get_silent_args(self, args):\n        \n\ndef get_nested_custom_and_control_args(self, args):\n        '''Split input arguments to control nested and custom.\n\n        Controls arguments: control the IR behavior. These arguments\n            will not be put into the spec"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_silent_args(self, args):\n        \n\ndef get_nested_custom_and_control_args(self, args):\n        '''Split input arguments to control nested and custom.\n\n        Controls arguments: control the IR behavior. These arguments\n            will not be put into the spec", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["\ndef validate_requires_args(self, args):\n        \n\nsilent_args = self.get_silent_args(args)\n\ndef validate_parser(parser_name, expected_options, parser_args):\n    \n\n    result = collections.defaultdict(list)\n    condition_req_args = self._get_conditionally_required_args(\n        parser_name, expected_options, args)\n\n    for option in expected_options:\n        name = option['name']\n\n        if (option.get('required', False) and\n            name not in parser_args or\n            option['name'] in condition_req_args) and \\\n                name not in silent_args:\n            result[parser_name].append(name)\n\n    return result\n\nres = {}\nfor command_data in self.spec_helper.iterate_parsers():\n    parser_name = command_data['command']"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_requires_args(self, args):\n        \n\nsilent_args = self.get_silent_args(args)\n\ndef validate_parser(parser_name, expected_options, parser_args):\n    \n\n    result = collections.defaultdict(list)\n    condition_req_args = self._get_conditionally_required_args(\n        parser_name, expected_options, args)\n\n    for option in expected_options:\n        name = option['name']\n\n        if (option.get('required', False) and\n            name not in parser_args or\n            option['name'] in condition_req_args) and \\\n                name not in silent_args:\n            result[parser_name].append(name)\n\n    return result\n\nres = {}\nfor command_data in self.spec_helper.iterate_parsers():\n    parser_name = command_data['command']", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["\ndef validate_length_args(self, args):\n        \n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_length_args(self, args):\n        \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["\ndef validate_choices_args(self, args):\n        \n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if 'choices' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    choices = spec_option['choices']\n                    option_value = parser_dict[option_name]\n                    if option_value not in choices:\n        if invalid_options:\n            raise exceptions.IRInvalidChoice"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_choices_args(self, args):\n        \n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if 'choices' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    choices = spec_option['choices']\n                    option_value = parser_dict[option_name]\n                    if option_value not in choices:\n        if invalid_options:\n            raise exceptions.IRInvalidChoice", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["\ndef validate_min_max_args(self, args):\n        \n\nif minimum <= args <= maximum:\n        return True\nelse:\n    return False\n\n\ndef get_silent_args(self, args):\n    \n\n    silent_args_names = []\n    for (parser_name, parser_dict, arg_name, arg_value,\n         arg_spec) in self._iterate_received_arguments(args):\n        if arg_spec and'silent' in arg_spec and \\\n                self.spec_helper.get_option_state(\n                    parser_name,\n                    arg_name,\n\ndef validate_min_max_args(self, args):\n        \n\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_min_max_args(self, args):\n        \n\nif minimum <= args <= maximum:\n        return True\nelse:\n    return False\n\n\ndef get_silent_args(self, args):\n    \n\n    silent_args_names = []\n    for (parser_name, parser_dict, arg_name, arg_value,\n         arg_spec) in self._iterate_received_arguments(args):\n        if arg_spec and'silent' in arg_spec and \\\n                self.spec_helper.get_option_state(\n                    parser_name,\n                    arg_name,\n\ndef validate_min_max_args(self, args):\n        \n\n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["\ndef get_nested_custom_and_control_args(self, args):\n        \n        else:\n            nested_args[arg] = args[arg]\n        \n        return control_args, nested_args\n\n    def _iterate_received_arguments(self, args):\n        \"\"\"Iterator helper method over all the received arguments\n\n        :return: yields tuple:\n            (spec name, spec dict,\n             argument name, argument value, argument spec)\n        \"\"\"\n        for spec_parser in self.spec_helper.iterate_parsers():"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nested_custom_and_control_args(self, args):\n        \n        else:\n            nested_args[arg] = args[arg]\n        \n        return control_args, nested_args\n\n    def _iterate_received_arguments(self, args):\n        \"\"\"Iterator helper method over all the received arguments\n\n        :return: yields tuple:\n            (spec name, spec dict,\n             argument name, argument value, argument spec)\n        \"\"\"\n        for spec_parser in self.spec_helper.iterate_parsers():", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        \"\"\"Extend ``vars_dict`` with ``extra-vars``\n\n        :param vars_dict: Dictionary to merge extra-vars into\n        :param extra_vars: List of extra-vars\n        \"\"\"\n        extra_vars = extra_vars or []\n        for extra_var in extra_vars:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:]) as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n\n                dict_utils.dict_merge(\n                    vars_dict,\n                    loaded_yml,\n                    conflict_resolver=dict_utils.ConflictResolver.\n                    unique_append_list_resolver)\n\n            else:\n                if '=' not in"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        \"\"\"Extend ``vars_dict`` with ``extra-vars``\n\n        :param vars_dict: Dictionary to merge extra-vars into\n        :param extra_vars: List of extra-vars\n        \"\"\"\n        extra_vars = extra_vars or []\n        for extra_var in extra_vars:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:]) as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n\n                dict_utils.dict_merge(\n                    vars_dict,\n                    loaded_yml,\n                    conflict_resolver=dict_utils.ConflictResolver.\n                    unique_append_list_resolver)\n\n            else:\n                if '=' not in", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    \n    pass\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \"\"\"Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list  of command line arguments\n    :param ir_workspace: An Infrared Workspace object represents the active\n     workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    \n    pass\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \"\"\"Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list  of command line arguments\n    :param ir_workspace: An Infrared Workspace object represents the active\n     workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n\n\n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n\n\n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                    file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    spec_yaml = yaml.safe_load(open(os.path.join(plugin_dir, PLUGIN_SPEC)))\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    spec_yaml = yaml.safe_load(open(os.path.join(plugin_dir, PLUGIN_SPEC)))\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        name=plugin_name,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["\ndef inject_config(self):\n        \n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n   "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef inject_config(self):\n        \n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\n\ndef inject_config(self):\n    \n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["\ndef extend_cli(self, root_subparsers):\n        \n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n\ndef extend_cli(self, root_subparsers):\n    \n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef extend_cli(self, root_subparsers):\n        \n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n\ndef extend_cli(self, root_subparsers):\n    \n\ndef spec_handler(self, parser, args):\n    '''The main method for the spec.\n\n    This method will be called by the spec managers once the subcommand\n    with the spec name is called from cli.\n    :param parser: argparse object\n    :param args: dict, input arguments as parsed by the parser.\n    :return: exit code to be propagated out.\n    '''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["\ndef subclasses(cls):\n    \n\ndef _get_path_and_filename(self, download):\n    current_directory = Path.cwd()\n    if download.filename is None:\n        filename = download.name\n    else:\n        filename = download.filename\n    if download.directory is not None:\n        path = Path(download.directory)\n    else:\n        path = current_directory\n    return path, filename\n\ndef is_null(value):\n    return value is None\n\ndef is_true(value):\n    return value is True\n\ndef is_false(value):\n    return value is False\n\ndef is_empty(value):\n    return value == \"\" or value == [] or value == {}\n\ndef _get_import_fields(fields, exclude):\n    if fields is None:\n        fields = []\n    elif fields is True:\n        fields = []\n    elif fields is False:\n        fields = []\n    else:\n        fields"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef subclasses(cls):\n    \n\ndef _get_path_and_filename(self, download):\n    current_directory = Path.cwd()\n    if download.filename is None:\n        filename = download.name\n    else:\n        filename = download.filename\n    if download.directory is not None:\n        path = Path(download.directory)\n    else:\n        path = current_directory\n    return path, filename\n\ndef is_null(value):\n    return value is None\n\ndef is_true(value):\n    return value is True\n\ndef is_false(value):\n    return value is False\n\ndef is_empty(value):\n    return value == \"\" or value == [] or value == {}\n\ndef _get_import_fields(fields, exclude):\n    if fields is None:\n        fields = []\n    elif fields is True:\n        fields = []\n    elif fields is False:\n        fields = []\n    else:\n        fields", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    roots.update(\n        set(graph.objects(subject=None, predicate=prop))\n        - set(graph.predicates(object=None, predicate=prop))\n    )\n    for root in roots:\n        roots.update(find_roots(graph, prop, roots))\n    return roots\n\n\ndef get_tree(\n    graph: \"Graph\",\n    root: \"Node\",\n    prop: \"URIRef\",\n    dir: str = \"both\",\n    visited: Optional[Set[\"Node\"]] = None,\n) -> Tuple[\"Node\", List[\"Node\"]]:\n    \n    if visited is None:\n        visited = set()\n    visited.add(root)\n    result ="], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    roots.update(\n        set(graph.objects(subject=None, predicate=prop))\n        - set(graph.predicates(object=None, predicate=prop))\n    )\n    for root in roots:\n        roots.update(find_roots(graph, prop, roots))\n    return roots\n\n\ndef get_tree(\n    graph: \"Graph\",\n    root: \"Node\",\n    prop: \"URIRef\",\n    dir: str = \"both\",\n    visited: Optional[Set[\"Node\"]] = None,\n) -> Tuple[\"Node\", List[\"Node\"]]:\n    \n    if visited is None:\n        visited = set()\n    visited.add(root)\n    result =", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \"\"\"\n    Checks if the os is windows\n\n    :return: True is windows\n    :rtype: bool\n    \"\"\"\n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \"\"\"\n    Checks if the os is linux\n\n    :return: True is linux\n    :rtype: bool\n    \"\"\"\n    try:\n        content = readfile('/etc/os-release')\n        return platform.system() == \"Linux\" and \"raspbian\" not in content\n    except:\n        return False\n\n\ndef os_is_ubuntu():\n    \"\"\"\n    Checks if the os is ubuntu\n\n    :return: True is ubuntu\n    :rtype: bool\n    \"\"\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \"\"\"\n    Checks if the os is windows\n\n    :return: True is windows\n    :rtype: bool\n    \"\"\"\n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \"\"\"\n    Checks if the os is linux\n\n    :return: True is linux\n    :rtype: bool\n    \"\"\"\n    try:\n        content = readfile('/etc/os-release')\n        return platform.system() == \"Linux\" and \"raspbian\" not in content\n    except:\n        return False\n\n\ndef os_is_ubuntu():\n    \"\"\"\n    Checks if the os is ubuntu\n\n    :return: True is ubuntu\n    :rtype: bool\n    \"\"\"", "is_pass": true, "return_code": 0}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["\ndef split(s, platform='this'):\n    "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef split(s, platform='this'):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["\ndef is_local(host):\n    \n    if host == \"localhost\":\n        return True\n    return False\n\ndef get_host_list(hosts):\n    \"\"\"\n    Get a list of hosts in the format 'user@host'\n    :param hosts:\n    :return:\n    \"\"\"\n    host_list = []\n    for host in hosts:\n        if '@' in host:\n            host_list.append(host)\n        else:\n            host_list.append(f\"{default_username}@{host}\")\n    return host_list\n\ndef"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_local(host):\n    \n    if host == \"localhost\":\n        return True\n    return False\n\ndef get_host_list(hosts):\n    \"\"\"\n    Get a list of hosts in the format 'user@host'\n    :param hosts:\n    :return:\n    \"\"\"\n    host_list = []\n    for host in hosts:\n        if '@' in host:\n            host_list.append(host)\n        else:\n            host_list.append(f\"{default_username}@{host}\")\n    return host_list\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["\ndef is_gitbash():\n    \n    return False\n/cloudmesh/common/FlatDict.py\nimport collections\n\nclass FlatDict(dict):\n    \"\"\"\n    FlatDict is a dictionary that is able to flatten a nested dictionary\n    into a single dictionary. This is useful when the data needs to be\n    serialized and sent to the cloud.\n\n    For example, the following dictionary:\n\n   .. code-block:: python\n\n        {\n            \"a\": {\n                \"b\": 1,\n                \"c\": 2\n            },\n            \"d\": {\n                \"e\": 3,\n                \"f\": 4\n            }\n        }\n\n    Would be flattened into:\n\n   .. code-"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_gitbash():\n    \n    return False\n/cloudmesh/common/FlatDict.py\nimport collections\n\nclass FlatDict(dict):\n    \"\"\"\n    FlatDict is a dictionary that is able to flatten a nested dictionary\n    into a single dictionary. This is useful when the data needs to be\n    serialized and sent to the cloud.\n\n    For example, the following dictionary:\n\n   .. code-block:: python\n\n        {\n            \"a\": {\n                \"b\": 1,\n                \"c\": 2\n            },\n            \"d\": {\n                \"e\": 3,\n                \"f\": 4\n            }\n        }\n\n    Would be flattened into:\n\n   .. code-", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["\ndef oneline(script, seperator=\" && \"):\n        \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef oneline(script, seperator=\" && \"):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["\ndef replace_dots(value, arg):\n    \n\treturn value.replace(\".\", arg)\n\ndef replace_slashes(value, arg):\n    \n\treturn value.replace(\"/\", arg)\n\ndef replace_special_characters(value, arg):\n    \n\treturn value.replace(\":\", arg).replace(\"(\", arg).replace(\")\", arg).replace(\"'\", arg).replace(\"\\\"\", arg).replace(\" \", arg).replace(\"_\", arg).replace(\"-\", arg).replace(\".\", arg).replace(\"/\", arg)\n\ndef remove_prefix(value, prefix):\n\tif isinstance(value, str):\n\t\treturn value[prefix:]\n\treturn value\n\ndef remove_suffix(value, suffix):\n\tif isinstance(value, str):\n\t\treturn value[:-suffix]\n\treturn value\n\ndef remove"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef replace_dots(value, arg):\n    \n\treturn value.replace(\".\", arg)\n\ndef replace_slashes(value, arg):\n    \n\treturn value.replace(\"/\", arg)\n\ndef replace_special_characters(value, arg):\n    \n\treturn value.replace(\":\", arg).replace(\"(\", arg).replace(\")\", arg).replace(\"'\", arg).replace(\"\\\"\", arg).replace(\" \", arg).replace(\"_\", arg).replace(\"-\", arg).replace(\".\", arg).replace(\"/\", arg)\n\ndef remove_prefix(value, prefix):\n\tif isinstance(value, str):\n\t\treturn value[prefix:]\n\treturn value\n\ndef remove_suffix(value, suffix):\n\tif isinstance(value, str):\n\t\treturn value[:-suffix]\n\treturn value\n\ndef remove", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["\ndef is_ipv4(target):\n    \n...\n\ndef is_ipv6(target):\n    \n...\n\nclass SocketError(Exception):\n    pass\n\nclass SocketTimeout(Exception):\n    pass\n\nclass SocketClosed(Exception):\n    pass\n\ndef get_random_port(min_port=10000, max_port=65535):\n    \n...\n\ndef send_to_ip_port(ip, port, data, timeout=10):\n    \n...\n\ndef read_from_ip_port(ip, port, length, timeout=10):\n    \n...\n\ndef check_port(ip, port, timeout=10"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef is_ipv4(target):\n    \n...\n\ndef is_ipv6(target):\n    \n...\n\nclass SocketError(Exception):\n    pass\n\nclass SocketTimeout(Exception):\n    pass\n\nclass SocketClosed(Exception):\n    pass\n\ndef get_random_port(min_port=10000, max_port=65535):\n    \n...\n\ndef send_to_ip_port(ip, port, data, timeout=10):\n    \n...\n\ndef read_from_ip_port(ip, port, length, timeout=10):\n    \n...\n\ndef check_port(ip, port, timeout=10", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\tif isinstance(params, Mapping):\n\t\tif self.in_style == \"named\":\n\t\t\treturn self.convert_named(sql, params)\n\t\treturn self.convert_ordinal(sql, params)\n\treturn self.convert_positional(sql, params)\n\n\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[str, Any]], List[Sequence[Any]]]]:\n\t\t\n\tif isinstance(many_params, Mapping):\n\t\tif self.in_style == \"named\":\n\t\t\treturn self.convert_named_many(sql, many_params)\n\t"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\tif isinstance(params, Mapping):\n\t\tif self.in_style == \"named\":\n\t\t\treturn self.convert_named(sql, params)\n\t\treturn self.convert_ordinal(sql, params)\n\treturn self.convert_positional(sql, params)\n\n\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[str, Any]], List[Sequence[Any]]]]:\n\t\t\n\tif isinstance(many_params, Mapping):\n\t\tif self.in_style == \"named\":\n\t\t\treturn self.convert_named_many(sql, many_params)\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\tsql = self._check_sql(sql)\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{!r} is not a sequence or mapping.\".format(first_params))\n\t\treturn self._converter.convert_many(sql, many_params)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\t\tsql = self._check_sql(sql)\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{!r} is not a sequence or mapping.\".format(first_params))\n\t\treturn self._converter.convert_many(sql, many_params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["\ndef _create_in_regex(self) -> Pattern:\n\t\t"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_in_regex(self) -> Pattern:\n\t\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\treturn _converting._Converter(\n\t\tescape_char=self.escape_char,\n\t\texpand_tuples=self.expand_tuples,\n\t\tin_obj=self.in_obj,\n\t\tin_regex=self.__in_regex,\n\t\tin_style=self.in_style,\n\t\tout_obj=self.out_obj,\n\t\tout_style=self.out_style,\n\t)\n\ndef _create_in_regex(\n\t\tescape_char: str,\n\t\tin_obj: _styles.Style,\n\t\tout_obj: _styles.Style,\n) -> Pattern:\n\t\t'''\n\t\tCreate the in-style parameter regular expression.\n\n\t\t*escape_char* (:class:`str` or :data:`None`) is the escape character\n\t\tsed to prevent matching an in-style parameter.\n\n\t\t*in"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\treturn _converting._Converter(\n\t\tescape_char=self.escape_char,\n\t\texpand_tuples=self.expand_tuples,\n\t\tin_obj=self.in_obj,\n\t\tin_regex=self.__in_regex,\n\t\tin_style=self.in_style,\n\t\tout_obj=self.out_obj,\n\t\tout_style=self.out_style,\n\t)\n\ndef _create_in_regex(\n\t\tescape_char: str,\n\t\tin_obj: _styles.Style,\n\t\tout_obj: _styles.Style,\n) -> Pattern:\n\t\t'''\n\t\tCreate the in-style parameter regular expression.\n\n\t\t*escape_char* (:class:`str` or :data:`None`) is the escape character\n\t\tsed to prevent matching an in-style parameter.\n\n\t\t*in", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["\ndef cached(cache, key=hashkey, lock=None):\n    \n\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n\ndef cached_property(cache, key=hashkey, lock=None):\n    \n\ndef cached_class(cache, key=hashkey, lock=None):\n    \n\ndef cached_class_method(cache, key=hashkey, lock=None):\n    \n\ndef cached_method(cache, key=hashkey, lock=None):\n    \n\ndef"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef cached(cache, key=hashkey, lock=None):\n    \n\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n\ndef cached_property(cache, key=hashkey, lock=None):\n    \n\ndef cached_class(cache, key=hashkey, lock=None):\n    \n\ndef cached_class_method(cache, key=hashkey, lock=None):\n    \n\ndef cached_method(cache, key=hashkey, lock=None):\n    \n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(lru_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info().misses == 0 and cached.cache_info().maxsize == 10 and cached.cache_info"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(lru_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info().misses == 0 and cached.cache_info().maxsize == 10 and cached.cache_info", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["\ndef mru_cache(maxsize=128, typed=False):\n    \n    if callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(RRCache(maxsize, choice), typed)\n\n\ndef lru_cache(maxsize="], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef mru_cache(maxsize=128, typed=False):\n    \n    if callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(RRCache(maxsize, choice), typed)\n\n\ndef lru_cache(maxsize=", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["\ndef lru_cache(maxsize=128, typed=False):\n    \n    return _cache(LRUCache(maxsize), typed)\n\n\ndef mru_cache(maxsize=128, typed=False):\n    \n    return _cache(MRUCache(maxsize), typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lru_cache(maxsize=128, typed=False):\n    \n    return _cache(LRUCache(maxsize), typed)\n\n\ndef mru_cache(maxsize=128, typed=False):\n    \n    return _cache(MRUCache(maxsize), typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["\ndef lfu_cache(maxsize=128, typed=False):\n    \n    return _cache(LFUCache(128), typed)(maxsize)\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lfu_cache(maxsize=128, typed=False):\n    \n    return _cache(LFUCache(128), typed)(maxsize)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["\ndef popitem(self):\n        \n\n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair least frequently used.\"\"\"\n\n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n\n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\ndef popitem(self):\n        \"\"\"Remove and return the `(key, value)` pair least frequently used.\"\"\"\n\n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["\ndef setdefault(self, key, default=None):\n        \n        if key in self.__dict__:\n            return self.__dict__[key]\n        self.__dict__[key] = default\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef setdefault(self, key, default=None):\n        \n        if key in self.__dict__:\n            return self.__dict__[key]\n        self.__dict__[key] = default\n        return default\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["\ndef get(self, key, default=None):\n        \n\n    def setdefault(self, key, default=None):\n        \n        if key in self:\n            value = self[key]\n        else:\n            self[key] = value = default\n        return value\n\n    @property\n    def maxsize(self):\n        \n        return self.__maxsize\n\n    @property\n    def currsize(self):\n        \n        return self.__currsize\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get(self, key, default=None):\n        \n\n    def setdefault(self, key, default=None):\n        \n        if key in self:\n            value = self[key]\n        else:\n            self[key] = value = default\n        return value\n\n    @property\n    def maxsize(self):\n        \n        return self.__maxsize\n\n    @property\n    def currsize(self):\n        \n        return self.__currsize\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["\ndef pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n    def get(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def setdefault(self, key, default=None):\n        '''D.setdefault"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n    def get(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def setdefault(self, key, default=None):\n        '''D.setdefault", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["\ndef popitem(self):\n        \n        temp_key = self.__counter.most_common(1)[0][0]\n        return (temp_key, self.pop(temp_key))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        temp_key = self.__counter.most_common(1)[0][0]\n        return (temp_key, self.pop(temp_key))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["\ndef popitem(self):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["\ndef popitem(self):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["\ndef popitem(self):\n        \n\ndef popitem(self):\n        \n\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem(self):\n        \n        try:\n            key"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n\ndef popitem(self):\n        \n\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem(self):\n        \n        try:\n            key = self.__choice(list(self))\n        except IndexError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem(self):\n        \n        try:\n            key", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["\ndef _dump_string(self, obj, dumper=None):\n        \n\ndef _dump_stream(self, obj, stream, dumper=None):\n        \n\ndef _loader(self, stream):\n        '''Vault related tests will want to override this.\n\n        Vault cases should setup a AnsibleLoader that has the vault password.'''\n\ndef _get_file_contents(self, file_name):\n        '''TODO: the real _get_file_contents returns a bytestring, so we actually convert the\n        unicode/text it's created with to utf-8'''\n\ndef _load_from_file(self, path, cache=True, unsafe=False):\n        \n\ndef _path_exists(self, path):\n        \n\ndef _is_file(self, path):\n       "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _dump_string(self, obj, dumper=None):\n        \n\ndef _dump_stream(self, obj, stream, dumper=None):\n        \n\ndef _loader(self, stream):\n        '''Vault related tests will want to override this.\n\n        Vault cases should setup a AnsibleLoader that has the vault password.'''\n\ndef _get_file_contents(self, file_name):\n        '''TODO: the real _get_file_contents returns a bytestring, so we actually convert the\n        unicode/text it's created with to utf-8'''\n\ndef _load_from_file(self, path, cache=True, unsafe=False):\n        \n\ndef _path_exists(self, path):\n        \n\ndef _is_file(self, path):\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["\ndef pretty(self, indent=0, debug=False):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pretty(self, indent=0, debug=False):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["\ndef absorb(self, args):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef absorb(self, args):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["\ndef validate(self, path):\n        \n        return True if OCFL object at path or pyfs root, False otherwise.\n        return self.status_str()\n\n        return True\n\n        return self.status_str()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, path):\n        \n        return True if OCFL object at path or pyfs root, False otherwise.\n        return self.status_str()\n\n        return True\n\n        return self.status_str()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["\ndef status_str(self, prefix=''):\n        \n\n        s = ''\n        for message in sorted(self.messages):\n            s += prefix + message + '\\n'\n        return s[:-1]\n\ndef __str__(self):\n        \n\n        return self.status_str()\n\nif __name__ == \"__main__\":\n    isT = True\n\n    args1 = ['', '[[e9/ea/d1/32f80142-0149-4df3-a83"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n\n        s = ''\n        for message in sorted(self.messages):\n            s += prefix + message + '\\n'\n        return s[:-1]\n\ndef __str__(self):\n        \n\n        return self.status_str()\n\nif __name__ == \"__main__\":\n    isT = True\n\n    args1 = ['', '[[e9/ea/d1/32f80142-0149-4df3-a83", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["\ndef status_str(self, prefix=''):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["\ndef is_valid(self, identifier):\n  \n\ndef encode(self, identifier):\n  \n\ndef decode(self, identifier):\n  \n  \ndef identifier_to_path(self, identifier):\n  \n\ndef relative_path_to_identifier(self, path):\n  \n\ndef path_to_identifier(self, path, root=None):\n  \n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_valid(self, identifier):\n  \n\ndef encode(self, identifier):\n  \n\ndef decode(self, identifier):\n  \n  \ndef identifier_to_path(self, identifier):\n  \n\ndef relative_path_to_identifier(self, path):\n  \n\ndef path_to_identifier(self, path, root=None):\n  \n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["\ndef validate(self, inventory, extract_spec_version=False):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, inventory, extract_spec_version=False):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["\ndef validate_as_prior_version(self, prior):\n        \n\n\n        if not set(prior.all_versions) < set(self.all_versions):\n            return error('E066a', prior_head=prior.head)\n\n        for item in prior.items:\n            if item not in self.items:\n                return error('E067a',"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_as_prior_version(self, prior):\n        \n\n\n        if not set(prior.all_versions) < set(self.all_versions):\n            return error('E066a', prior_head=prior.head)\n\n        for item in prior.items:\n            if item not in self.items:\n                return error('E067a',", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\nclass InventoryValidator():\n    \"\"\"Class for OCFL Inventory Validator.\"\"\"\n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \"\"\"Initialize OCFL Inventory Validator.\"\"\"\n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\nclass InventoryValidator():\n    \"\"\"Class for OCFL Inventory Validator.\"\"\"\n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \"\"\"Initialize OCFL Inventory Validator.\"\"\"\n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["\ndef validate_fixity(self, fixity, manifest_files):\n        \n        fixity_files = {}\n        fixity_files_correct_format = []\n        if fixity is None:\n            fixity_files_correct_format = list(manifest_files.keys())\n            return fixity_files, fixity_files_correct_format\n        if not isinstance(fixity, dict):\n            self.error(\"E045\")\n            return fixity_files, fixity_files_correct_format\n        if 'type' not in fixity:\n            self.error(\"E046\")\n            return fixity_files, fixity_files_correct_format\n        if fix"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_fixity(self, fixity, manifest_files):\n        \n        fixity_files = {}\n        fixity_files_correct_format = []\n        if fixity is None:\n            fixity_files_correct_format = list(manifest_files.keys())\n            return fixity_files, fixity_files_correct_format\n        if not isinstance(fixity, dict):\n            self.error(\"E045\")\n            return fixity_files, fixity_files_correct_format\n        if 'type' not in fixity:\n            self.error(\"E046\")\n            return fixity_files, fixity_files_correct_format\n        if fix", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        self.log.clear_entries()\n        entries = []\n        for dirpath, dirnames, filenames in os.walk(self.root_dir):\n            for filename in filenames:\n                if filename.endswith(\".json\"):\n                    self.log.add_entry(ValidationEntry(\"OBJECT\", os.path.join(dirpath, filename)))\n                    self.num_objects += 1\n                    if validate_objects:\n                        try:\n                            self.validate_object(os.path.join(dirpath, filename))\n                            self.log.add_entry(ValidationEntry(\"OBJECT_VALID\", os.path.join(dirpath, filename)))\n                            self.good_objects += 1\n                        except StoreException as e:\n                            self.log.add_entry(ValidationEntry(\"OBJECT_INVALID\", os.path."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        self.log.clear_entries()\n        entries = []\n        for dirpath, dirnames, filenames in os.walk(self.root_dir):\n            for filename in filenames:\n                if filename.endswith(\".json\"):\n                    self.log.add_entry(ValidationEntry(\"OBJECT\", os.path.join(dirpath, filename)))\n                    self.num_objects += 1\n                    if validate_objects:\n                        try:\n                            self.validate_object(os.path.join(dirpath, filename))\n                            self.log.add_entry(ValidationEntry(\"OBJECT_VALID\", os.path.join(dirpath, filename)))\n                            self.good_objects += 1\n                        except StoreException as e:\n                            self.log.add_entry(ValidationEntry(\"OBJECT_INVALID\", os.path.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["\ndef initialize(self):\n        \n\treturn storage_root\n\ndef check_root_structure(self):\n\t\"\"\"Check the OCFL storage root structure.\n\n\tAssumed that self.root_fs filesystem is available. Raises\n\tStoreException if there is an error.\n\t\"\"\"\n\tnamastes = find_namastes(0, pyfs=self.root_fs)\n\tif len(namastes) == 0:\n\t\traise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n\tif len(namastes) > 1:\n\t\traise StoreException(\"Storage root %s has more than one 0= style declaration file"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef initialize(self):\n        \n\treturn storage_root\n\ndef check_root_structure(self):\n\t\"\"\"Check the OCFL storage root structure.\n\n\tAssumed that self.root_fs filesystem is available. Raises\n\tStoreException if there is an error.\n\t\"\"\"\n\tnamastes = find_namastes(0, pyfs=self.root_fs)\n\tif len(namastes) == 0:\n\t\traise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n\tif len(namastes) > 1:\n\t\traise StoreException(\"Storage root %s has more than one 0= style declaration file", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["\ndef next_version(version):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef next_version(version):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["\ndef validate_version_inventories(self, version_dirs):\n        \n\ndef validate_content(self, inventory, version_dirs, prior_manifest_digests, prior_fixity_digests):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_version_inventories(self, version_dirs):\n        \n\ndef validate_content(self, inventory, version_dirs, prior_manifest_digests, prior_fixity_digests):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["\ndef find_path_type(path):\n    \n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_path_type(path):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["\ndef strip_root(self, path, root):\n        \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef strip_root(self, path, root):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["\ndef identify_request(request: RequestType):\n    \n\n\n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"encrypted_magic_envelope\" in data:\n            return True\n    except Exception:\n        pass\n    try:\n        xml = etree.fromstring(encode_if_text(request.body))\n        if xml.tag == MAGIC_ENV_TAG:\n            return True\n    except Exception:\n        pass\n    return False\n\n\nclass Protocol:\n    \"\"\"Diaspora protocol parts\n\n    Original legacy implementation mostly taken from Pyaspora (https://github.com/lukeross/pyaspora).\n    \"\"\""], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType):\n    \n\n\n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"encrypted_magic_envelope\" in data:\n            return True\n    except Exception:\n        pass\n    try:\n        xml = etree.fromstring(encode_if_text(request.body))\n        if xml.tag == MAGIC_ENV_TAG:\n            return True\n    except Exception:\n        pass\n    return False\n\n\nclass Protocol:\n    \"\"\"Diaspora protocol parts\n\n    Original legacy implementation mostly taken from Pyaspora (https://github.com/lukeross/pyaspora).\n    \"\"\"", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["\ndef identify_request(request: RequestType) -> bool:\n    "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType) -> bool:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).strftime('%H:%M:%S')\n\ndef ensure_timezone(dt):\n    \"\"\"Ensure that the datetime object has a timezone set to 'UTC' and return the modified datetime object.\"\"\"\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone('UTC'))\n    else:\n        dt = dt.astimezone(timezone('UTC'))\n    return dt\n\n\nfrom federation.entities.diaspora.utils import *\nfrom federation.entities."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).strftime('%H:%M:%S')\n\ndef ensure_timezone(dt):\n    \"\"\"Ensure that the datetime object has a timezone set to 'UTC' and return the modified datetime object.\"\"\"\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=timezone('UTC'))\n    else:\n        dt = dt.astimezone(timezone('UTC'))\n    return dt\n\n\nfrom federation.entities.diaspora.utils import *\nfrom federation.entities.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n\n    tags = set()\n    code_block = False\n    replaced_text = \"\"\n    current_tag = \"\"\n\n    for char in text:\n        if char == '`':\n            code_block = not code_block\n\n        if code_block:\n            replaced_text += char\n        else:\n            if char.isalpha() or char == '_':\n                current_tag += char\n            elif current_tag:\n                tags.add(current_tag)\n                replaced_text += replacer(current_tag)\n                current_tag = \"\"\n\n            replaced_text += char\n\n    return tags, replaced_text\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n\n    tags = set()\n    code_block = False\n    replaced_text = \"\"\n    current_tag = \"\"\n\n    for char in text:\n        if char == '`':\n            code_block = not code_block\n\n        if code_block:\n            replaced_text += char\n        else:\n            if char.isalpha() or char == '_':\n                current_tag += char\n            elif current_tag:\n                tags.add(current_tag)\n                replaced_text += replacer(current_tag)\n                current_tag = \"\"\n\n            replaced_text += char\n\n    return tags, replaced_text\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["\ndef process_text_links(text):\n    \ndef get_path_from_url(url: str) -> str:\n    \"\"\"\n    Return only the path part of an URL.\n    \"\"\"\n    parsed = urlparse(url)\n    return parsed.path\n\ndef process_text_links(text):\n    \"\"\"Process links in text, adding some attributes and linkifying textual links.\"\"\"\n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \"\"\"Run standard callbacks except for internal links.\"\"\"\n        href_key = (None, \"href\")\n        if attrs.get(href_key).startswith(\"/\"):\n            return attrs\n\n        for callback in link_callbacks:\n           "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef process_text_links(text):\n    \ndef get_path_from_url(url: str) -> str:\n    \"\"\"\n    Return only the path part of an URL.\n    \"\"\"\n    parsed = urlparse(url)\n    return parsed.path\n\ndef process_text_links(text):\n    \"\"\"Process links in text, adding some attributes and linkifying textual links.\"\"\"\n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \"\"\"Run standard callbacks except for internal links.\"\"\"\n        href_key = (None, \"href\")\n        if attrs.get(href_key).startswith(\"/\"):\n            return attrs\n\n        for callback in link_callbacks:\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["\ndef fetch_content_type(url: str) -> Optional[str]:\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef fetch_content_type(url: str) -> Optional[str]:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\ndef validate_handle(handle):\n    '''\n    Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\ndef with_slash(url):\n    if url.endswith('/'):\n        return url\n    return f"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\ndef validate_handle(handle):\n    '''\n    Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\ndef with_slash(url):\n    if url.endswith('/'):\n        return url\n    return f", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["\ndef xml_children_as_dict(node):\n    \n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef xml_children_as_dict(node):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n\n    if sender_handle!= entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n\n    if sender_handle!= entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        \"links\": [\n            {\n                \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/1.0\",\n                \"href\": \"{url}{path}\".format(\n                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH\n                )\n            }\n        ]\n    }\n\nNODEINFO_DOCUMENT_PATH = \"/nodeinfo/1.0"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        \"links\": [\n            {\n                \"rel\": \"http://nodeinfo.diaspora.software/ns/schema/1.0\",\n                \"href\": \"{url}{path}\".format(\n                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH\n                )\n            }\n        ]\n    }\n\nNODEINFO_DOCUMENT_PATH = \"/nodeinfo/1.0", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["\ndef verify_relayable_signature(public_key, doc, signature):\n    \n\n\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(RSA.importKey(public_key))\n    return cipher.verify(sig_hash, b64decode(signature))\n\n\ndef create_relayable_signature(private_key: RsaKey, doc):\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")\n\n\nif"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef verify_relayable_signature(public_key, doc, signature):\n    \n\n\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(RSA.importKey(public_key))\n    return cipher.verify(sig_hash, b64decode(signature))\n\n\ndef create_relayable_signature(private_key: RsaKey, doc):\n    sig_hash = _create_signature_hash(doc)\n    cipher = PKCS1_v1_5.new(private_key)\n    return b64encode(cipher.sign(sig_hash)).decode(\"ascii\")\n\n\nif", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        \"hcard_url\": None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc[\"links\"]:\n            if link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n                webfinger[\"hcard_url\"] = link[\"href\"]\n                break\n        else:\n            logger.warning(\"parse_diaspora_webfinger: found JSON webfinger but it has no hcard href\")\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n            for link in xrd.links:\n                if link.rel == \"http://microformats.org/profile/h"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        \"hcard_url\": None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc[\"links\"]:\n            if link[\"rel\"] == \"http://microformats.org/profile/hcard\":\n                webfinger[\"hcard_url\"] = link[\"href\"]\n                break\n        else:\n            logger.warning(\"parse_diaspora_webfinger: found JSON webfinger but it has no hcard href\")\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n            for link in xrd.links:\n                if link.rel == \"http://microformats.org/profile/h", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    document, code, exception = fetch_document(\n        host=handle, path=\"/.well-known/webfinger?resource=acct:%s\" % quote(handle),\n    )\n    return document\n\nif __name__ == \"__main__\":\n    isT=True\n    ist1=fetch_content_type(\"https://www.csdn.net/\")==\"text/html; charset=utf-8\" or fetch_content_type(\"https://www"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    document, code, exception = fetch_document(\n        host=handle, path=\"/.well-known/webfinger?resource=acct:%s\" % quote(handle),\n    )\n    return document\n\nif __name__ == \"__main__\":\n    isT=True\n    ist1=fetch_content_type(\"https://www.csdn.net/\")==\"text/html; charset=utf-8\" or fetch_content_type(\"https://www", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    host = handle.split(\"@\")[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace(\"{uri}\", quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    host = handle.split(\"@\")[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace(\"{uri}\", quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n\ndef _get_element_text_or_none(document, selector):\n    \"\"\"\n    Using a CSS selector, get the element and return the text, or None if no element.\n\n    :arg document: ``HTMLElement`` document\n    :arg selector: CSS selector\n    :returns: str or None\n    \"\"\"\n    element = document.cssselect(selector)\n    if element:\n        return element[0].text\n    return None\n\n\ndef _get_element_attr_or_none(document, selector, attribute):\n    \"\"\"\n    Using a"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n\ndef _get_element_text_or_none(document, selector):\n    \"\"\"\n    Using a CSS selector, get the element and return the text, or None if no element.\n\n    :arg document: ``HTMLElement`` document\n    :arg selector: CSS selector\n    :returns: str or None\n    \"\"\"\n    element = document.cssselect(selector)\n    if element:\n        return element[0].text\n    return None\n\n\ndef _get_element_attr_or_none(document, selector, attribute):\n    \"\"\"\n    Using a", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n        'Content-Type': 'application/x-www-form-urlencoded',\n    })\n    response = requests.request(method, url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.error\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n        'Content-Type': 'application/x-www-form-urlencoded',\n    })\n    response = requests.request(method, url, data=data, headers=headers, timeout=timeout, *args, **kwargs)\n    return response.status_code, response.error\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["\ndef get_versions():\n    \n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n    return expanded_keywords(cfg)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_versions():\n    \n    cfg = get_config()\n    verbose = cfg.verbose\n\n    try:\n        return git_versions_from_keywords(get_keywords(), cfg.tag_prefix, verbose)\n    except NotThisMethod:\n        pass\n    return expanded_keywords(cfg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["\ndef render(pieces, style):\n    \n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef render(pieces, style):\n    \n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["\ndef plus_or_dot(pieces):\n    "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef plus_or_dot(pieces):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["\ndef get_config():\n    \n    return VersioneerConfig()\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    def decorate(f):\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        if v"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_config():\n    \n    return VersioneerConfig()\n\n\nclass NotThisMethod(Exception):\n    \"\"\"Exception raised if a method is not valid for the current scenario.\"\"\"\n\n\nLONG_VERSION_PY: Dict[str, str] = {}\nHANDLERS: Dict[str, Dict[str, Callable]] = {}\n\n\ndef register_vcs_handler(vcs, method):  # decorator\n    def decorate(f):\n        \"\"\"Store f in HANDLERS[vcs][method].\"\"\"\n        if v", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["\ndef register_vcs_handler(vcs, method):\n  \n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \"\"\"Call the given command(s).\"\"\"\n  assert isinstance(commands, list)\n  process = None\n\n  popen_kwargs = {}\n  if sys.platform == \"win32\":\n      startupinfo = subprocess.STARTUPINFO()\n      startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n      popen_kwargs[\"startupinfo\"] = startupinfo\n\n  for command in commands:\n      try:\n          dispcmd = str([command] + args)\n\ndef register_vcs_handler(vcs, method):\n  \n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef register_vcs_handler(vcs, method):\n  \n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \"\"\"Call the given command(s).\"\"\"\n  assert isinstance(commands, list)\n  process = None\n\n  popen_kwargs = {}\n  if sys.platform == \"win32\":\n      startupinfo = subprocess.STARTUPINFO()\n      startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n      popen_kwargs[\"startupinfo\"] = startupinfo\n\n  for command in commands:\n      try:\n          dispcmd = str([command] + args)\n\ndef register_vcs_handler(vcs, method):\n  \n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n\n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n@staticmethod\n    def file_to_textbuffer_passk_validte(file_name, encoding):\n        '''Load a file toward a text buffer (UTF-8), using"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n\n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n@staticmethod\n    def file_to_textbuffer_passk_validte(file_name, encoding):\n        '''Load a file toward a text buffer (UTF-8), using", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["\n@staticmethod\n    def is_file_exist(file_name):\n        \n\n@staticmethod\n    def is_dir_exist(dir_name):\n        \n\n@staticmethod\n    def get_file_size(file_name):\n        \n\n@staticmethod\n    def get_file_lines(file_name):\n        \n\n--------------------------------------------------"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def is_file_exist(file_name):\n        \n\n@staticmethod\n    def is_dir_exist(dir_name):\n        \n\n@staticmethod\n    def get_file_size(file_name):\n        \n\n@staticmethod\n    def get_file_lines(file_name):\n        \n\n--------------------------------------------------", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["\n@classmethod\n    def _reset_logging(cls):\n        \n\n@classmethod\n    def _reset_voodoo(cls):\n        \n\n@classmethod\n    def _init_logging(cls):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init"], "level": "plib_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def _reset_logging(cls):\n        \n\n@classmethod\n    def _reset_voodoo(cls):\n        \n\n@classmethod\n    def _init_logging(cls):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        \n\n@classmethod\n    def _init_voodoo(cls, aggressive=True):\n        \n\n@classmethod\n    def voodoo_init", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["\ndef _getTargetClass(self):\n        \n\ndef _getFallbackClass(self):\n        \n\ndef test_optimizations(self):\n        used = self._getTargetClass()\n        fallback = self._getFallbackClass()\n\n        if _should_attempt_c_optimizations():\n            self.assertIsNot(used, fallback)\n        else:\n            self.assertIs(used, fallback)\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _getTargetClass(self):\n        \n\ndef _getFallbackClass(self):\n        \n\ndef test_optimizations(self):\n        used = self._getTargetClass()\n        fallback = self._getFallbackClass()\n\n        if _should_attempt_c_optimizations():\n            self.assertIsNot(used, fallback)\n        else:\n            self.assertIs(used, fallback)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["\ndef _legacy_mergeOrderings(orderings):\n    \n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n        result[i:i] = ob.__bases__\n    return result\n\ndef _legacy_mergeOrderings(orderings):\n    merged_list = []\n    for sublist in orderings:\n        for element in sublist:\n            if element not in merged_list:\n                merged_list.append(element)\n    return merged_list\n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _legacy_mergeOrderings(orderings):\n    \n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n        result[i:i] = ob.__bases__\n    return result\n\ndef _legacy_mergeOrderings(orderings):\n    merged_list = []\n    for sublist in orderings:\n        for element in sublist:\n            if element not in merged_list:\n                merged_list.append(element)\n    return merged_list\n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["\ndef directlyProvidedBy(object):\n \n pass\n\ndef classProvides(*interfaces):\n \"\"\"Declare interfaces provided directly by a class\n\n   This function is called in a class definition.\n\n   The arguments are one or more interfaces or interface specifications\n   (`~zope.interface.interfaces.IDeclaration` objects).\n\n   The given interfaces (including the interfaces in the specifications)\n   are used to create the class's direct-object interface specification.\n   An error will be raised if the module class has an direct interface\n   specification. In other words, it is an error to call this function more\n   than once in a class definition.\n\n   Note that the given interfaces have nothing to do with the interfaces\n   that are actually implemented by the class.\n \"\"\"\n pass\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef directlyProvidedBy(object):\n \n pass\n\ndef classProvides(*interfaces):\n \"\"\"Declare interfaces provided directly by a class\n\n   This function is called in a class definition.\n\n   The arguments are one or more interfaces or interface specifications\n   (`~zope.interface.interfaces.IDeclaration` objects).\n\n   The given interfaces (including the interfaces in the specifications)\n   are used to create the class's direct-object interface specification.\n   An error will be raised if the module class has an direct interface\n   specification. In other words, it is an error to call this function more\n   than once in a class definition.\n\n   Note that the given interfaces have nothing to do with the interfaces\n   that are actually implemented by the class.\n \"\"\"\n pass\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["\ndef minimalBases(classes):\n    \n\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\nclass Metameta(type):\n    pass\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\nclass A():\n    def __init__(self):\n        aaa=1\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef minimalBases(classes):\n    \n\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\nclass Metameta(type):\n    pass\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\nclass A():\n    def __init__(self):\n        aaa=1\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n    return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n    r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\nInterface.namesAndDescriptions = namesAndDescriptions\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n    return r\n\n raise KeyError(name)\n\nInterface.__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\nInterface.__contains__ = __contains__\n\ndef direct(self, name):\n return self.__attrs.get(name)\n\nInterface.direct = direct\n\ndef queryDescriptionFor(self, name,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n    return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n    r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\nInterface.namesAndDescriptions = namesAndDescriptions\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n    return r\n\n raise KeyError(name)\n\nInterface.__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\nInterface.__contains__ = __contains__\n\ndef direct(self, name):\n return self.__attrs.get(name)\n\nInterface.direct = direct\n\ndef queryDescriptionFor(self, name,", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["\ndef names(self, all=False):\n \n if not all:\n     return self.__attrs.keys()\n\n r = self.__attrs.copy()\n\n for base in self.__bases__:\n     r.update(dict.fromkeys(base.names(all)))\n\n return r.keys()\n\ndef __iter__(self):\n return iter(self.names(all=True))\n\ndef namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin\n \n if not all:\n     return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n     r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n r = self.get(name)\n if r is not None:\n     return r"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef names(self, all=False):\n \n if not all:\n     return self.__attrs.keys()\n\n r = self.__attrs.copy()\n\n for base in self.__bases__:\n     r.update(dict.fromkeys(base.names(all)))\n\n return r.keys()\n\ndef __iter__(self):\n return iter(self.names(all=True))\n\ndef namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin\n \n if not all:\n     return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n     r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n r = self.get(name)\n if r is not None:\n     return r", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output\n\n\ndef _normalizeargs(sequence, output=None):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output\n\n\ndef _normalizeargs(sequence, output=None):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["\ndef _c_optimizations_available():\n    \n\n\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\ndef _c_optimizations_required():\n    '''\n    The opposite of `_c_optimizations_ignored`.\n\n    This does not say whether they should be used or not.\n    '''\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n\ndef _c_optimizations_ignored():\n    \n\ndef _optim_args_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_available():\n    \n\n\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\ndef _c_optimizations_required():\n    '''\n    The opposite of `_c_optimizations_ignored`.\n\n    This does not say whether they should be used or not.\n    '''\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= \"0\"\n\ndef _c_optimizations_ignored():\n    \n\ndef _optim_args_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["\ndef _should_attempt_c_optimizations():\n    \n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    \"\"\"\n    Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation\n    and return the Python"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _should_attempt_c_optimizations():\n    \n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    \"\"\"\n    Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation\n    and return the Python", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["\ndef _c_optimizations_ignored():\n    \n\ndef _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we should attempt to use the C optimizations.\n\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n    \"\"\"\n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n@implementer(IInterface)"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_ignored():\n    \n\ndef _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we should attempt to use the C optimizations.\n\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n    \"\"\"\n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n@implementer(IInterface)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["\ndef _c_optimizations_required():\n    \n    return True\n\ndef _c_optimizations_available():\n    \n    return True\n\ndef _c_optimizations_ignored():\n    \n    return False\n\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n    return not is_pypy\n\nt.main()\n\nfrom __future__ import print_function\n\nimport os\nimport sys\nimport unittest\n\nsys."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_required():\n    \n    return True\n\ndef _c_optimizations_available():\n    \n    return True\n\ndef _c_optimizations_ignored():\n    \n    return False\n\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n    return not is_pypy\n\nt.main()\n\nfrom __future__ import print_function\n\nimport os\nimport sys\nimport unittest\n\nsys.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["\ndef verifyObject(iface, candidate, tentative=False):\n    \n\n    return _"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyObject(iface, candidate, tentative=False):\n    \n\n    return _", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    '''"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    \n\ndef verifyObject(iface, candidate, tentative=False):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["\ndef determineMetaclass(bases, explicit_mc=None):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef determineMetaclass(bases, explicit_mc=None):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["\ndef force_string(obj):\n    \n    return obj\n\ndef force_string(obj):\n    \n    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n        return obj.decode('utf-8')\n    return obj\n\ndef string_to_color(str_in):\n    \n\n    if str_in[0]=='(':\n        temps=str_in[1:len(str_in)-1]\n        temp2=temps.split(',')"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef force_string(obj):\n    \n    return obj\n\ndef force_string(obj):\n    \n    if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n        return obj.decode('utf-8')\n    return obj\n\ndef string_to_color(str_in):\n    \n\n    if str_in[0]=='(':\n        temps=str_in[1:len(str_in)-1]\n        temp2=temps.split(',')", "is_pass": true, "return_code": 0}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["\ndef unquote(name):\n    \n\n    def unquoted_char(match):\n        \n        if len(match.group())!= 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            return match.group\n\n    return re.sub(b';[0-9][0-9][0-9]', unquoted_char, name)\n\n    def rollback(self):\n        self.__class__.session.rollback()\n        return self\n\n\nclass SQLA(cherrypy.Tool):\n    _name ='sqla'\n    _base ="], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef unquote(name):\n    \n\n    def unquoted_char(match):\n        \n        if len(match.group())!= 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            return match.group\n\n    return re.sub(b';[0-9][0-9][0-9]', unquoted_char, name)\n\n    def rollback(self):\n        self.__class__.session.rollback()\n        return self\n\n\nclass SQLA(cherrypy.Tool):\n    _name ='sqla'\n    _base =", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    if padding is not None:\n        padding = [alphabet[(number // (len(alphabet) ** i)) % len(alphabet)] for i in range(padding)]\n\t\t\n        padding.reverse()\n\t\t\n        padding = ''.join(padding)\n\t\t\n        number -= len(alphabet) ** padding.count('0')\n\t\t\n        if padding.count('0') > 1:\n            padding = padding.replace('0', '', padding.count('0') - 1)\n        else:\n            padding = ''\n\t\t\t\n        padding = padding[::-1]\n    else:\n        padding = ''\n\t\t\n    alphabet_length = len(alphabet)\n\n    result ="], "level": "self_contained", "generate_results": [{"generate_code": "\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    if padding is not None:\n        padding = [alphabet[(number // (len(alphabet) ** i)) % len(alphabet)] for i in range(padding)]\n\t\t\n        padding.reverse()\n\t\t\n        padding = ''.join(padding)\n\t\t\n        number -= len(alphabet) ** padding.count('0')\n\t\t\n        if padding.count('0') > 1:\n            padding = padding.replace('0', '', padding.count('0') - 1)\n        else:\n            padding = ''\n\t\t\t\n        padding = padding[::-1]\n    else:\n        padding = ''\n\t\t\n    alphabet_length = len(alphabet)\n\n    result =", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    output = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        output = output * alpha_len + alphabet.index(char)\n    return output\n\n\ndef uuid() -> str:\n    \"\"\"Generate a random UUID.\"\"\"\n    return _uu.uuid4().hex\n\n\ndef encode(uuid_: str) -> str:\n    \"\"\"Encode a UUID into a short UUID.\"\"\"\n    return _uu.UUID(uuid_).hex\n\n\ndef decode(shortuuid: str, legacy: bool = False) -> uuid.UUID:\n    \"\"\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    output = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        output = output * alpha_len + alphabet.index(char)\n    return output\n\n\ndef uuid() -> str:\n    \"\"\"Generate a random UUID.\"\"\"\n    return _uu.uuid4().hex\n\n\ndef encode(uuid_: str) -> str:\n    \"\"\"Encode a UUID into a short UUID.\"\"\"\n    return _uu.UUID(uuid_).hex\n\n\ndef decode(shortuuid: str, legacy: bool = False) -> uuid.UUID:\n    \"\"\"", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["\ndef _dictsum(dicts):\n    \n    return dict(itertools.chain(*dicts))\n\n\ndef _get_filesets(fileset_ids=None, **kwargs):\n    '''\n    Return a list of Fileset objects, optionally filtered by the supplied\n    arguments.\n    '''\n    filter_args = dict()\n    if fileset_ids is not None:\n        filter_args['id__in'] = fileset_ids\n    filter_args.update(kwargs)\n\n    return Fileset.objects.filter(**filter_args).order_by('id')\n\n\ndef _get_filesets_by_dataset(dataset_name, **kwargs):\n    '''\n    Return a list of Fileset objects that"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _dictsum(dicts):\n    \n    return dict(itertools.chain(*dicts))\n\n\ndef _get_filesets(fileset_ids=None, **kwargs):\n    '''\n    Return a list of Fileset objects, optionally filtered by the supplied\n    arguments.\n    '''\n    filter_args = dict()\n    if fileset_ids is not None:\n        filter_args['id__in'] = fileset_ids\n    filter_args.update(kwargs)\n\n    return Fileset.objects.filter(**filter_args).order_by('id')\n\n\ndef _get_filesets_by_dataset(dataset_name, **kwargs):\n    '''\n    Return a list of Fileset objects that", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["\ndef files_list(path):\n    \n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n/packtools/file_utils_files_list_from_zipfile_passk_validte9.py\nimport os\n\nfrom zipfile import ZipFile\n\nfrom packtools import logger\n\n\ndef xml_files_list(path):\n    \"\"\"\n    Return the XML files found in `path`\n    \"\"\"\n    return (f for f in os.listdir(path) if f.endswith(\".xml\"))\n\n\ndef files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return os.listdir(path)\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    with open(path, mode="], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list(path):\n    \n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n/packtools/file_utils_files_list_from_zipfile_passk_validte9.py\nimport os\n\nfrom zipfile import ZipFile\n\nfrom packtools import logger\n\n\ndef xml_files_list(path):\n    \"\"\"\n    Return the XML files found in `path`\n    \"\"\"\n    return (f for f in os.listdir(path) if f.endswith(\".xml\"))\n\n\ndef files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return os.listdir(path)\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    with open(path, mode=", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n    if basename.startswith(prefix + \".\"):\n        return True\n    return False\n\n\ndef explore_source(source):\n    '''\n    Return a list of files in the `source` folder that belong to the document package.\n    '''"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n    if basename.startswith(prefix + \".\"):\n        return True\n    return False\n\n\ndef explore_source(source):\n    '''\n    Return a list of files in the `source` folder that belong to the document package.\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n/packtools/sps/models/packages_add_rendition_passk_validte5.py\nfrom packtools.sps.models.packages_add_rendition_passk_validte2 import Package\n\nclass Package(Package):\n    \"\"\"\n    Represents a package of documents.\n\n    Representa um pacote"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n/packtools/sps/models/packages_add_rendition_passk_validte5.py\nfrom packtools.sps.models.packages_add_rendition_passk_validte2 import Package\n\nclass Package(Package):\n    \"\"\"\n    Represents a package of documents.\n\n    Representa um pacote", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["\ndef _explore_folder(folder):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_folder(folder):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["\ndef _eval_file(prefix, file_path):\n    \n\n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith(\".xml\"):\n        return\n\n    filename = os.path.basename(file_path)\n\n    if prefix == \"package\":\n        filename = os.path.basename(file_path)\n        package = PackageXml(filename, file_path)\n        packages = package.eval()\n    elif prefix == \"asset\":\n        filename = os.path.basename(file_path)\n        asset = AssetXml(filename, file_path)\n        packages = asset.eval()\n    elif prefix == \"rendition\":\n        filename = os.path.basename("], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _eval_file(prefix, file_path):\n    \n\n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith(\".xml\"):\n        return\n\n    filename = os.path.basename(file_path)\n\n    if prefix == \"package\":\n        filename = os.path.basename(file_path)\n        package = PackageXml(filename, file_path)\n        packages = package.eval()\n    elif prefix == \"asset\":\n        filename = os.path.basename(file_path)\n        asset = AssetXml(filename, file_path)\n        packages = asset.eval()\n    elif prefix == \"rendition\":\n        filename = os.path.basename(", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["\ndef add_rendition(self, lang, file_path):\n        \n\ndef get_rendition(self, lang):\n        try:\n            return self._renditions[lang]\n        except KeyError:\n            return\n\n@property\ndef source(self):\n        return self._source\n\n@property\ndef xml(self):\n        return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n        self._xml = value\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_rendition(self, lang, file_path):\n        \n\ndef get_rendition(self, lang):\n        try:\n            return self._renditions[lang]\n        except KeyError:\n            return\n\n@property\ndef source(self):\n        return self._source\n\n@property\ndef xml(self):\n        return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n        self._xml = value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["\ndef add_asset(self, basename, file_path):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_asset(self, basename, file_path):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["\ndef _explore_zipfile(zip_path):\n    \n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    zip_path : str\n        zip file path\n    Returns\n    -------\n    dict\n    '''\n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files):\n    '''\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_zipfile(zip_path):\n    \n\n    Groups files by their XML basename and returns data in dict format.\n\n    Parameters\n    ----------\n    zip_path : str\n        zip file path\n    Returns\n    -------\n    dict\n    '''\n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files):\n    '''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["\ndef files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    \n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\ndef write_file(path, source, mode=\"w\"):\n    \n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando arquivo: %s\", path)\n    with open(path, mode=mode, encoding=\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    with zipfile.ZipFile(zip_path) as zf:\n        return zf.namelist()\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    \n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\ndef write_file(path, source, mode=\"w\"):\n    \n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando arquivo: %s\", path)\n    with open(path, mode=mode, encoding=\"", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["\ndef fix_namespace_prefix_w(content):\n    \n    return content.replace(\"w:st=\", \"w-st=\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef fix_namespace_prefix_w(content):\n    \n    return content.replace(\"w:st=\", \"w-st=\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["\ndef match_pubdate(node, pubdate_xpaths):\n    \n\n    for xpath in pubdate_xpaths:\n        result = node.xpath(xpath)\n        if result:\n            return result[0]\n\n    return None\n/packtools/cli/sps.py\nimport os\nimport json\nimport sys\nimport traceback\nimport logging\nimport argparse\n\nfrom packtools.cli.cli_utils import (\n    read_config,\n    get_logger,\n    get_output_dir,\n    get_output_filename,\n    get_output_file_path,\n    get_package_path,\n    get_package_dir,\n    get_package_name,\n    get_package_extension,\n    get_package_path_and"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef match_pubdate(node, pubdate_xpaths):\n    \n\n    for xpath in pubdate_xpaths:\n        result = node.xpath(xpath)\n        if result:\n            return result[0]\n\n    return None\n/packtools/cli/sps.py\nimport os\nimport json\nimport sys\nimport traceback\nimport logging\nimport argparse\n\nfrom packtools.cli.cli_utils import (\n    read_config,\n    get_logger,\n    get_output_dir,\n    get_output_filename,\n    get_output_file_path,\n    get_package_path,\n    get_package_dir,\n    get_package_name,\n    get_package_extension,\n    get_package_path_and", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["\ndef size_to_bytes(size: str) -> int:\n    \n    return 0"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef size_to_bytes(size: str) -> int:\n    \n    return 0", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        logger.info(\"Downloading %s to %s\", url, destination_path)\n        destination_path.mkdir(exist_ok=True,"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        logger.info(\"Downloading %s to %s\", url, destination_path)\n        destination_path.mkdir(exist_ok=True,", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["\ndef _replace_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params(flow_params, flow_param_name, flow_param_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params(flow_params, flow_param_name, flow_param_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow_params_for_register(flow_params, register_number, register_value):\n    \n\ndef _replace_flow", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["\ndef hydrate_time(nanoseconds, tz=None):\n    "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef hydrate_time(nanoseconds, tz=None):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["\ndef dehydrate_timedelta(value):\n    \n\n\n\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_timedelta(value):\n    \n\n\n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["\ndef dehydrate_time(value):\n    \n\n    from.._temporal import Time\n\n    return Time(hour=value.hour, minute=value.minute, second=value.second, nanosecond=value.microsecond * 1000)\n\n    return Structure(b\"T\", value.hour, value.minute, value.second, value.microsecond * 1000)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_time(value):\n    \n\n    from.._temporal import Time\n\n    return Time(hour=value.hour, minute=value.minute, second=value.second, nanosecond=value.microsecond * 1000)\n\n    return Structure(b\"T\", value.hour, value.minute, value.second, value.microsecond * 1000)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["\ndef dehydrate_point(value):\n    \n\n    return _hydration.dehydrate_point(value)\n\n@deprecated(\n    \"point_type is considered an internal function and will be removed in \"\n    \"a future version\"\n)\n@wraps(_point_type)\ndef point_type(name, fields, srid_map):\n    return _point_type(name, fields, srid_map)\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_point(value):\n    \n\n    return _hydration.dehydrate_point(value)\n\n@deprecated(\n    \"point_type is considered an internal function and will be removed in \"\n    \"a future version\"\n)\n@wraps(_point_type)\ndef point_type(name, fields, srid_map):\n    return _point_type(name, fields, srid_map)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["\ndef keys(self):\n        \n/test_cases/test_cases_from_bug_reports_on_github/github_2017_11_06_PyPI_2017_11_06_13_59_53_840.py\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef keys(self):\n        \n/test_cases/test_cases_from_bug_reports_on_github/github_2017_11_06_PyPI_2017_11_06_13_59_53_840.py\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        '''Return a"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        '''Return a", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["\ndef unit_of_work(metadata=None, timeout=None):\n    \n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef unit_of_work(metadata=None, timeout=None):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["\ndef index(self, key):\n        \n        if isinstance(key, int):\n            if key < 0:\n                key = len(self) + key\n            if not (0 <= key < len(self)):\n                raise IndexError(key)\n            return self.items[key]\n        elif isinstance(key, str):\n            try:\n                return self.__keys.index(key)\n            except ValueError as exc:\n                raise KeyError(key) from exc\n        else:\n            raise TypeError(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef index(self, key):\n        \n        if isinstance(key, int):\n            if key < 0:\n                key = len(self) + key\n            if not (0 <= key < len(self)):\n                raise IndexError(key)\n            return self.items[key]\n        elif isinstance(key, str):\n            try:\n                return self.__keys.index(key)\n            except ValueError as exc:\n                raise KeyError(key) from exc\n        else:\n            raise TypeError(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["\ndef values(self, *keys):\n        \n        return list(self.__keys)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef values(self, *keys):\n        \n        return list(self.__keys)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["\ndef data(self, *keys):\n        \n\ndef values(self, *keys: _K) -> t.List[t.Any]:  # type: ignore[override]\n        \n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n        \n\ndef values(self, *keys: _K) -> t.List[t.Any]:  # type: ignore[override]\n        \n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n        '''Return the keys and values of this record as a dictionary, optionally including only certain values"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef data(self, *keys):\n        \n\ndef values(self, *keys: _K) -> t.List[t.Any]:  # type: ignore[override]\n        \n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n        \n\ndef values(self, *keys: _K) -> t.List[t.Any]:  # type: ignore[override]\n        \n\ndef data(self, *keys: _K) -> t.Dict[str, t.Any]:\n        '''Return the keys and values of this record as a dictionary, optionally including only certain values", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["\ndef pop_u16(self):\n        \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    '''"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop_u16(self):\n        \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    \n\ndef pop_u16(self):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        if self._output_closed:\n            raise ProtocolError('output closed')\n\n        if not self._running:\n            raise ProtocolError('not running')\n\n        msg = packstream.packb({\n            'type': packstream.message_type('DISCARD'),\n            'n': n,\n            'qid': qid\n        })\n\n        self._output_queue.put(msg)\n        self._output_queue.put(packstream.packb({\n            'type': packstream.message_type('OK'),\n           'metadata': {}\n        }))"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        if self._output_closed:\n            raise ProtocolError('output closed')\n\n        if not self._running:\n            raise ProtocolError('not running')\n\n        msg = packstream.packb({\n            'type': packstream.message_type('DISCARD'),\n            'n': n,\n            'qid': qid\n        })\n\n        self._output_queue.put(msg)\n        self._output_queue.put(packstream.packb({\n            'type': packstream.message_type('OK'),\n           'metadata': {}\n        }))", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is not None and mode not in (\"READ\", \"WRITE\"):\n            raise ValueError(\n                \"Invalid mode. Valid values are 'READ' or 'WRITE'.\")\n\n        if self._protocol_version == 1:\n            pass\n        elif self._protocol_version == 2:\n            if mode is not None:\n                warnings.warn(\n                    \"The `mode` parameter is ignored by this version of Bolt. \"\n                    \"Use the `db` parameter instead.\",\n                    category=DeprecationWarning)\n\n            if bookmarks is not None:\n                warnings.warn(\n                    \"The `bookmarks` parameter is ignored by this version of \"\n                    \"Bolt. Use the `db` parameter instead.\",\n                    category=DeprecationWarning)\n\n            if metadata is not None:\n                warnings.warn(\n                    \"The `metadata`"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is not None and mode not in (\"READ\", \"WRITE\"):\n            raise ValueError(\n                \"Invalid mode. Valid values are 'READ' or 'WRITE'.\")\n\n        if self._protocol_version == 1:\n            pass\n        elif self._protocol_version == 2:\n            if mode is not None:\n                warnings.warn(\n                    \"The `mode` parameter is ignored by this version of Bolt. \"\n                    \"Use the `db` parameter instead.\",\n                    category=DeprecationWarning)\n\n            if bookmarks is not None:\n                warnings.warn(\n                    \"The `bookmarks` parameter is ignored by this version of \"\n                    \"Bolt. Use the `db` parameter instead.\",\n                    category=DeprecationWarning)\n\n            if metadata is not None:\n                warnings.warn(\n                    \"The `metadata`", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["\ndef round_half_to_even(n):\n    \n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef round_half_to_even(n):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["\ndef point_type(name, fields, srid_map):\n    \n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {\"srid\": property(srid)}\n    for index, subclass_field in enumerate(fields):\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef point_type(name, fields, srid_map):\n    \n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {\"srid\": property(srid)}\n    for index, subclass_field in enumerate(fields):\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["\ndef deprecated(message):\n    \n\n\n    def decorator(f):\n        return _make_warning_decorator(message, deprecation_warn)(f)\n    return decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deprecated(message):\n    \n\n\n    def decorator(f):\n        return _make_warning_decorator(message, deprecation_warn)(f)\n    return decorator\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n\n@classmethod\n    def from_native(cls, t: time) -> Time:\n        \"\"\"Convert from a native Python :class:`datetime.time` value.\n        \"\"\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n\n@classmethod\n    def from_native(cls, t: time) -> Time:\n        \"\"\"Convert from a native Python :class:`datetime.time` value.\n        \"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        '''Return a dictionary of available"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n@classmethod\n    def version_list(cls, versions, limit=4):\n        \n\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        '''Return a dictionary of available", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["\n@classmethod\n    def from_raw_values(cls, values):\n        "], "level": "self_contained", "generate_results": [{"generate_code": "\n@classmethod\n    def from_raw_values(cls, values):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["\ndef amend_bzparams(self, params, bug_ids):\n        \n\n        params['bug_ids'] = bug_ids\n\n        if self.get_config('bz_query_fields'):\n            fields = self.get_config('bz_query_fields').split(',')\n            if self.get_config('bz_query_fields_include_ids') and params.get('include_fields'):\n                params['include_fields'] = list(set(params['include_fields'] + fields))\n            else:\n                params['include_fields'] = fields\n\n        return params\n\n        if self.get_config('bz_query_fields'):\n            fields = self.get_config('bz_query_fields').split(',')\n            if self.get_config('bz_query_fields_include_ids')"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef amend_bzparams(self, params, bug_ids):\n        \n\n        params['bug_ids'] = bug_ids\n\n        if self.get_config('bz_query_fields'):\n            fields = self.get_config('bz_query_fields').split(',')\n            if self.get_config('bz_query_fields_include_ids') and params.get('include_fields'):\n                params['include_fields'] = list(set(params['include_fields'] + fields))\n            else:\n                params['include_fields'] = fields\n\n        return params\n\n        if self.get_config('bz_query_fields'):\n            fields = self.get_config('bz_query_fields').split(',')\n            if self.get_config('bz_query_fields_include_ids')", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["\ndef vertex3tuple(vertices):\n    \n    return [(vertices[i], vertices[(i - 1) % len(vertices)], vertices[(i + 1) % len(vertices)]) for i in range(len(vertices))]\n\n\ndef unit_normal(pta, ptb, ptc):\n    \"\"\"unit normal to the surface\"\"\"\n\n    pta = np.array(pta)\n    ptb = np.array(ptb)\n    ptc = np.array(ptc)\n\n    return np.cross(ptb - pta, ptc - pta) / np.linalg.norm(\n        np.cross("], "level": "self_contained", "generate_results": [{"generate_code": "\ndef vertex3tuple(vertices):\n    \n    return [(vertices[i], vertices[(i - 1) % len(vertices)], vertices[(i + 1) % len(vertices)]) for i in range(len(vertices))]\n\n\ndef unit_normal(pta, ptb, ptc):\n    \"\"\"unit normal to the surface\"\"\"\n\n    pta = np.array(pta)\n    ptb = np.array(ptb)\n    ptc = np.array(ptc)\n\n    return np.cross(ptb - pta, ptc - pta) / np.linalg.norm(\n        np.cross(", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["\ndef _validate_labels(labels):\n    \n\n    if not isinstance(labels, dict):\n        return False\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n    return True\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _validate_labels(labels):\n    \n\n    if not isinstance(labels, dict):\n        return False\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n    return True\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["\ndef _get_resource_name_regex():\n    \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _get_resource_name_regex():\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["\ndef validate_value(value):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_value(value):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["\ndef validate_key(key):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_key(key):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, list):\n            new_dict[key] = generate_default_observer_schema_list(value)\n        elif isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, list):\n            new_dict[key] = generate_default_observer_schema_list(value)\n        elif isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema):\n\n        try:\n            if idx >= len(response):\n                raise KeyError(\"Not enough fields in response\")\n            if val[\"key\"] in last_applied_manifest:\n                last_applied_manifest[val[\"key\"]] = response[idx]\n            else:\n                if val[\"type\"] == \"list\":"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema):\n\n        try:\n            if idx >= len(response):\n                raise KeyError(\"Not enough fields in response\")\n            if val[\"key\"] in last_applied_manifest:\n                last_applied_manifest[val[\"key\"]] = response[idx]\n            else:\n                if val[\"type\"] == \"list\":", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["\ndef generate_default_observer_schema(app):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema(app):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["\ndef on(self, hook):\n        \n        def decorator(f):\n            self.registry[hook].append(f)\n            return f\n        return decorator\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef on(self, hook):\n        \n        def decorator(f):\n            self.registry[hook].append(f)\n            return f\n        return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["\ndef paging(response, max_results):\n    \n/test_data/python/2_test_object_manager.py\n\n\nimport mock\n\nfrom infoblox_client import connector\nfrom infoblox_client import"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef paging(response, max_results):\n    \n/test_data/python/2_test_object_manager.py\n\n\nimport mock\n\nfrom infoblox_client import connector\nfrom infoblox_client import", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["\ndef _fromutc(self, dt):\n        \n\n\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() result\")\n\n        dtdst = dt.dst()\n        if dtdst is None:\n            dtdst = self._dst(dt)\n\n        dt_wall = dt"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _fromutc(self, dt):\n        \n\n\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() result\")\n\n        dtdst = dt.dst()\n        if dtdst is None:\n            dtdst = self._dst(dt)\n\n        dt_wall = dt", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return self.__class__(years=self.years, months=self.months,\n                              days=days, hours=hours"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return self.__class__(years=self.years, months=self.months,\n                              days=days, hours=hours", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["\ndef tzname_in_python2(namefunc):\n    \n\ndef tzname_in_python2(namefunc):\n    \n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n    return wrapper\n\n\nif hasattr(datetime, 'fold'):\n    def enfold(dt, fold=1):\n        \"\"\"\n        Provides a unified interface for assigning the ``fold`` attribute to\n        datetimes both before and after the implementation of PEP-495.\n        \"\"\"\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef tzname_in_python2(namefunc):\n    \n\ndef tzname_in_python2(namefunc):\n    \n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n    return wrapper\n\n\nif hasattr(datetime, 'fold'):\n    def enfold(dt, fold=1):\n        \"\"\"\n        Provides a unified interface for assigning the ``fold`` attribute to\n        datetimes both before and after the implementation of PEP-495.\n        \"\"\"\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n\n@_takes_ascii\n    def isoparse(self, dt_str):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n\n@_takes_ascii\n    def isoparse(self, dt_str):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n\ndef _parse_isotime(self, timestr, fuzzy=False, tzinfos=None, **kwargs):\n        '''\n        Parse a valid ISO-formatted time string.\n\n        See :func:`isoparser.isoparse` for details on supported formats.\n\n        :param timestr:\n            A string representing a date/time in ISO format\n\n        :param fuzzy:\n            Whether to allow fuzzy parsing of date/time strings. If ``True``,\n            ``HH``, ``HH:MM``, ``HH:MM:SS``, ``HH:MM:SS.mmmmmm``, and\n            ``HH:MM:SS.mmmmmmmmmmmm`` will be matched as well as their\n            non-padded counterparts.\n\n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n\ndef _parse_isotime(self, timestr, fuzzy=False, tzinfos=None, **kwargs):\n        '''\n        Parse a valid ISO-formatted time string.\n\n        See :func:`isoparser.isoparse` for details on supported formats.\n\n        :param timestr:\n            A string representing a date/time in ISO format\n\n        :param fuzzy:\n            Whether to allow fuzzy parsing of date/time strings. If ``True``,\n            ``HH``, ``HH:MM``, ``HH:MM:SS``, ``HH:MM:SS.mmmmmm``, and\n            ``HH:MM:SS.mmmmmmmmmmmm`` will be matched as well as their\n            non-padded counterparts.\n\n        :param tzinfos:\n            Additional time zone names / aliases which may be present in the\n            string. This argument maps time zone names (and optionally offsets\n            from those time zones) to time", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        '''Given a timezone-aware"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        '''Given a timezone-aware", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["\ndef default_tzinfo(dt, tzinfo):\n    \n\n\n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\ndef within_delta(dt1, dt2, delta):\n    '''\n    Useful for comparing two datetimes that may a negilible difference\n    to be considered equal.\n    '''\n\n    delta = abs(delta)\n    difference = dt1 - dt2\n    return -delta <= difference <= delta\n\ndef _get_tz(tz):\n    '''\n    Get a tzinfo object from a string\n    '''\n\n    if isinstance(tz, str):\n        return tzinfo(tz)\n    elif isinstance(tz, tzinfo):\n        return tz\n\n    raise TypeError('Invalid tz')\n\ndef _get_offset(tz):\n   "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef default_tzinfo(dt, tzinfo):\n    \n\n\n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\ndef within_delta(dt1, dt2, delta):\n    '''\n    Useful for comparing two datetimes that may a negilible difference\n    to be considered equal.\n    '''\n\n    delta = abs(delta)\n    difference = dt1 - dt2\n    return -delta <= difference <= delta\n\ndef _get_tz(tz):\n    '''\n    Get a tzinfo object from a string\n    '''\n\n    if isinstance(tz, str):\n        return tzinfo(tz)\n    elif isinstance(tz, tzinfo):\n        return tz\n\n    raise TypeError('Invalid tz')\n\ndef _get_offset(tz):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["\ndef is_none_string(val: Any) -> bool:\n    \n    return val is None or val == ''\n\n\ndef get_host_name(host: str) -> str:\n    \n    try:\n        return host.split('@')[1]\n    except IndexError:\n        return host\n\n\ndef get_host_name_from_fc_wwns(fc_wwns: list[str]) -> str:\n    \n    return get_host_name(fc_wwns[0])\n\n\ndef get_host_name_from_iscsi_ips(iscsi_ips: list[str]) -> str:\n    \n    return get_host_name(iscsi_ips[0])\n\n\ndef is_host_name_equal("], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_none_string(val: Any) -> bool:\n    \n    return val is None or val == ''\n\n\ndef get_host_name(host: str) -> str:\n    \n    try:\n        return host.split('@')[1]\n    except IndexError:\n        return host\n\n\ndef get_host_name_from_fc_wwns(fc_wwns: list[str]) -> str:\n    \n    return get_host_name(fc_wwns[0])\n\n\ndef get_host_name_from_iscsi_ips(iscsi_ips: list[str]) -> str:\n    \n    return get_host_name(iscsi_ips[0])\n\n\ndef is_host_name_equal(", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["\ndef _inline_r_setup(code: str) -> str:\n    "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _inline_r_setup(code: str) -> str:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["\ndef xargs(\n        cmd: tuple[str,...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef xargs(\n        cmd: tuple[str,...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    random.seed(FIXED_RANDOM_SEED)\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str,...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_concurrency()\n    return xargs.xargs(cmd, file_args, target_concurrency"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    random.seed(FIXED_RANDOM_SEED)\n    seq = list(seq)\n    random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str,...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_concurrency()\n    return xargs.xargs(cmd, file_args, target_concurrency", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["\ndef parse_version(s: str) -> tuple[int,...]:\n    \n\ndef check_min_version(version: str) -> None:\n    \n\ndef _STAGES = {\n    'commit': 'pre-commit',\n   'merge-commit': 'pre-merge-commit',\n    'push': 'pre-push',\n}\n\ndef transform_stage(stage: str) -> str:\n    \n\ndef hook_cmd(entry: str, args: Sequence[str]) -> tuple[str,...]:\n    \n\ndef basic_run_hook(\n        prefix: Prefix,\n        entry: str,\n        args: Sequence[str],\n        file_args: Sequence[str],\n        *,\n        is_local: bool,\n        require_serial: bool,\n        color: bool,\n)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef parse_version(s: str) -> tuple[int,...]:\n    \n\ndef check_min_version(version: str) -> None:\n    \n\ndef _STAGES = {\n    'commit': 'pre-commit',\n   'merge-commit': 'pre-merge-commit',\n    'push': 'pre-push',\n}\n\ndef transform_stage(stage: str) -> str:\n    \n\ndef hook_cmd(entry: str, args: Sequence[str]) -> tuple[str,...]:\n    \n\ndef basic_run_hook(\n        prefix: Prefix,\n        entry: str,\n        args: Sequence[str],\n        file_args: Sequence[str],\n        *,\n        is_local: bool,\n        require_serial: bool,\n        color: bool,\n)", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["\ndef normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n    \n    if len(cmd) > 1:\n        return cmd\n    if not isinstance(cmd[0], str):\n        try:\n            cmd = tuple(cmd)\n        except:\n            pass\n    if not isinstance(cmd[0], str):\n        return cmd\n    if not os.path.exists(cmd[0]):\n        return cmd\n    exe = normexe(cmd[0])\n    cmd = parse_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n    \n    if len(cmd) > 1:\n        return cmd\n    if not isinstance(cmd[0], str):\n        try:\n            cmd = tuple(cmd)\n        except:\n            pass\n    if not isinstance(cmd[0], str):\n        return cmd\n    if not os.path.exists(cmd[0]):\n        return cmd\n    exe = normexe(cmd[0])\n    cmd = parse_", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["\ndef gaussian(self, x):\n        \n        return 0.5 * (1 + np.tanh((x - 0.2) / 0.1))\n\ndef step(self, x):\n        \n        return 0.5 + 0.5 * (x > 0.2)\n\ndef sinusoid(self, x):\n        \n        return 0.5 + 0.5 * np.sin(2 * np.pi * x)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef gaussian(self, x):\n        \n        return 0.5 * (1 + np.tanh((x - 0.2) / 0.1))\n\ndef step(self, x):\n        \n        return 0.5 + 0.5 * (x > 0.2)\n\ndef sinusoid(self, x):\n        \n        return 0.5 + 0.5 * np.sin(2 * np.pi * x)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["\ndef get_pattern(self, pattern, strip=True):\n        \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_pattern(self, pattern, strip=True):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["\ndef deep_merge_nodes(nodes):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["\ndef parse_arguments(*arguments):\n    \n    \n    config_paths = collect.get_default_config_paths()\n    parser = ArgumentParser(description='Validate borgmatic configuration file(s).')\n    parser.add_argument(\n        '-c',\n        '--"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    \n    config_paths = collect.get_default_config_paths()\n    parser = ArgumentParser(description='Validate borgmatic configuration file(s).')\n    parser.add_argument(\n        '-c',\n        '--", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["\ndef parser_flags(parser):\n    \n    return''.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions =''.join(subparsers.choices.keys())\n    return '\\n'.join"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return''.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions =''.join(subparsers.choices.keys())\n    return '\\n'.join", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n       "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["\ndef make_parsers():\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["\ndef was_processed(processed, path_name, verbose):\n    \n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef was_processed(processed, path_name, verbose):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["\ndef regex_dict(item):\n    \n\ndef regex_dict(item):\n    \n    return {re.compile(key): value for key, value in item.items()}\n\ndef test_regex_dict():\n    \n    item = {'*.cpp': 'cpp'}\n    assert regex_dict(item) == {'(?i)(?<!\\\\)(?:.*\\\\.cpp)': 'cpp'}\n\n    item = {'*.cpp': 'cpp', '*.h': 'h'}\n    assert regex_dict(item) == {'(?i)(?<!\\\\)(?:.*\\\\.cpp)': 'cpp',\n                                '(?i)(?<!\\\\)(?:.*\\\\.h)': 'h'}\n\ndef test_regex_dict_2():\n    \n    item = {'*.cpp': 'cpp'}\n    assert regex_dict(item) == {'(?i)(?<!"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef regex_dict(item):\n    \n\ndef regex_dict(item):\n    \n    return {re.compile(key): value for key, value in item.items()}\n\ndef test_regex_dict():\n    \n    item = {'*.cpp': 'cpp'}\n    assert regex_dict(item) == {'(?i)(?<!\\\\)(?:.*\\\\.cpp)': 'cpp'}\n\n    item = {'*.cpp': 'cpp', '*.h': 'h'}\n    assert regex_dict(item) == {'(?i)(?<!\\\\)(?:.*\\\\.cpp)': 'cpp',\n                                '(?i)(?<!\\\\)(?:.*\\\\.h)': 'h'}\n\ndef test_regex_dict_2():\n    \n    item = {'*.cpp': 'cpp'}\n    assert regex_dict(item) == {'(?i)(?<!", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["\ndef remove_ending_os_sep(input_list):\n    \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef remove_ending_os_sep(input_list):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["\ndef run_command(self, cmd, verbose):\n        \n--------------------------------------------------\nthe below code fragment can be found in:\nmakeprojects/makerez.py\n--------------------------------------------------\n\n        \n        \n        \n        \n        "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef run_command(self, cmd, verbose):\n        \n--------------------------------------------------\nthe below code fragment can be found in:\nmakeprojects/makerez.py\n--------------------------------------------------\n\n        \n        \n        \n        \n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        array = np.random.rand(*shape)\n        array = array.astype(dtype)\n        return array\n\n@pytest.fixture\ndef fake_spectrogram():\n        \n        meta = {\n                \"observatory\": \"Fake Observatory\",\n                \"instrument\": \"Fake Instrument\",\n                \"detector\": \"Fake Detector\",\n                \"times\": np.arange(1440) * u.min,\n                \"wavelength\": np.arange(100) * u.MHz,\n        }\n        array = make_array((48, 1440), dtype=np.dtype(\"float32\"))\n        file = Path(\"fake.dat\")\n        file.write_bytes(array)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        array = np.random.rand(*shape)\n        array = array.astype(dtype)\n        return array\n\n@pytest.fixture\ndef fake_spectrogram():\n        \n        meta = {\n                \"observatory\": \"Fake Observatory\",\n                \"instrument\": \"Fake Instrument\",\n                \"detector\": \"Fake Detector\",\n                \"times\": np.arange(1440) * u.min,\n                \"wavelength\": np.arange(100) * u.MHz,\n        }\n        array = make_array((48, 1440), dtype=np.dtype(\"float32\"))\n        file = Path(\"fake.dat\")\n        file.write_bytes(array)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["\ndef addignored(self, ignored):\n        \n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True,\n                              text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\n\ndef test_addignored():\n    \"\"\"Check the correctness of addignored\n    \"\"\"\n    assert addignored(\".\") == \" ocfl/__pycache__/\"\n\n\nif __name__ == \"__main__\":\n    test_addignored()\n/README.md\n\n[![Build Status](https"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef addignored(self, ignored):\n        \n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True,\n                              text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\n\ndef test_addignored():\n    \"\"\"Check the correctness of addignored\n    \"\"\"\n    assert addignored(\".\") == \" ocfl/__pycache__/\"\n\n\nif __name__ == \"__main__\":\n    test_addignored()\n/README.md\n\n[![Build Status](https", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["\ndef reset(self):\n        \n\ndef compute(self):\n        \n\ndef visit_tgroup(self, node):\n        pass\n\ndef depart_tgroup(self, node):\n        pass\n\ndef visit_thead(self, node):\n        pass\n\ndef depart_thead(self, node):\n        pass\n\ndef visit_tip(self, node):\n        self.visit_admonition(node, 'tip')\n\ndepart_tip = depart_admonition\n\ndef visit_important(self, node):\n        self.generate_admonition(node, 'important')\n\ndepart_important = depart_warning\n\ndef visit_note(self, node):\n        self.generate_admonition(node, 'note')\n\ndepart_note = depart_warning\n\ndef visit_hint("], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef reset(self):\n        \n\ndef compute(self):\n        \n\ndef visit_tgroup(self, node):\n        pass\n\ndef depart_tgroup(self, node):\n        pass\n\ndef visit_thead(self, node):\n        pass\n\ndef depart_thead(self, node):\n        pass\n\ndef visit_tip(self, node):\n        self.visit_admonition(node, 'tip')\n\ndepart_tip = depart_admonition\n\ndef visit_important(self, node):\n        self.generate_admonition(node, 'important')\n\ndepart_important = depart_warning\n\ndef visit_note(self, node):\n        self.generate_admonition(node, 'note')\n\ndepart_note = depart_warning\n\ndef visit_hint(", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["\ndef to_csv(self, separator=\",\", header=None):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef to_csv(self, separator=\",\", header=None):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self, separator=\",\", header=None, **kwds):\n        \n\ndef to_csv(self,", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["\ndef _get_err_indices(self, coord_name):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _get_err_indices(self, coord_name):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["\ndef _update_context(self, context):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _update_context(self, context):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [\n            edges[coord][i+1] - edges[coord][i]\n            for coord, i in enumerate(ind)\n        ]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [\n            edges[coord][i+1] - edges[coord][i]\n            for coord, i in enumerate(ind)\n        ]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["\ndef is_fill_request_seq(seq):\n    \n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method 'run'.\"\"\"\n    return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_source(seq):\n    \"\"\"Sequence is a Source, if and only if its type is Source.\"\"\"\n    from lena.core import source\n    return isinstance(seq, source.Source"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef is_fill_request_seq(seq):\n    \n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    \"\"\"Object contains executable method 'run'.\"\"\"\n    return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_source(seq):\n    \"\"\"Sequence is a Source, if and only if its type is Source.\"\"\"\n    from lena.core import source\n    return isinstance(seq, source.Source", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["\ndef is_fill_request_el(obj):\n    \n    return isinstance(obj, FillRequest)\n\n\ndef is_fill_request_seq(seq):\n    '''Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        if any(isinstance(item, FillRequest) for item in seq):\n            is_fcseq = True\n    return is_fcseq\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_request_el(obj):\n    \n    return isinstance(obj, FillRequest)\n\n\ndef is_fill_request_seq(seq):\n    '''Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        if any(isinstance(item, FillRequest) for item in seq):\n            is_fcseq = True\n    return is_fcseq\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["\ndef is_run_el(obj):\n    \n\n    return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_fill_compute_el(obj):\n    \n    return (hasattr(obj, \"fill\")\n            and hasattr(obj, \"compute\")\n            and callable(obj.fill)\n            and callable(obj.compute))\n\ndef is_fcseq(seq):\n    \n    from lena.core import fill_compute_seq\n    return isinstance(seq, fill_compute_seq.FillComputeSeq)\n\ndef is_fill_request_el(obj):\n    '''Object contains"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_run_el(obj):\n    \n\n    return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_fill_compute_el(obj):\n    \n    return (hasattr(obj, \"fill\")\n            and hasattr(obj, \"compute\")\n            and callable(obj.fill)\n            and callable(obj.compute))\n\ndef is_fcseq(seq):\n    \n    from lena.core import fill_compute_seq\n    return isinstance(seq, fill_compute_seq.FillComputeSeq)\n\ndef is_fill_request_el(obj):\n    '''Object contains", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["\ndef is_fill_compute_el(obj):\n    "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_compute_el(obj):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["\ndef difference(d1, d2, level=-1):\n    \n\n\n\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        return d1\n\n    if d1 == d2:\n        return {}\n\n    if level == 0:\n        return d1\n\n    res7"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef difference(d1, d2, level=-1):\n    \n\n\n\n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        return d1\n\n    if d1 == d2:\n        return {}\n\n    if level == 0:\n        return d1\n\n    res7", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["\ndef fill(self, coord, weight=1):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef fill(self, coord, weight=1):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = seq\n    sequence_type = type(seq)\n    if isinstance(seq, source.Source):\n        sequence_type = \"source\"\n    elif isinstance(seq, fill_compute_seq.FillComputeSeq):\n        sequence_type = \"fill_compute\"\n    elif isinstance(seq, fill_request_seq.FillRequestSeq):\n        sequence_type = \"fill_request\"\n    elif isinstance(seq, sequence.Sequence):\n        sequence_type = \"sequence\"\n    if sequence_type:\n        pass\n    elif ct.is_fill_compute_seq(seq):\n        sequence_type = \"fill_compute\"\n        if not ct.is_fill_compute_el(seq):\n            sequence = fill_compute_seq"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = seq\n    sequence_type = type(seq)\n    if isinstance(seq, source.Source):\n        sequence_type = \"source\"\n    elif isinstance(seq, fill_compute_seq.FillComputeSeq):\n        sequence_type = \"fill_compute\"\n    elif isinstance(seq, fill_request_seq.FillRequestSeq):\n        sequence_type = \"fill_request\"\n    elif isinstance(seq, sequence.Sequence):\n        sequence_type = \"sequence\"\n    if sequence_type:\n        pass\n    elif ct.is_fill_compute_seq(seq):\n        sequence_type = \"fill_compute\"\n        if not ct.is_fill_compute_el(seq):\n            sequence = fill_compute_seq", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["\ndef scale(self, other=None, recompute=False):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None, recompute=False):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["\ndef scale(self, other=None):\n        \n\n@classmethod\ndef from_list(cls, list_of_tuples, field_names=None):\n    '''Create a graph from a list of tuples.\n\n    *list_of_tuples* must be a list of tuples, where each tuple\n    defines a point in the graph.\n    Each tuple may contain any number of values,\n    which will be interpreted as the coordinates of the point.\n\n    *field_names* is a list of strings, which are used to name the\n    coordinates of the points.\n    If *field_names* is not provided, it is set to ``['x', 'y', 'z']``.\n\n    If the number of values in each tuple is different,\n    the function will raise :exc:`~.LenaValueError`.\n    '''\n\n@classmethod\ndef from_dict(cls, dict_of_lists, field_names=None):\n    '''Create a graph from a dict of"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None):\n        \n\n@classmethod\ndef from_list(cls, list_of_tuples, field_names=None):\n    '''Create a graph from a list of tuples.\n\n    *list_of_tuples* must be a list of tuples, where each tuple\n    defines a point in the graph.\n    Each tuple may contain any number of values,\n    which will be interpreted as the coordinates of the point.\n\n    *field_names* is a list of strings, which are used to name the\n    coordinates of the points.\n    If *field_names* is not provided, it is set to ``['x', 'y', 'z']``.\n\n    If the number of values in each tuple is different,\n    the function will raise :exc:`~.LenaValueError`.\n    '''\n\n@classmethod\ndef from_dict(cls, dict_of_lists, field_names=None):\n    '''Create a graph from a dict of", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n\n    graph = Graph(scale=scale)\n    for bin_ in hist.bins:\n        if make_value:\n            value = make_value(bin_)\n        else:\n            value = bin_\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph\nfrom __future__ import print_function\n\nimport six\n\nfrom lena.structures.graph import Graph\nfrom lena.structures.graph"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n\n    graph = Graph(scale=scale)\n    for bin_ in hist.bins:\n        if make_value:\n            value = make_value(bin_)\n        else:\n            value = bin_\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph\nfrom __future__ import print_function\n\nimport six\n\nfrom lena.structures.graph import Graph\nfrom lena.structures.graph", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["\ndef deep_merge_nodes(nodes):\n    \n\n\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(node)\n        elif isinstance(node, Sequence):\n            result[node[0]] = result.get(node[0], []) + node[1].value\n        else:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n\n\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(node)\n        elif isinstance(node, Sequence):\n            result[node[0]] = result.get(node[0], []) + node[1].value\n        else:", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["\ndef parse_arguments(*arguments):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["\ndef parser_flags(parser):\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef bash_completion():\n    \n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["\ndef bash_completion():\n    \n\n\ndef zsh_completion():\n    \n\n\ndef powershell_completion():"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef bash_completion():\n    \n\n\ndef zsh_completion():\n    \n\n\ndef powershell_completion():", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    arguments, remaining_action_arguments = parse_arguments_for_actions(\n        unparsed_arguments, action_parsers.choices, global_parser\n    )"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    arguments, remaining_action_arguments = parse_arguments_for_actions(\n        unparsed_arguments, action_parsers.choices, global_parser\n    )", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n\n\n    return (\n        (\n            {\n                subparser_name: subparser.parse_args(remaining_arguments)\n                for subparser_name, subparser in subparsers.items()\n                if subparser_name in remaining_arguments\n            },\n            list(remaining_arguments),\n        )\n        for remaining_arguments in split_arguments_by_subparsers(unparsed_arguments, subparsers)\n    )"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n\n\n    return (\n        (\n            {\n                subparser_name: subparser.parse_args(remaining_arguments)\n                for subparser_name, subparser in subparsers.items()\n                if subparser_name in remaining_arguments\n            },\n            list(remaining_arguments),\n        )\n        for remaining_arguments in split_arguments_by_subparsers(unparsed_arguments, subparsers)\n    )", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["\ndef make_parsers():\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["\ndef parser_flags(parser):\n    \n\ndef bash_completion():\n    \n\ndef get_subactions_for_actions(action_parsers):\n    \n\ndef get_subactions_for_actions(action_parsers):\n    \n\ndef get_subaction_parsers(action_parser):\n    \n\ndef get_subaction_parsers(action_parser):\n    '''Given an argparse.ArgumentParser"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n\ndef bash_completion():\n    \n\ndef get_subactions_for_actions(action_parsers):\n    \n\ndef get_subactions_for_actions(action_parsers):\n    \n\ndef get_subaction_parsers(action_parser):\n    \n\ndef get_subaction_parsers(action_parser):\n    '''Given an argparse.ArgumentParser", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["\ndef parse_frequency(frequency):\n    \nif frequency is None or frequency == 'always':\n    return None\n\nif frequency == 'never':\n    return datetime.timedelta(seconds=0)\n\nif ':' in frequency:\n    frequency, interval = frequency.split(':')\n    interval = int(interval)\nelse:\n    interval = 1\n\nif frequency == 'hourly':\n    return datetime.timedelta(hours=interval)\n\nif frequency == 'daily':\n    return datetime.timedelta(days=interval)\n\nif frequency == 'weekly':\n    return datetime.timedelta(weeks=interval)\n\nif frequency =='monthly':\n    return datetime.timedelta(days=interval * 7)\n\nif frequency == 'yearly':\n    return datetime.timedelta(days=interval * 365)\n\nraise ValueError(f'Invalid frequency {frequency!r}')\n\ndef parse_cron(cron):\n    '''Given a cron string"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef parse_frequency(frequency):\n    \nif frequency is None or frequency == 'always':\n    return None\n\nif frequency == 'never':\n    return datetime.timedelta(seconds=0)\n\nif ':' in frequency:\n    frequency, interval = frequency.split(':')\n    interval = int(interval)\nelse:\n    interval = 1\n\nif frequency == 'hourly':\n    return datetime.timedelta(hours=interval)\n\nif frequency == 'daily':\n    return datetime.timedelta(days=interval)\n\nif frequency == 'weekly':\n    return datetime.timedelta(weeks=interval)\n\nif frequency =='monthly':\n    return datetime.timedelta(days=interval * 7)\n\nif frequency == 'yearly':\n    return datetime.timedelta(days=interval * 365)\n\nraise ValueError(f'Invalid frequency {frequency!r}')\n\ndef parse_cron(cron):\n    '''Given a cron string", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["\ndef make_find_paths(find_paths):\n    \n\ndef capture_archive_listing(repository_path, find_paths):\n    \n\ndef make_command(repository_path, action_name, arguments, paths):\n    \n\ndef make_command_and_paths(repository_path, action_name, arguments, paths):\n    \n\ndef make_command_and_paths(repository_path, action_name, arguments, paths):\n    '''Given a repository path, an action name, an ArgumentParser instance, and a list of paths, return a"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef make_find_paths(find_paths):\n    \n\ndef capture_archive_listing(repository_path, find_paths):\n    \n\ndef make_command(repository_path, action_name, arguments, paths):\n    \n\ndef make_command_and_paths(repository_path, action_name, arguments, paths):\n    \n\ndef make_command_and_paths(repository_path, action_name, arguments, paths):\n    '''Given a repository path, an action name, an ArgumentParser instance, and a list of paths, return a", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n\ndef read_configuration(config_filename):\n    \n\ndef set_values(config, keys, value):\n    '''Given a hierarchy of configuration dicts, a sequence of parsed key strings, and a string value,\n       descend into the hierarchy based on the keys to set the value into the right place'''\n\ndef convert_value_type(value):\n    '''Given a string value, determine its logical type (string, boolean, integer, etc.), and return\n       it converted to that type.\n\n    Raise ruamel.yaml.error.YAMLError if there's a parse issue with the YAML.'''\n\ndef strip_section_names(parsed_override_key):\n    '''Given a parsed override key as a tuple of option and suboption names, strip out any initial\n       section name'''\n\ndef generate_configuration(config_path, repository_"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n\ndef read_configuration(config_filename):\n    \n\ndef set_values(config, keys, value):\n    '''Given a hierarchy of configuration dicts, a sequence of parsed key strings, and a string value,\n       descend into the hierarchy based on the keys to set the value into the right place'''\n\ndef convert_value_type(value):\n    '''Given a string value, determine its logical type (string, boolean, integer, etc.), and return\n       it converted to that type.\n\n    Raise ruamel.yaml.error.YAMLError if there's a parse issue with the YAML.'''\n\ndef strip_section_names(parsed_override_key):\n    '''Given a parsed override key as a tuple of option and suboption names, strip out any initial\n       section name'''\n\ndef generate_configuration(config_path, repository_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["\ndef _resolve_string(matcher):\n    \n\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    '''\n    Resolves variables like or ${FOO} from given configuration with values from process environment.\n\n    Supported formats:\n     - ${FOO} will return FOO env variable\n     - ${FOO-bar} or ${FOO:-bar} will return FOO env variable if it exists, else \"bar\"\n\n    If any variable is missing in environment and no default value is provided, an Error is"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _resolve_string(matcher):\n    \n\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    '''\n    Resolves variables like or ${FOO} from given configuration with values from process environment.\n\n    Supported formats:\n     - ${FOO} will return FOO env variable\n     - ${FOO-bar} or ${FOO:-bar} will return FOO env variable if it exists, else \"bar\"\n\n    If any variable is missing in environment and no default value is provided, an Error is", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["\ndef _replace_url_args(url, url_args):\n    \n    return url\n\n\nclass SEEDBaseClient(JSONAPI):\n    \"\"\"Interact with SEED API.\n\n    Raises a SEEDError on an API Error. No further logging or error\n    handling is done. This the responsibility of the caller.\n\n    This should never be used directly, instead inherit from\n    one of the SEED Read or ReadWrite classes with mixins.\n\n    Endpoint names are set in config, and can be accessed as self.endpoints.\n    \"\"\"\n\n    def __init__(self, base_url, username, url_map=None, version=None, port=None):\n        \n        if version is None:\n            version = 'v3'\n        if not url_map"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_url_args(url, url_args):\n    \n    return url\n\n\nclass SEEDBaseClient(JSONAPI):\n    \"\"\"Interact with SEED API.\n\n    Raises a SEEDError on an API Error. No further logging or error\n    handling is done. This the responsibility of the caller.\n\n    This should never be used directly, instead inherit from\n    one of the SEED Read or ReadWrite classes with mixins.\n\n    Endpoint names are set in config, and can be accessed as self.endpoints.\n    \"\"\"\n\n    def __init__(self, base_url, username, url_map=None, version=None, port=None):\n        \n        if version is None:\n            version = 'v3'\n        if not url_map", "is_pass": false, "return_code": 1}]}
