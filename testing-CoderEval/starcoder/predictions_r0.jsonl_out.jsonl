{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \n\n@h.hydrator(h.Integer)\ndef hydrate_integer(integer):\n    \n\n@h.hydrator(h.Float)\ndef hydrate_float(float):\n    \n\n@h.hydrator(h.Decimal)\ndef hydrate_decimal(decimal):\n    \n\n@h.hydrator(h.Boolean)\ndef hydrate_boolean(boolean):\n    \n\n@h.hydrator(h.Choice)\ndef hydrate_choice(choice, choices):\n    \n\n@h.hydrator(h.Enum)\ndef hydrate_enum("], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \n\n@h.hydrator(h.Integer)\ndef hydrate_integer(integer):\n    \n\n@h.hydrator(h.Float)\ndef hydrate_float(float):\n    \n\n@h.hydrator(h.Decimal)\ndef hydrate_decimal(decimal):\n    \n\n@h.hydrator(h.Boolean)\ndef hydrate_boolean(boolean):\n    \n\n@h.hydrator(h.Choice)\ndef hydrate_choice(choice, choices):\n    \n\n@h.hydrator(h.Enum)\ndef hydrate_enum(", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \n\ndef hydrate_timedelta(value):\n    \n\ndef dehydrate_date(value):\n    \n\ndef hydrate_date(value):\n    \n\ndef dehydrate_time(value):\n    \n\ndef hydrate_time(value):\n    \n\ndef dehydrate_datetime(value):\n    \n\ndef hydrate_datetime(value):\n    \n\ndef dehydrate_decimal(value):\n    \n\ndef hydrate_decimal(value):\n    '''"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \n\ndef hydrate_timedelta(value):\n    \n\ndef dehydrate_date(value):\n    \n\ndef hydrate_date(value):\n    \n\ndef dehydrate_time(value):\n    \n\ndef hydrate_time(value):\n    \n\ndef dehydrate_datetime(value):\n    \n\ndef hydrate_datetime(value):\n    \n\ndef dehydrate_decimal(value):\n    \n\ndef hydrate_decimal(value):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \n\ndef dehydrate_datetime(value):\n    \n\ndef dehydrate_date(value):\n    \n\ndef dehydrate_decimal(value):\n    \n\ndef dehydrate_boolean(value):\n    \n\ndef dehydrate_uuid(value"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \n\ndef dehydrate_datetime(value):\n    \n\ndef dehydrate_date(value):\n    \n\ndef dehydrate_decimal(value):\n    \n\ndef dehydrate_boolean(value):\n    \n\ndef dehydrate_uuid(value", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    \n    return json.loads(value)\n\nclass Point(models.Model):\n    '''Point model.\n\n    Fields:\n        name (CharField): Name of the point.\n        description (TextField): Description of the point.\n        location (PointField): Location of the point.\n        created (DateTimeField): Date time the point was created.\n    '''\n\n    name = models.CharField(max_length=255, verbose_name='name', help_text='Name of the point.')\n    description = models.TextField(verbose_name='description', help_text='Description of the point.')\n    location = models.PointField(srid=4326, verbose_name='location', help_text='Location of the point.', null=True)\n    created = models.DateTimeField(auto_now_add=True, verbose_name='created', help_"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    \n    return json.loads(value)\n\nclass Point(models.Model):\n    '''Point model.\n\n    Fields:\n        name (CharField): Name of the point.\n        description (TextField): Description of the point.\n        location (PointField): Location of the point.\n        created (DateTimeField): Date time the point was created.\n    '''\n\n    name = models.CharField(max_length=255, verbose_name='name', help_text='Name of the point.')\n    description = models.TextField(verbose_name='description', help_text='Description of the point.')\n    location = models.PointField(srid=4326, verbose_name='location', help_text='Location of the point.', null=True)\n    created = models.DateTimeField(auto_now_add=True, verbose_name='created', help_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n        \n        return self.records.keys()\n\n    def values(self):\n        \n        return self.records.values()\n\n    def items(self):\n        \n        return self.records.items()\n\n    def __iter__(self):\n        \n        return iter(self.records)\n\n    def __len__(self):\n        \n        return len(self.records)\n\n    def __eq__(self, other):\n        \n        return isinstance(other, Record) and self.records == other.records\n\n    def __ne__(self, other):\n        \n        return not self.__eq__(other)\n\n    def __repr__("], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n        \n        return self.records.keys()\n\n    def values(self):\n        \n        return self.records.values()\n\n    def items(self):\n        \n        return self.records.items()\n\n    def __iter__(self):\n        \n        return iter(self.records)\n\n    def __len__(self):\n        \n        return len(self.records)\n\n    def __eq__(self, other):\n        \n        return isinstance(other, Record) and self.records == other.records\n\n    def __ne__(self, other):\n        \n        return not self.__eq__(other)\n\n    def __repr__(", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\nclass BoltProtocolV3(BoltProtocol):\n    __version__ = (3, 0)\n    __name__ = 'BoltProtocolV3'\n    __handler__ = BoltHandlerV3\n    __driver__ = BoltDriverV3\n\nclass BoltProtocolV4(BoltProtocol):\n    __version__ = (4, 0)\n    __name__ = 'BoltProtocolV4'\n    __handler__ = BoltHandlerV4\n    __driver__ = BoltDriverV4\n\nclass BoltProtocolV5(BoltProtocol):\n    __version__ = (5, 0)\n    __name__ = 'BoltProtocolV5'\n    __handler__ = BoltHandlerV5\n    __driver__ = BoltDriverV5\n\nclass BoltProtocolV1(BoltProtocol):\n    __version__ = (1, 0)\n   "], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\nclass BoltProtocolV3(BoltProtocol):\n    __version__ = (3, 0)\n    __name__ = 'BoltProtocolV3'\n    __handler__ = BoltHandlerV3\n    __driver__ = BoltDriverV3\n\nclass BoltProtocolV4(BoltProtocol):\n    __version__ = (4, 0)\n    __name__ = 'BoltProtocolV4'\n    __handler__ = BoltHandlerV4\n    __driver__ = BoltDriverV4\n\nclass BoltProtocolV5(BoltProtocol):\n    __version__ = (5, 0)\n    __name__ = 'BoltProtocolV5'\n    __handler__ = BoltHandlerV5\n    __driver__ = BoltDriverV5\n\nclass BoltProtocolV1(BoltProtocol):\n    __version__ = (1, 0)\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    \n\n@unit_of_work(metadata)\ndef do_work():\n    pass\n\ndef get_unit_of_work_from_session(session, function):\n    \n\ndef get_unit_of_work_from_connection(connection, function):\n    \n\nclass Session(object):\n    '''A session represents a single unit of work. A session is instantiated by calling the Session class, and has a property called transaction which is an instance of Transaction, which can be used to control the transaction. A session is also used to execute queries on the database. To create a new session,"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \n\n@unit_of_work(metadata)\ndef do_work():\n    pass\n\ndef get_unit_of_work_from_session(session, function):\n    \n\ndef get_unit_of_work_from_connection(connection, function):\n    \n\nclass Session(object):\n    '''A session represents a single unit of work. A session is instantiated by calling the Session class, and has a property called transaction which is an instance of Transaction, which can be used to control the transaction. A session is also used to execute queries on the database. To create a new session,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n        \n```\n\nThe items are stored in an array called `self.data`. The index of the first item is `self.start`. The index of the last item is `self.end`.\n\nIf the current list is empty, then `self.start` and `self.end` are both `-1`. If the current list is empty, then `self.end` is the index of the first item.\n\nThe `len()` function of the `DList` class is implemented as follows:\n\n```python\ndef len(self):\n    \n    if self.start == -1:\n        return 0\n    else:\n        return self.end - self.start + 1\n```\n\nThis implementation is a bit inefficient because it counts the number of items by traversing the list. We can improve the efficiency by keeping track of the number of"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n        \n```\n\nThe items are stored in an array called `self.data`. The index of the first item is `self.start`. The index of the last item is `self.end`.\n\nIf the current list is empty, then `self.start` and `self.end` are both `-1`. If the current list is empty, then `self.end` is the index of the first item.\n\nThe `len()` function of the `DList` class is implemented as follows:\n\n```python\ndef len(self):\n    \n    if self.start == -1:\n        return 0\n    else:\n        return self.end - self.start + 1\n```\n\nThis implementation is a bit inefficient because it counts the number of items by traversing the list. We can improve the efficiency by keeping track of the number of", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n        \n```\n\n\n`Record` is a lightweight object that is used to represent a single row of a dataset.\n\n```python\nclass Record(dict):\n    \n```\n\n**Example**\n\n```python\nfrom data import Record\n\nrecord = Record({\n    'name': '',\n    'job': 'Software Engineer',\n    'age': 32,\n})\n\nprint(record.name)\n```\n\n\n`ListRecord` is a lightweight object that is used to represent a single row of a dataset.\n\n```python\nclass ListRecord(list):\n    \n```\n\n**Example**\n\n```python\nfrom data import ListRecord\n\nrecord = ListRecord"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n        \n```\n\n\n`Record` is a lightweight object that is used to represent a single row of a dataset.\n\n```python\nclass Record(dict):\n    \n```\n\n**Example**\n\n```python\nfrom data import Record\n\nrecord = Record({\n    'name': '',\n    'job': 'Software Engineer',\n    'age': 32,\n})\n\nprint(record.name)\n```\n\n\n`ListRecord` is a lightweight object that is used to represent a single row of a dataset.\n\n```python\nclass ListRecord(list):\n    \n```\n\n**Example**\n\n```python\nfrom data import ListRecord\n\nrecord = ListRecord", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n        \n```\n\nThe `data` method returns the raw keys and values of the record as a dictionary.\n\nIn the following example, the `data` method is used to return only the `id` and `name` values of the record:\n\n```python\nrecord = data.Record({\"id\": \"123\", \"name\": \"\", \"color\": \"blue\"})\nrecord.data(\"id\", \"name\")\n```\n\nIn the following example, the `data` method is used to return only the `name` value of the record:\n\n```python\nrecord = data.Record({\"id\": \"123\", \"name\": \"\", \"color\": \"blue\"})\nrecord.data(name=\"name\")\n```\n\nIn the following example"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n        \n```\n\nThe `data` method returns the raw keys and values of the record as a dictionary.\n\nIn the following example, the `data` method is used to return only the `id` and `name` values of the record:\n\n```python\nrecord = data.Record({\"id\": \"123\", \"name\": \"\", \"color\": \"blue\"})\nrecord.data(\"id\", \"name\")\n```\n\nIn the following example, the `data` method is used to return only the `name` value of the record:\n\n```python\nrecord = data.Record({\"id\": \"123\", \"name\": \"\", \"color\": \"blue\"})\nrecord.data(name=\"name\")\n```\n\nIn the following example", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n        \n```\n\n\n```python\ndef pop_u32(self):\n        \n```\n\n\n```python\ndef pop_u64(self):\n        \n```\n\n\n```python\ndef pop_u128(self):\n        \n```\n\n\n```python\ndef pop_i8(self):\n        '''Remove the last byte of data, returning it as"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n        \n```\n\n\n```python\ndef pop_u32(self):\n        \n```\n\n\n```python\ndef pop_u64(self):\n        \n```\n\n\n```python\ndef pop_u128(self):\n        \n```\n\n\n```python\ndef pop_i8(self):\n        '''Remove the last byte of data, returning it as", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DISCARD, n, qid, dehydration_hooks,\n                  hydration_hooks, **handlers)\n\n    def dehydrate(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DEHYDRATE, n, qid, dehydration_hooks,\n                  hydration_hooks, **handlers)\n\n    def dehydration_complete(self, n=-1, qid=-1, dehydration_hooks=None,\n                             hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DEHYDRATION_COMPLETE, n, qid,"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DISCARD, n, qid, dehydration_hooks,\n                  hydration_hooks, **handlers)\n\n    def dehydrate(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DEHYDRATE, n, qid, dehydration_hooks,\n                  hydration_hooks, **handlers)\n\n    def dehydration_complete(self, n=-1, qid=-1, dehydration_hooks=None,\n                             hydration_hooks=None, **handlers):\n        \n\tself.append(messages.DEHYDRATION_COMPLETE, n, qid,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n\n...\n\n        self._output_queue.put(BEGIN(mode=mode, bookmarks=bookmarks,\n                                      metadata=metadata, timeout=timeout,\n                                      db=db, imp_user=imp_user))\n\n...\n\n    def commit(self, timeout=None, db=None):\n        \n\n        self._output_queue.put(COMMIT(timeout=timeout, db=db))\n\n...\n\n    def rollback(self, timeout=None, db=None):\n        \n\n        self._output_queue.put(ROLLBACK(timeout=timeout, db=db))\n\n...\n\nclass BEGIN(Message):\n...\n\n    def __init__(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n                 db=None, imp_user=None):\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n\n...\n\n        self._output_queue.put(BEGIN(mode=mode, bookmarks=bookmarks,\n                                      metadata=metadata, timeout=timeout,\n                                      db=db, imp_user=imp_user))\n\n...\n\n    def commit(self, timeout=None, db=None):\n        \n\n        self._output_queue.put(COMMIT(timeout=timeout, db=db))\n\n...\n\n    def rollback(self, timeout=None, db=None):\n        \n\n        self._output_queue.put(ROLLBACK(timeout=timeout, db=db))\n\n...\n\nclass BEGIN(Message):\n...\n\n    def __init__(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n                 db=None, imp_user=None):\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \n\ndef round_half_to_even(n):\n    if n == int(n):\n        return int(n)\n    return int(n + 0.5)\n    \ndef is_even(n):\n    \n    return n % 2 == 0\n\ndef is_odd(n):\n    \n    return n % 2 == 1\n\ndef is_palindrome(s):\n    \n    return s == s[::-1]\n\ndef has_palindrome(s):\n    '''>>> has_palindrome('abba"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \n\ndef round_half_to_even(n):\n    if n == int(n):\n        return int(n)\n    return int(n + 0.5)\n    \ndef is_even(n):\n    \n    return n % 2 == 0\n\ndef is_odd(n):\n    \n    return n % 2 == 1\n\ndef is_palindrome(s):\n    \n    return s == s[::-1]\n\ndef has_palindrome(s):\n    '''>>> has_palindrome('abba", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    \n    bases = (Point,)\n    attrs = dict(\n        __module__ = __name__,\n        _fields = fields,\n        _srid_map = srid_map,\n        __geo_interface__ = property(lambda self: self.as_geo_json())\n    )\n    name = 'Point_%s' % name\n    return type(name, bases, attrs)\n\ndef geom_type(name, fields, srid_map):\n    \n    bases = (Geometry,)\n    attrs = dict(\n        __module__ = __name__,\n        _fields = fields,\n        _srid_map = srid_map,\n        __geo_interface__ = property(lambda self: self.as_geo_json())\n    )\n    name = 'Geometry_%s' % name\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    \n    bases = (Point,)\n    attrs = dict(\n        __module__ = __name__,\n        _fields = fields,\n        _srid_map = srid_map,\n        __geo_interface__ = property(lambda self: self.as_geo_json())\n    )\n    name = 'Point_%s' % name\n    return type(name, bases, attrs)\n\ndef geom_type(name, fields, srid_map):\n    \n    bases = (Geometry,)\n    attrs = dict(\n        __module__ = __name__,\n        _fields = fields,\n        _srid_map = srid_map,\n        __geo_interface__ = property(lambda self: self.as_geo_json())\n    )\n    name = 'Geometry_%s' % name\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    \n\ndef show_message(message):\n    \n    print message\n\ndef print_help():\n    '''Show the"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    \n\ndef show_message(message):\n    \n    print message\n\ndef print_help():\n    '''Show the", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    \n/tests/test_r.py\nimport sys\nimport pytest\nfrom unittest.mock import patch\n\nimport rpy2.rinterface_lib.callbacks\nimport rpy2.rinterface_lib.embedded\n\nfrom rpy2.robjects.packages import importr\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2 import rinterface\n\nfrom rpy2.robjects import r\nfrom rpy2.robjects import Formula\nfrom rpy2.robjects import NA\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.ro"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    \n/tests/test_r.py\nimport sys\nimport pytest\nfrom unittest.mock import patch\n\nimport rpy2.rinterface_lib.callbacks\nimport rpy2.rinterface_lib.embedded\n\nfrom rpy2.robjects.packages import importr\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2 import rinterface\n\nfrom rpy2.robjects import r\nfrom rpy2.robjects import Formula\nfrom rpy2.robjects import NA\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.robjects.packages import SignatureTranslatedAnonymousPackage\nfrom rpy2.ro", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str,...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n\n\n    cmd = tuple(c.strip() for c in cmd)\n\n    if len(cmd) > 1:\n        raise ValueError('xargs: not implemented for multiple commands')\n\n    cmd = cmd[0].split()\n\n    if len(cmd) < 2:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd[1:]\n\n    if len(cmd_args) < 1:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd_args[0].split()\n\n    if len(cmd_args) < 2:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd_args[1:]\n\n    cmd_args = tuple(a."], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str,...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n\n\n    cmd = tuple(c.strip() for c in cmd)\n\n    if len(cmd) > 1:\n        raise ValueError('xargs: not implemented for multiple commands')\n\n    cmd = cmd[0].split()\n\n    if len(cmd) < 2:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd[1:]\n\n    if len(cmd_args) < 1:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd_args[0].split()\n\n    if len(cmd_args) < 2:\n        raise ValueError('xargs: not implemented for empty arguments')\n\n    cmd_args = cmd_args[1:]\n\n    cmd_args = tuple(a.", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n\n    return seq\n\ndef _map_to_ids(seq: Sequence[str], id_dict: dict[str, int]) -> list[int]:\n    \n    return [id_dict[item] for item in seq]\n\ndef _generate_batches(data: Sequence[int], batch_size: int, drop_last: bool = False) -> Iterator[list[int]]:\n    \n    num_batches = math.ceil(len(data) / batch_size)\n    for i in range(num_batches):\n        if i == num_batches - 1 and drop_last:\n            yield data[i * batch_size:]\n        else:\n            yield data[i * batch_size: (i + 1) * batch_size]\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n\n    return seq\n\ndef _map_to_ids(seq: Sequence[str], id_dict: dict[str, int]) -> list[int]:\n    \n    return [id_dict[item] for item in seq]\n\ndef _generate_batches(data: Sequence[int], batch_size: int, drop_last: bool = False) -> Iterator[list[int]]:\n    \n    num_batches = math.ceil(len(data) / batch_size)\n    for i in range(num_batches):\n        if i == num_batches - 1 and drop_last:\n            yield data[i * batch_size:]\n        else:\n            yield data[i * batch_size: (i + 1) * batch_size]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int,...]:\n    \n/src/pyproject.toml@@ -1,10 +1,10 @@\n [project]\n name = \"pyrseas\"\n-version = \"1.2.0\"\n+version = \"1.2.1\"\n description = \"PostgreSQL Database Schema Management\"\n readme = \"README.md\"\n requires-python = \">=3.7\"\n license = {text = \"BSD-3-Clause\"}\n authors = [\n   {name = \"\"},/src/pyrseas/db/commands.py@@ -19,18 +19,18 @@\n import re\n import shlex\n import subprocess\n import sys\n from typing import Any, Dict, List, Optional, Tuple, cast\n \n from pyrseas.dbmeta import Column, ForeignKey, Index, PrimaryKey, Table\n from pyrseas"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int,...]:\n    \n/src/pyproject.toml@@ -1,10 +1,10 @@\n [project]\n name = \"pyrseas\"\n-version = \"1.2.0\"\n+version = \"1.2.1\"\n description = \"PostgreSQL Database Schema Management\"\n readme = \"README.md\"\n requires-python = \">=3.7\"\n license = {text = \"BSD-3-Clause\"}\n authors = [\n   {name = \"\"},/src/pyrseas/db/commands.py@@ -19,18 +19,18 @@\n import re\n import shlex\n import subprocess\n import sys\n from typing import Any, Dict, List, Optional, Tuple, cast\n \n from pyrseas.dbmeta import Column, ForeignKey, Index, PrimaryKey, Table\n from pyrseas", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n    \n+    # type: ignore[no-untyped-call]\n    if sys.platform == \"win32\" and cmd[0] == '#!':\n        cmd = (cmd[1],) + cmd[2:]\n    return cmd\n\n\ndef get_git_version(cmd: tuple[str,...]) -> str:\n    '''Returns git version as a string.\n\n    :param cmd: tuple of command and arguments\n    '''\n    return check_output(normalize_cmd(cmd)).decode().strip()\n\n\ndef get_git_describe() -> str:\n    '''Returns git describe as a string.\n\n    If running in a git repo, it will return:\n    'git describe --long --tags --dirty --always --match=v[0-9]*'\n    If not, it will return an empty string.\n    '''\n    try:\n        return check_output(normalize_cmd(('git', '"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n    \n+    # type: ignore[no-untyped-call]\n    if sys.platform == \"win32\" and cmd[0] == '#!':\n        cmd = (cmd[1],) + cmd[2:]\n    return cmd\n\n\ndef get_git_version(cmd: tuple[str,...]) -> str:\n    '''Returns git version as a string.\n\n    :param cmd: tuple of command and arguments\n    '''\n    return check_output(normalize_cmd(cmd)).decode().strip()\n\n\ndef get_git_describe() -> str:\n    '''Returns git describe as a string.\n\n    If running in a git repo, it will return:\n    'git describe --long --tags --dirty --always --match=v[0-9]*'\n    If not, it will return an empty string.\n    '''\n    try:\n        return check_output(normalize_cmd(('git', '", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \n\n```\n\nI don't see anything like this in the `cachetools` package, but it is not a hard thing to build on top of these basic primitives.\nUpvotes: 1 username_2: `lock()` function is a decorator to prevent multiple instances of a function to run simultaneously.\n\nSo you can use it like this:\n\n```\nfrom cachetools import cached, cachedmethod, LRUCache, TTLCache, LFUCache\n\n@lock()\ndef my_func():\n    pass\n\n```\n\nTo create a lock for a function, you can use `functools.lock()`\n\n```\nfrom functools import lock\n\n@lock()\ndef my_func():\n    pass\n\n```\nUpvotes: 0 "], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n\n```\n\nI don't see anything like this in the `cachetools` package, but it is not a hard thing to build on top of these basic primitives.\nUpvotes: 1 username_2: `lock()` function is a decorator to prevent multiple instances of a function to run simultaneously.\n\nSo you can use it like this:\n\n```\nfrom cachetools import cached, cachedmethod, LRUCache, TTLCache, LFUCache\n\n@lock()\ndef my_func():\n    pass\n\n```\n\nTo create a lock for a function, you can use `functools.lock()`\n\n```\nfrom functools import lock\n\n@lock()\ndef my_func():\n    pass\n\n```\nUpvotes: 0 ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n```\n\n\nSee the [example](example.py) for a small example.\n\n\n[MIT](LICENSE)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n```\n\n\nSee the [example](example.py) for a small example.\n\n\n[MIT](LICENSE)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    \n\n@mru_cache\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nfor n in range(16):\n    print(n, fib(n))\n\n@mru_cache(typed=True)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(2.5))\n\n@mru_cache(maxsize=1)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(25))\n\n@m"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \n\n@mru_cache\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nfor n in range(16):\n    print(n, fib(n))\n\n@mru_cache(typed=True)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(2.5))\n\n@mru_cache(maxsize=1)\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(25))\n\n@m", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    \n\nclass lru_cache(object):\n    '''Decorator. Caches a function's return value each time it is called. When called later with the same arguments, the cached value is returned, and it is not called again.\n\n    If `maxsize` is set to None, the LRU feature is disabled and the cache can grow without bound.\n\n    Arguments to the cached function must be hashable.\n\n    View the cache statistics named tuple (hits, misses, maxsize, currsize) with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n    Access the underlying function with f.__wrapped__.\n    '''\n\ndef lru_cache(*args, **kwargs):\n    '''\n    lru_cache(*args, **kwargs)\n    Return a decorator that implements the memoizing function.\n\n    The decorated function will cache the return value for each call. Subsequent calls will return the cached"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \n\nclass lru_cache(object):\n    '''Decorator. Caches a function's return value each time it is called. When called later with the same arguments, the cached value is returned, and it is not called again.\n\n    If `maxsize` is set to None, the LRU feature is disabled and the cache can grow without bound.\n\n    Arguments to the cached function must be hashable.\n\n    View the cache statistics named tuple (hits, misses, maxsize, currsize) with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n    Access the underlying function with f.__wrapped__.\n    '''\n\ndef lru_cache(*args, **kwargs):\n    '''\n    lru_cache(*args, **kwargs)\n    Return a decorator that implements the memoizing function.\n\n    The decorated function will cache the return value for each call. Subsequent calls will return the cached", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    '''Decorator to wrap a function with a"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    \n\ndef lfu_cache(maxsize=128, typed=False):\n    '''Decorator to wrap a function with a", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n        \n```\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528`dict`\u7684\u5b9e\u4f8b\u6765\u8fdb\u884c\u6d4b\u8bd5\uff1a\n\n```python\n>>> d = dict(a=1, b=2, c=3)\n>>> d\n{'a': 1, 'c': 3, 'b': 2}\n>>> d.popitem()\n('c', 3)\n>>> d\n{'a': 1, 'b': 2}\n```\n\n\n> 1. \u6ce8\u610f\uff1a\u5f53\u4f7f\u7528`popitem`\u65f6\uff0c\u5b57\u5178\u7684`key`\u548c`value`\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u56e0\u4e3a`dict`\u662f\u4f7f\u7528`hash`\u8868\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u987a\u5e8f\u662f\u968f\u673a\u7684\u3002\n> 2. \u6ce8\u610f\uff1a\u5f53\u5b57\u5178\u4e3a\u7a7a\u65f6\uff0c\u8c03\u7528`popitem`\u4f1a\u629b\u51fa`KeyError`\u5f02\u5e38\u3002\n> "], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n```\n\n\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528`dict`\u7684\u5b9e\u4f8b\u6765\u8fdb\u884c\u6d4b\u8bd5\uff1a\n\n```python\n>>> d = dict(a=1, b=2, c=3)\n>>> d\n{'a': 1, 'c': 3, 'b': 2}\n>>> d.popitem()\n('c', 3)\n>>> d\n{'a': 1, 'b': 2}\n```\n\n\n> 1. \u6ce8\u610f\uff1a\u5f53\u4f7f\u7528`popitem`\u65f6\uff0c\u5b57\u5178\u7684`key`\u548c`value`\u7684\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u56e0\u4e3a`dict`\u662f\u4f7f\u7528`hash`\u8868\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u987a\u5e8f\u662f\u968f\u673a\u7684\u3002\n> 2. \u6ce8\u610f\uff1a\u5f53\u5b57\u5178\u4e3a\u7a7a\u65f6\uff0c\u8c03\u7528`popitem`\u4f1a\u629b\u51fa`KeyError`\u5f02\u5e38\u3002\n> ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n        \n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n/Python/Python_Cookbook/Chapter_1_Data_Structures_and_Algorithms/1.1.py\n\n\"\"\"\nTopic: \u7b2c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\nDesc: \n\"\"\"\n\nimport collections\n\na = [1, 5, 2, 1, 9, 1, 5, 10]\n\nprint(collections.Counter(a))\n\na = {1, 2, 3, 4}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n        \n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n/Python/Python_Cookbook/Chapter_1_Data_Structures_and_Algorithms/1.1.py\n\n\"\"\"\nTopic: \u7b2c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\nDesc: \n\"\"\"\n\nimport collections\n\na = [1, 5, 2, 1, 9, 1, 5, 10]\n\nprint(collections.Counter(a))\n\na = {1, 2, 3, 4}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n        \n\nclass Counter(dict):\n    '''D.update(E, **F) -> None.  Update D from dict/iterable E and F.\n    If E is a dict or a Mapping, but not yet a Counter, just replace D.\n    If E is a sequence of (key, value) pairs, both keys and values are\n    inserted. If E is a Counter instance, A.update(B) adds B's counts to A.'''\n    def __init__(self, *args, **kwargs):\n        \n    def elements(self):\n        \n    def __iter__(self):\n        \n    def __repr__(self):\n        '''x.__repr__() <==> repr(x)"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n        \n\nclass Counter(dict):\n    '''D.update(E, **F) -> None.  Update D from dict/iterable E and F.\n    If E is a dict or a Mapping, but not yet a Counter, just replace D.\n    If E is a sequence of (key, value) pairs, both keys and values are\n    inserted. If E is a Counter instance, A.update(B) adds B's counts to A.'''\n    def __init__(self, *args, **kwargs):\n        \n    def elements(self):\n        \n    def __iter__(self):\n        \n    def __repr__(self):\n        '''x.__repr__() <==> repr(x)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \n```\n\n`cache` is a dictionary-like object that will be used to store results.\n`key` is a callable that takes the same arguments as the decorated function and returns a hashable key. Defaults to a hash of the arguments.\n`lock` is an optional threading.RLock object that will be used to synchronize access to the cache.\n\nExample:\n\n```python\n@cachedmethod(cache=cache)\ndef add(x, y):\n    return x + y\n```\n\n```python\n>>> cache = {}\n>>> add(1, 2)\n3\n>>> add(1, 2)\n3\n```\n\n\nMIT./setup.py\nfrom setuptools import setup\n\nsetup(\n    name='cachedmethod',\n    version='0.1',\n    description='Memoization of class or instance methods',\n    author='',\n    author"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n```\n\n`cache` is a dictionary-like object that will be used to store results.\n`key` is a callable that takes the same arguments as the decorated function and returns a hashable key. Defaults to a hash of the arguments.\n`lock` is an optional threading.RLock object that will be used to synchronize access to the cache.\n\nExample:\n\n```python\n@cachedmethod(cache=cache)\ndef add(x, y):\n    return x + y\n```\n\n```python\n>>> cache = {}\n>>> add(1, 2)\n3\n>>> add(1, 2)\n3\n```\n\n\nMIT./setup.py\nfrom setuptools import setup\n\nsetup(\n    name='cachedmethod',\n    version='0.1',\n    description='Memoization of class or instance methods',\n    author='',\n    author", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr(e, 'context'):  # Python 3.x\n            e = e.context\n        if hasattr(e,'strerror'):\n            e = e.strerror\n        if hasattr(e, 'errno'):\n            e = e.errno\n        if hasattr(e,'strerror'):\n            e = e.strerror\n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr(e, 'path'):\n            e = e.path\n        if hasattr(e, 'filename'):\n            e = e.filename\n        if hasattr(e, 'lineno'):\n            e = e.lineno\n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr(e, 'context'):  # Python 3.x\n            e = e.context\n        if hasattr(e,'strerror'):\n            e = e.strerror\n        if hasattr(e, 'errno'):\n            e = e.errno\n        if hasattr(e,'strerror'):\n            e = e.strerror\n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr(e, 'path'):\n            e = e.path\n        if hasattr(e, 'filename'):\n            e = e.filename\n        if hasattr(e, 'lineno'):\n            e = e.lineno\n        if hasattr(e,'message'):\n            e = e.message\n        if hasattr", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n\tif overwrite:\n\t    append = False\n\telse:\n\t    append = True\n\n        f = open(file_name, \"a\")\n        f.write(text_buffer)\n        f.close()\n\n    @staticmethod\n    def read_file(file_name):\n        \n\tf = open(file_name)\n\ttry:\n            data = f.read()\n\tfinally:\n            f.close()\n\treturn data\n\n    @staticmethod\n    def read_file_lines(file_name):\n        \n\tf = open(file_name)\n\ttry:\n            data = f.readlines()\n\tfinally:\n            f.close()\n\treturn data\n\n    @staticmethod\n    def write_file(file_name, text_buffer, encoding):\n        \n        f = open(file"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n\tif overwrite:\n\t    append = False\n\telse:\n\t    append = True\n\n        f = open(file_name, \"a\")\n        f.write(text_buffer)\n        f.close()\n\n    @staticmethod\n    def read_file(file_name):\n        \n\tf = open(file_name)\n\ttry:\n            data = f.read()\n\tfinally:\n            f.close()\n\treturn data\n\n    @staticmethod\n    def read_file_lines(file_name):\n        \n\tf = open(file_name)\n\ttry:\n            data = f.readlines()\n\tfinally:\n            f.close()\n\treturn data\n\n    @staticmethod\n    def write_file(file_name, text_buffer, encoding):\n        \n        f = open(file", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\tf = open(file_name, 'r')\n\tif encoding is None:\n\t    encoding = chardet.detect(f.read())['encoding']\n\treturn textbuffer.TextBuffer(f.read(), encoding)\n\n    @staticmethod\n    def get_encoding(file_name):\n        \n        f = open(file_name, 'r')\n        encoding = chardet.detect(f.read())['encoding']\n        return encoding\n\n    @staticmethod\n    def get_encoding_from_textbuffer(text_buffer):\n        \n        encoding = chardet.detect(text_buffer.get_text())['encoding']\n        return encoding\n\n    @staticmethod\n    def textbuffer_to_file(text_buffer, file_name, encoding):\n        \n\tf ="], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n\tf = open(file_name, 'r')\n\tif encoding is None:\n\t    encoding = chardet.detect(f.read())['encoding']\n\treturn textbuffer.TextBuffer(f.read(), encoding)\n\n    @staticmethod\n    def get_encoding(file_name):\n        \n        f = open(file_name, 'r')\n        encoding = chardet.detect(f.read())['encoding']\n        return encoding\n\n    @staticmethod\n    def get_encoding_from_textbuffer(text_buffer):\n        \n        encoding = chardet.detect(text_buffer.get_text())['encoding']\n        return encoding\n\n    @staticmethod\n    def textbuffer_to_file(text_buffer, file_name, encoding):\n        \n\tf =", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod\n    def is_file_exist(file_name):\n        \n\treturn os.path.exists(file_name)\n/py_utils/py_utils_time.py\nimport time\n\nclass TimeUtils:\n\t\n\n\t@staticmethod\n\tdef get_current_time():\n\t\treturn time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_time_str():\n\t\treturn time.strftime(\"%Y%m%d%H%M%S\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_date_str():\n\t\treturn time.strftime(\"%Y%m%d\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_time_stamp():\n\t\treturn int(time.time())\n\n\t@staticmethod\n\tdef get_time_stamp_from_string("], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def is_file_exist(file_name):\n        \n\treturn os.path.exists(file_name)\n/py_utils/py_utils_time.py\nimport time\n\nclass TimeUtils:\n\t\n\n\t@staticmethod\n\tdef get_current_time():\n\t\treturn time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_time_str():\n\t\treturn time.strftime(\"%Y%m%d%H%M%S\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_date_str():\n\t\treturn time.strftime(\"%Y%m%d\", time.localtime())\n\n\t@staticmethod\n\tdef get_current_time_stamp():\n\t\treturn int(time.time())\n\n\t@staticmethod\n\tdef get_time_stamp_from_string(", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod\n    def _reset_logging(cls):\n        \n/docs/api/api.rst\n.. _api:\n\nAPI\n===\n\n.. toctree::\n    :maxdepth: 2\n\n    api/config\n    api/logging\n    api/utils\n    api/models\n    api/actions\n    api/modules\n    api/exceptions\n    api/tests\n/tests/test_config.py\nimport unittest\nimport unittest.mock as mock\n\nimport click\n\nfrom config import Config, cli_config\nfrom exceptions import InvalidConfigError\n\n\nclass TestConfig(unittest.TestCase):\n\n    def test_get_config_key(self):\n        config = Config({})\n        self.assertEqual(config.get('key'), None)\n\n        config = Config({'key': 'value'})\n        self.assertEqual(config.get('key'), 'value')\n\n    def test_has_config_key(self):\n        config = Config({})\n        self.assertFalse(config"], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod\n    def _reset_logging(cls):\n        \n/docs/api/api.rst\n.. _api:\n\nAPI\n===\n\n.. toctree::\n    :maxdepth: 2\n\n    api/config\n    api/logging\n    api/utils\n    api/models\n    api/actions\n    api/modules\n    api/exceptions\n    api/tests\n/tests/test_config.py\nimport unittest\nimport unittest.mock as mock\n\nimport click\n\nfrom config import Config, cli_config\nfrom exceptions import InvalidConfigError\n\n\nclass TestConfig(unittest.TestCase):\n\n    def test_get_config_key(self):\n        config = Config({})\n        self.assertEqual(config.get('key'), None)\n\n        config = Config({'key': 'value'})\n        self.assertEqual(config.get('key'), 'value')\n\n    def test_has_config_key(self):\n        config = Config({})\n        self.assertFalse(config", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n        \n\nclass PyFallbackTransportFactory(FallbackTransportFactory):\n    def _getTargetClass(self):\n        return PyFallbackTransport\n\nclass FallbackTransport(object):\n    '''\n    Factory for a transport that will fall back to a different transport if the first one fails.\n    '''\n    def __init__(self, fallbackTransport=None, **kw):\n        self.fallbackTransport = fallbackTransport or DefaultTransport()\n        self._transport = None\n        self._lastException = None\n        self._log = logging.getLogger('twisted.web.client')\n        self._gotFallback = False\n\n    def _getTransport(self):\n        self._log.debug('Getting transport')\n        try:\n            if self._transport is None:\n                self._transport = self.reactor.connectTCP(self.host, self.port, self)\n        except Exception:\n            self._gotFallback = True\n            self._transport = self.fallbackTransport._get"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n        \n\nclass PyFallbackTransportFactory(FallbackTransportFactory):\n    def _getTargetClass(self):\n        return PyFallbackTransport\n\nclass FallbackTransport(object):\n    '''\n    Factory for a transport that will fall back to a different transport if the first one fails.\n    '''\n    def __init__(self, fallbackTransport=None, **kw):\n        self.fallbackTransport = fallbackTransport or DefaultTransport()\n        self._transport = None\n        self._lastException = None\n        self._log = logging.getLogger('twisted.web.client')\n        self._gotFallback = False\n\n    def _getTransport(self):\n        self._log.debug('Getting transport')\n        try:\n            if self._transport is None:\n                self._transport = self.reactor.connectTCP(self.host, self.port, self)\n        except Exception:\n            self._gotFallback = True\n            self._transport = self.fallbackTransport._get", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n    return result\n\ndef _legacy_mergeOrderings_old(orderings):\n    \n    orderings = list(orderings)\n    result = []\n    while orderings:\n        ordering = orderings.pop()\n        if ordering[0] == 'a':\n            ordering2 = orderings.pop()\n            if ordering2[0] == 'a':\n                ordering[1] = ordering[1] + ordering2[1]\n            else:\n                ordering = ordering[1] + ordering2\n        result.append(ordering)\n    return result\n\ndef _legacy_order(orderings):\n    \n    return _legacy_mergeOrderings(orderings"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \n    result = []\n    for ordering in orderings:\n        result.extend(ordering)\n    return result\n\ndef _legacy_mergeOrderings_old(orderings):\n    \n    orderings = list(orderings)\n    result = []\n    while orderings:\n        ordering = orderings.pop()\n        if ordering[0] == 'a':\n            ordering2 = orderings.pop()\n            if ordering2[0] == 'a':\n                ordering[1] = ordering[1] + ordering2[1]\n            else:\n                ordering = ordering[1] + ordering2\n        result.append(ordering)\n    return result\n\ndef _legacy_order(orderings):\n    \n    return _legacy_mergeOrderings(orderings", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n return object.\\_\\_provides\\_\\_\n\ndef provideAdapter(object, iface=None, name=None):\n \n if iface is None:\n iface = IDefault\n if name is None:\n name = iface\n iface = getInterface(iface)\n name = getName(name)\n object.\\_\\_provides\\_\\_[iface] = name\n\ndef getAdapter(object, iface=None, name=None):\n \n if iface is None:\n iface = IDefault\n if name is None:\n name = iface\n iface = getInterface(iface)\n name = getName(name)\n try:\n return object.\\_\\_adapters\\_\\_[iface][name]\n except KeyError:\n try:\n return object.\\_\\_adapters\\_\\_[iface][None]\n except KeyError:\n try:\n return object"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n return object.\\_\\_provides\\_\\_\n\ndef provideAdapter(object, iface=None, name=None):\n \n if iface is None:\n iface = IDefault\n if name is None:\n name = iface\n iface = getInterface(iface)\n name = getName(name)\n object.\\_\\_provides\\_\\_[iface] = name\n\ndef getAdapter(object, iface=None, name=None):\n \n if iface is None:\n iface = IDefault\n if name is None:\n name = iface\n iface = getInterface(iface)\n name = getName(name)\n try:\n return object.\\_\\_adapters\\_\\_[iface][name]\n except KeyError:\n try:\n return object.\\_\\_adapters\\_\\_[iface][None]\n except KeyError:\n try:\n return object", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n\ndef superClasses(classes):\n    \n\ndef classHierarchy(classes):\n    \n\ndef classHierarchyFor(classes):\n    \n\ndef classHierarchyForSubclasses(classes, subclasses):\n    \n\ndef classSubclasses(classes):\n    \n\ndef classSubclassesFor(classes):\n    \n\ndef classSubclassesForSubclasses(classes, subclasses):\n    \n\ndef class"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n\ndef superClasses(classes):\n    \n\ndef classHierarchy(classes):\n    \n\ndef classHierarchyFor(classes):\n    \n\ndef classHierarchyForSubclasses(classes, subclasses):\n    \n\ndef classSubclasses(classes):\n    \n\ndef classSubclassesFor(classes):\n    \n\ndef classSubclassesForSubclasses(classes, subclasses):\n    \n\ndef class", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n if all:\n  return [(name, getattr(self, name)) for name in self.__dict__ if not name.startswith('_')]\n else:\n  return [(name, getattr(self, name)) for name in self.__dict__ if not name.startswith('_') and not isinstance(getattr(self, name), property)]\n\n```\n\nThe second method is better, because it does not return internal attributes.\nUpvotes: 2 username_3: Use the `dir()` method.\n\n```\n>>> class Foo(object):\n...     def __init__(self):\n...             self._bar = 42\n...     def bar(self):\n...             return self._bar\n...     baz = 10\n...     @property\n...     def baz(self):\n...             return self._baz\n...     @baz.setter\n...     def baz(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n if all:\n  return [(name, getattr(self, name)) for name in self.__dict__ if not name.startswith('_')]\n else:\n  return [(name, getattr(self, name)) for name in self.__dict__ if not name.startswith('_') and not isinstance(getattr(self, name), property)]\n\n```\n\nThe second method is better, because it does not return internal attributes.\nUpvotes: 2 username_3: Use the `dir()` method.\n\n```\n>>> class Foo(object):\n...     def __init__(self):\n...             self._bar = 42\n...     def bar(self):\n...             return self._bar\n...     baz = 10\n...     @property\n...     def baz(self):\n...             return self._baz\n...     @baz.setter\n...     def baz(self", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \n names = set()\n for name, attr in self.attributes.items():\n  if not all and attr.is_method:\n   continue\n  names.add(name)\n return list(names)\n\nclass _AttrInfo:\n \n\n def __init__(self, attr_type, doc, is_method, is_property, is_static, is_attribute):\n  self.attr_type = attr_type\n  self.doc = doc\n  self.is_method = is_method\n  self.is_property = is_property\n  self.is_static = is_static\n  self.is_attribute = is_attribute\n\n\nclass _Object:\n \n\n def __init__(self, interface, attrs):\n  self._interface = interface\n  self._attrs = attrs\n\n def __repr__(self):\n  return \"<%s '%"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \n names = set()\n for name, attr in self.attributes.items():\n  if not all and attr.is_method:\n   continue\n  names.add(name)\n return list(names)\n\nclass _AttrInfo:\n \n\n def __init__(self, attr_type, doc, is_method, is_property, is_static, is_attribute):\n  self.attr_type = attr_type\n  self.doc = doc\n  self.is_method = is_method\n  self.is_property = is_property\n  self.is_static = is_static\n  self.is_attribute = is_attribute\n\n\nclass _Object:\n \n\n def __init__(self, interface, attrs):\n  self._interface = interface\n  self._attrs = attrs\n\n def __repr__(self):\n  return \"<%s '%", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    \n\tif output is None:\n        output = []\n        for arg in sequence:\n            if isinstance(arg, (list, tuple)):\n                output.append(_normalizeargs(arg, output))\n            else:\n                output.append(arg)\n        return output\n\ndef _normalize(sequence, output=None):\n    \n    if output is None:\n        output = []\n        for arg in sequence:\n            if isinstance(arg, (list, tuple)):\n                output.append(_normalize(arg, output))\n            else:\n                output.append(arg)\n        return output\n\ndef _normalize_declaration(declaration):\n    \n    return _normalizeargs(_normalize(declaration))\n\ndef _declaration_to_string(declaration):\n    \n    return \" \".join(map(str, declaration))\n\ndef _declaration_to_string_args(declaration):\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    \n\tif output is None:\n        output = []\n        for arg in sequence:\n            if isinstance(arg, (list, tuple)):\n                output.append(_normalizeargs(arg, output))\n            else:\n                output.append(arg)\n        return output\n\ndef _normalize(sequence, output=None):\n    \n    if output is None:\n        output = []\n        for arg in sequence:\n            if isinstance(arg, (list, tuple)):\n                output.append(_normalize(arg, output))\n            else:\n                output.append(arg)\n        return output\n\ndef _normalize_declaration(declaration):\n    \n    return _normalizeargs(_normalize(declaration))\n\ndef _declaration_to_string(declaration):\n    \n    return \" \".join(map(str, declaration))\n\ndef _declaration_to_string_args(declaration):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    \n\n\n\ndef _c_optimizations_available():\n    \n\n\n    return False\n\n\ndef _c_optimizations_available():\n    \n\n    try:\n        import c_optimizations_2\n        return c_optimizations_2\n    except ImportError:\n        return False\n\n    return False\n\n\ndef _c_optimizations_available():\n    \n\n    try:\n        import c"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    \n\n\n\ndef _c_optimizations_available():\n    \n\n\n    return False\n\n\ndef _c_optimizations_available():\n    \n\n    try:\n        import c_optimizations_2\n        return c_optimizations_2\n    except ImportError:\n        return False\n\n    return False\n\n\ndef _c_optimizations_available():\n    \n\n    try:\n        import c", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    \n\n_can_use_c_optimizations = _should_attempt_c_optimizations()\n\ndef _get_c_optimizations():\n    \n    if _can_use_c_optimizations:\n        try:\n            import _c_optimizations\n            return _c_optimizations\n        except ImportError:\n            pass\n    return None\n\ndef _set_c_optimizations(value):\n    \n    global _can_use_c_optimizations, _c_optimizations\n    _c_optimizations = value\n    _can_use_c_optimizations = True\n\n_c_optimizations = _get_c_optimizations()\n\ndef _get_c_optimization_function(name):\n    '''Return the"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    \n\n_can_use_c_optimizations = _should_attempt_c_optimizations()\n\ndef _get_c_optimizations():\n    \n    if _can_use_c_optimizations:\n        try:\n            import _c_optimizations\n            return _c_optimizations\n        except ImportError:\n            pass\n    return None\n\ndef _set_c_optimizations(value):\n    \n    global _can_use_c_optimizations, _c_optimizations\n    _c_optimizations = value\n    _can_use_c_optimizations = True\n\n_c_optimizations = _get_c_optimizations()\n\ndef _get_c_optimization_function(name):\n    '''Return the", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    \n\ndef _c_optimizations_required(library, module, kind):\n    \n\ndef _c_optimizations_required(library, module, kind, *, c_optimizations):\n    '''Given a library, a module, and a kind, return the list of C optimization\n    flags that should be used for that module.\n\n    The kind is one of the following: 'include','src', or'shared'.\n\n    The 'c_optimizations' parameter is a dictionary that maps from the name of\n    a C optimization flag to a list of C optimization flags that are required\n    by that optimization flag.  For example, it might map from 'O1' to ['-O2',\n    '-O3'].  If the value is None, the optimizer flag is not required by any\n    other optimizer flag.  If the value is an empty list,"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    \n\ndef _c_optimizations_required(library, module, kind):\n    \n\ndef _c_optimizations_required(library, module, kind, *, c_optimizations):\n    '''Given a library, a module, and a kind, return the list of C optimization\n    flags that should be used for that module.\n\n    The kind is one of the following: 'include','src', or'shared'.\n\n    The 'c_optimizations' parameter is a dictionary that maps from the name of\n    a C optimization flag to a list of C optimization flags that are required\n    by that optimization flag.  For example, it might map from 'O1' to ['-O2',\n    '-O3'].  If the value is None, the optimizer flag is not required by any\n    other optimizer flag.  If the value is an empty list,", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    \n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n        \n        self.counts[:] = 0\n        self.sumsq = 0.\n\n    def add(self, val):\n        \n        if self.min < val < self.max:\n            self.counts[ np.int( (val - self.min) * self.nbins / (self.max - self.min) ) ] += 1\n            self.sumsq += val\n\n    def mean(self):\n        \n        return self.sumsq / self.counts.sum()\n\n    def rms(self):\n        \n        return np.sqrt(self.sumsq / self.counts.sum())\n\n    def save(self, fname):\n        '''Save the histogram to a file.\n\n        Parameters\n        ----------\n        fname : str\n            The"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n        \n        self.counts[:] = 0\n        self.sumsq = 0.\n\n    def add(self, val):\n        \n        if self.min < val < self.max:\n            self.counts[ np.int( (val - self.min) * self.nbins / (self.max - self.min) ) ] += 1\n            self.sumsq += val\n\n    def mean(self):\n        \n        return self.sumsq / self.counts.sum()\n\n    def rms(self):\n        \n        return np.sqrt(self.sumsq / self.counts.sum())\n\n    def save(self, fname):\n        '''Save the histogram to a file.\n\n        Parameters\n        ----------\n        fname : str\n            The", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n        \n\n        return None\n\n/pynlp/text_utils.py"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n        \n\n        return None\n\n/pynlp/text_utils.py", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n        \n        return self._get_err_indices_by_coord_name(coord_name)\n\n    def _get_err_indices_by_coord_name(self, coord_name):\n        \n        if coord_name not in self.coord_names:\n            raise ValueError('Unknown coordinate: %s' % coord_name)\n        return self._coord_obj_dict[coord_name].err_indices\n\n    def _get_err_coords(self):\n        \n        return [self._coord_obj_dict[coord_name].coord_err for coord_name in self.coord_names]\n\n    def _get_coord_obj_dict(self):\n        '''Get coordinate object dictionary"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n        \n        return self._get_err_indices_by_coord_name(coord_name)\n\n    def _get_err_indices_by_coord_name(self, coord_name):\n        \n        if coord_name not in self.coord_names:\n            raise ValueError('Unknown coordinate: %s' % coord_name)\n        return self._coord_obj_dict[coord_name].err_indices\n\n    def _get_err_coords(self):\n        \n        return [self._coord_obj_dict[coord_name].coord_err for coord_name in self.coord_names]\n\n    def _get_coord_obj_dict(self):\n        '''Get coordinate object dictionary", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    \n    return np.array([(np.sum(bins[i:]) / np.sum(bins)) * (edges[i+1] - edges[i])\n                     for i in range(len(bins))])\n\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    \n    return np.array([(np.sum(bins[i:]) / np.sum(bins)) * (edges[i+1] - edges[i])\n                     for i in range(len(bins))])\n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    \n\ndef is_fill_request_seq_list(seq_list):\n    \n\ndef is_fill_request_seq_list_list(seq_list_list):\n    \n\ndef is_fill_request_seq_set(seq_set):\n    \n\ndef is_fill_request_seq_set_list(seq_set_list):\n    \n\ndef is_fill_request_seq_set_list_list(seq_set_list_list):\n    '''Test whether *seq_set_list"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    \n\ndef is_fill_request_seq_list(seq_list):\n    \n\ndef is_fill_request_seq_list_list(seq_list_list):\n    \n\ndef is_fill_request_seq_set(seq_set):\n    \n\ndef is_fill_request_seq_set_list(seq_set_list):\n    \n\ndef is_fill_request_seq_set_list_list(seq_set_list_list):\n    '''Test whether *seq_set_list", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    \n\ndef is_fill_request_el_or_list(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a list.'''\n\ndef is_fill_request_el_or_dict(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a dict.'''\n\ndef is_fill_request_el_or_tuple(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a tuple.'''\n\ndef is_fill_request_el_or_set(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a set.'''\n\ndef is_fill_request_el_or_frozenset(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a frozenset.'''\n\ndef is_fill_request_el_"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    \n\ndef is_fill_request_el_or_list(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a list.'''\n\ndef is_fill_request_el_or_dict(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a dict.'''\n\ndef is_fill_request_el_or_tuple(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a tuple.'''\n\ndef is_fill_request_el_or_set(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a set.'''\n\ndef is_fill_request_el_or_frozenset(obj):\n    '''Object contains executable methods 'fill' and'request'\n    or is a frozenset.'''\n\ndef is_fill_request_el_", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \n    return hasattr(obj, 'run')\n\ndef is_run_el_instance(obj):\n    \n    return hasattr(type(obj), 'run')\n\ndef is_run_el_class(obj):\n    \n    return is_run_el_instance(obj())\n\ndef is_run_el_callable(obj):\n    \n    return hasattr(obj, '__call__') and is_run_el_instance(obj())\n\ndef is_run_el_class_instance(obj):\n    \n    return is_run_el_instance(obj)"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \n    return hasattr(obj, 'run')\n\ndef is_run_el_instance(obj):\n    \n    return hasattr(type(obj), 'run')\n\ndef is_run_el_class(obj):\n    \n    return is_run_el_instance(obj())\n\ndef is_run_el_callable(obj):\n    \n    return hasattr(obj, '__call__') and is_run_el_instance(obj())\n\ndef is_run_el_class_instance(obj):\n    \n    return is_run_el_instance(obj)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_and_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n\ndef is_fill_el(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_compute_el_or_str(obj):\n    \n    return is_fill_compute_el(obj) or isinstance(obj, str)\n\n\ndef is_"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_and_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\n\ndef is_fill_el(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_compute_el(obj):\n    \n    return hasattr(obj, 'compute')\n\n\ndef is_fill_compute_el_or_str(obj):\n    \n    return is_fill_compute_el(obj) or isinstance(obj, str)\n\n\ndef is_", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    '''Return a dictionary with items from *"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    \n\ndef merge(d1, d2, level=-1):\n    \n\ndef difference(d1, d2, level=-1):\n    '''Return a dictionary with items from *", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n        \n\nclass FreqHist(Histogram):\n    '''\n    A frequency histogram, where the count is the number of times the\n    value was added.\n    '''\n    def __init__(self, *args, **kwargs):\n        Histogram.__init__(self, *args, **kwargs)\n\n    def fill(self, coord, weight=1):\n        \n        self.counts[coord] += weight\n\nclass MultiHist(Histogram):\n    '''\n    A multi-dimensional histogram, where the count is the sum of the\n    weights of the values at each coordinate.\n    '''\n    def __init__(self, *args, **kwargs):\n        Histogram.__init__(self, *args, **kwargs)\n\n    def fill(self, coord, weight=1):\n        \n        self.counts[coord] += weight\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n        \n\nclass FreqHist(Histogram):\n    '''\n    A frequency histogram, where the count is the number of times the\n    value was added.\n    '''\n    def __init__(self, *args, **kwargs):\n        Histogram.__init__(self, *args, **kwargs)\n\n    def fill(self, coord, weight=1):\n        \n        self.counts[coord] += weight\n\nclass MultiHist(Histogram):\n    '''\n    A multi-dimensional histogram, where the count is the sum of the\n    weights of the values at each coordinate.\n    '''\n    def __init__(self, *args, **kwargs):\n        Histogram.__init__(self, *args, **kwargs)\n\n    def fill(self, coord, weight=1):\n        \n        self.counts[coord] += weight\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    \n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    \n    resource_name_regex = r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'\n    return resource_name_regex\n\ndef _is_valid_resource_name(name, regex=None):\n    \n    if not regex:\n        regex = _get_resource_name_regex()\n    return (bool(re.match(regex, name)) and name!= 'default')\n\ndef _get_resource_group_name_regex():\n    \n    resource_group_name_regex = r'^[-\\"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    \n    resource_name_regex = r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'\n    return resource_name_regex\n\ndef _is_valid_resource_name(name, regex=None):\n    \n    if not regex:\n        regex = _get_resource_name_regex()\n    return (bool(re.match(regex, name)) and name!= 'default')\n\ndef _get_resource_group_name_regex():\n    \n    resource_group_name_regex = r'^[-\\", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    \n    if re.match(regex, value):\n        return True\n    else:\n        return False\n\n\ndef validate_input(prompt, type):\n    \n    value = ''\n    while not validate_value(value):\n        print(f'Please enter a valid {type}')\n        value = input(prompt)\n    return value\n\n\n\n\ndef welcome():\n    \n    name = input('Please enter your name: ')\n    print(f'Hello {name}')\n\n\nwelcome()\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    \n    if re.match(regex, value):\n        return True\n    else:\n        return False\n\n\ndef validate_input(prompt, type):\n    \n    value = ''\n    while not validate_value(value):\n        print(f'Please enter a valid {type}')\n        value = input(prompt)\n    return value\n\n\n\n\ndef welcome():\n    \n    name = input('Please enter your name: ')\n    print(f'Hello {name}')\n\n\nwelcome()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    \n    return True\n\ndef validate_value(value):\n    \n    return True\n\ndef get_key(key):\n    \n    return key.split('=')[0]\n\ndef get_value(key):\n    \n    return key.split('=')[1]\n\n@app.route('/"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    \n    return True\n\ndef validate_value(value):\n    \n    return True\n\ndef get_key(key):\n    \n    return key.split('=')[0]\n\ndef get_value(key):\n    \n    return key.split('=')[1]\n\n@app.route('/", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n\n    observer_schema_dict = {\n            'observer_schema_id': None,\n            'observer_schema': [],\n           'sub_schema': [],\n            'observer_schema_type': 'observer_schema',\n            }\n    observer_schema_dict['observer_schema_id'] = manifest_dict['id']\n    if first_level:\n        observer_schema_dict['observer_schema'] = manifest_dict['observer_schema']\n    else:\n        sub_schema = []\n        for schema_dict in manifest_dict['observer_schema']:\n            sub_schema_dict = {\n                   'sub_schema_id': None,\n                   'sub_schema': [],\n                   'sub_schema_type':'sub_schema',\n                    }\n            sub_schema_dict['sub_schema_id'] = schema_dict['id']\n            sub_schema_"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n\n    observer_schema_dict = {\n            'observer_schema_id': None,\n            'observer_schema': [],\n           'sub_schema': [],\n            'observer_schema_type': 'observer_schema',\n            }\n    observer_schema_dict['observer_schema_id'] = manifest_dict['id']\n    if first_level:\n        observer_schema_dict['observer_schema'] = manifest_dict['observer_schema']\n    else:\n        sub_schema = []\n        for schema_dict in manifest_dict['observer_schema']:\n            sub_schema_dict = {\n                   'sub_schema_id': None,\n                   'sub_schema': [],\n                   'sub_schema_type':'sub_schema',\n                    }\n            sub_schema_dict['sub_schema_id'] = schema_dict['id']\n            sub_schema_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if observer_schema.get('properties'):\n        for property in observer_schema['properties']:\n            if property in response:\n                if 'properties' in observer_schema[property]:\n                    update_last_applied_manifest_list_from_resp(\n                        last_applied_manifest[property],\n                        observer_schema[property],\n                        response[property]\n                    )\n                else:\n                    last_applied_manifest[property] = response[property]\n    return last_applied_manifest\n\n\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if observer_schema.get('properties'):\n        for property in observer_schema['properties']:\n            if property in response:\n                if 'properties' in observer_schema[property]:\n                    update_last_applied_manifest_list_from_resp(\n                        last_applied_manifest[property],\n                        observer_schema[property],\n                        response[property]\n                    )\n                else:\n                    last_applied_manifest[property] = response[property]\n    return last_applied_manifest\n\n\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _update_last_applied_manifest_list_from_resp:\n\n.. function:: update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _update_last_applied_manifest_from_resp:\n\n.. function:: update_last_applied_manifest_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _validate"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _update_last_applied_manifest_list_from_resp:\n\n.. function:: update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _update_last_applied_manifest_from_resp:\n\n.. function:: update_last_applied_manifest_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n\n.. _validate", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    \n\ndef generate_default_observer_schemas_for_resource(app, resource_kind):\n    \n\ndef generate_observer_schema_for_resource(app, resource_kind, resource_name):\n    \n\ndef generate_observer_schema_for_resource_from_manifest(app, resource_kind, resource_name, manifest):\n    \n\ndef generate_observer_schema_for_resource_from_yaml(app, resource_kind, resource_name, yaml):\n    \n\ndef generate_observer_schema_for_resource_from_crd(app, resource_kind, resource_name, crd):\n    '''"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    \n\ndef generate_default_observer_schemas_for_resource(app, resource_kind):\n    \n\ndef generate_observer_schema_for_resource(app, resource_kind, resource_name):\n    \n\ndef generate_observer_schema_for_resource_from_manifest(app, resource_kind, resource_name, manifest):\n    \n\ndef generate_observer_schema_for_resource_from_yaml(app, resource_kind, resource_name, yaml):\n    \n\ndef generate_observer_schema_for_resource_from_crd(app, resource_kind, resource_name, crd):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\tsql, params = format_params(sql, params)\n\treturn cast(Tuple[AnyStr, Any], (sql, params))\n\ndef format_params(\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\tsql, params = format_params(sql, params)\n\treturn cast(Tuple[AnyStr, Any], (sql, params))\n\ndef format_params(\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tparameters: List[Dict[Union[str, int], Any]] = []\n\t\tfor param in many_params:\n\t\t\tparameters.append(param)\n\t\treturn sql, parameters\n\n\tdef execute_batch(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]],"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tparameters: List[Dict[Union[str, int], Any]] = []\n\t\tfor param in many_params:\n\t\t\tparameters.append(param)\n\t\treturn sql, parameters\n\n\tdef execute_batch(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]],", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n        \n\tif not os.path.exists(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n\tif not os.path.isfile(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n\tif not os.path.isdir(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n        return True\n\nclass Validator(object):\n    \n\n    def __init__(self, version"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n        \n\tif not os.path.exists(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n\tif not os.path.isfile(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n\tif not os.path.isdir(path):\n            raise ValidationError('Must provide a valid OCFL object path')\n        return True\n\nclass Validator(object):\n    \n\n    def __init__(self, version", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n        \n```\n\nThe default validator class can be found in `bcfg2.Server.Plugins.Cfg.CfgValidator`.\n\n\nThis class is responsible for generating a Bcfg2 configuration. It is\nresponsible for the following:\n\n-  Reading the configuration from an input stream,\n-  Generating the configuration from the input, and\n-  Writing the generated configuration to an output stream.\n\nThe `CfgSource` class provides several hooks for modifying the\nconfiguration after it has been read from the input stream:\n\n``` {.programlisting}\nclass CfgSource(object):\n    def validate(self, status):\n        \n```\n\n``` {.programlisting}\nclass CfgSource(object):\n    def process(self, status):\n        \n```\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n```\n\nThe default validator class can be found in `bcfg2.Server.Plugins.Cfg.CfgValidator`.\n\n\nThis class is responsible for generating a Bcfg2 configuration. It is\nresponsible for the following:\n\n-  Reading the configuration from an input stream,\n-  Generating the configuration from the input, and\n-  Writing the generated configuration to an output stream.\n\nThe `CfgSource` class provides several hooks for modifying the\nconfiguration after it has been read from the input stream:\n\n``` {.programlisting}\nclass CfgSource(object):\n    def validate(self, status):\n        \n```\n\n``` {.programlisting}\nclass CfgSource(object):\n    def process(self, status):\n        \n```\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n        \n\n\n\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n\n\n\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n  \n\nclass _Identifier:\n  '''An identifier.\n\n  This class is not intended to be used directly.\n  '''\n\n  def __init__(self, id):\n    '''Constructor.\n\n    Args:\n      id: string containing the identifier.\n    '''\n    self.__id = id\n\n  def __repr__(self):\n    return self.__id\n\n  def __str__(self):\n    return self.__id\n\n  def __eq__(self, other):\n    return self.__id == other.__id\n\n  def __ne__(self, other):\n    return self.__id!= other.__id\n\n  def __hash__(self):\n    return self.__id.__hash__()\n\n\nclass _IdentifierTable(dict):\n  '''An identifier table.\n\n  This class is not intended to be used directly.\n  '''\n\n  def __init__(self, identifier_class):\n    '''Constructor.\n\n    Args:\n      identifier_class: identifier class.\n    '''\n    super(_IdentifierTable,"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n  \n\nclass _Identifier:\n  '''An identifier.\n\n  This class is not intended to be used directly.\n  '''\n\n  def __init__(self, id):\n    '''Constructor.\n\n    Args:\n      id: string containing the identifier.\n    '''\n    self.__id = id\n\n  def __repr__(self):\n    return self.__id\n\n  def __str__(self):\n    return self.__id\n\n  def __eq__(self, other):\n    return self.__id == other.__id\n\n  def __ne__(self, other):\n    return self.__id!= other.__id\n\n  def __hash__(self):\n    return self.__id.__hash__()\n\n\nclass _IdentifierTable(dict):\n  '''An identifier table.\n\n  This class is not intended to be used directly.\n  '''\n\n  def __init__(self, identifier_class):\n    '''Constructor.\n\n    Args:\n      identifier_class: identifier class.\n    '''\n    super(_IdentifierTable,", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n        \n```\n\n\nThe `inventory` argument is a list of `InventoryItem` objects, each of\nwhich represents a single inventory object.\n\n```python\nclass InventoryItem(object):\n    def __init__(self, name, type, content, source=None, **kwargs):\n        self.name = name\n        self.type = type\n        self.content = content\n        self.source = source\n        self.kwargs = kwargs\n```\n\n\nThe `InventoryItem` class is used to represent a single inventory object.\nIt has the following attributes:\n\n* `name`: A string representing the name of the inventory object.\n* `type`: A string representing the type of the inventory object. The\n  following types are supported:\n\n    * `group`: A group.\n    * `host`: A host."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n        \n```\n\n\nThe `inventory` argument is a list of `InventoryItem` objects, each of\nwhich represents a single inventory object.\n\n```python\nclass InventoryItem(object):\n    def __init__(self, name, type, content, source=None, **kwargs):\n        self.name = name\n        self.type = type\n        self.content = content\n        self.source = source\n        self.kwargs = kwargs\n```\n\n\nThe `InventoryItem` class is used to represent a single inventory object.\nIt has the following attributes:\n\n* `name`: A string representing the name of the inventory object.\n* `type`: A string representing the type of the inventory object. The\n  following types are supported:\n\n    * `group`: A group.\n    * `host`: A host.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n```\n\n\nThis function is called in the constructor of `Manifest`. It takes a list of digests and checks that\nthey are used and present. It returns a list of missing digests.\n\n```python\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    missing_digests = []\n    for digest in manifest_files:\n        if digest not in digests_used:\n            missing_digests.append(digest)\n    if missing_digests:\n        raise MissingDigestsException(missing_digests)\n```\n\n\nThis function is called in `Manifest.get_file_contents`. It returns the contents of a file in the\nmanifest"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n```\n\n\nThis function is called in the constructor of `Manifest`. It takes a list of digests and checks that\nthey are used and present. It returns a list of missing digests.\n\n```python\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    missing_digests = []\n    for digest in manifest_files:\n        if digest not in digests_used:\n            missing_digests.append(digest)\n    if missing_digests:\n        raise MissingDigestsException(missing_digests)\n```\n\n\nThis function is called in `Manifest.get_file_contents`. It returns the contents of a file in the\nmanifest", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n        \n\n\n        return True\n\n    def validate_as_current_version(self, current):\n        \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n        \n\n\n        return True\n\n    def validate_as_current_version(self, current):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    \n\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for logical_path in inventory:\n        if inventory[logical_path]['version'] == version:\n            logical_path_map[logical_path] = inventory[logical_path]['path']\n    return logical_path_map\n\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for logical_path in inventory:\n        if inventory[logical_path]['version'] == version:\n            logical_path_map[logical_path] = inventory[logical_path]['path']\n    return logical_path_map\n\ndef get_logical_path_map(inventory,"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    \n\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for logical_path in inventory:\n        if inventory[logical_path]['version'] == version:\n            logical_path_map[logical_path] = inventory[logical_path]['path']\n    return logical_path_map\n\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for logical_path in inventory:\n        if inventory[logical_path]['version'] == version:\n            logical_path_map[logical_path] = inventory[logical_path]['path']\n    return logical_path_map\n\ndef get_logical_path_map(inventory,", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n        \n        if not fixity:\n            return True\n        if fixity['algorithm'] not in FIXITY_ALGORITHMS:\n            return False\n        path = fixity['path']\n        if path not in self.file_paths:\n            return False\n        manifest = self.manifest_files[self.file_paths[path]]\n        if fixity['algorithm'] =='md5':\n            if fixity['value']!= manifest['md5']:\n                return False\n        elif fixity['algorithm'] =='sha1':\n            if fixity['value']!= manifest['sha1']:\n                return False\n        elif fixity['algorithm'] =='sha256':\n            if fixity['value']!= manifest['sha256']:\n                return False\n        return True\n\n    def validate_inventory(self):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n        \n        if not fixity:\n            return True\n        if fixity['algorithm'] not in FIXITY_ALGORITHMS:\n            return False\n        path = fixity['path']\n        if path not in self.file_paths:\n            return False\n        manifest = self.manifest_files[self.file_paths[path]]\n        if fixity['algorithm'] =='md5':\n            if fixity['value']!= manifest['md5']:\n                return False\n        elif fixity['algorithm'] =='sha1':\n            if fixity['value']!= manifest['sha1']:\n                return False\n        elif fixity['algorithm'] =='sha256':\n            if fixity['value']!= manifest['sha256']:\n                return False\n        return True\n\n    def validate_inventory(self):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \n\ndef files_list_size(path):\n    \n\ndef files_list_extension(path):\n    \n\ndef files_list_extension_size(path):\n    \n\n\n\ndef directory_exists(path):\n    \n\ndef directory_create(path):\n    \n\ndef directory_create_recursive(path):\n    \n\ndef directory_delete(path):\n    \n\ndef directory_list(path):\n    \n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \n\ndef files_list_size(path):\n    \n\ndef files_list_extension(path):\n    \n\ndef files_list_extension_size(path):\n    \n\n\n\ndef directory_exists(path):\n    \n\ndef directory_create(path):\n    \n\ndef directory_create_recursive(path):\n    \n\ndef directory_delete(path):\n    \n\ndef directory_list(path):\n    \n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    \n    xml_basenames = [os.path.basename(x).split('.')[0] for x in xmls]\n    return groupby(files, lambda f: os.path.basename(f).split('.')[0] in xml_basenames)\n\ndef _group_files_by_xml_content(source, xmls, files):\n    \n    return groupby(files, lambda f: _xml_content(f) in xmls)\n\ndef _xml_content(f):\n    \n    return ET.parse(f)."], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    xml_basenames = [os.path.basename(x).split('.')[0] for x in xmls]\n    return groupby(files, lambda f: os.path.basename(f).split('.')[0] in xml_basenames)\n\ndef _group_files_by_xml_content(source, xmls, files):\n    \n    return groupby(files, lambda f: _xml_content(f) in xmls)\n\ndef _xml_content(f):\n    \n    return ET.parse(f).", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    \n\ndef build_doc_package(dir_path, doc_prefix, out_dir, out_prefix):\n    \n\ndef match_doc_by_prefix(prefix, dir_path):\n    \n\ndef build_doc_package_by_prefix(prefix, dir_path, out_dir, out_prefix):\n    \n\ndef build_doc_package_by_dir(dir_path, out_dir, out_prefix):\n    \n\ndef find_doc_package_by_dir(dir_path, prefix):\n    '''"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \n\ndef build_doc_package(dir_path, doc_prefix, out_dir, out_prefix):\n    \n\ndef match_doc_by_prefix(prefix, dir_path):\n    \n\ndef build_doc_package_by_prefix(prefix, dir_path, out_dir, out_prefix):\n    \n\ndef build_doc_package_by_dir(dir_path, out_dir, out_prefix):\n    \n\ndef find_doc_package_by_dir(dir_path, prefix):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    \n    return [f for f in files if f.startswith(prefix)]\n\n\ndef get_package_dir(path):\n    \n    return os.path.dirname(path)\n\n\ndef get_package_basename(path):\n    \n    return os.path.basename(path)\n\n\ndef get_package_filenames(path):\n    \n    return os.listdir(path)\n\n\ndef get_package_prefix(path):\n    \n    return os.path.splitext(get_package_basename(path))[0]\n\n\ndef get_package_filenames_by_prefix(prefix,"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    return [f for f in files if f.startswith(prefix)]\n\n\ndef get_package_dir(path):\n    \n    return os.path.dirname(path)\n\n\ndef get_package_basename(path):\n    \n    return os.path.basename(path)\n\n\ndef get_package_filenames(path):\n    \n    return os.listdir(path)\n\n\ndef get_package_prefix(path):\n    \n    return os.path.splitext(get_package_basename(path))[0]\n\n\ndef get_package_filenames_by_prefix(prefix,", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    \n    return [module for name, module in inspect.getmembers(folder) if inspect.ismodule(module)]\n\ndef _get_packages(folder):\n    \n    packages = []\n    for name in os.listdir(folder):\n        path = os.path.join(folder, name)\n        if os.path.isdir(path):\n            package = _explore_folder(path)\n            packages.extend(package)\n    return packages\n\ndef get_packages(folder):\n    \n    packages"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    \n    return [module for name, module in inspect.getmembers(folder) if inspect.ismodule(module)]\n\ndef _get_packages(folder):\n    \n    packages = []\n    for name in os.listdir(folder):\n        path = os.path.join(folder, name)\n        if os.path.isdir(path):\n            package = _explore_folder(path)\n            packages.extend(package)\n    return packages\n\ndef get_packages(folder):\n    \n    packages", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    \n\ndef _write_file(prefix, file_path, file_contents):\n    \n\ndef _read_file(prefix, file_path):\n    \n\ndef _zip_archive(prefix, archive_path):\n    '''Compacta o pacote.\n\n    O nome do pacote \u00e9 o prefixo seguido de `.zip`.\n    '''\n\ndef _unzip_archive(archive_path, output_path):\n    '''Descompacta o pacote em uma pasta.\n\n    O nome do pacote \u00e9 o prefixo seguido de `.zip`.\n    '''\n\ndef _get_rendition_key(prefix, file_path):\n    \n\ndef _get_rendition_file_path"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    \n\ndef _write_file(prefix, file_path, file_contents):\n    \n\ndef _read_file(prefix, file_path):\n    \n\ndef _zip_archive(prefix, archive_path):\n    '''Compacta o pacote.\n\n    O nome do pacote \u00e9 o prefixo seguido de `.zip`.\n    '''\n\ndef _unzip_archive(archive_path, output_path):\n    '''Descompacta o pacote em uma pasta.\n\n    O nome do pacote \u00e9 o prefixo seguido de `.zip`.\n    '''\n\ndef _get_rendition_key(prefix, file_path):\n    \n\ndef _get_rendition_file_path", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n        \n\nclass Rendition(models.Model):\n    \n    original = models.CharField(max_length=250)\n    lang = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.original\n\n    def make_rendition(self, lang, file_path):\n        \n        return self.original.replace('.pdf', '-{0}.pdf'.format(lang))\nd_rendition('en', file_path)\n        rendition = Rendition(original=file_path, lang=lang)\n        rendition.save()\n        return rendition\n\n    def parse_pdf"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n        \n\nclass Rendition(models.Model):\n    \n    original = models.CharField(max_length=250)\n    lang = models.CharField(max_length=10)\n\n    def __str__(self):\n        return self.original\n\n    def make_rendition(self, lang, file_path):\n        \n        return self.original.replace('.pdf', '-{0}.pdf'.format(lang))\nd_rendition('en', file_path)\n        rendition = Rendition(original=file_path, lang=lang)\n        rendition.save()\n        return rendition\n\n    def parse_pdf", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path\n\n    def get_assets(self):\n        return self.assets\n\nclass Article(object):\n    def __init__(self, article_id, description, author):\n        self.article_id = article_id\n        self.description = description\n        self.author = author\n        self.assets = []\n\n    def add_asset(self, asset):\n        self.assets.append(asset)\n\n    def get_assets(self):\n        return self.assets\n\nclass Asset(object):\n    def __init__(self, asset_id, asset_description, asset_url"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path\n\n    def get_assets(self):\n        return self.assets\n\nclass Article(object):\n    def __init__(self, article_id, description, author):\n        self.article_id = article_id\n        self.description = description\n        self.author = author\n        self.assets = []\n\n    def add_asset(self, asset):\n        self.assets.append(asset)\n\n    def get_assets(self):\n        return self.assets\n\nclass Asset(object):\n    def __init__(self, asset_id, asset_description, asset_url", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    \n\n    with zipfile.ZipFile(zip_path) as zip_file:\n        for filename in zip_file.namelist():\n            if filename.endswith('.whl') or filename.endswith('.tar.gz'):\n                continue\n            if filename.endswith('.dist-info/METADATA'):\n                meta_path = os.path.join(zip_path, filename)\n                yield meta_path, _load_metadata(meta_path)\n\n\ndef _explore_directory(directory):\n    \n\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.whl') or filename.endswith('.tar.gz'):\n                continue\n            if filename.endswith('.dist-info/METADATA'):\n                meta_path = os.path.join"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    \n\n    with zipfile.ZipFile(zip_path) as zip_file:\n        for filename in zip_file.namelist():\n            if filename.endswith('.whl') or filename.endswith('.tar.gz'):\n                continue\n            if filename.endswith('.dist-info/METADATA'):\n                meta_path = os.path.join(zip_path, filename)\n                yield meta_path, _load_metadata(meta_path)\n\n\ndef _explore_directory(directory):\n    \n\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.whl') or filename.endswith('.tar.gz'):\n                continue\n            if filename.endswith('.dist-info/METADATA'):\n                meta_path = os.path.join", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    \n\n```\n\nI'm not sure if this is the best way to do it, but it's a good test to make sure that the function works and returns the correct output.\n\n```\n>>> files_list_from_zipfile('foo.zip')\n['foo/bar/qux']\n\n```\nUpvotes: 2 username_2: I think you can use `zipfile.ZipFile` to read the files, then use `os.walk` to find the files in the directory.\n\n```\nimport os\nimport zipfile\n\ndef files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in zip_path\"\"\"\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        for root, dirs, files in os.walk(zip_file.namelist()[0]):\n            for file in"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    \n\n```\n\nI'm not sure if this is the best way to do it, but it's a good test to make sure that the function works and returns the correct output.\n\n```\n>>> files_list_from_zipfile('foo.zip')\n['foo/bar/qux']\n\n```\nUpvotes: 2 username_2: I think you can use `zipfile.ZipFile` to read the files, then use `os.walk` to find the files in the directory.\n\n```\nimport os\nimport zipfile\n\ndef files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in zip_path\"\"\"\n    with zipfile.ZipFile(zip_path, 'r') as zip_file:\n        for root, dirs, files in os.walk(zip_file.namelist()[0]):\n            for file in", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \n\ndef fix_namespace_prefix_v(content):\n    \n\ndef fix_namespace_prefix_m(content):\n    \n\ndef fix_namespace_prefix_wp(content):\n    \n\ndef fix_namespace_prefix_w10(content):\n    \n\ndef fix_namespace_prefix_m_o(content):\n    \n\ndef fix_namespace_prefix_m_n(content):\n    '''Convert text that defaults"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \n\ndef fix_namespace_prefix_v(content):\n    \n\ndef fix_namespace_prefix_m(content):\n    \n\ndef fix_namespace_prefix_wp(content):\n    \n\ndef fix_namespace_prefix_w10(content):\n    \n\ndef fix_namespace_prefix_m_o(content):\n    \n\ndef fix_namespace_prefix_m_n(content):\n    '''Convert text that defaults", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    for xpath, match_type in pubdate_xpaths:\n        try:\n            pubdate = node.xpath(xpath)\n            if match_type == \"date\":\n                if pubdate:\n                    pubdate = pubdate.get()\n                    if pubdate:\n                        return pubdate\n            elif match_type == \"date-range\":\n                pass\n            elif match_type == \"year\":\n                if pubdate:\n                    pubdate = pubdate.get()\n                    if pubdate:\n                        return pubdate.split(\"-\")[0]\n        except:\n            pass\n    return None\n\ndef parse_pubdate(node, pubdate_xpaths):\n    \n    pubdate = {}\n    for xpath, match_type in pubdate_xpaths:\n        try:\n            pubdate_elem = node.xpath(xpath"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    for xpath, match_type in pubdate_xpaths:\n        try:\n            pubdate = node.xpath(xpath)\n            if match_type == \"date\":\n                if pubdate:\n                    pubdate = pubdate.get()\n                    if pubdate:\n                        return pubdate\n            elif match_type == \"date-range\":\n                pass\n            elif match_type == \"year\":\n                if pubdate:\n                    pubdate = pubdate.get()\n                    if pubdate:\n                        return pubdate.split(\"-\")[0]\n        except:\n            pass\n    return None\n\ndef parse_pubdate(node, pubdate_xpaths):\n    \n    pubdate = {}\n    for xpath, match_type in pubdate_xpaths:\n        try:\n            pubdate_elem = node.xpath(xpath", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    suppl = None\n    for elem in issue.itertext():\n        m = re.search(r'^\\s*N\\s*=\\s*(\\d+)\\s*S\\s*=\\s*(\\d+)\\s*$', elem)\n        if m:\n            number = int(m.group(1))\n            suppl = int(m.group(2))\n            break\n    return number, suppl\n\ndef _get_issue_number_and_supplment_from_element(issue):\n    \n    number, suppl = _extract_number_"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    number = None\n    suppl = None\n    for elem in issue.itertext():\n        m = re.search(r'^\\s*N\\s*=\\s*(\\d+)\\s*S\\s*=\\s*(\\d+)\\s*$', elem)\n        if m:\n            number = int(m.group(1))\n            suppl = int(m.group(2))\n            break\n    return number, suppl\n\ndef _get_issue_number_and_supplment_from_element(issue):\n    \n    number, suppl = _extract_number_", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n        \n        return \"Not yet implemented\"\n\n    def __str__(self):\n        return self.pretty(debug=False)\n\n    def __repr__(self):\n        return self.pretty(debug=True)\n\n    def __eq__(self, other):\n        if isinstance(other, Expression):\n            return self.pretty() == other.pretty()\n        else:\n            return False\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n\nclass BoolExpression(Expression):\n\n    def __init__(self, lhs, op, rhs):\n        Expression.__init__(self, lhs, op, rhs)\n\n    def pretty(self, indent=0, debug=False):\n        return \"[%s %s %s]\" % (self.lhs.pretty(), self.op, self.rhs.pretty())\n\n\nclass OrExpression(BoolExpression):\n    def __init__(self, lhs"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n        \n        return \"Not yet implemented\"\n\n    def __str__(self):\n        return self.pretty(debug=False)\n\n    def __repr__(self):\n        return self.pretty(debug=True)\n\n    def __eq__(self, other):\n        if isinstance(other, Expression):\n            return self.pretty() == other.pretty()\n        else:\n            return False\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n\nclass BoolExpression(Expression):\n\n    def __init__(self, lhs, op, rhs):\n        Expression.__init__(self, lhs, op, rhs)\n\n    def pretty(self, indent=0, debug=False):\n        return \"[%s %s %s]\" % (self.lhs.pretty(), self.op, self.rhs.pretty())\n\n\nclass OrExpression(BoolExpression):\n    def __init__(self, lhs", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n        \n\nclass Negation(Unary):\n    '''A negation expression. The expression is negated in the following way:\n    * If the expression is a `Boolean`, `Integer` or `Real` constant, the value is negated.\n    * If the expression is a `Variable`, the negation is removed.\n    * If the expression is a `Not`, the negation is removed and the negated expression is returned.\n    * If the expression is a `And` or `Or` operator, the negation is removed and the negated expression is returned.\n    * If the expression is a `Negation`, the negated expression is returned.\n    * If the expression is a `Implication`, the negated expression is returned.\n    * If the expression is a `Equivalence`, the negated expression is returned.\n    * If the expression is a `Iff`, the negated expression is returned.\n    * If"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n        \n\nclass Negation(Unary):\n    '''A negation expression. The expression is negated in the following way:\n    * If the expression is a `Boolean`, `Integer` or `Real` constant, the value is negated.\n    * If the expression is a `Variable`, the negation is removed.\n    * If the expression is a `Not`, the negation is removed and the negated expression is returned.\n    * If the expression is a `And` or `Or` operator, the negation is removed and the negated expression is returned.\n    * If the expression is a `Negation`, the negated expression is returned.\n    * If the expression is a `Implication`, the negated expression is returned.\n    * If the expression is a `Equivalence`, the negated expression is returned.\n    * If the expression is a `Iff`, the negated expression is returned.\n    * If", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n        \n        self.handlers.append(hook)\n        return hook\n\n    def off(self, hook):\n        \n        self.handlers.remove(hook)\n        return hook\n\n    def emit(self, *args, **kwargs):\n        \n        for handler in self.handlers:\n            handler(*args, **kwargs)\n\n    def __repr__(self):\n        \n        return self.name\n\n    def __iter__(self):\n        \n        return iter(self.handlers)\n\n\nclass Event(object):\n    '''Base class for events.\n\n    Events are used to notify interested parties when important actions\n    occur in the system.  Events are handled by :class:`EventHandler`\n    instances.\n\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n        \n        self.handlers.append(hook)\n        return hook\n\n    def off(self, hook):\n        \n        self.handlers.remove(hook)\n        return hook\n\n    def emit(self, *args, **kwargs):\n        \n        for handler in self.handlers:\n            handler(*args, **kwargs)\n\n    def __repr__(self):\n        \n        return self.name\n\n    def __iter__(self):\n        \n        return iter(self.handlers)\n\n\nclass Event(object):\n    '''Base class for events.\n\n    Events are used to notify interested parties when important actions\n    occur in the system.  Events are handled by :class:`EventHandler`\n    instances.\n\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = base_config = Configuration()\n    config.etcd_host = etcd_host\n    config.etcd_port = etcd_port\n    config.user = user\n    return config\n\ndef main():\n    \n    config = base_config(user='defaultuser')\n    print(config)\n    config.etcd_host = 'localhost'\n    config.etcd_port = 2379\n    print(config)\n\nif __name__ == '__main__':\n    main()\n```\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = base_config = Configuration()\n    config.etcd_host = etcd_host\n    config.etcd_port = etcd_port\n    config.user = user\n    return config\n\ndef main():\n    \n    config = base_config(user='defaultuser')\n    print(config)\n    config.etcd_host = 'localhost'\n    config.etcd_port = 2379\n    print(config)\n\nif __name__ == '__main__':\n    main()\n```\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n        \n\treturn dt.replace(tzinfo=self)\n\n    def _fromutc_naive(self, dt):\n        \n\treturn dt.replace(tzinfo=self)\n\n    def __repr__(self):\n        \n\treturn 'Timezone(\"%s\")' % self.name\n\n    def __eq__(self, other):\n        \n\treturn type(self) == type(other) and self.name == other.name\n\n    def __ne__(self, other):\n        \n\treturn not (self == other)"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n        \n\treturn dt.replace(tzinfo=self)\n\n    def _fromutc_naive(self, dt):\n        \n\treturn dt.replace(tzinfo=self)\n\n    def __repr__(self):\n        \n\treturn 'Timezone(\"%s\")' % self.name\n\n    def __eq__(self, other):\n        \n\treturn type(self) == type(other) and self.name == other.name\n\n    def __ne__(self, other):\n        \n\treturn not (self == other)", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n        "], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    \n\n    return namefunc\n\n\nclass _tzinfo(datetime.tzinfo):\n    \"\"\"A class to provide a time zone object for use with datetime\n\n    This is a simple implementation of tzinfo which just stores a\n    string name for the zone and uses a fixed offset from UTC.\n    \"\"\"\n    def __init__(self, name, offset, dstoffset):\n        self._name = name\n        self._offset = offset\n        self._dstoffset = dstoffset\n\n    def __repr__(self):\n        return '%s(%r, %r, %r)' % (self.__class__.__name__, self._name,\n                                   self._offset, self._dstoffset)\n\n    def __eq__("], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    \n\n    return namefunc\n\n\nclass _tzinfo(datetime.tzinfo):\n    \"\"\"A class to provide a time zone object for use with datetime\n\n    This is a simple implementation of tzinfo which just stores a\n    string name for the zone and uses a fixed offset from UTC.\n    \"\"\"\n    def __init__(self, name, offset, dstoffset):\n        self._name = name\n        self._offset = offset\n        self._dstoffset = dstoffset\n\n    def __repr__(self):\n        return '%s(%r, %r, %r)' % (self.__class__.__name__, self._name,\n                                   self._offset, self._dstoffset)\n\n    def __eq__(", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    \n\n    return 'unknown'\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    \n\n    return 'unknown'\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    \n160:     return render_pieces(pieces, style, True)\n161: \n162: def render_pieces(pieces, style, safe=False):\n163:     \n164:     if style == 'pep440':\n165:         return render_pep440(pieces, safe=safe)\n166:     elif style == 'pep440-pre':\n167:         return render_pep440_pre(pieces, safe=safe)\n168:     elif style == 'post':\n169:         return render_post(pieces, safe=safe)\n170:     elif style == 'post-release':\n171:         return render_post_release(pieces, safe=safe)"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    \n160:     return render_pieces(pieces, style, True)\n161: \n162: def render_pieces(pieces, style, safe=False):\n163:     \n164:     if style == 'pep440':\n165:         return render_pep440(pieces, safe=safe)\n166:     elif style == 'pep440-pre':\n167:         return render_pep440_pre(pieces, safe=safe)\n168:     elif style == 'post':\n169:         return render_post(pieces, safe=safe)\n170:     elif style == 'post-release':\n171:         return render_post_release(pieces, safe=safe)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    \n\tif pieces[0] == '+':\n\t\treturn '+'\n\treturn '.'\n\ndef make_piece_list(pieces):\n    '''\n    Make a list of pieces.\n    '''\n    p_list = []\n    for p in pieces:\n        p_list.append(p)\n    return p_list\n\ndef get_num_pieces(board_size, piece_size):\n    '''\n    Return the number of pieces that may be placed on the board.\n    '''\n    return (board_size * board_size) // piece_size\n\ndef get_num_possible_pieces(board_size, piece_size):\n    '''\n    Return the number of pieces that may be placed on the board.\n    '''\n    return (board_size * board_size) // piece_size\n\ndef get_num_possible_pieces(board_size, piece_size):\n    '''\n    Return the number"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    \n\tif pieces[0] == '+':\n\t\treturn '+'\n\treturn '.'\n\ndef make_piece_list(pieces):\n    '''\n    Make a list of pieces.\n    '''\n    p_list = []\n    for p in pieces:\n        p_list.append(p)\n    return p_list\n\ndef get_num_pieces(board_size, piece_size):\n    '''\n    Return the number of pieces that may be placed on the board.\n    '''\n    return (board_size * board_size) // piece_size\n\ndef get_num_possible_pieces(board_size, piece_size):\n    '''\n    Return the number of pieces that may be placed on the board.\n    '''\n    return (board_size * board_size) // piece_size\n\ndef get_num_possible_pieces(board_size, piece_size):\n    '''\n    Return the number", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n+    if not isinstance(commands, (list, tuple)):\n+        commands = [commands]\n+\n+    # We use subprocess.Popen and not subprocess.call because\n+    # subprocess.call will block until the child process terminates,\n+    # potentially slowing down the build.\n+    #\n+    # subprocess.Popen starts the process in a new thread, and returns\n+    # immediately, which is why no output is displayed until the\n+    # process terminates.\n+    env = env or os.environ\n+\n+    verbose_str = '--verbose' if verbose else ''\n+    hide_stderr_str = '--hide-stderr' if hide_stderr else ''\n+"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n+    if not isinstance(commands, (list, tuple)):\n+        commands = [commands]\n+\n+    # We use subprocess.Popen and not subprocess.call because\n+    # subprocess.call will block until the child process terminates,\n+    # potentially slowing down the build.\n+    #\n+    # subprocess.Popen starts the process in a new thread, and returns\n+    # immediately, which is why no output is displayed until the\n+    # process terminates.\n+    env = env or os.environ\n+\n+    verbose_str = '--verbose' if verbose else ''\n+    hide_stderr_str = '--hide-stderr' if hide_stderr else ''\n+", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    \n\n    files = {}\n\n    files['version.py'] = \"\"\"\n\n__version__ = '%(version)s'\n\"\"\"\n\n    files['config.py'] = \"\"\""], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    \n\n    files = {}\n\n    files['version.py'] = \"\"\"\n\n__version__ = '%(version)s'\n\"\"\"\n\n    files['config.py'] = \"\"\"", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n  \n```\n\n\n```python\n@register_vcs_repo_loader('git')\ndef git_loader(local_path, depth, recursive, **kwargs):\n  \n  return git.Repo(local_path)\n```\n\n\n```python\n@register_vcs_repo_factory('git')\ndef git_repo_factory(url, **kwargs):\n  \n  return git.Repo.clone_from(url, dest_dir)\n```\n\n\n```python\n@register_vcs_repo_url_creator('git')\ndef git_url_creator(url, **kwargs):\n  '''Create"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n  \n```\n\n\n```python\n@register_vcs_repo_loader('git')\ndef git_loader(local_path, depth, recursive, **kwargs):\n  \n  return git.Repo(local_path)\n```\n\n\n```python\n@register_vcs_repo_factory('git')\ndef git_repo_factory(url, **kwargs):\n  \n  return git.Repo.clone_from(url, dest_dir)\n```\n\n\n```python\n@register_vcs_repo_url_creator('git')\ndef git_url_creator(url, **kwargs):\n  '''Create", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n        \n\nclass Object(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Version(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Inventory(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass VersionManifest(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Head(OCFLObject):\n    \n\n    def __init__(self, obj_id"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n        \n\nclass Object(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Version(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Inventory(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass VersionManifest(OCFLObject):\n    \n\n    def __init__(self, obj_id, repository):\n        super().__init__(obj_id, repository)\n\nclass Head(OCFLObject):\n    \n\n    def __init__(self, obj_id", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \n\n@cli.command()\n@click.argument('version', type=click.STRING)\ndef bump(version):\n    \n\n@cli.command()\n@click.argument('version', type=click.STRING)\ndef release(version):\n    \n\ndef main():\n    cli()\n\nif __name__ == '__main__':\n    main()\n\nA command-line utility to manage version numbers of Python packages.\n\n\nThe `package-version-cli` command can be installed with [pip](https://pip.pypa.io/en/stable/):\n\n```bash\npip install package-version-cli\n```\n\n\nThe `package-version-cli` command can be used to get the current version, next version, bump version, and release"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \n\n@cli.command()\n@click.argument('version', type=click.STRING)\ndef bump(version):\n    \n\n@cli.command()\n@click.argument('version', type=click.STRING)\ndef release(version):\n    \n\ndef main():\n    cli()\n\nif __name__ == '__main__':\n    main()\n\nA command-line utility to manage version numbers of Python packages.\n\n\nThe `package-version-cli` command can be installed with [pip](https://pip.pypa.io/en/stable/):\n\n```bash\npip install package-version-cli\n```\n\n\nThe `package-version-cli` command can be used to get the current version, next version, bump version, and release", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n        \n\tif len(version_dirs) == 0:\n\t    return False\n\n\tif len(version_dirs) == 1:\n\t    return True\n\n\tfor version_dir in version_dirs:\n\t    if version_dir!= version_dirs[-1]:\n\t\tinv_path = os.path.join(version_dir, 'inventories.yaml')\n\t\tif not os.path.exists(inv_path):\n\t\t    self.logger.error('Version %s is missing the inventory file' % version_dir)\n\t\t    return False\n\n\treturn True\n\n    def validate_release_names(self, release_names):\n\tif len(release_names) > 0:"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n        \n\tif len(version_dirs) == 0:\n\t    return False\n\n\tif len(version_dirs) == 1:\n\t    return True\n\n\tfor version_dir in version_dirs:\n\t    if version_dir!= version_dirs[-1]:\n\t\tinv_path = os.path.join(version_dir, 'inventories.yaml')\n\t\tif not os.path.exists(inv_path):\n\t\t    self.logger.error('Version %s is missing the inventory file' % version_dir)\n\t\t    return False\n\n\treturn True\n\n    def validate_release_names(self, release_names):\n\tif len(release_names) > 0:", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    \n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'dir'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    elif os.path.isreg(path):\n        return'reg'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        return 'unknown'\n    \ndef find_size(path):\n    \n    size = 0\n    if os.path.isfile(path):\n        size = os.path"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    \n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'dir'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    elif os.path.isreg(path):\n        return'reg'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        return 'unknown'\n    \ndef find_size(path):\n    \n    size = 0\n    if os.path.isfile(path):\n        size = os.path", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n        \n\n\n        if 'bug_ids' in params:\n            params['bug_ids'] += bug_ids\n        else:\n            params['bug_ids'] = bug_ids\n\n        return params\n\n    def amend_bzparams_for_comment(self, params):\n        \n        if 'bug_ids' not in params:\n            raise BZError(\"No bug_ids in params\")\n\n        if 'comment' not in params:\n            raise BZError(\"No comment in params\")\n\n        params['bug_ids'] = params['bug_ids'].split()\n        comment = params['comment']\n        comment_type = self.get_comment_type(params)\n\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n        \n\n\n        if 'bug_ids' in params:\n            params['bug_ids'] += bug_ids\n        else:\n            params['bug_ids'] = bug_ids\n\n        return params\n\n    def amend_bzparams_for_comment(self, params):\n        \n        if 'bug_ids' not in params:\n            raise BZError(\"No bug_ids in params\")\n\n        if 'comment' not in params:\n            raise BZError(\"No comment in params\")\n\n        params['bug_ids'] = params['bug_ids'].split()\n        comment = params['comment']\n        comment_type = self.get_comment_type(params)\n\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    \n'''\n[\n    (dict, dict, dict),\n    (dict, dict, dict),\n   ...\n]\n\ndeep merge all the dictionaries in the top level\n'''\n    merged_nodes = []\n    for node in nodes:\n        merged_node = node[0].copy()\n        for d in node[1:]:\n            merged_node.update(d)\n        merged_nodes.append(merged_node)\n    return merged_nodes\n\ndef deep_merge_dicts(*dicts):\n    \n'''\n[\n    dict,\n    dict,\n   ...\n]\n\ndeep merge all the dictionaries in the top level\n'''\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n'''\n[\n    (dict, dict, dict),\n    (dict, dict, dict),\n   ...\n]\n\ndeep merge all the dictionaries in the top level\n'''\n    merged_nodes = []\n    for node in nodes:\n        merged_node = node[0].copy()\n        for d in node[1:]:\n            merged_node.update(d)\n        merged_nodes.append(merged_node)\n    return merged_nodes\n\ndef deep_merge_dicts(*dicts):\n    \n'''\n[\n    dict,\n    dict,\n   ...\n]\n\ndeep merge all the dictionaries in the top level\n'''\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    \n\n    parser = argparse.ArgumentParser(description='Convert a 16-bit raw image to a 32-bit format.')\n    parser.add_argument('input', help='The input file')\n    parser.add_argument('output', help='The output file')\n    parser.add_argument('-f', '--format', default"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n\n    parser = argparse.ArgumentParser(description='Convert a 16-bit raw image to a 32-bit format.')\n    parser.add_argument('input', help='The input file')\n    parser.add_argument('output', help='The output file')\n    parser.add_argument('-f', '--format', default", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \n\n    flags = [k for k,v in parser._option_string_actions]\n    return''.join(flags)\n\ndef main(argv=None):\n    '''\n    Main entrypoint for the command-line tool.\n\n    @param argv: List of command-line arguments.\n    '''\n    parser = argparse.ArgumentParser(\n        description='Download all the videos in a playlist.',\n        epilog='Examples: %(prog)s https://www.youtube.com/playlist?list=PLlV142x794e4J8y7x4e01V8f-jW8l2U0u http://www.youtube.com/playlist?list=PLOU2XLYxmsIIvmGvC97x47W9"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n\n    flags = [k for k,v in parser._option_string_actions]\n    return''.join(flags)\n\ndef main(argv=None):\n    '''\n    Main entrypoint for the command-line tool.\n\n    @param argv: List of command-line arguments.\n    '''\n    parser = argparse.ArgumentParser(\n        description='Download all the videos in a playlist.',\n        epilog='Examples: %(prog)s https://www.youtube.com/playlist?list=PLlV142x794e4J8y7x4e01V8f-jW8l2U0u http://www.youtube.com/playlist?list=PLOU2XLYxmsIIvmGvC97x47W9", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    \n\n\n    parser = argparse.ArgumentParser(description='Run an analysis on a set of files. The analysis is specified by the input yaml file.')\n    parser.add_argument('input_yaml', metavar='INPUT_YAML', type=str, help='the input yaml file')\n    parser.add_argument('input_files', metavar='INPUT_FILES', type=str, nargs='+"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n\n\n    parser = argparse.ArgumentParser(description='Run an analysis on a set of files. The analysis is specified by the input yaml file.')\n    parser.add_argument('input_yaml', metavar='INPUT_YAML', type=str, help='the input yaml file')\n    parser.add_argument('input_files', metavar='INPUT_FILES', type=str, nargs='+", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n\ndef parse_arguments(arguments, subparsers):\n    \n\ndef parse_arguments_from_file(filename, subparsers):\n    \n/pycfiles/apache_airflow_arup-1.10.5-py3.6/gcp_kubernetes_operator.cpython-36.py"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n\ndef parse_arguments(arguments, subparsers):\n    \n\ndef parse_arguments_from_file(filename, subparsers):\n    \n/pycfiles/apache_airflow_arup-1.10.5-py3.6/gcp_kubernetes_operator.cpython-36.py", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    \n    merged_nodes = []\n    for node in nodes:\n        if isinstance(node, tuple):\n            key = node[0]\n            value = node[1]\n            nested_nodes = node[2]\n            if isinstance(key, str):\n                merged_nodes.append((key, value))\n            if isinstance(value, dict):\n                merged_nodes.extend(deep_merge_nodes(value.items()))"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    merged_nodes = []\n    for node in nodes:\n        if isinstance(node, tuple):\n            key = node[0]\n            value = node[1]\n            nested_nodes = node[2]\n            if isinstance(key, str):\n                merged_nodes.append((key, value))\n            if isinstance(value, dict):\n                merged_nodes.extend(deep_merge_nodes(value.items()))", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    \n\ndef parse_arguments(argv):\n    '''Given a list of command-line arguments, return a list of (key, value) pairs of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_dict(argv):\n    '''Given a list of command-line arguments, return a dictionary of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_flags(argv):\n    '''Given a list of command-line arguments, return a list of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_args_and_flags(argv):\n    '''Given a list of command-line arguments, return a tuple of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_default(parser, argv):\n    '''Given an argparse.ArgumentParser instance, parse the command line arguments using it.\n\n    If the parser"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n\ndef parse_arguments(argv):\n    '''Given a list of command-line arguments, return a list of (key, value) pairs of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_dict(argv):\n    '''Given a list of command-line arguments, return a dictionary of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_flags(argv):\n    '''Given a list of command-line arguments, return a list of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_into_args_and_flags(argv):\n    '''Given a list of command-line arguments, return a tuple of parsed arguments.\n\n    The values are all strings.'''\n\ndef parse_arguments_default(parser, argv):\n    '''Given an argparse.ArgumentParser instance, parse the command line arguments using it.\n\n    If the parser", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    \n\ndef main():\n    \n    parser = argparse.ArgumentParser(description='Borgmatic - A wrapper for BorgBackup that makes backups easy.')\n    parser.add_argument('-c', '--config-file', dest='config_file', help='The path to the config file to use')\n    parser.add_argument('-C', '--config-dir', dest='config_dir', help='The path to the directory containing config files')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable verbose logging')\n    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true', help='Disable verbose logging')\n    parser.add_argument('command', help='The command to run')\n\n    if args."], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    \n\ndef main():\n    \n    parser = argparse.ArgumentParser(description='Borgmatic - A wrapper for BorgBackup that makes backups easy.')\n    parser.add_argument('-c', '--config-file', dest='config_file', help='The path to the config file to use')\n    parser.add_argument('-C', '--config-dir', dest='config_dir', help='The path to the directory containing config files')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true', help='Enable verbose logging')\n    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true', help='Disable verbose logging')\n    parser.add_argument('command', help='The command to run')\n\n    if args.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    \n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    for subparser_name in unparsed_arguments:\n        if subparser_name in subparsers:\n            subparsers[subparser_name].parse_args([subparser_name])\n        else:\n            raise Exception('Invalid subparser name: %s' % subparser_name)\n\n\ndef get_subparsers(parser):\n    \n    return parser._actions[0].choices\n\n\ndef is_subparser(parser):\n    \n    return len(parser._actions) == 1 and isinstance(parser._actions[0], argparse._SubParsersAction)\n\n\ndef get_subparser_name(parser):\n    '''Given an argparse.ArgumentParser instance, return the"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    for subparser_name in unparsed_arguments:\n        if subparser_name in subparsers:\n            subparsers[subparser_name].parse_args([subparser_name])\n        else:\n            raise Exception('Invalid subparser name: %s' % subparser_name)\n\n\ndef get_subparsers(parser):\n    \n    return parser._actions[0].choices\n\n\ndef is_subparser(parser):\n    \n    return len(parser._actions) == 1 and isinstance(parser._actions[0], argparse._SubParsersAction)\n\n\ndef get_subparser_name(parser):\n    '''Given an argparse.ArgumentParser instance, return the", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    \n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    \n    page = 1\n    while True:\n        yield response.json()\n        if 'next' in response.links:\n            response = requests.get(response.links['next']['url'])\n            page += 1\n        else:\n            break\ndef get_all_messages(url_messages, token):\n    \"\"\"\n    Gets all the messages in a conversation\n    :param url_messages: conversation URL\n    :param token: WAPI token\n    :return: list of messages\n    \"\"\"\n    messages = []\n    response = requests.get(url_messages, headers={'Content-Type': 'application/json', 'Authorization': 'Bearer'+ token})\n    for page in paging(response, 200):\n        messages += page\n    return messages\ndef get_message_details(message):\n    \"\"\"\n    Gets message details\n    :param message: message dictionary\n    :return: message details"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    \n    page = 1\n    while True:\n        yield response.json()\n        if 'next' in response.links:\n            response = requests.get(response.links['next']['url'])\n            page += 1\n        else:\n            break\ndef get_all_messages(url_messages, token):\n    \"\"\"\n    Gets all the messages in a conversation\n    :param url_messages: conversation URL\n    :param token: WAPI token\n    :return: list of messages\n    \"\"\"\n    messages = []\n    response = requests.get(url_messages, headers={'Content-Type': 'application/json', 'Authorization': 'Bearer'+ token})\n    for page in paging(response, 200):\n        messages += page\n    return messages\ndef get_message_details(message):\n    \"\"\"\n    Gets message details\n    :param message: message dictionary\n    :return: message details", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    \n\ndef get_size(file_path: str) -> int:\n    \n    size = os.path.getsize(file_path)\n    return size\n\ndef get_size_from_url(url: str) -> int:\n    \n    response = requests.get(url, stream=True)\n    size = int(response.headers.get('Content-Length'))\n    if size is None"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    \n\ndef get_size(file_path: str) -> int:\n    \n    size = os.path.getsize(file_path)\n    return size\n\ndef get_size_from_url(url: str) -> int:\n    \n    response = requests.get(url, stream=True)\n    size = int(response.headers.get('Content-Length'))\n    if size is None", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    \n    return sum(dicts, dict())\n\n\ndef _dictsub(dict1, dict2):\n    \n    return sum((dict1, dict2), dict())\n\ndef _dictmul(dict_, value):\n    \n    return dict("], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    \n    return sum(dicts, dict())\n\n\ndef _dictsub(dict1, dict2):\n    \n    return sum((dict1, dict2), dict())\n\ndef _dictmul(dict_, value):\n    \n    return dict(", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    \n    return url\n\ndef _get_default_url(url):\n    \n    if url:\n        return _replace_url_args(url, DEFAULT_URL_ARGS)\n    return None\n\ndef _get_default_page(url):\n    \n    if url:\n        return _replace_url_args(url, DEFAULT_PAGE_ARGS)\n    return None\n\ndef _get_url_args(url):\n    \n    if url:\n        return _replace_url_args(url, URL_ARGS)\n    return None\n\ndef _get_page_args(url):\n    '''Generate the page args"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    \n    return url\n\ndef _get_default_url(url):\n    \n    if url:\n        return _replace_url_args(url, DEFAULT_URL_ARGS)\n    return None\n\ndef _get_default_page(url):\n    \n    if url:\n        return _replace_url_args(url, DEFAULT_PAGE_ARGS)\n    return None\n\ndef _get_url_args(url):\n    \n    if url:\n        return _replace_url_args(url, URL_ARGS)\n    return None\n\ndef _get_page_args(url):\n    '''Generate the page args", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n    \n```\n\n\nTo use the library, simply import the module and use the\nfunctions.\n\n```python\nfrom none_string_checker import is_none_string\n\nresult = is_none_string(None)\n```\n\n\nThis project is licensed under the MIT License. See the\n[LICENSE](LICENSE) file for more information.\nsting\n[tool.poetry]\nname = \"none-string-checker\"\nversion = \"1.1.0\"\ndescription = \"Check if a string represents a None value.\"\nauthors = [\" <>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/nicholas-leonard/none-string-checker"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n    \n```\n\n\nTo use the library, simply import the module and use the\nfunctions.\n\n```python\nfrom none_string_checker import is_none_string\n\nresult = is_none_string(None)\n```\n\n\nThis project is licensed under the MIT License. See the\n[LICENSE](LICENSE) file for more information.\nsting\n[tool.poetry]\nname = \"none-string-checker\"\nversion = \"1.1.0\"\ndescription = \"Check if a string represents a None value.\"\nauthors = [\" <>\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\nhomepage = \"https://github.com/nicholas-leonard/none-string-checker", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    \n    flags = [f.replace('=', '') for f in parser.parse_args().__dict__ if isinstance(parser.parse_args().__dict__[f], bool) and parser.parse_args().__dict__[f]] # remove non-flags (i.e. values for flags)\n    return''.join(flags)\n\n\ndef get_user_agent(url, user_agent):\n    '''Return User-Agent string from a URL.\n\n    If user_agent is set, return it.\n    Otherwise, return a random User-Agent string.'''\n    if user_agent:\n        return user_agent\n    else:\n        return random"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    flags = [f.replace('=', '') for f in parser.parse_args().__dict__ if isinstance(parser.parse_args().__dict__[f], bool) and parser.parse_args().__dict__[f]] # remove non-flags (i.e. values for flags)\n    return''.join(flags)\n\n\ndef get_user_agent(url, user_agent):\n    '''Return User-Agent string from a URL.\n\n    If user_agent is set, return it.\n    Otherwise, return a random User-Agent string.'''\n    if user_agent:\n        return user_agent\n    else:\n        return random", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    \n    processed_files = set(processed)\n    if path_name in processed_files:\n        if verbose:\n            print \"Already processed: %s\" % path_name\n        return True\n    else:\n        return False\n\n\ndef process_file(processed, path_name, verbose):\n    \n    if verbose:\n        print \"Processing: %s\" % path_name\n    processed_files = set(processed)\n    processed_files.add(path_name)\n    return processed_files\n\n\ndef process_directory(processed, path_name, verbose):\n    \n    if verbose:\n        print \"Processing: %s\" % path_name\n    processed_files = set(processed)\n    processed_files.add(path_name)\n    return"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    \n    processed_files = set(processed)\n    if path_name in processed_files:\n        if verbose:\n            print \"Already processed: %s\" % path_name\n        return True\n    else:\n        return False\n\n\ndef process_file(processed, path_name, verbose):\n    \n    if verbose:\n        print \"Processing: %s\" % path_name\n    processed_files = set(processed)\n    processed_files.add(path_name)\n    return processed_files\n\n\ndef process_directory(processed, path_name, verbose):\n    \n    if verbose:\n        print \"Processing: %s\" % path_name\n    processed_files = set(processed)\n    processed_files.add(path_name)\n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    \n    return vertices\n\ndef plot_polygon(polygon, ax, **kwargs):\n    \n    vertices = vertex3tuple(polygon)\n    x, y = zip(*vertices)\n    ax.plot(x, y, **kwargs)\n    ax.scatter(polygon.x, polygon.y, s=50, marker='o', c='r')\n\ndef plot_polygons(polygons, ax, **kwargs):\n    \n    for polygon in polygons:\n        plot_polygon(polygon, ax, **kwargs)\n\ndef get_polygons(p_list):\n    "], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    \n    return vertices\n\ndef plot_polygon(polygon, ax, **kwargs):\n    \n    vertices = vertex3tuple(polygon)\n    x, y = zip(*vertices)\n    ax.plot(x, y, **kwargs)\n    ax.scatter(polygon.x, polygon.y, s=50, marker='o', c='r')\n\ndef plot_polygons(polygons, ax, **kwargs):\n    \n    for polygon in polygons:\n        plot_polygon(polygon, ax, **kwargs)\n\ndef get_polygons(p_list):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n\ndef string_to_int(number_string: str, alphabet: List[str]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding: Optional[int] = None) -> List[int]:\n    \n\ndef bitlist_to_int(bitlist: List[int]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding: Optional[int] = None) -> List[int]:\n    \n\ndef bitlist_to_int(bitlist: List[int]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n\ndef string_to_int(number_string: str, alphabet: List[str]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding: Optional[int] = None) -> List[int]:\n    \n\ndef bitlist_to_int(bitlist: List[int]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding: Optional[int] = None) -> List[int]:\n    \n\ndef bitlist_to_int(bitlist: List[int]) -> int:\n    \n\ndef int_to_bitlist(number: int, padding", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params = flow_params.split()\n    flow_params[register_number] = str(register_value)\n    flow_params =''.join(flow_params)\n    return flow_params\n\n\ndef _get_values_from_register(flow_params, register_number):\n    \n    flow_params = flow_params.split()\n    register_value = flow_params[register_number]\n    return int(register_value)\n\n\ndef _get_value_from_register(flow_params, register_number):\n    '''Get value from flows to given register"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \n    flow_params = flow_params.split()\n    flow_params[register_number] = str(register_value)\n    flow_params =''.join(flow_params)\n    return flow_params\n\n\ndef _get_values_from_register(flow_params, register_number):\n    \n    flow_params = flow_params.split()\n    register_value = flow_params[register_number]\n    return int(register_value)\n\n\ndef _get_value_from_register(flow_params, register_number):\n    '''Get value from flows to given register", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n\n\n\ndef main():\n    print(replace_dots('123.456', '0'))"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n\n\n\ndef main():\n    print(replace_dots('123.456', '0'))", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    return cls.__subclasses__()\n\n\ndef subclass_subclasses(cls):\n    \n    return subclasses(cls) + [g for s in subclasses(cls) for g in subclass_subclasses(s)]\n\n\ndef subclass_subclasses_methods(cls):\n    '''Return all subclasses and all subclasses of subclasses, recursively,\n    and all methods\n    '''\n    return subclass_subclasses(cls) + [g for s in subclass_subclasses(cls) for g in s.methods()]\n\n\ndef subclasses_methods(cls):\n    '''Return all subclasses, and all methods\n    '''\n    return subclasses(cls) + [g for s in subclasses(cls) for g in s.methods()]\n\n\ndef subclasses_of_"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    return cls.__subclasses__()\n\n\ndef subclass_subclasses(cls):\n    \n    return subclasses(cls) + [g for s in subclasses(cls) for g in subclass_subclasses(s)]\n\n\ndef subclass_subclasses_methods(cls):\n    '''Return all subclasses and all subclasses of subclasses, recursively,\n    and all methods\n    '''\n    return subclass_subclasses(cls) + [g for s in subclass_subclasses(cls) for g in s.methods()]\n\n\ndef subclasses_methods(cls):\n    '''Return all subclasses, and all methods\n    '''\n    return subclasses(cls) + [g for s in subclasses(cls) for g in s.methods()]\n\n\ndef subclasses_of_", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n\ndef _string_to_int(string: str, alphabet: List[str]) -> int:\n    \n\ndef int_to_string(integer: int, alphabet: List[str]) -> str:\n    \n\ndef _int_to_string(integer: int, alphabet: List[str]) -> str:\n    \n\n\n@dataclass\nclass Data:\n    alphabet: List[str] = None\n    data: List[str] = None\n    data_type: str = None\n    encoding: str = None\n    encoding_type: str = None\n    integer: int = None\n    string: str = None\n\n\ndef get_alphabet(string: str, alphabet: List[str] = None) -> List["], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n\ndef _string_to_int(string: str, alphabet: List[str]) -> int:\n    \n\ndef int_to_string(integer: int, alphabet: List[str]) -> str:\n    \n\ndef _int_to_string(integer: int, alphabet: List[str]) -> str:\n    \n\n\n@dataclass\nclass Data:\n    alphabet: List[str] = None\n    data: List[str] = None\n    data_type: str = None\n    encoding: str = None\n    encoding_type: str = None\n    integer: int = None\n    string: str = None\n\n\ndef get_alphabet(string: str, alphabet: List[str] = None) -> List[", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        try:\n            os.system(f'wget {url} -O {destination_path}')\n        except:\n            print(f'wget {url} -O {destination_path}')\n            raise\n        repo_archive = self._extract_repo_archive(destination_path)\n        return repo_archive\n\n    def _extract_repo_archive(self, repo_archive_path: Path) -> Path:\n        \n        with tarfile.open(repo_archive_path) as tar"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        try:\n            os.system(f'wget {url} -O {destination_path}')\n        except:\n            print(f'wget {url} -O {destination_path}')\n            raise\n        repo_archive = self._extract_repo_archive(destination_path)\n        return repo_archive\n\n    def _extract_repo_archive(self, repo_archive_path: Path) -> Path:\n        \n        with tarfile.open(repo_archive_path) as tar", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    \n\ndef os_is_linux():\n    \n\ndef os_is_windows():\n    \n\ndef os_get_architecture():\n    \n\ndef os_get_home():\n    \n\ndef os_get_cwd():\n    \n\ndef os_get_temp_dir():\n    \n\ndef os_get_separator():\n    \n\ndef os_get_line_separator():\n    \n\ndef os_get_drive_letter():\n    \n\ndef os_get_platform_type():\n    \n\ndef os_get"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    \n\ndef os_is_linux():\n    \n\ndef os_is_windows():\n    \n\ndef os_get_architecture():\n    \n\ndef os_get_home():\n    \n\ndef os_get_cwd():\n    \n\ndef os_get_temp_dir():\n    \n\ndef os_get_separator():\n    \n\ndef os_get_line_separator():\n    \n\ndef os_get_drive_letter():\n    \n\ndef os_get_platform_type():\n    \n\ndef os_get", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    \n    return r'%s\\.cpp' % item\n\ndef cpp_dict(item):\n    \n    return item.replace(r'\\.cpp', '')\n\n\ndef get_config_file_sections(config_file_path):\n    '''\n    Return a list of section names in the config file.\n    '''\n    config = ConfigParser()\n    config.read(config_file_path)\n    return config.sections()\n\n\ndef get_config_file_options(config_file_path, section_name):\n    '''\n    Return a list of option names in the config file.\n    '''\n    config = ConfigParser()\n    config.read(config_file_path)\n    return config.options(section_name)\n\n\ndef get_config_file_item(config_file_path"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    \n    return r'%s\\.cpp' % item\n\ndef cpp_dict(item):\n    \n    return item.replace(r'\\.cpp', '')\n\n\ndef get_config_file_sections(config_file_path):\n    '''\n    Return a list of section names in the config file.\n    '''\n    config = ConfigParser()\n    config.read(config_file_path)\n    return config.sections()\n\n\ndef get_config_file_options(config_file_path, section_name):\n    '''\n    Return a list of option names in the config file.\n    '''\n    config = ConfigParser()\n    config.read(config_file_path)\n    return config.options(section_name)\n\n\ndef get_config_file_item(config_file_path", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/README.md\n\nSome useful functions for Python.\n\n\n```python\nfrom util import *\n```/util/url.py\n'''\nVarious functions for manipulating URLs.\n'''\n\nimport re\nimport urllib.parse\n\n\ndef split_url(url):\n    \n    return urllib.parse.urlsplit(url)\n\n\ndef join_url(url, path):\n    \n    return urllib.parse.urljoin(url, path)\n\n\ndef normalize_url(url):\n    \n    return urllib.parse.urlparse(url).geturl()\n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n/README.md\n\nSome useful functions for Python.\n\n\n```python\nfrom util import *\n```/util/url.py\n'''\nVarious functions for manipulating URLs.\n'''\n\nimport re\nimport urllib.parse\n\n\ndef split_url(url):\n    \n    return urllib.parse.urlsplit(url)\n\n\ndef join_url(url, path):\n    \n    return urllib.parse.urljoin(url, path)\n\n\ndef normalize_url(url):\n    \n    return urllib.parse.urlparse(url).geturl()\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    \n\n    return posix_split(s)\n\ndef posix_split(s):\n    \n\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    \n\n    return posix_split(s)\n\ndef posix_split(s):\n    \n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n/tests/test_files.py@@ -15,11 +15,11 @@\n \n     assert os.path.exists(file_path)\n \n-    assert os.path.getsize(file_path) > 0\n+    assert os.path.getsize(file_path) > 20\n \n     assert tarfile.is_tarfile(file_path)\n \n \n     assert os.path.exists(file_path)\n \n     assert tarfile.is_tarfile(file_path)\n+\n+\n+"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n/tests/test_files.py@@ -15,11 +15,11 @@\n \n     assert os.path.exists(file_path)\n \n-    assert os.path.getsize(file_path) > 0\n+    assert os.path.getsize(file_path) > 20\n \n     assert tarfile.is_tarfile(file_path)\n \n \n     assert os.path.exists(file_path)\n \n     assert tarfile.is_tarfile(file_path)\n+\n+\n+", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):\n        \n\tif not ignored:\n\t\treturn ''\n\telse:\n\t\tcmd = 'git ls-files -i --exclude-standard --others'\n\t\tp = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tout, err = p.communicate()\n\t\tignored_list = out.split('\\n')\n\t\tignored_list.sort()\n\t\tignored_string = ''\n\t\tfor item in ignored_list:\n\t\t\tignored_string += item + ','\n\t\treturn ignored_string[:-1]\n\ndef get_diff(self):\n\t\n\tcmd = 'git diff --ignore-space-at-eol --ignore-"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):\n        \n\tif not ignored:\n\t\treturn ''\n\telse:\n\t\tcmd = 'git ls-files -i --exclude-standard --others'\n\t\tp = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tout, err = p.communicate()\n\t\tignored_list = out.split('\\n')\n\t\tignored_list.sort()\n\t\tignored_string = ''\n\t\tfor item in ignored_list:\n\t\t\tignored_string += item + ','\n\t\treturn ignored_string[:-1]\n\ndef get_diff(self):\n\t\n\tcmd = 'git diff --ignore-space-at-eol --ignore-", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\nclass LeafPattern:\n    '''\n    A pattern for matching a leaf node in a tree.\n\n    This is a base class for pattern subclasses that match a single leaf node\n    in a tree, such as a file name.\n    '''\n\n    def __init__(self, pattern: str):\n        '''\n        Construct a LeafPattern object from a pattern string.\n\n        Parameters\n        ----------\n        pattern : str\n            The pattern string.\n        '''\n        self.pattern = pattern\n\n    def match(self, leaf: Leaf) -> bool:\n        '''\n        Check if a leaf node matches this pattern.\n\n        Parameters\n        ----------\n        leaf : Leaf\n            The leaf node.\n\n        Returns\n        -------\n        bool\n            True if the leaf matches the pattern, False otherwise.\n        '''\n\nclass Pattern:\n    '''\n    A pattern for matching a tree.\n\n    This is a base class for pattern subclasses that match a tree structure.\n    '''\n\n    def __init__(self, patterns: list"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n\nclass LeafPattern:\n    '''\n    A pattern for matching a leaf node in a tree.\n\n    This is a base class for pattern subclasses that match a single leaf node\n    in a tree, such as a file name.\n    '''\n\n    def __init__(self, pattern: str):\n        '''\n        Construct a LeafPattern object from a pattern string.\n\n        Parameters\n        ----------\n        pattern : str\n            The pattern string.\n        '''\n        self.pattern = pattern\n\n    def match(self, leaf: Leaf) -> bool:\n        '''\n        Check if a leaf node matches this pattern.\n\n        Parameters\n        ----------\n        leaf : Leaf\n            The leaf node.\n\n        Returns\n        -------\n        bool\n            True if the leaf matches the pattern, False otherwise.\n        '''\n\nclass Pattern:\n    '''\n    A pattern for matching a tree.\n\n    This is a base class for pattern subclasses that match a tree structure.\n    '''\n\n    def __init__(self, patterns: list", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    \n\ndef parse_period(period):\n    \n\ndef parse_time_of_day(time_of_day):\n    \n\ndef parse_day_of_week(day_of_week):\n    \n\ndef parse_day_of_month(day_of_month):\n    \n\ndef parse_month_of_year(month_of_year):\n    '''Given a month of year string"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    \n\ndef parse_period(period):\n    \n\ndef parse_time_of_day(time_of_day):\n    \n\ndef parse_day_of_week(day_of_week):\n    \n\ndef parse_day_of_month(day_of_month):\n    \n\ndef parse_month_of_year(month_of_year):\n    '''Given a month of year string", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    \n    return True\n\ndef check_ping(host, timeout=5):\n    \n    while True:\n        try:\n            ping = subprocess.check_output([\"ping\", \"-c\", \"1\", \"-W\", str(timeout), host])\n            return True\n        except subprocess.CalledProcessError:\n            return False\n\ndef get_local_ip():\n    \n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        s.connect(('10.255.255.255', 1))\n        ip = s.getsockname()[0]\n    except:\n        ip = '127.0.0.1'\n    finally:\n        s."], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    \n    return True\n\ndef check_ping(host, timeout=5):\n    \n    while True:\n        try:\n            ping = subprocess.check_output([\"ping\", \"-c\", \"1\", \"-W\", str(timeout), host])\n            return True\n        except subprocess.CalledProcessError:\n            return False\n\ndef get_local_ip():\n    \n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        s.connect(('10.255.255.255', 1))\n        ip = s.getsockname()[0]\n    except:\n        ip = '127.0.0.1'\n    finally:\n        s.", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    \n    return [re.sub(r'\\*', r'[^/]*', path) for path in find_paths]\n\ndef get_find_paths(find_paths):\n    \n    return [re.sub(r'\\*', r'[^/]*', path) for path in find_paths]\n\ndef find_files(find_paths, exclude_paths, include_paths):\n    \n    if not find_paths:\n        return []\n    if isinstance(find_paths, list):\n        find_paths = make_find_paths(find_paths)\n    find_paths_str =''.join(find_paths)\n    if exclude_paths:\n        exclude_paths = make"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    \n    return [re.sub(r'\\*', r'[^/]*', path) for path in find_paths]\n\ndef get_find_paths(find_paths):\n    \n    return [re.sub(r'\\*', r'[^/]*', path) for path in find_paths]\n\ndef find_files(find_paths, exclude_paths, include_paths):\n    \n    if not find_paths:\n        return []\n    if isinstance(find_paths, list):\n        find_paths = make_find_paths(find_paths)\n    find_paths_str =''.join(find_paths)\n    if exclude_paths:\n        exclude_paths = make", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    \n    return 'git-cmd.exe' in os.path.basename(os.readlink('/proc/self/exe'))\n\ndef is_gitbash_or_cygwin():\n    \n    return is_gitbash() or sys.platform=='cygwin'\n\ndef is_cygwin():\n    \n    return sys.platform=='cygwin'\n\ndef is_windows():\n    \n    return sys.platform.startswith('win')\n\ndef get_appdata_dir(appname, roaming=False):\n    '''returns the appdata directory for an app.\n    roaming sets whether to use roaming or local app"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    \n    return 'git-cmd.exe' in os.path.basename(os.readlink('/proc/self/exe'))\n\ndef is_gitbash_or_cygwin():\n    \n    return is_gitbash() or sys.platform=='cygwin'\n\ndef is_cygwin():\n    \n    return sys.platform=='cygwin'\n\ndef is_windows():\n    \n    return sys.platform.startswith('win')\n\ndef get_appdata_dir(appname, roaming=False):\n    '''returns the appdata directory for an app.\n    roaming sets whether to use roaming or local app", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise Exception('Config file already exists, not overwriting')\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n    os.chmod(config_filename, mode)\n\ndef write_all_configs(config_dir, rendered_configs, mode=0o600):\n    \n    for (config_filename, rendered_config) in rendered_configs.items():\n        write_configuration(os.path.join(config_dir, config_filename),"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise Exception('Config file already exists, not overwriting')\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n    os.chmod(config_filename, mode)\n\ndef write_all_configs(config_dir, rendered_configs, mode=0o600):\n    \n    for (config_filename, rendered_config) in rendered_configs.items():\n        write_configuration(os.path.join(config_dir, config_filename),", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n        \n\treturn script.replace(\"\\n\", seperator)\n\ndef get_command_from_file(filename, seperator=\" && \"):\n\t\n\twith open(filename, \"r\") as f:\n\t\tcommand = f.read()\n\t\tf.close()\n\t\treturn oneline(command, seperator=seperator)\n\ndef get_command_from_file_list(filename_list, seperator=\" && \"):\n\t\n\tcommand = \"\"\n\tfor filename in filename_list:\n\t\tcommand += get_command_from_file(filename, seperator=seperator)\n\treturn command\n\n\ndef get_command_from_folder(folder, seperator=\" && \"):\n\t\n\tcommand ="], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n        \n\treturn script.replace(\"\\n\", seperator)\n\ndef get_command_from_file(filename, seperator=\" && \"):\n\t\n\twith open(filename, \"r\") as f:\n\t\tcommand = f.read()\n\t\tf.close()\n\t\treturn oneline(command, seperator=seperator)\n\ndef get_command_from_file_list(filename_list, seperator=\" && \"):\n\t\n\tcommand = \"\"\n\tfor filename in filename_list:\n\t\tcommand += get_command_from_file(filename, seperator=seperator)\n\treturn command\n\n\ndef get_command_from_folder(folder, seperator=\" && \"):\n\t\n\tcommand =", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n\n```\n\nI have a function `func` that takes a long time to run. I want to run it in a subprocess and have it killed after `timeout` seconds.username_1: You can use the `signal` module to do exactly that.\n\n```\nimport signal\nimport subprocess\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\nsignal.signal(signal.SIGALRM, signal_handler)\nsignal.alarm(timeout)\n\ntry:\n    subprocess.run(func)\nexcept Exception as e:\n    print(e)\nfinally:\n    signal.alarm(0)\n\n```\nUpvotes: 3 [selected_answer]username_2: You can use the [concurrent.futures.wait()](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n\n```\n\nI have a function `func` that takes a long time to run. I want to run it in a subprocess and have it killed after `timeout` seconds.username_1: You can use the `signal` module to do exactly that.\n\n```\nimport signal\nimport subprocess\n\ndef signal_handler(signum, frame):\n    raise Exception(\"Timed out!\")\n\nsignal.signal(signal.SIGALRM, signal_handler)\nsignal.alarm(timeout)\n\ntry:\n    subprocess.run(func)\nexcept Exception as e:\n    print(e)\nfinally:\n    signal.alarm(0)\n\n```\nUpvotes: 3 [selected_answer]username_2: You can use the [concurrent.futures.wait()](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    \n\n    if not matcher:\n        return None\n\n    if matcher.startswith('env:'):\n        key, default = matcher[4:].split(':', 1)\n        return os.environ.get(key, default)\n\n    return matcher\n\n\ndef _resolve_tuple(matcher):\n    \n\n    if not matcher:\n        return None\n\n    key, default = matcher\n    return os.environ.get(key, default)\n\n\ndef _resolve_list(matcher):\n    \n\n    if not matcher:\n        return None\n\n    key, default = matcher\n    return os.environ.get(key, default)\n\n\ndef _resolve_dict(matcher):\n    "], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    \n\n    if not matcher:\n        return None\n\n    if matcher.startswith('env:'):\n        key, default = matcher[4:].split(':', 1)\n        return os.environ.get(key, default)\n\n    return matcher\n\n\ndef _resolve_tuple(matcher):\n    \n\n    if not matcher:\n        return None\n\n    key, default = matcher\n    return os.environ.get(key, default)\n\n\ndef _resolve_list(matcher):\n    \n\n    if not matcher:\n        return None\n\n    key, default = matcher\n    return os.environ.get(key, default)\n\n\ndef _resolve_dict(matcher):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    "], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        if input_list[i].endswith(os.sep):\n            input_list[i] = input_list[i][:-1]\n    return input_list\n\n\ndef remove_file(input_list):\n    \n    for i in range(len(input_list)):\n        if '.' in input_list[i]:\n            input_list[i] = input_list[i][:input_list[i].rfind('.')]\n    return input_list\n\n\ndef remove_ending_os_sep_files(input_list):\n    '''Iterate over a string list and remove trailing os seperator characters"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    \n    for i in range(len(input_list)):\n        if input_list[i].endswith(os.sep):\n            input_list[i] = input_list[i][:-1]\n    return input_list\n\n\ndef remove_file(input_list):\n    \n    for i in range(len(input_list)):\n        if '.' in input_list[i]:\n            input_list[i] = input_list[i][:input_list[i].rfind('.')]\n    return input_list\n\n\ndef remove_ending_os_sep_files(input_list):\n    '''Iterate over a string list and remove trailing os seperator characters", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):\n        \n\tpattern = pattern.replace(\" \", \"\")\n        pattern = pattern.replace(\"*\", \"[a-zA-Z0-9]*\")\n        pattern = pattern.replace(\"?\", \"[a-zA-Z0-9]\")\n        pattern = pattern.replace(\"#\", \"[0-9]*\")\n        pattern = pattern.replace(\"$\", \"[0-9]\")\n        if strip:\n            pattern = \"^\" + pattern + \"$\"\n        else:\n            pattern = \"^\" + pattern + \".*\"\n        return pattern\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Usage: python %s <file>\" % sys.argv[0]\n        sys.exit(-1)\n    c = CSV()\n    c.read_csv(sys.argv[1])\n    print c.get_pattern(sys.argv[2])\n/python/csv_handler."], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):\n        \n\tpattern = pattern.replace(\" \", \"\")\n        pattern = pattern.replace(\"*\", \"[a-zA-Z0-9]*\")\n        pattern = pattern.replace(\"?\", \"[a-zA-Z0-9]\")\n        pattern = pattern.replace(\"#\", \"[0-9]*\")\n        pattern = pattern.replace(\"$\", \"[0-9]\")\n        if strip:\n            pattern = \"^\" + pattern + \"$\"\n        else:\n            pattern = \"^\" + pattern + \".*\"\n        return pattern\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print \"Usage: python %s <file>\" % sys.argv[0]\n        sys.exit(-1)\n    c = CSV()\n    c.read_csv(sys.argv[1])\n    print c.get_pattern(sys.argv[2])\n/python/csv_handler.", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):\n        \n\tif verbose:\n\t    sys.stderr.write(\"Running command: %s\\n\" % cmd)\n\ttry:\n\t    subprocess.check_call(cmd)\n\texcept subprocess.CalledProcessError as e:\n\t    print \"Command %s failed.\" % cmd\n\t    sys.exit(e.returncode)\n\n    def run_commands(self, cmds):\n\t\n\tfor cmd in cmds:\n\t    self.run_command(cmd, self.verbose)\n\n    def check_dir(self, path):\n        \n        if not os.path.exists(path):\n            os.makedirs(path)\n    \n    def build_package(self, pkg, dest):\n        \n        self.run_command(\"rm -rf %s/%s\" % (dest, pkg), self."], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):\n        \n\tif verbose:\n\t    sys.stderr.write(\"Running command: %s\\n\" % cmd)\n\ttry:\n\t    subprocess.check_call(cmd)\n\texcept subprocess.CalledProcessError as e:\n\t    print \"Command %s failed.\" % cmd\n\t    sys.exit(e.returncode)\n\n    def run_commands(self, cmds):\n\t\n\tfor cmd in cmds:\n\t    self.run_command(cmd, self.verbose)\n\n    def check_dir(self, path):\n        \n        if not os.path.exists(path):\n            os.makedirs(path)\n    \n    def build_package(self, pkg, dest):\n        \n        self.run_command(\"rm -rf %s/%s\" % (dest, pkg), self.", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    \ne_ipv4(ip):\n    \n/tools/is_ip.py\n\nimport sys\n\nfrom lib.utils import is_ipv4\n\nif __name__ == '__main__':\n    ip = sys.argv[1]\n    print(is_ipv4(ip))\n\ndef is_ipv4(target):\n    \n\ndef is_ipv6(target):\n    \n\ndef is_mac(target):\n    \n\ndef is_subnet(target):\n    \n\ndef is_cidr(target):\n    '''Test if CIDR or not"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    \ne_ipv4(ip):\n    \n/tools/is_ip.py\n\nimport sys\n\nfrom lib.utils import is_ipv4\n\nif __name__ == '__main__':\n    ip = sys.argv[1]\n    print(is_ipv4(ip))\n\ndef is_ipv4(target):\n    \n\ndef is_ipv6(target):\n    \n\ndef is_mac(target):\n    \n\ndef is_subnet(target):\n    \n\ndef is_cidr(target):\n    '''Test if CIDR or not", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n```\n\n```python\nroots = find_roots(graph=g, prop=skos.broader)\n```\n\n```python\ndef find_leaves(\n    graph: \"Graph\", prop: \"URIRef\", leaves: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n```\n\n```python\nleaves = find_leaves(graph=g, prop=skos.broader)\n```\n\n```python\ndef find_paths(\n    graph: \"Graph\", source: \"Node\", target: \"Node\", paths: Optional[List[List[\"Node\"]]] = None\n) -> List[List[\"Node\"]]:\n    \n```\n\n```python\npaths = find_paths(graph=g, source=roots[0"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n```\n\n```python\nroots = find_roots(graph=g, prop=skos.broader)\n```\n\n```python\ndef find_leaves(\n    graph: \"Graph\", prop: \"URIRef\", leaves: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n```\n\n```python\nleaves = find_leaves(graph=g, prop=skos.broader)\n```\n\n```python\ndef find_paths(\n    graph: \"Graph\", source: \"Node\", target: \"Node\", paths: Optional[List[List[\"Node\"]]] = None\n) -> List[List[\"Node\"]]:\n    \n```\n\n```python\npaths = find_paths(graph=g, source=roots[0", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):\n        \n\n        return dumper(obj)\n\n/py23compat/backports/urllib/error.py\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport sys\nimport httplib\nimport socket\n\nfrom.._"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):\n        \n\n        return dumper(obj)\n\n/py23compat/backports/urllib/error.py\nfrom __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport sys\nimport httplib\nimport socket\n\nfrom.._", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    ch.setFormatter(formatter)\n\n    logger.addHandler(ch)\n\n    fh = logging.FileHandler(logfile)\n    fh.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    fh.setFormatter(formatter)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    ch.setFormatter(formatter)\n\n    logger.addHandler(ch)\n\n    fh = logging.FileHandler(logfile)\n    fh.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    fh.setFormatter(formatter)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):\n        \n        return np.exp(-pow(x-self.mu, 2)/(2 * pow(self.sigma, 2)))\n    \n    def fit_gaussian(self, x, y):\n        \n        self.mu, self.sigma = scipy.stats.norm.fit(x)\n        return self.mu, self.sigma\n    \n    def fit_gaussian_to_data(self, data):\n        \n        x = data.index.values\n        y = data.values\n        \n        self.fit_gaussian(x, y)\n        return self.mu, self.sigma\n    \n    def plot_fit"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):\n        \n        return np.exp(-pow(x-self.mu, 2)/(2 * pow(self.sigma, 2)))\n    \n    def fit_gaussian(self, x, y):\n        \n        self.mu, self.sigma = scipy.stats.norm.fit(x)\n        return self.mu, self.sigma\n    \n    def fit_gaussian_to_data(self, data):\n        \n        x = data.index.values\n        y = data.values\n        \n        self.fit_gaussian(x, y)\n        return self.mu, self.sigma\n    \n    def plot_fit", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n\ndef load_configuration(config_filename, overrides=None, resolve_env=True):\n    \n/docs/api/load.rst\n.. automodule:: tornado_config.load\n   :members:\n/README.rst\nTornado Config\n==============\n\nA library for loading configuration files for Tornado apps.\n\nUsage\n-----\n\nThe main interface is the :func:`load_configurations` function which takes a sequence of configuration file\nnames and returns a dict of loaded configuration values.\n\nThe library will try to load each configuration file in turn, and will throw an exception if a configuration file\ncannot be loaded.\n\nThe configuration file format is JSON, with a single top-level object.\n\nConfiguration files have access to a number of global variables, which are exposed in the :class:`tornado_config."], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n\ndef load_configuration(config_filename, overrides=None, resolve_env=True):\n    \n/docs/api/load.rst\n.. automodule:: tornado_config.load\n   :members:\n/README.rst\nTornado Config\n==============\n\nA library for loading configuration files for Tornado apps.\n\nUsage\n-----\n\nThe main interface is the :func:`load_configurations` function which takes a sequence of configuration file\nnames and returns a dict of loaded configuration values.\n\nThe library will try to load each configuration file in turn, and will throw an exception if a configuration file\ncannot be loaded.\n\nThe configuration file format is JSON, with a single top-level object.\n\nConfiguration files have access to a number of global variables, which are exposed in the :class:`tornado_config.", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    \n\ndef force_bytes(obj):\n    \n\ndef force_text(obj):\n    \n\ndef force_int(obj):\n    \n\ndef force_float(obj):\n    \n\ndef force_bool(obj):\n    \n\ndef force_text_list(obj):\n    '''If ``obj`` is"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    \n\ndef force_bytes(obj):\n    \n\ndef force_text(obj):\n    \n\ndef force_int(obj):\n    \n\ndef force_float(obj):\n    \n\ndef force_bool(obj):\n    \n\ndef force_text_list(obj):\n    '''If ``obj`` is", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n\tif tz is None:\n\t\ttz = get_time_zone()\n        return cls(ticks // 1000000000, ticks % 1000000000, tz)\n\n    @classmethod\n    def from_time(cls, time, tz=None):\n        \n        return cls(time, tz=tz)\n\n    @classmethod\n    def from_struct_time(cls, struct_time, tz=None):\n        \n        return cls(struct_time[0], struct_time[1], tz=tz)\n\n    @classmethod\n    def from_str(cls, timestr, tz=None):\n        \n        return cls(timestr.split('.')[0], timestr.split('.')[1], tz"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n\tif tz is None:\n\t\ttz = get_time_zone()\n        return cls(ticks // 1000000000, ticks % 1000000000, tz)\n\n    @classmethod\n    def from_time(cls, time, tz=None):\n        \n        return cls(time, tz=tz)\n\n    @classmethod\n    def from_struct_time(cls, struct_time, tz=None):\n        \n        return cls(struct_time[0], struct_time[1], tz=tz)\n\n    @classmethod\n    def from_str(cls, timestr, tz=None):\n        \n        return cls(timestr.split('.')[0], timestr.split('.')[1], tz", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n```\n\n\nThe Bolt protocol handler is responsible for processing a Bolt protocol message. It is the entry point for a Bolt protocol implementation.\n\n```python\nclass BoltProtocolHandler:\n\n    def __init__(self, version, handler_factory, session):\n        self.version = version\n        self.handler_factory = handler_factory\n        self.session = session\n\n    def on_message(self, message):\n        \n\n```\n\n\nThe Bolt protocol handler factory is responsible for creating Bolt protocol handler instances.\n\n```python\nclass BoltProtocolHandlerFactory:\n\n    def __init__(self, session):\n        self.session = session\n\n    def create(self, version):\n        '''Create a new Bolt protocol handler instance"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n```\n\n\nThe Bolt protocol handler is responsible for processing a Bolt protocol message. It is the entry point for a Bolt protocol implementation.\n\n```python\nclass BoltProtocolHandler:\n\n    def __init__(self, version, handler_factory, session):\n        self.version = version\n        self.handler_factory = handler_factory\n        self.session = session\n\n    def on_message(self, message):\n        \n\n```\n\n\nThe Bolt protocol handler factory is responsible for creating Bolt protocol handler instances.\n\n```python\nclass BoltProtocolHandlerFactory:\n\n    def __init__(self, session):\n        self.session = session\n\n    def create(self, version):\n        '''Create a new Bolt protocol handler instance", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod\n    def from_raw_values(cls, values):\n        \n\tbookmarks = []\n        for value in values:\n            bookmarks.append(cls.from_raw_value(value))\n        return bookmarks\n\n    @classmethod\n    def from_raw_value(cls, value):\n        \n        if not value:\n            return None\n        bookmark = Bookmark()\n        bookmark.name = value\n        return bookmark\n/src/test/python/test_bookmarks.py\n\nimport unittest\n\nimport bookmarks\n\nclass BookmarksTest(unittest.TestCase):\n    \n\n    def test_from_raw_values(self):\n        \n        values = ['foo', 'bar']\n        bookmarks = Bookmarks.from_raw_values(values)\n       "], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod\n    def from_raw_values(cls, values):\n        \n\tbookmarks = []\n        for value in values:\n            bookmarks.append(cls.from_raw_value(value))\n        return bookmarks\n\n    @classmethod\n    def from_raw_value(cls, value):\n        \n        if not value:\n            return None\n        bookmark = Bookmark()\n        bookmark.name = value\n        return bookmark\n/src/test/python/test_bookmarks.py\n\nimport unittest\n\nimport bookmarks\n\nclass BookmarksTest(unittest.TestCase):\n    \n\n    def test_from_raw_values(self):\n        \n        values = ['foo', 'bar']\n        bookmarks = Bookmarks.from_raw_values(values)\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    \n\n```\n\nThis is the function that's called by the `with` statement.\n\n```\ndef _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq,'s')\n    elif isinstance(seq, bytes):\n        return (seq, 'b')\n    elif isinstance(seq, collections.abc.Sequence):\n        return (seq, 'l')\n    raise TypeError(\"expected string, bytes, or list\")\n\n```\n\nThe `with` statement then calls `_get_seq_with_type` and assigns `seq` and `type` to the corresponding variables.\n\n```\nwith _get_seq_with_type(seq) as (seq, type):\n\n```\n\nIf `seq` has a `read()` method, `type` will be `'s'` (for string), otherwise it will be"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    \n\n```\n\nThis is the function that's called by the `with` statement.\n\n```\ndef _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq,'s')\n    elif isinstance(seq, bytes):\n        return (seq, 'b')\n    elif isinstance(seq, collections.abc.Sequence):\n        return (seq, 'l')\n    raise TypeError(\"expected string, bytes, or list\")\n\n```\n\nThe `with` statement then calls `_get_seq_with_type` and assigns `seq` and `type` to the corresponding variables.\n\n```\nwith _get_seq_with_type(seq) as (seq, type):\n\n```\n\nIf `seq` has a `read()` method, `type` will be `'s'` (for string), otherwise it will be", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n        \n        self.scale = other\n        if other is not None:\n            if recompute:\n                self.normalize(recompute=recompute)\n            self.scale = self.scale or 1.\n            self.scale = self.scale.astype(float) if numpy.isscalar(self.scale) else self.scale.astype(float)\n            self.scale[numpy.isnan(self.scale)] = 1.\n            self.scale[numpy.isinf(self.scale)] = 1.\n        return self\n\n    def normalize(self, other=None, recompute=False):\n        \n        self.normalize = other\n        if other is not None:\n            self.normalize = self.normalize.astype(float) if numpy.is"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n        \n        self.scale = other\n        if other is not None:\n            if recompute:\n                self.normalize(recompute=recompute)\n            self.scale = self.scale or 1.\n            self.scale = self.scale.astype(float) if numpy.isscalar(self.scale) else self.scale.astype(float)\n            self.scale[numpy.isnan(self.scale)] = 1.\n            self.scale[numpy.isinf(self.scale)] = 1.\n        return self\n\n    def normalize(self, other=None, recompute=False):\n        \n        self.normalize = other\n        if other is not None:\n            self.normalize = self.normalize.astype(float) if numpy.is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n        \n```\n\n```python\nscale = self.get_scale()\nself.set_scale(scale * 1.1)\n```\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import FuncFormatter\n\nplt.rcParams['font.family'] ='sans-serif'\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.size'] = 14\nplt.rcParams['mathtext.default'] ='regular'\n\nfig, ax = plt.subplots(figsize=(6, 4), dpi=100)\n\nx = np.linspace(0, 20, 100)\ny = np.sin(x)\n\nax.plot(x, y)\n\nax.set_xlim(0, 20)"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n        \n```\n\n```python\nscale = self.get_scale()\nself.set_scale(scale * 1.1)\n```\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import FuncFormatter\n\nplt.rcParams['font.family'] ='sans-serif'\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['font.size'] = 14\nplt.rcParams['mathtext.default'] ='regular'\n\nfig, ax = plt.subplots(figsize=(6, 4), dpi=100)\n\nx = np.linspace(0, 20, 100)\ny = np.sin(x)\n\nax.plot(x, y)\n\nax.set_xlim(0, 20)", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n.. method:: graph_to_hist(graph, field_names=(\"x\", \"y\"), values=None, scale=None)\n\n    Convert a :class:`.graph` to a :class:`.histogram`.\n\n.. method:: graph_to_hist(graph, field_names=(\"x\", \"y\"), values=None, scale=None)\n\n    Convert a :class:`.graph` to a :class:`.histogram`.\n\n.. method:: hist_to_hist(hist1, hist2, make_value=None,\n                          field_names=(\"x\", \"y\"), scale=None):\n\n    Compute the difference between two :class:`.histograms`.\n\n.. method:: hist_to_hist(hist1, hist2, make_value=None,\n                          field_names=(\"x\", \"y\"), scale=None):\n\n    Compute the difference between two :class"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n.. method:: graph_to_hist(graph, field_names=(\"x\", \"y\"), values=None, scale=None)\n\n    Convert a :class:`.graph` to a :class:`.histogram`.\n\n.. method:: graph_to_hist(graph, field_names=(\"x\", \"y\"), values=None, scale=None)\n\n    Convert a :class:`.graph` to a :class:`.histogram`.\n\n.. method:: hist_to_hist(hist1, hist2, make_value=None,\n                          field_names=(\"x\", \"y\"), scale=None):\n\n    Compute the difference between two :class:`.histograms`.\n\n.. method:: hist_to_hist(hist1, hist2, make_value=None,\n                          field_names=(\"x\", \"y\"), scale=None):\n\n    Compute the difference between two :class", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    \n\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if isinstance(iface, Interface):\n        if not issubclass(candidate, iface.type):\n            raise TypeError('{!r} provides {!r}, not {!r}'\n                           .format(candidate, iface.type, vtype))\n        if vtype is None:\n            vtype = iface.type\n        if vtype is not Interface:\n            if vtype in iface._impl_types:\n                return\n            if issubclass(vtype, iface._impl_types):\n                raise TypeError('{!r} provides {!r}, not {!r}'\n                               .format(candidate, iface.type, vtype))\n        if candidate is iface.type and not tentative:\n            raise TypeError('{!r} is a type, not an interface'\n                           .format(candidate))\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    \n\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if isinstance(iface, Interface):\n        if not issubclass(candidate, iface.type):\n            raise TypeError('{!r} provides {!r}, not {!r}'\n                           .format(candidate, iface.type, vtype))\n        if vtype is None:\n            vtype = iface.type\n        if vtype is not Interface:\n            if vtype in iface._impl_types:\n                return\n            if issubclass(vtype, iface._impl_types):\n                raise TypeError('{!r} provides {!r}, not {!r}'\n                               .format(candidate, iface.type, vtype))\n        if candidate is iface.type and not tentative:\n            raise TypeError('{!r} is a type, not an interface'\n                           .format(candidate))\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    \n\n\n\n\ndef tryCandidate(iface, candidate, tentative=False):\n    \n    try:\n        verifyObject(iface, candidate, tentative)\n        return True\n    except:\n        return False\n\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if not hasattr(candidate, 'provides'):\n        raise VerifyError(candidate, 'provides', iface)\n\n    if not tryCandidate(iface, candidate):\n        raise VerifyError(candidate, 'provides', iface)\n\n    if hasattr(iface,'required'):\n        for attr in iface.required:\n            if not hasattr(candidate, attr):\n                raise VerifyError("], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    \n\n\n\n\ndef tryCandidate(iface, candidate, tentative=False):\n    \n    try:\n        verifyObject(iface, candidate, tentative)\n        return True\n    except:\n        return False\n\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    if not hasattr(candidate, 'provides'):\n        raise VerifyError(candidate, 'provides', iface)\n\n    if not tryCandidate(iface, candidate):\n        raise VerifyError(candidate, 'provides', iface)\n\n    if hasattr(iface,'required'):\n        for attr in iface.required:\n            if not hasattr(candidate, attr):\n                raise VerifyError(", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyMethod(method, candidate, tentative=False):\n    \n\ndef verifyProperty(prop, candidate, tentative=False):\n    \n\ndef verifySignal(signal, candidate, tentative=False):\n    \n\ndef verifySlot(slot, candidate, tentative=False):\n    \n\ndef verifySignalMethod(signal, method, candidate, tentative=False):\n    \n\ndef verifySignalProperty(signal, prop, candidate, tentative=False):\n    '''Verify that the *candidate* might correctly implement *prop* for *signal"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n\ndef verifyMethod(method, candidate, tentative=False):\n    \n\ndef verifyProperty(prop, candidate, tentative=False):\n    \n\ndef verifySignal(signal, candidate, tentative=False):\n    \n\ndef verifySlot(slot, candidate, tentative=False):\n    \n\ndef verifySignalMethod(signal, method, candidate, tentative=False):\n    \n\ndef verifySignalProperty(signal, prop, candidate, tentative=False):\n    '''Verify that the *candidate* might correctly implement *prop* for *signal", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    \n\ndef getMetaclass(explicit_mc=None):\n    \n'''\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n\ndef getMetaclass(explicit_mc=None):\n    \n'''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n        \n        if key not in self:\n            if default is __marker:\n                raise KeyError(key)\n            return default\n        value = self[key]\n        del self[key]\n        return value\n\n    def popitem(self):\n        '''D.popitem() -> (k, v), remove and return some (key, value) pair as a\n          2-tuple; but raise KeyError if D is empty.'''\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError('dictionary is empty')\n        value = self[key]\n        del self[key]\n        return (key, value)\n\n    def setdefault(self, key, default="], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n        \n        if key not in self:\n            if default is __marker:\n                raise KeyError(key)\n            return default\n        value = self[key]\n        del self[key]\n        return value\n\n    def popitem(self):\n        '''D.popitem() -> (k, v), remove and return some (key, value) pair as a\n          2-tuple; but raise KeyError if D is empty.'''\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError('dictionary is empty')\n        value = self[key]\n        del self[key]\n        return (key, value)\n\n    def setdefault(self, key, default=", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n        \n        return self.pop(self.min()[0])\n    \n    def peek(self, key):\n        \n        return self.table[self.hash_key(key)]\n    \n    def keys(self):\n        \n        return self.table.keys()\n    \n    def values(self):\n        \n        return self.table.values()\n    \n    def items(self):\n        \n        return self.table.items()\n    \n    def __str__(self):\n        \n        return str(self.table)"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        return self.pop(self.min()[0])\n    \n    def peek(self, key):\n        \n        return self.table[self.hash_key(key)]\n    \n    def keys(self):\n        \n        return self.table.keys()\n    \n    def values(self):\n        \n        return self.table.values()\n    \n    def items(self):\n        \n        return self.table.items()\n    \n    def __str__(self):\n        \n        return str(self.table)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n        \n\nclass LRUCache(object):\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.used = 0\n        self.cache = LRUdict()\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        else:\n            return -1\n\n    def set(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            self.cache[key] = value\n        else:\n            self.cache[key] = value\n            self.used += 1\n            if self."], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n\nclass LRUCache(object):\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.used = 0\n        self.cache = LRUdict()\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            return self.cache[key]\n        else:\n            return -1\n\n    def set(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if key in self.cache:\n            self.cache.move_to_end(key)\n            self.cache[key] = value\n        else:\n            self.cache[key] = value\n            self.used += 1\n            if self.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n        \n        k, v = self._lru.popitem(last=False)\n        self._lru[k] = v\n        self.cache_size -= 1\n        return k, v\n\n    def __getitem__(self, key):\n        '''Return the value for `key`.\n\n        If `key` is not in the cache, `value` is the result of calling\n        `self.default_factory(key)` and the pair is inserted into the cache\n        as `key: value`.\n        '''\n        if key not in self._lru:\n            value = self.default_factory(key)\n            self.cache_size += 1\n            self._lru[key] = value\n            return value\n        else:\n            v = self._lru[key]\n            self._lru.move_to_end(key)\n           "], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        k, v = self._lru.popitem(last=False)\n        self._lru[k] = v\n        self.cache_size -= 1\n        return k, v\n\n    def __getitem__(self, key):\n        '''Return the value for `key`.\n\n        If `key` is not in the cache, `value` is the result of calling\n        `self.default_factory(key)` and the pair is inserted into the cache\n        as `key: value`.\n        '''\n        if key not in self._lru:\n            value = self.default_factory(key)\n            self.cache_size += 1\n            self._lru[key] = value\n            return value\n        else:\n            v = self._lru[key]\n            self._lru.move_to_end(key)\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n        \n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\t\n\traise NotImplementedError()\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\t\n\traise NotImplementedError()\n\n\tdef _create_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\t\trf'^{self.in_regex.pattern}|{self.out_regex.pattern}$',\n\t\t\tre.IGNORECASE | re.MULTILINE\n\t\t)\n\n\tdef _find_command(self, name: str) -> Command:\n\t\t\n\t\tfor command in self.commands:\n\t\t\tif command.name == name:\n\t\t\t\treturn command\n\n\tdef _find_commands(self, name: str) -> List[Command]:\n\t\t\n\t\tcommands = []\n\t\tfor command in self.commands"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\t\n\traise NotImplementedError()\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\t\n\traise NotImplementedError()\n\n\tdef _create_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\t\trf'^{self.in_regex.pattern}|{self.out_regex.pattern}$',\n\t\t\tre.IGNORECASE | re.MULTILINE\n\t\t)\n\n\tdef _find_command(self, name: str) -> Command:\n\t\t\n\t\tfor command in self.commands:\n\t\t\tif command.name == name:\n\t\t\t\treturn command\n\n\tdef _find_commands(self, name: str) -> List[Command]:\n\t\t\n\t\tcommands = []\n\t\tfor command in self.commands", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\t\t\n\nclass _Converter():\n\t'''A class to convert parameter styles to the style expected by the\n\tunderlying function being wrapped.'''\n\tdef __init__(self,\n\t\tself_object : object,\n\t\tfunction : Callable,\n\t\tparameters : list[str] = None,\n\t\tdefaults : tuple = None,\n\t\t) -> None:\n\t\t'''Initialize the converter.\n\n\t\tArguments:\n\t\tself_object -- The object that the function is being called on.\n\t\tfunction -- The function being wrapped.\n\t\tparameters -- The names of the parameters expected by the function.\n\t\tdefaults -- The default values of the parameters.\n\t\t'''\n\t\tself._self_object = self_object\n\t\tself._function = function\n\t\tself._parameters = parameters\n\t\tself._defaults = defaults\n\n\tdef __call__(self, *args, **kwargs) -> Any:\n\t\t'''Convert the"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\t\t\n\nclass _Converter():\n\t'''A class to convert parameter styles to the style expected by the\n\tunderlying function being wrapped.'''\n\tdef __init__(self,\n\t\tself_object : object,\n\t\tfunction : Callable,\n\t\tparameters : list[str] = None,\n\t\tdefaults : tuple = None,\n\t\t) -> None:\n\t\t'''Initialize the converter.\n\n\t\tArguments:\n\t\tself_object -- The object that the function is being called on.\n\t\tfunction -- The function being wrapped.\n\t\tparameters -- The names of the parameters expected by the function.\n\t\tdefaults -- The default values of the parameters.\n\t\t'''\n\t\tself._self_object = self_object\n\t\tself._function = function\n\t\tself._parameters = parameters\n\t\tself._defaults = defaults\n\n\tdef __call__(self, *args, **kwargs) -> Any:\n\t\t'''Convert the", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii\n    def isoparse(self, dt_str):\n        \n\n@_takes_ascii\ndef isoparse(dt_str):\n    \n\n\n@_takes_ascii\ndef parse(dt_str):\n    \n\ndef rfc3339(dt):\n    '''Format a :class:`datetime.datetime` to an ISO"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii\n    def isoparse(self, dt_str):\n        \n\n@_takes_ascii\ndef isoparse(dt_str):\n    \n\n\n@_takes_ascii\ndef parse(dt_str):\n    \n\ndef rfc3339(dt):\n    '''Format a :class:`datetime.datetime` to an ISO", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n\n.. class:: TimeParser(Parser)\n\n    A class for parsing date/time strings.\n\n   .. method:: parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.datetime` object.\n\n.. class:: DateParser(Parser)\n\n    A class for parsing date strings.\n\n   .. method:: parse(self, datestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.date` object.\n\n.. class:: DateTimeParser(TimeParser)\n\n    A class for parsing date/time strings.\n\n   .. method:: parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.datetime` object.\n\n.. class:: DateOnlyParser(DateParser)\n\n    A"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n\n.. class:: TimeParser(Parser)\n\n    A class for parsing date/time strings.\n\n   .. method:: parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.datetime` object.\n\n.. class:: DateParser(Parser)\n\n    A class for parsing date strings.\n\n   .. method:: parse(self, datestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.date` object.\n\n.. class:: DateTimeParser(TimeParser)\n\n    A class for parsing date/time strings.\n\n   .. method:: parse(self, timestr, default=None, ignoretz=False, tzinfos=None, **kwargs)\n\n        Return a :class:`datetime.datetime` object.\n\n.. class:: DateOnlyParser(DateParser)\n\n    A", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n\n        return self._apply_tzinfo(dt)\n\n    def __call__(self, dt):\n        return self.fromutc(dt)\n\n    def _validate_tzinfo(self, dt):\n        if not isinstance(dt, datetime) and not isinstance(dt, date):\n            raise TypeError('Expected datetime or date; got %r' % dt)\n        if dt.tzinfo is None:\n            raise ValueError('Expected tz-aware datetime; got %r' % dt)\n        return dt\n\n    def _validate_fromutc_inputs(self, dt, target):\n        dt = self._validate_tzinfo(dt)\n        if target.tzinfo is None:\n            raise ValueError('Expected tzinfo; got %r' % target)\n        if dt.tzinfo!= target.tzinfo:\n            raise ValueError('Expected datetime with %r tzinfo"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n\n        return self._apply_tzinfo(dt)\n\n    def __call__(self, dt):\n        return self.fromutc(dt)\n\n    def _validate_tzinfo(self, dt):\n        if not isinstance(dt, datetime) and not isinstance(dt, date):\n            raise TypeError('Expected datetime or date; got %r' % dt)\n        if dt.tzinfo is None:\n            raise ValueError('Expected tz-aware datetime; got %r' % dt)\n        return dt\n\n    def _validate_fromutc_inputs(self, dt, target):\n        dt = self._validate_tzinfo(dt)\n        if target.tzinfo is None:\n            raise ValueError('Expected tzinfo; got %r' % target)\n        if dt.tzinfo!= target.tzinfo:\n            raise ValueError('Expected datetime with %r tzinfo", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_naive(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_aware(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_mixed(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_none(dt, tzinfo):\n    \n\nclass TestDefaultTzInfo(unittest.TestCase):\n    def test_naive(self):\n        dt = datetime.datetime.now()\n        self.assertEqual(dt.tzinfo, None)\n        default_tzinfo_naive(dt)\n       "], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_naive(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_aware(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_mixed(dt, tzinfo):\n    \n\n@default_tzinfo\ndef default_tzinfo_none(dt, tzinfo):\n    \n\nclass TestDefaultTzInfo(unittest.TestCase):\n    def test_naive(self):\n        dt = datetime.datetime.now()\n        self.assertEqual(dt.tzinfo, None)\n        default_tzinfo_naive(dt)\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n\nclass _Slice:\n    def __init__(self,\n                 before: bytes,\n                 after: bytes,\n                 *,\n                 cut_chars: Tuple[bytes, bytes] = (b'', b''),\n                 slice_start: int = 0,\n                 slice_end: int = 0):\n        self.before, self.after = before, after\n        self.cut_chars = cut_chars\n        self.slice_start, self.slice_end = slice_start, slice_end\n\n    def __repr__(self) -> str:\n        return f'<Slice: {self.before}{self.after}>'\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, _Slice):\n            return NotImplemented\n        return (self.before, self.after, self.cut_chars,\n                self.slice_start, self.slice_end) == (\n            other."], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n\nclass _Slice:\n    def __init__(self,\n                 before: bytes,\n                 after: bytes,\n                 *,\n                 cut_chars: Tuple[bytes, bytes] = (b'', b''),\n                 slice_start: int = 0,\n                 slice_end: int = 0):\n        self.before, self.after = before, after\n        self.cut_chars = cut_chars\n        self.slice_start, self.slice_end = slice_start, slice_end\n\n    def __repr__(self) -> str:\n        return f'<Slice: {self.before}{self.after}>'\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, _Slice):\n            return NotImplemented\n        return (self.before, self.after, self.cut_chars,\n                self.slice_start, self.slice_end) == (\n            other.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    \n\ndef get_request_url(request: RequestType):\n    \n\ndef get_request_host(request: RequestType):\n    \n\ndef get_request_method(request: RequestType):\n    \n\ndef get_request_path(request: RequestType):\n    \n\ndef get_request_query_string(request: RequestType):\n    \n\ndef get_request_headers(request: RequestType):\n    \n\ndef get_request_post_data(request: RequestType):\n    \n\ndef set_request_post_data(request: RequestType, data: dict):\n    \n\ndef get_request_"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    \n\ndef get_request_url(request: RequestType):\n    \n\ndef get_request_host(request: RequestType):\n    \n\ndef get_request_method(request: RequestType):\n    \n\ndef get_request_path(request: RequestType):\n    \n\ndef get_request_query_string(request: RequestType):\n    \n\ndef get_request_headers(request: RequestType):\n    \n\ndef get_request_post_data(request: RequestType):\n    \n\ndef set_request_post_data(request: RequestType, data: dict):\n    \n\ndef get_request_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix\", False)\n\n\ndef is_matrix_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix\", False)\n\n\ndef is_matrix_reply(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix_reply\", False)\n\n\ndef is_matrix_client_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix_client_request\", False)\n\n\ndef is_matrix_client_reply(request: RequestType) -> bool:\n    \n   "], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix\", False)\n\n\ndef is_matrix_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix\", False)\n\n\ndef is_matrix_reply(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix_reply\", False)\n\n\ndef is_matrix_client_request(request: RequestType) -> bool:\n    \n    return request.get(\"is_matrix_client_request\", False)\n\n\ndef is_matrix_client_reply(request: RequestType) -> bool:\n    \n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \n    return dt.strftime('%Y%m%d%H%M%S')\n\ndef run_command(cmd):\n    \n    print \"running command:\", cmd\n    p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)\n    out, err = p.communicate()\n    return out, err\n\ndef get_data_file_name(station_id, date, freq):\n    '''Return the file name for the specified station, date, and frequency.\n    '''\n    return '%s_%s_%s.dat' % (station_id, format_dt(date), freq)\n\ndef get_data_path(station_id, date, freq, host='bastion'):\n    '''Return the path to a data file"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \n    return dt.strftime('%Y%m%d%H%M%S')\n\ndef run_command(cmd):\n    \n    print \"running command:\", cmd\n    p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)\n    out, err = p.communicate()\n    return out, err\n\ndef get_data_file_name(station_id, date, freq):\n    '''Return the file name for the specified station, date, and frequency.\n    '''\n    return '%s_%s_%s.dat' % (station_id, format_dt(date), freq)\n\ndef get_data_path(station_id, date, freq, host='bastion'):\n    '''Return the path to a data file", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    found = re.findall(r'<\\s*(\\w+)', text)\n    if found:\n        tags.update(found)\n    else:\n        return tags, text\n    newtext = re.sub(r'<\\s*(\\w+)', lambda match: replacer(match.group(1)), text)\n    return tags, newtext\n\n\ndef find_tags_html(html: str) -> Set[str]:\n    \n    tags = set()\n    found = re.findall(r'<\\s*(\\w+)', html)\n    if found:\n        tags.update(found)\n    return tags\n\n\ndef find_tags_text(text: str) -> Set[str]:\n    \n    tags = set()\n    found ="], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    found = re.findall(r'<\\s*(\\w+)', text)\n    if found:\n        tags.update(found)\n    else:\n        return tags, text\n    newtext = re.sub(r'<\\s*(\\w+)', lambda match: replacer(match.group(1)), text)\n    return tags, newtext\n\n\ndef find_tags_html(html: str) -> Set[str]:\n    \n    tags = set()\n    found = re.findall(r'<\\s*(\\w+)', html)\n    if found:\n        tags.update(found)\n    return tags\n\n\ndef find_tags_text(text: str) -> Set[str]:\n    \n    tags = set()\n    found =", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \n    text = text.replace('href=\"', 'href=\"http://www.nhl.com/')\n    text = text.replace('href=\"file://', 'href=\"file://')\n    text = text.replace('href=\"http://www.nhl.com/scripts/cms', 'href=\"http://www.nhl.com/scripts/cms')\n    text = text.replace('http://www.nhl.com/scripts/cms', 'http://www.nhl.com/scripts/cms')\n    text = text.replace('http://www.nhl.com/scripts/cms?src', 'http://www.nhl.com/scripts/cms?src')\n    text = text.replace('http://www.nhl.com/scripts/cms"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \n    text = text.replace('href=\"', 'href=\"http://www.nhl.com/')\n    text = text.replace('href=\"file://', 'href=\"file://')\n    text = text.replace('href=\"http://www.nhl.com/scripts/cms', 'href=\"http://www.nhl.com/scripts/cms')\n    text = text.replace('http://www.nhl.com/scripts/cms', 'http://www.nhl.com/scripts/cms')\n    text = text.replace('http://www.nhl.com/scripts/cms?src', 'http://www.nhl.com/scripts/cms?src')\n    text = text.replace('http://www.nhl.com/scripts/cms", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n\n```\n\nI need to run this in a subprocess, so I need to be able to call it from a subprocess.\n\nThe obvious way to do it would be:\n\n```\nfrom typing import Optional\nimport requests\n\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    r = requests.head(url)\n    return r.headers.get('content-type')\n\n```\n\nBut this doesn't work, because `requests.head` is a method on a class, so it can't be called from `subprocess.run`.\n\nI tried just returning the method itself:\n\n```\nreturn requests.head\n\n```\n\nBut this doesn't work either, because the method needs to be called with arguments:\n\n```\nimport requests\n\ndef fetch_content_type"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n\n```\n\nI need to run this in a subprocess, so I need to be able to call it from a subprocess.\n\nThe obvious way to do it would be:\n\n```\nfrom typing import Optional\nimport requests\n\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    r = requests.head(url)\n    return r.headers.get('content-type')\n\n```\n\nBut this doesn't work, because `requests.head` is a method on a class, so it can't be called from `subprocess.run`.\n\nI tried just returning the method itself:\n\n```\nreturn requests.head\n\n```\n\nBut this doesn't work either, because the method needs to be called with arguments:\n\n```\nimport requests\n\ndef fetch_content_type", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    \n\ndef get_tags_for_word(word: str) -> List[str]:\n    \n\ndef get_words_with_tags(tags: List[str]) -> List[str]:\n    \n\ndef get_tags_for_text(text: str) -> List[str]:\n    \n\ndef get_words_with_tags_and_text(tags: List[str], text: str) -> List[str]:\n    \n\ndef get_all_tags() -> List[str]:\n    \n\ndef get_all_words() -> List[str]:\n    \n\ndef get_word_frequency() -> List[Tuple[str"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    \n\ndef get_tags_for_word(word: str) -> List[str]:\n    \n\ndef get_words_with_tags(tags: List[str]) -> List[str]:\n    \n\ndef get_tags_for_text(text: str) -> List[str]:\n    \n\ndef get_words_with_tags_and_text(tags: List[str], text: str) -> List[str]:\n    \n\ndef get_all_tags() -> List[str]:\n    \n\ndef get_all_words() -> List[str]:\n    \n\ndef get_word_frequency() -> List[Tuple[str", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \n\n```\nUpvotes: 5 [selected_answer]username_5: I would use an xmltodict module instead of trying to parse the xml with regular expressions.\n\n<https://github.com/martinblech/xmltodict>\nUpvotes: 1 "], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \n\n```\nUpvotes: 5 [selected_answer]username_5: I would use an xmltodict module instead of trying to parse the xml with regular expressions.\n\n<https://github.com/martinblech/xmltodict>\nUpvotes: 1 ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n\ndef check_entity_handle_exists(entity_handle):\n    \n\ndef check_entity_handle_is_valid(entity_handle):\n    \n\ndef get_entity_handle_by_id(entity_id):\n    \n\ndef get_entity_handle_by_name(entity_name):\n    \n\ndef get_entity_name_by_handle(entity_handle):\n    \n\ndef get_entity_id_by_handle(entity_handle):\n    \n\ndef get_entity_handle_by_entity_id(entity_id):\n    \n\ndef get_entity_id_by_entity_handle(entity_"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n\ndef check_entity_handle_exists(entity_handle):\n    \n\ndef check_entity_handle_is_valid(entity_handle):\n    \n\ndef get_entity_handle_by_id(entity_id):\n    \n\ndef get_entity_handle_by_name(entity_name):\n    \n\ndef get_entity_name_by_handle(entity_handle):\n    \n\ndef get_entity_id_by_handle(entity_handle):\n    \n\ndef get_entity_handle_by_entity_id(entity_id):\n    \n\ndef get_entity_id_by_entity_handle(entity_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    \n\ndef get_nodeinfo_json_document(url, document_path=None):\n    \n\ndef get_nodeinfo_json_documents(urls, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_documents_from_file(urls_filename, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_documents_from_url(urls_url, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_document_from_"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n\ndef get_nodeinfo_json_document(url, document_path=None):\n    \n\ndef get_nodeinfo_json_documents(urls, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_documents_from_file(urls_filename, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_documents_from_url(urls_url, document_path=None, nodeinfo_json_document_filename=None):\n    \n\ndef get_nodeinfo_json_document_from_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_relay_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_relay_signature("], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_relay_signature(public_key, doc, signature):\n    \n    return True\n\ndef verify_relay_signature(", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    \n\ndef parse_diaspora_xrd(document: str) -> Dict:\n    \n\ndef parse_diaspora_xrd_json(document: str) -> Dict:\n    \n\ndef parse_facebook(document: str) -> Dict:\n    \n\ndef parse_github(document: str) -> Dict:\n    \n\ndef parse_google(document: str) -> Dict:\n    \n\ndef parse_instagram(document: str) -> Dict:\n    \n\ndef parse_linkedin(document: str) -> Dict:\n    \n\ndef parse_mastodon(document: str) -> Dict:\n    \n\ndef parse_mastod"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    \n\ndef parse_diaspora_xrd(document: str) -> Dict:\n    \n\ndef parse_diaspora_xrd_json(document: str) -> Dict:\n    \n\ndef parse_facebook(document: str) -> Dict:\n    \n\ndef parse_github(document: str) -> Dict:\n    \n\ndef parse_google(document: str) -> Dict:\n    \n\ndef parse_instagram(document: str) -> Dict:\n    \n\ndef parse_linkedin(document: str) -> Dict:\n    \n\ndef parse_mastodon(document: str) -> Dict:\n    \n\ndef parse_mastod", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n\ndef retrieve_webfinger_document(handle: str) -> str:\n    \n\nfrom dataclasses import dataclass\n\n@dataclass\nclass WebfingerResult:\n    \n    document: str\n    \n    url: str\n    \n\ndef query_webfinger(handle: str) -> WebfingerResult:\n    \n\n\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass LdpDResult:\n    \n    document: str\n    '''The document that was retrieved"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n\ndef retrieve_webfinger_document(handle: str) -> str:\n    \n\nfrom dataclasses import dataclass\n\n@dataclass\nclass WebfingerResult:\n    \n    document: str\n    \n    url: str\n    \n\ndef query_webfinger(handle: str) -> WebfingerResult:\n    \n\n\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass LdpDResult:\n    \n    document: str\n    '''The document that was retrieved", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    url = 'https://%s.diaspora.net/webfinger?rel=https://www.diasporafoundation.org/profiles/webfinger&resource=acct:%s' % (handle, handle)\n    webfinger_response = requests.get(url)\n    if webfinger_response.status_code == 404:\n        return None\n    webfinger_response.raise_for_status()\n    webfinger_json = webfinger_response.json()\n    return webfinger_json\n\ndef retrieve_and_parse_di"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    url = 'https://%s.diaspora.net/webfinger?rel=https://www.diasporafoundation.org/profiles/webfinger&resource=acct:%s' % (handle, handle)\n    webfinger_response = requests.get(url)\n    if webfinger_response.status_code == 404:\n        return None\n    webfinger_response.raise_for_status()\n    webfinger_json = webfinger_response.json()\n    return webfinger_json\n\ndef retrieve_and_parse_di", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    \n\ndef retrieve_diaspora_user_meta(user):\n    \n/diaspora/tests/test_utils.py\nfrom diaspora import utils\n\ndef test_escape_uri():\n    assert utils.escape_uri('http://example.org/foo@bar') == 'http://example.org/foo%40bar'\n    assert utils.escape_uri('http://example.org/foo/bar') == 'http://example.org/foo/bar'\n\ndef test_unescape_uri():\n    assert utils.unescape_uri('http://example.org/foo%40bar') == 'http://example.org/foo@bar'\n\n/diaspora/tests/test_api.py\nimport os\nimport json\nfrom diaspor"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    \n\ndef retrieve_diaspora_user_meta(user):\n    \n/diaspora/tests/test_utils.py\nfrom diaspora import utils\n\ndef test_escape_uri():\n    assert utils.escape_uri('http://example.org/foo@bar') == 'http://example.org/foo%40bar'\n    assert utils.escape_uri('http://example.org/foo/bar') == 'http://example.org/foo/bar'\n\ndef test_unescape_uri():\n    assert utils.unescape_uri('http://example.org/foo%40bar') == 'http://example.org/foo@bar'\n\n/diaspora/tests/test_api.py\nimport os\nimport json\nfrom diaspor", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\ndef send_document_to_server(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    try:\n        response = requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n        return e.response.status_code, e.response.text\n    else:\n        return response.status_code, response.text\n\ndef get_document_from_server(url, timeout=10, method=\"get\", *args, **kwargs):\n    \n    try:\n        response = requests.request(method, url, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n    except"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n\ndef send_document_to_server(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    try:\n        response = requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n        return e.response.status_code, e.response.text\n    else:\n        return response.status_code, response.text\n\ndef get_document_from_server(url, timeout=10, method=\"get\", *args, **kwargs):\n    \n    try:\n        response = requests.request(method, url, timeout=timeout, *args, **kwargs)\n        response.raise_for_status()\n    except", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    \n    if len(keys) == 0:\n        if val is None:\n            if key in dic:\n                del dic[key]\n        else:\n            dic[key] = val\n    else:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, *keys)\n\ndef dict_get(dic, key, *keys):\n    \n    if len(keys) == 0:\n        if key in dic:\n            return dic[key]\n        else:\n            return None\n    else:\n        if key not in dic:\n            return None\n        else:\n            return dict_get(dic[key], *keys)\n\ndef dict_set(dic, val, key, *keys):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    \n    if len(keys) == 0:\n        if val is None:\n            if key in dic:\n                del dic[key]\n        else:\n            dic[key] = val\n    else:\n        if key not in dic:\n            dic[key] = {}\n        dict_insert(dic[key], val, *keys)\n\ndef dict_get(dic, key, *keys):\n    \n    if len(keys) == 0:\n        if key in dic:\n            return dic[key]\n        else:\n            return None\n    else:\n        if key not in dic:\n            return None\n        else:\n            return dict_get(dic[key], *keys)\n\ndef dict_set(dic, val, key, *keys):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    \n    settings_files = []\n    for settings_dir in settings_dirs:\n        settings_dir = settings_dir.rstrip('/')\n        if settings_dir == '':\n            settings_dir = '.'\n        for settings_file in os.listdir(settings_dir):\n            settings_file = settings_file.rstrip('/')\n            if spec_option =='settings_file' and settings_file.endswith('.ini'):\n                settings_files.append(settings_file)\n            elif spec_option =='settings_dir' and not settings_file.endswith('.ini'):\n                settings_files.append(settings_dir + '/' + settings_file)\n    return settings_files\n\ndef list_of_file_names2(settings_dirs, spec_option):\n    \n    settings_files = []\n    for settings"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    settings_files = []\n    for settings_dir in settings_dirs:\n        settings_dir = settings_dir.rstrip('/')\n        if settings_dir == '':\n            settings_dir = '.'\n        for settings_file in os.listdir(settings_dir):\n            settings_file = settings_file.rstrip('/')\n            if spec_option =='settings_file' and settings_file.endswith('.ini'):\n                settings_files.append(settings_file)\n            elif spec_option =='settings_dir' and not settings_file.endswith('.ini'):\n                settings_files.append(settings_dir + '/' + settings_file)\n    return settings_files\n\ndef list_of_file_names2(settings_dirs, spec_option):\n    \n    settings_files = []\n    for settings", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod\n    def ansible_config_manager(cls):\n        \n```\n\nThe `ansible_config_manager` method will return a reference to the `AnsibleConfigManager`\ninstance.  This reference will be set on the class at the time of the first\ncall to `ansible_config_manager`.\n\nIn a unit test, the following can be done:\n\n```python\nfrom mock import patch\nfrom mock import Mock\n\nfrom ansible_wrapper import AnsibleConfigManager\n\n@patch('ansible_wrapper.AnsibleConfigManager', Mock())\ndef test_ansible_config_manager():\n    \n    AnsibleConfigManager.ansible_config_manager()\n```\n\n\nThis software is released under the MIT License.\n\n\nIf you have any questions or comments about this project, please contact\n <>.\n\n\nThis software is provided as-is"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def ansible_config_manager(cls):\n        \n```\n\nThe `ansible_config_manager` method will return a reference to the `AnsibleConfigManager`\ninstance.  This reference will be set on the class at the time of the first\ncall to `ansible_config_manager`.\n\nIn a unit test, the following can be done:\n\n```python\nfrom mock import patch\nfrom mock import Mock\n\nfrom ansible_wrapper import AnsibleConfigManager\n\n@patch('ansible_wrapper.AnsibleConfigManager', Mock())\ndef test_ansible_config_manager():\n    \n    AnsibleConfigManager.ansible_config_manager()\n```\n\n\nThis software is released under the MIT License.\n\n\nIf you have any questions or comments about this project, please contact\n <>.\n\n\nThis software is provided as-is", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod\n    def workspace_manager(cls):\n        \n\n    @classmethod\n    def workspace_manager_class(cls):\n        \n        return cls.workspace.workspace_manager_class()\n\n    @classmethod\n    def workspace_manager_class_name(cls):\n        \n        return cls.workspace.workspace_manager_class_name()\n\n    def workspace_manager(self):\n        \n        return self.workspace.workspace_manager()\n\n    @classmethod\n    def workspace_manager_class(cls):\n        \n        return cls.workspace.workspace_manager_class()\n\n    @classmethod\n    def workspace_manager_class_name(cls):\n        \n        return cls."], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def workspace_manager(cls):\n        \n\n    @classmethod\n    def workspace_manager_class(cls):\n        \n        return cls.workspace.workspace_manager_class()\n\n    @classmethod\n    def workspace_manager_class_name(cls):\n        \n        return cls.workspace.workspace_manager_class_name()\n\n    def workspace_manager(self):\n        \n        return self.workspace.workspace_manager()\n\n    @classmethod\n    def workspace_manager_class(cls):\n        \n        return cls.workspace.workspace_manager_class()\n\n    @classmethod\n    def workspace_manager_class_name(cls):\n        \n        return cls.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod\n    def plugins_manager(cls):\n        \n\n    @classmethod\n    def load_plugins(cls):\n        \n        cls.plugins_manager().load_plugins()\n\n    @classmethod\n    def get_plugin(cls, name):\n        \n        return cls.plugins_manager().get_plugin(name)\n\n    @classmethod\n    def get_plugin_by_name(cls, name):\n        \n        return cls.plugins_manager().get_plugin_by_name(name)\n\n    @classmethod\n    def get_plugin_names(cls):\n        \n        return cls.plugins_manager().get_plugin_names()\n\n    @classmethod\n    def get_plugins(cls):\n        \n        return cls"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def plugins_manager(cls):\n        \n\n    @classmethod\n    def load_plugins(cls):\n        \n        cls.plugins_manager().load_plugins()\n\n    @classmethod\n    def get_plugin(cls, name):\n        \n        return cls.plugins_manager().get_plugin(name)\n\n    @classmethod\n    def get_plugin_by_name(cls, name):\n        \n        return cls.plugins_manager().get_plugin_by_name(name)\n\n    @classmethod\n    def get_plugin_names(cls):\n        \n        return cls.plugins_manager().get_plugin_names()\n\n    @classmethod\n    def get_plugins(cls):\n        \n        return cls", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            return False\n\n        return True\n\n    @classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n        if spec_file is None:\n            return False\n\n        spec_content = cls.get_spec_content(spec_file=spec_file)\n\n        return cls.validate_from_content(spec_content=spec_content)\n\n    @classmethod\n    def validate_from_json(cls, spec_json=None):\n        \n        if spec_json is None:\n            return False\n\n        return True\n\n    @classmethod\n    def validate_from_json_file(cls, spec_file=None):\n        '''validates that spec (JSON) file has all"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        if spec_content is None:\n            return False\n\n        return True\n\n    @classmethod\n    def validate_from_file(cls, spec_file=None):\n        \n        if spec_file is None:\n            return False\n\n        spec_content = cls.get_spec_content(spec_file=spec_file)\n\n        return cls.validate_from_content(spec_content=spec_content)\n\n    @classmethod\n    def validate_from_json(cls, spec_json=None):\n        \n        if spec_json is None:\n            return False\n\n        return True\n\n    @classmethod\n    def validate_from_json_file(cls, spec_file=None):\n        '''validates that spec (JSON) file has all", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        yaml_file = os.path.join(cls.config_dir(), 'config.yaml')\n        if not os.path.isfile(yaml_file):\n            raise ConfigError('YAML config file does not exist: {0}'.format(yaml_file))\n        with open(yaml_file, 'r') as f:\n            yaml_config = yaml.load(f)\n        cls._validate_config(yaml_config)\n        return yaml_config\n\n    @classmethod\n    def _validate_config(cls, yaml_config):\n        \n        for field in cls._required_fields:\n            if field not in yaml_config:\n                raise ConfigError('Missing required config field: {0}'.format(field))\n\n    @classmethod\n    def validate_"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        yaml_file = os.path.join(cls.config_dir(), 'config.yaml')\n        if not os.path.isfile(yaml_file):\n            raise ConfigError('YAML config file does not exist: {0}'.format(yaml_file))\n        with open(yaml_file, 'r') as f:\n            yaml_config = yaml.load(f)\n        cls._validate_config(yaml_config)\n        return yaml_config\n\n    @classmethod\n    def _validate_config(cls, yaml_config):\n        \n        for field in cls._required_fields:\n            if field not in yaml_config:\n                raise ConfigError('Missing required config field: {0}'.format(field))\n\n    @classmethod\n    def validate_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n        \n\tif not self._include_set:\n            return\n        for include, path in self._include_set:\n            if include in parser_dict:\n                self._path_dict[path] = parser_dict[include]\n            else:\n                self._path_dict[path] = None\n\n    def _parse_spec(self, path):\n        '''\n        Parses an individual spec file into a dict.\n        '''\n        try:\n            with open(path) as spec:\n                parser_dict = yaml.load(spec)\n        except IOError:\n            print(\"Failed to open file %s\" % path)\n            raise\n        self._include_groups(parser_dict)\n/README.rst\n========\nOverview\n========\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - docs\n      - |docs|\n    * - tests\n      - | |travis| |"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n        \n\tif not self._include_set:\n            return\n        for include, path in self._include_set:\n            if include in parser_dict:\n                self._path_dict[path] = parser_dict[include]\n            else:\n                self._path_dict[path] = None\n\n    def _parse_spec(self, path):\n        '''\n        Parses an individual spec file into a dict.\n        '''\n        try:\n            with open(path) as spec:\n                parser_dict = yaml.load(spec)\n        except IOError:\n            print(\"Failed to open file %s\" % path)\n            raise\n        self._include_groups(parser_dict)\n/README.rst\n========\nOverview\n========\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - docs\n      - |docs|\n    * - tests\n      - | |travis| |", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n        \n/docs/source/index.rst\nWelcome to ``pycldf`` documentation!\n====================================\n\n``pycldf`` is a Python package for working with `CLDF <http://cldf.clld.org>`_\ndatasets. It provides a number of classes to represent and work with the\ndifferent kinds of data that a CLDF dataset comprises.\n\nThe code of ``pycldf`` is hosted on\n`GitHub <https://github.com/cldf/pycldf>`_.\n\nInstallation\n------------\n\nThe latest release of ``pycldf`` is available for download on the\n`Python Package Index <http://pypi.python.org/pypi/pycldf>`_.\n\n.. code-block:: bash\n\n    pip install pycldf\n\nTutorial and API documentation\n------------------------------\n\n.. toctree::\n   :maxdepth: 2\n\n   tutorial\n   api\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n        \n/docs/source/index.rst\nWelcome to ``pycldf`` documentation!\n====================================\n\n``pycldf`` is a Python package for working with `CLDF <http://cldf.clld.org>`_\ndatasets. It provides a number of classes to represent and work with the\ndifferent kinds of data that a CLDF dataset comprises.\n\nThe code of ``pycldf`` is hosted on\n`GitHub <https://github.com/cldf/pycldf>`_.\n\nInstallation\n------------\n\nThe latest release of ``pycldf`` is available for download on the\n`Python Package Index <http://pypi.python.org/pypi/pycldf>`_.\n\n.. code-block:: bash\n\n    pip install pycldf\n\nTutorial and API documentation\n------------------------------\n\n.. toctree::\n   :maxdepth: 2\n\n   tutorial\n   api\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n        \n\n\n    def get_deprecated_args_list(self):\n        \n\n        return ['add_to_cart_url']\n\n    def get_deprecated_args_dict(self):\n        \n\n        return {'add_to_cart_url': 'add_to_cart_url'}\n\n    def get_deprecated_args_list_dict(self):\n        \n\n        return {'add_to_cart_url': 'add_to_cart_url'}\n\n    def get_deprecated_args_dict_list(self):\n        \n\n        return ['add_to_cart_url']\n\n    def get_deprecated_args_"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n        \n\n\n    def get_deprecated_args_list(self):\n        \n\n        return ['add_to_cart_url']\n\n    def get_deprecated_args_dict(self):\n        \n\n        return {'add_to_cart_url': 'add_to_cart_url'}\n\n    def get_deprecated_args_list_dict(self):\n        \n\n        return {'add_to_cart_url': 'add_to_cart_url'}\n\n    def get_deprecated_args_dict_list(self):\n        \n\n        return ['add_to_cart_url']\n\n    def get_deprecated_args_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n-       cli_args_dict = util.get_args_dict(cli_args)\n-       answer_file_args_dict = util.get_args_dict(answer_file_args)\n+       cli_args_dict = util.get_args_dict(cli_args, True)\n+       answer_file_args_dict = util.get_args_dict(answer_file_args, True)\n \n-       deprecated_args_dict = util.get_deprecated_args_dict(cli_args_dict, answer_file_args_dict)\n+       deprecated_args_dict = util.get_deprecated_args_dict(cli_args_dict, answer_file_args_dict, True)\n \n        if deprecated_args_dict:\n            print('\\n\\nThe"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n-       cli_args_dict = util.get_args_dict(cli_args)\n-       answer_file_args_dict = util.get_args_dict(answer_file_args)\n+       cli_args_dict = util.get_args_dict(cli_args, True)\n+       answer_file_args_dict = util.get_args_dict(answer_file_args, True)\n \n-       deprecated_args_dict = util.get_deprecated_args_dict(cli_args_dict, answer_file_args_dict)\n+       deprecated_args_dict = util.get_deprecated_args_dict(cli_args_dict, answer_file_args_dict, True)\n \n        if deprecated_args_dict:\n            print('\\n\\nThe", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n        \n```\n\nThe implementation of this method is straightforward:\n\n```python\ndef get_parser_option_specs(self, command_name):\n        \n        return self.option_specs.get(command_name, [])\n```\n\nThe method `get_parser_option_specs` retrieves the list of options\nfor the specified command from the dictionary `option_specs`.\nThe dictionary `option_specs` contains option specifications for\nall the commands.\n\nThe method `get_parser_option_specs` is used by the method\n`get_parser_option_spec_for_command`.\n\n\nThis method returns the option specification for the specified command.\n\n```python\ndef get_parser_option_spec_for_command(self, command_name):"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n        \n```\n\nThe implementation of this method is straightforward:\n\n```python\ndef get_parser_option_specs(self, command_name):\n        \n        return self.option_specs.get(command_name, [])\n```\n\nThe method `get_parser_option_specs` retrieves the list of options\nfor the specified command from the dictionary `option_specs`.\nThe dictionary `option_specs` contains option specifications for\nall the commands.\n\nThe method `get_parser_option_specs` is used by the method\n`get_parser_option_spec_for_command`.\n\n\nThis method returns the option specification for the specified command.\n\n```python\ndef get_parser_option_spec_for_command(self, command_name):", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n        \n\n        return self.get_option_spec_by_command_name(command_name, argument_name)\n\n    def get_option_spec_by_command_name(self, command_name, argument_name):\n        \n\n        return self._options.get_option_spec_by_command_name(command_name, argument_name)\n\n    def get_option_spec_by_argument_name(self, argument_name"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n        \n\n        return self.get_option_spec_by_command_name(command_name, argument_name)\n\n    def get_option_spec_by_command_name(self, command_name, argument_name):\n        \n\n        return self._options.get_option_spec_by_command_name(command_name, argument_name)\n\n    def get_option_spec_by_argument_name(self, argument_name", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n        \n\nclass Argument(object):\n    \n\n    def __init__(self, name, default=None, optional=False, type=None, description=None, choices=None):\n        '''\n        :param name: name of the argument\n        :param default: default value\n        :param optional: argument is optional\n        :param type: type of the argument, can be boolean, int, float or str\n        :param description: description of the argument\n        :param choices: list of possible values\n        '''\n        self._name = name\n        self._default = default\n        self._optional = optional\n        self._type = type\n        self._description = description\n        self._choices = choices\n\n    @property\n    def name(self):\n        \n        return self._name\n\n    @property\n    def default(self):\n        \n        return self._default\n\n    @property\n    def optional(self):"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n        \n\nclass Argument(object):\n    \n\n    def __init__(self, name, default=None, optional=False, type=None, description=None, choices=None):\n        '''\n        :param name: name of the argument\n        :param default: default value\n        :param optional: argument is optional\n        :param type: type of the argument, can be boolean, int, float or str\n        :param description: description of the argument\n        :param choices: list of possible values\n        '''\n        self._name = name\n        self._default = default\n        self._optional = optional\n        self._type = type\n        self._description = description\n        self._choices = choices\n\n    @property\n    def name(self):\n        \n        return self._name\n\n    @property\n    def default(self):\n        \n        return self._default\n\n    @property\n    def optional(self):", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n        \n\tfor key in self.requires_args.keys():\n\t    if not args.has_key(key):\n\t\traise Exception(\"Missing required argument: %s\" % (key,))\n\tfor key in self.requires_args.keys():\n\t\tif not args[key] in self.requires_args[key]:\n\t\t\traise Exception(\"Invalid value for argument: %s\" % (key,))\n\treturn True\n\n    def get_required_args(self):\n\t\n\treturn self.requires_args.keys()\n\n    def get_args(self, args):\n\t\n\treturn args\n\n    def get_parser(self):\n\t\n\treturn self.parser\n\n    def get_name(self):\n\t\n\treturn self.name\n\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n        \n\tfor key in self.requires_args.keys():\n\t    if not args.has_key(key):\n\t\traise Exception(\"Missing required argument: %s\" % (key,))\n\tfor key in self.requires_args.keys():\n\t\tif not args[key] in self.requires_args[key]:\n\t\t\traise Exception(\"Invalid value for argument: %s\" % (key,))\n\treturn True\n\n    def get_required_args(self):\n\t\n\treturn self.requires_args.keys()\n\n    def get_args(self, args):\n\t\n\treturn args\n\n    def get_parser(self):\n\t\n\treturn self.parser\n\n    def get_name(self):\n\t\n\treturn self.name\n\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        return []\n\n    def _get_required_args(self, command_name, options_spec, args):\n        \n        return []\n\n    def _get_optional_args(self, command_name, options_spec, args):\n        "], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        return []\n\n    def _get_required_args(self, command_name, options_spec, args):\n        \n        return []\n\n    def _get_optional_args(self, command_name, options_spec, args):\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n        \n\tif len(args) > self.length:\n\t    raise argparse.ArgumentTypeError(\"length of argument {} is larger than {}\".format(args, self.length))\n\treturn args\n\n    def validate_regex_args(self, args):\n        \n\tif not re.match(self.regex, args):\n\t    raise argparse.ArgumentTypeError(\"argument {} does not match regex {}\".format(args, self.regex))\n\treturn args\n/README.md\n\nThis module is a collection of classes that extend [argparse](https://docs.python.org/2/library/argparse.html) module.\n\n\n\nA class that extends `argparse.ArgumentParser`.\n\n\n- `add_argument` - a wrapper for `argparse.ArgumentParser.add_argument"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n        \n\tif len(args) > self.length:\n\t    raise argparse.ArgumentTypeError(\"length of argument {} is larger than {}\".format(args, self.length))\n\treturn args\n\n    def validate_regex_args(self, args):\n        \n\tif not re.match(self.regex, args):\n\t    raise argparse.ArgumentTypeError(\"argument {} does not match regex {}\".format(args, self.regex))\n\treturn args\n/README.md\n\nThis module is a collection of classes that extend [argparse](https://docs.python.org/2/library/argparse.html) module.\n\n\n\nA class that extends `argparse.ArgumentParser`.\n\n\n- `add_argument` - a wrapper for `argparse.ArgumentParser.add_argument", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n        \n\n    def choice_validator(self, args):\n        \n        for arg in args:\n            choices = self.choices[arg]\n            if args[arg] not in choices:\n                raise ValueError('Wrong choice for argument %s. It should be one of: %s' % (arg, choices))\n\n    def get_choices(self):\n        \n        return self.choices\n\n    def validate_default_args(self, args):\n        \n        for arg in args:\n            choices = self.choices[arg]\n            if args[arg] not in choices:\n                raise ValueError('Wrong default value for argument %s. It should be one of: %s' % (arg, choices))\n\n    def default_validator(self, args):\n        '''Check if default"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n        \n\n    def choice_validator(self, args):\n        \n        for arg in args:\n            choices = self.choices[arg]\n            if args[arg] not in choices:\n                raise ValueError('Wrong choice for argument %s. It should be one of: %s' % (arg, choices))\n\n    def get_choices(self):\n        \n        return self.choices\n\n    def validate_default_args(self, args):\n        \n        for arg in args:\n            choices = self.choices[arg]\n            if args[arg] not in choices:\n                raise ValueError('Wrong default value for argument %s. It should be one of: %s' % (arg, choices))\n\n    def default_validator(self, args):\n        '''Check if default", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n        \n\nclass MaxValueValidator(BaseValidator):\n    \n\n    def __init__(self, max_value, message=None):\n        \n\n        self.max_value = max_value\n        self.message = message\n\n    def validate_min_max_args(self, args):\n        \n\nclass RegexValidator(BaseValidator):\n    \n\n    def __init__(self, regex, message=None):\n        \n\n        self.regex = re.compile(regex)\n        self.message = message\n\n    def validate_min_max_args(self, args):\n        \n\nclass FileExistsValidator(BaseValidator"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n        \n\nclass MaxValueValidator(BaseValidator):\n    \n\n    def __init__(self, max_value, message=None):\n        \n\n        self.max_value = max_value\n        self.message = message\n\n    def validate_min_max_args(self, args):\n        \n\nclass RegexValidator(BaseValidator):\n    \n\n    def __init__(self, regex, message=None):\n        \n\n        self.regex = re.compile(regex)\n        self.message = message\n\n    def validate_min_max_args(self, args):\n        \n\nclass FileExistsValidator(BaseValidator", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n\n\n        option_type ='string'\n\n        if 'default' in spec_option"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n\n\n        option_type ='string'\n\n        if 'default' in spec_option", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n        \n\ndef get_nested_custom_and_control_args(self, args):\n    \n    nested_args = []\n    custom_args = []\n    for arg in args:\n        if not arg.startswith('--'):\n            nested_args.append(arg)\n        else:\n            custom_args.append(arg)\n    return nested_args, custom_args\n```\n\n```python\ndef _get_nested_custom_and_control_args(self, args):\n    \n    nested_args = []\n    custom_args = []\n    for arg in args:\n        if not arg.startswith('--'):\n            nested_args.append(arg)\n        else:\n            custom_args.append(arg)\n    return nested_args, custom_args\n```\n\n```python\ndef get_nested_custom_and"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n        \n\ndef get_nested_custom_and_control_args(self, args):\n    \n    nested_args = []\n    custom_args = []\n    for arg in args:\n        if not arg.startswith('--'):\n            nested_args.append(arg)\n        else:\n            custom_args.append(arg)\n    return nested_args, custom_args\n```\n\n```python\ndef _get_nested_custom_and_control_args(self, args):\n    \n    nested_args = []\n    custom_args = []\n    for arg in args:\n        if not arg.startswith('--'):\n            nested_args.append(arg)\n        else:\n            custom_args.append(arg)\n    return nested_args, custom_args\n```\n\n```python\ndef get_nested_custom_and", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n\tif extra_vars is None: return vars_dict\n        if 'vars' not in vars_dict: vars_dict['vars'] = []\n        for k, v in extra_vars.items():\n            vars_dict['vars'].append({'name': k, 'value': v})\n        return vars_dict\n\n    def get_extra_vars(self, extra_vars=None):\n        \n        extra_vars = extra_vars or {}\n        return self.merge_extra_vars(self.vars_dict, extra_vars)\n\n    def _get_ansible_args(self, extra_vars=None):\n        extra_vars = self.get_extra_vars(extra_vars)\n        return ['ansible-playbook', self.playbook_path, '-i', self.inventory_path, '-e', json.dumps(extra_vars)]\n\n    def get"], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n\tif extra_vars is None: return vars_dict\n        if 'vars' not in vars_dict: vars_dict['vars'] = []\n        for k, v in extra_vars.items():\n            vars_dict['vars'].append({'name': k, 'value': v})\n        return vars_dict\n\n    def get_extra_vars(self, extra_vars=None):\n        \n        extra_vars = extra_vars or {}\n        return self.merge_extra_vars(self.vars_dict, extra_vars)\n\n    def _get_ansible_args(self, extra_vars=None):\n        extra_vars = self.get_extra_vars(extra_vars)\n        return ['ansible-playbook', self.playbook_path, '-i', self.inventory_path, '-e', json.dumps(extra_vars)]\n\n    def get", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n-   verbose = _get_verbose_option(verbose)\n+   verbose = _get_verbose_option(verbose, playbook_path)\n    extra_vars = _get_extra_vars(extra_vars)\n-   ansible_args = _get_ansible_args(ansible_args, verbose)\n+   ansible_args = _get_ansible_args(ansible_args, verbose, playbook_path)\n \n \n def ansible_module(ir_workspace, ir_plugin, module_name, verbose=None,\n                    extra_vars=None, ansible_args=None):\n     \n-   verbose = _get_verbose_option(verbose)\n+   verbose = _get_verbose_option(verbose, module_name)\n    extra_vars = _get_extra_vars(extra_vars)\n-  "], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n-   verbose = _get_verbose_option(verbose)\n+   verbose = _get_verbose_option(verbose, playbook_path)\n    extra_vars = _get_extra_vars(extra_vars)\n-   ansible_args = _get_ansible_args(ansible_args, verbose)\n+   ansible_args = _get_ansible_args(ansible_args, verbose, playbook_path)\n \n \n def ansible_module(ir_workspace, ir_plugin, module_name, verbose=None,\n                    extra_vars=None, ansible_args=None):\n     \n-   verbose = _get_verbose_option(verbose)\n+   verbose = _get_verbose_option(verbose, module_name)\n    extra_vars = _get_extra_vars(extra_vars)\n-  ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n/ansible_runner/interface.py@@ -15,11 +15,11 @@\n \n import ansible_runner\n import ansible_runner.config\n import ansible_runner.utils\n-from ansible_runner.logger import setup_logger\n+from ansible_runner.logger import setup_logger, setup_logging\n import ansible_runner.exceptions\n-\n+from ansible_runner.utils import get_cwd\n \n logger = logging.getLogger(__name__)\n \n @@ -119,8 +119,11 @@\n     return config_dict\n \n \n def run(cli_args, config_file=None):\n+    cwd = get_cwd(cli_args.cwd)\n+    setup_logging(cli_args, cwd=cwd)\n+\n     logger.debug('CLI args: %s', cli_args)\n    "], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n/ansible_runner/interface.py@@ -15,11 +15,11 @@\n \n import ansible_runner\n import ansible_runner.config\n import ansible_runner.utils\n-from ansible_runner.logger import setup_logger\n+from ansible_runner.logger import setup_logger, setup_logging\n import ansible_runner.exceptions\n-\n+from ansible_runner.utils import get_cwd\n \n logger = logging.getLogger(__name__)\n \n @@ -119,8 +119,11 @@\n     return config_dict\n \n \n def run(cli_args, config_file=None):\n+    cwd = get_cwd(cli_args.cwd)\n+    setup_logging(cli_args, cwd=cwd)\n+\n     logger.debug('CLI args: %s', cli_args)\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for key in values_dict:\n            if key.endswith('_path'):\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n                except TypeError:\n                    pass\n            elif key == 'njobs':\n                values_dict[key] = int(values_dict[key])\n            elif key =='verbose':\n                values_dict[key] = bool(values_dict[key])\n            elif key == 'dry_run':\n                values_dict[key] = bool(values_dict[key])\n            elif key == 'plot_path':\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n                except TypeError:\n                    pass\n            elif key.endswith('_dir'):\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n               "], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for key in values_dict:\n            if key.endswith('_path'):\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n                except TypeError:\n                    pass\n            elif key == 'njobs':\n                values_dict[key] = int(values_dict[key])\n            elif key =='verbose':\n                values_dict[key] = bool(values_dict[key])\n            elif key == 'dry_run':\n                values_dict[key] = bool(values_dict[key])\n            elif key == 'plot_path':\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n                except TypeError:\n                    pass\n            elif key.endswith('_dir'):\n                try:\n                    values_dict[key] = str(Path(values_dict[key]))\n               ", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_flatten_dict = {}\n    for key, value in plugin_spec_dict.items():\n        if isinstance(value, dict):\n            for sub_key, sub_value in value.items():\n                plugin_spec_flatten_dict['_'.join([key, sub_key])] = sub_value\n        else:\n            plugin_spec_flatten_dict[key] = value\n    return plugin_spec_flatten_dict\n\n\ndef get_plugin_spec_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, 'plugin"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec_dict = get_plugin_spec_dict(plugin_dir)\n    plugin_spec_flatten_dict = {}\n    for key, value in plugin_spec_dict.items():\n        if isinstance(value, dict):\n            for sub_key, sub_value in value.items():\n                plugin_spec_flatten_dict['_'.join([key, sub_key])] = sub_value\n        else:\n            plugin_spec_flatten_dict[key] = value\n    return plugin_spec_flatten_dict\n\n\ndef get_plugin_spec_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, 'plugin", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n        \n```\n\n\n```python\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n\n> \u8def\u7531\u5373 `url` \u5230 `view` \u7684\u6620\u5c04\n\n\n```python\nfrom flask import Blueprint\n\nurl = Blueprint('url', __name__)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n        \n```\n\n\n```python\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```\n\n\n> \u8def\u7531\u5373 `url` \u5230 `view` \u7684\u6620\u5c04\n\n\n```python\nfrom flask import Blueprint\n\nurl = Blueprint('url', __name__)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n        \n```\n\n\nThe configuration file can only contain valid JSON.\nTo use environment variables, use the `$` prefix.\n\n```json\n{\n    \"cli\": {\n        \"help\": \"A help message\",\n        \"version\": \"0.0.1\"\n    },\n    \"options\": {\n        \"a_flag\": {\n            \"env\": \"A_FLAG\",\n            \"help\": \"A flag\",\n            \"type\": \"boolean\"\n        },\n        \"an_integer\": {\n            \"env\": \"AN_INTEGER\",\n            \"help\": \"An integer\",\n            \"type\": \"integer\"\n        },\n        \"an_ip\": {\n            \"env\": \"AN_IP\",\n            \"help\": \"An IP address\",\n            \"type\": \"ipaddress\"\n        },\n        \"a_list\": {\n            \"env\": \"A_LIST\",\n            \"help\": \"A list\",\n           "], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n        \n```\n\n\nThe configuration file can only contain valid JSON.\nTo use environment variables, use the `$` prefix.\n\n```json\n{\n    \"cli\": {\n        \"help\": \"A help message\",\n        \"version\": \"0.0.1\"\n    },\n    \"options\": {\n        \"a_flag\": {\n            \"env\": \"A_FLAG\",\n            \"help\": \"A flag\",\n            \"type\": \"boolean\"\n        },\n        \"an_integer\": {\n            \"env\": \"AN_INTEGER\",\n            \"help\": \"An integer\",\n            \"type\": \"integer\"\n        },\n        \"an_ip\": {\n            \"env\": \"AN_IP\",\n            \"help\": \"An IP address\",\n            \"type\": \"ipaddress\"\n        },\n        \"a_list\": {\n            \"env\": \"A_LIST\",\n            \"help\": \"A list\",\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):\n        \n\tif path.startswith(root):\n\t    return path[len(root):]\n\telse:\n\t    raise Exception(\"Path %s is not under the root %s\" % (path, root))\n\n    def get_file_contents(self, path):\n        \n\ttry:\n\t    return self.s3_conn.get_object(self.bucket, path).read()\n\texcept Exception, e:\n\t    raise Exception(\"Failed to get file %s: %s\" % (path, e))\n\n    def put_file_contents(self, path, contents):\n        \n\ttry:\n\t    self.s3_conn.put_object(self.bucket, path, contents)\n\texcept Exception, e:\n\t    raise Exception(\"Failed to put file %s: %s\" % (path"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):\n        \n\tif path.startswith(root):\n\t    return path[len(root):]\n\telse:\n\t    raise Exception(\"Path %s is not under the root %s\" % (path, root))\n\n    def get_file_contents(self, path):\n        \n\ttry:\n\t    return self.s3_conn.get_object(self.bucket, path).read()\n\texcept Exception, e:\n\t    raise Exception(\"Failed to get file %s: %s\" % (path, e))\n\n    def put_file_contents(self, path, contents):\n        \n\ttry:\n\t    self.s3_conn.put_object(self.bucket, path, contents)\n\texcept Exception, e:\n\t    raise Exception(\"Failed to put file %s: %s\" % (path", "is_pass": false, "return_code": 1}]}
