{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["\ndef dict_insert(dic, val, key, *keys):\n      \n      if keys:\n          dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n      else:\n          dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef dict_insert(dic, val, key, *keys):\n      \n      if keys:\n          dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n      else:\n          dic[key] = val\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["\ndef list_of_file_names(settings_dirs, spec_option):\n      \n      return cli.ListOfFileNames(\"ListOfFileNames\", settings_dirs, spec_option)\n      \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef list_of_file_names(settings_dirs, spec_option):\n      \n      return cli.ListOfFileNames(\"ListOfFileNames\", settings_dirs, spec_option)\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["\n@classmethod\n      def ansible_config_manager(cls):\n          \n          return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n@classmethod\n      def execution_logger_manager(cls):\n          '''"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def ansible_config_manager(cls):\n          \n          return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n@classmethod\n      def execution_logger_manager(cls):\n          '''", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["\n@classmethod\n      def workspace_manager(cls):\n          \n          return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n      @classmethod\n      def ansible_config_manager(cls):\n          '''Gets"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def workspace_manager(cls):\n          \n          return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n      @classmethod\n      def ansible_config_manager(cls):\n          '''Gets", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["\ndef get_spec_defaults(self):\n          \n          \n          def spec_default_getter(option):\n              '''Getter function to retrieve the default value from spec.\n              '''\n              if option['type'] == 'bool':\n                  return option['action'] == \"store_true\"\n              elif option['type'] == 'int':\n                  return int(option['action'])\n              elif option['type'] == 'float':\n                  return float(option['action'])\n              elif option['type'] =='str':\n                  return option['action']\n              elif option['type'] == 'list':\n                 "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_spec_defaults(self):\n          \n          \n          def spec_default_getter(option):\n              '''Getter function to retrieve the default value from spec.\n              '''\n              if option['type'] == 'bool':\n                  return option['action'] == \"store_true\"\n              elif option['type'] == 'int':\n                  return int(option['action'])\n              elif option['type'] == 'float':\n                  return float(option['action'])\n              elif option['type'] =='str':\n                  return option['action']\n              elif option['type'] == 'list':\n                 ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["\ndef get_deprecated_args(self):\n          \n          result = collections.defaultdict(dict)\n          for parser, option in self.spec_helper.iterate_option_specs():\n              if option.get('deprecates') is not None:\n                  result[option.get('deprecates')] = option.get('name')\n          return result\n\ndef parse_env_variable_from_file(value):\n      if isinstance(value, str):\n          t = Template(value)\n          try:\n              value = t.substitute(os.environ)\n          except KeyError as undefined_var:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_deprecated_args(self):\n          \n          result = collections.defaultdict(dict)\n          for parser, option in self.spec_helper.iterate_option_specs():\n              if option.get('deprecates') is not None:\n                  result[option.get('deprecates')] = option.get('name')\n          return result\n\ndef parse_env_variable_from_file(value):\n      if isinstance(value, str):\n          t = Template(value)\n          try:\n              value = t.substitute(os.environ)\n          except KeyError as undefined_var:", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n          \n          deprecations = []\n          nested, control, custom = self.get_nested_custom_and_control_args(cli_args)\n          nested, control, custom = self.get_nested_custom_and_control_args(answer_file_args)\n          deprecations = self.get_deprecated_args()\n          \n          self.resolve_custom_types(custom)\n          nested, control, spec_defaults = self.get_nested_spec_and_control_arguments(\n                                                answer_file_args)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n          \n          deprecations = []\n          nested, control, custom = self.get_nested_custom_and_control_args(cli_args)\n          nested, control, custom = self.get_nested_custom_and_control_args(answer_file_args)\n          deprecations = self.get_deprecated_args()\n          \n          self.resolve_custom_types(custom)\n          nested, control, spec_defaults = self.get_nested_spec_and_control_arguments(\n                                                answer_file_args)", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["\ndef get_parser_option_specs(self, command_name):\n          \n          parser_options = self.parser_options[command_name]\n          return [next(opt for opt in parser_options\n                       if opt['name'] == option_name, {})]\n\ndef get_parser_option_specs_passk_validte0(self, command_name):\n          \n          parser_options = self.parser_options[command_name]\n          return [next(opt for opt in parser_options\n                       if opt['name'] == 'passk_validte_validte0', {})]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_parser_option_specs(self, command_name):\n          \n          parser_options = self.parser_options[command_name]\n          return [next(opt for opt in parser_options\n                       if opt['name'] == option_name, {})]\n\ndef get_parser_option_specs_passk_validte0(self, command_name):\n          \n          parser_options = self.parser_options[command_name]\n          return [next(opt for opt in parser_options\n                       if opt['name'] == 'passk_validte_validte0', {})]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["\ndef get_option_spec(self, command_name, argument_name):\n          \n          return self._option_specs[command_name][argument_name]\n\ndef get_option_state(self, command_name, argument_name, args):\n          \n          return self"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_option_spec(self, command_name, argument_name):\n          \n          return self._option_specs[command_name][argument_name]\n\ndef get_option_state(self, command_name, argument_name, args):\n          \n          return self", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["\ndef get_silent_args(self, args):\n          \n          silent_args_names = []\n          for (parser_name, parser_dict, arg_name, arg_value,\n                arg_spec) in self._iterate_received_arguments(args):\n              if arg_spec"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_silent_args(self, args):\n          \n          silent_args_names = []\n          for (parser_name, parser_dict, arg_name, arg_value,\n                arg_spec) in self._iterate_received_arguments(args):\n              if arg_spec", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["\ndef validate_requires_args(self, args):\n          \n          if len(args) == 1:\n              return self.validate_requires_args(args[0])\n          else:\n              return []\n\ndef validate_requires_args(self, args):\n          '''Check if all the"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_requires_args(self, args):\n          \n          if len(args) == 1:\n              return self.validate_requires_args(args[0])\n          else:\n              return []\n\ndef validate_requires_args(self, args):\n          '''Check if all the", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                            args):\n          \n          opts_names = [option_spec['name'] for option_spec in options_spec]\n          missing_args = []\n          for option_spec in options_spec:\n              option_results = []\n              if option_spec and"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                            args):\n          \n          opts_names = [option_spec['name'] for option_spec in options_spec]\n          missing_args = []\n          for option_spec in options_spec:\n              option_results = []\n              if option_spec and", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["\ndef validate_length_args(self, args):\n          \n          invalid_options = []\n          for parser_name, parser_dict in args.items():\n              for spec_option in \\\n                      self.spec_helper.get_parser_option_specs(parser_name):\n                  if 'length' not in spec_option:\n                      continue\n                  option_name = spec_option['name']\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_length_args(self, args):\n          \n          invalid_options = []\n          for parser_name, parser_dict in args.items():\n              for spec_option in \\\n                      self.spec_helper.get_parser_option_specs(parser_name):\n                  if 'length' not in spec_option:\n                      continue\n                  option_name = spec_option['name']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["\ndef validate_choices_args(self, args):\n          \n          invalid_options = []\n          for parser_name, parser_dict in args.items():\n              for spec_option in \\\n                      self.spec_helper.get_parser_option_specs(parser_name):\n                  if 'choices' not in spec_option:\n                      continue\n                  option_name = spec_option['name']"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_choices_args(self, args):\n          \n          invalid_options = []\n          for parser_name, parser_dict in args.items():\n              for spec_option in \\\n                      self.spec_helper.get_parser_option_specs(parser_name):\n                  if 'choices' not in spec_option:\n                      continue\n                  option_name = spec_option['name']", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["\ndef validate_min_max_args(self, args):\n          \n          minimum = args.get('minimum', None)\n          maximum = args.get('maximum', None)\n          if minimum == None:\n              minimum = self.spec_helper.get_option_default(self.parser.prog,\n                                                             self.option_spec,\n                                                            'minimum',\n                                      "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_min_max_args(self, args):\n          \n          minimum = args.get('minimum', None)\n          maximum = args.get('maximum', None)\n          if minimum == None:\n              minimum = self.spec_helper.get_option_default(self.parser.prog,\n                                                             self.option_spec,\n                                                            'minimum',\n                                      ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                       spec_option):\n          \n          complex_action = COMPLEX_TYPES.get(\n              type_name, None)\n          if complex_action is None:\n              raise exceptions.SpecParserException(\n                  \"Unknown complex type: {}\".format(type_name))\n          return complex_action(\n              option_name,\n              (self.vars, self.defaults, self.plugin_path),\n              sub"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                       spec_option):\n          \n          complex_action = COMPLEX_TYPES.get(\n              type_name, None)\n          if complex_action is None:\n              raise exceptions.SpecParserException(\n                  \"Unknown complex type: {}\".format(type_name))\n          return complex_action(\n              option_name,\n              (self.vars, self.defaults, self.plugin_path),\n              sub", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["\ndef get_nested_custom_and_control_args(self, args):\n          \n          control_args = {}\n          custom_args = {}\n          for (parser_name, parser"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nested_custom_and_control_args(self, args):\n          \n          control_args = {}\n          custom_args = {}\n          for (parser_name, parser", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["\n@staticmethod\n      def merge_extra_vars(vars_dict, extra_vars=None):\n          \n\n          if extra_vars is None:\n              extra"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n      def merge_extra_vars(vars_dict, extra_vars=None):\n          \n\n          if extra_vars is None:\n              extra", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                       extra_vars=None, ansible_args=None):\n      \n      pass\n\ndef _run_playbook(cli_args, v"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                       extra_vars=None, ansible_args=None):\n      \n      pass\n\ndef _run_playbook(cli_args, v", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n      "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["\ndef _convert_non_cli_args(self, parser_name, values_dict):\n          \n          for opt_name, opt_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _convert_non_cli_args(self, parser_name, values_dict):\n          \n          for opt_name, opt_", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["\ndef get_plugin_spec_flatten_dict(plugin_dir):\n      \n      plugin_spec_dict = dict(\n          name=None,\n          description=None"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef get_plugin_spec_flatten_dict(plugin_dir):\n      \n      plugin_spec_dict = dict(\n          name=None,\n          description=None", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["\ndef inject_config(self):\n          \n          if self.inject_config_path == \"\":\n              self.inject_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef inject_config(self):\n          \n          if self.inject_config_path == \"\":\n              self.inject_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["\ndef extend_cli(self, root_subparsers):\n          \n          self.extend_cli_plugins = []\n          self.extend_cli_"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef extend_cli(self, root_subparsers):\n          \n          self.extend_cli_plugins = []\n          self.extend_cli_", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):pass"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):pass", "is_pass": true, "return_code": 0}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:pass"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:pass", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():pass"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():pass", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["\ndef split(s, platform='this'):\n      \n      if platform == 'this':\n          return shlex.split(s)\n      if platform == '"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef split(s, platform='this'):\n      \n      if platform == 'this':\n          return shlex.split(s)\n      if platform == '", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["\ndef is_local(host):\n      \n      return host in glob.glob(f\"/tmp/{host}*\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_local(host):\n      \n      return host in glob.glob(f\"/tmp/{host}*\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["\ndef is_gitbash():\n      \n      return os.path.exists('gitbash.bat')\n\ndef is_windows():\n     "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_gitbash():\n      \n      return os.path.exists('gitbash.bat')\n\ndef is_windows():\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["\ndef oneline(script, seperator=\" && \"):\n          \n          return script.replace(\"{\", seperator).replace(\n              \"}\", \"\").replace(\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef oneline(script, seperator=\" && \"):\n          \n          return script.replace(\"{\", seperator).replace(\n              \"}\", \"\").replace(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["\ndef replace_dots(value, arg):\n      \n      if value is None:\n          return arg"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef replace_dots(value, arg):\n      \n      if value is None:\n          return arg", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["\ndef match(\n          self, left: list[LeafPattern], collected: list[Pattern] = None\n      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n          \n          if self.name not in _supported_"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match(\n          self, left: list[LeafPattern], collected: list[Pattern] = None\n      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n          \n          if self.name not in _supported_", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["\ndef is_ipv4(target):\n      \n      try:\n          ipaddress.IPv"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef is_ipv4(target):\n      \n      try:\n          ipaddress.IPv", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["\ndef format(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n \t\t \n \t\t return self.convert(sql, params"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef format(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n \t\t \n \t\t return self.convert(sql, params", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:pass"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:pass", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:pass", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:pass", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):pass"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n      \n      if maxsize is None:\n          return _cache(_UnboundTTLCache(ttl, timer), typed)\n      elif callable(maxsize):\n          return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n      else:\n          return _cache(TT"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n      \n      if maxsize is None:\n          return _cache(_UnboundTTLCache(ttl, timer), typed)\n      elif callable(maxsize):\n          return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n      else:\n          return _cache(TT", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["\ndef mru_cache(maxsize=128, typed=False):\n      \n      def wrapper(func):\n          if not typed:\n              return _cache(_UnboundCache(), func)\n          else:\n              return _cache(MRUCache(maxsize), func)\n      \n      return wrapper\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef mru_cache(maxsize=128, typed=False):\n      \n      def wrapper(func):\n          if not typed:\n              return _cache(_UnboundCache(), func)\n          else:\n              return _cache(MRUCache(maxsize), func)\n      \n      return wrapper\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["\ndef lru_cache(maxsize=128, typed=False):\n      \n      if maxsize is None:\n          return _cache(_UnboundCache(), typed)\n      elif callable(maxsize):\n          return _cache(LRUCache(maxsize), typed)(maxsize)\n      else:\n          return _cache(LRUCache(maxsize), typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lru_cache(maxsize=128, typed=False):\n      \n      if maxsize is None:\n          return _cache(_UnboundCache(), typed)\n      elif callable(maxsize):\n          return _cache(LRUCache(maxsize), typed)(maxsize)\n      else:\n          return _cache(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["\ndef lfu_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              key = args, frozenset(kwargs.items()) if typed else args\n              if key in LFUCache(maxsize):\n                  value = LFUCache("], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lfu_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              key = args, frozenset(kwargs.items()) if typed else args\n              if key in LFUCache(maxsize):\n                  value = LFUCache(", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["\ndef popitem(self):\n          \n          if self.__order:\n              self.__order."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n          \n          if self.__order:\n              self.__order.", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["\ndef setdefault(self, key, default=None):\n          \n          if key in self:\n              return self[key]\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef setdefault(self, key, default=None):\n          \n          if key in self:\n              return self[key]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["\ndef get(self, key, default=None):\n          \n          return self.__get(key, default)\n\ndef"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get(self, key, default=None):\n          \n          return self.__get(key, default)\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["\ndef cachedmethod(cache, key=hashkey, lock=None):\n      \n      if lock is None:\n          def decorator(func):"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef cachedmethod(cache, key=hashkey, lock=None):\n      \n      if lock is None:\n          def decorator(func):", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["\ndef pop(self, key, default=__marker):\n          \n          if key in self:\n              result = self[key]\n              del self[key]\n              return result\n          if default is self.__marker:\n              raise KeyError(key)\n          return default\n\npop"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop(self, key, default=__marker):\n          \n          if key in self:\n              result = self[key]\n              del self[key]\n              return result\n          if default is self.__marker:\n              raise KeyError(key)\n          return default\n\npop", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["\ndef popitem(self):\n          \n          try:\n              key, self.__counter[key] -= 1\n          except KeyError:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n              return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n          \n          try:\n              key, self.__counter[key] -= 1\n          except KeyError:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n              return", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__links))\n          except StopIteration:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n             "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__links))\n          except StopIteration:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__order))\n          except StopIteration:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n             "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__order))\n          except StopIteration:\n              raise KeyError('%s is empty' % type(self).__name__) from None\n          else:\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__order))\n          except StopIteration:\n              raise KeyError('popitem() has been called on an empty Cache')\n          else:\n              return (key, self.pop(key))\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n          \n          try:\n              key = next(iter(self.__order))\n          except StopIteration:\n              raise KeyError('popitem() has been called on an empty Cache')\n          else:\n              return (key, self.pop(key))\n\ndef __setitem__(self, key, value, cache_setitem=Cache.__setitem__", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["\ndef _dump_string(self, obj, dumper=None):\n          \n          if PY3:\n              return to_text(obj, errors=\"strict\")\n          else:\n              return to_bytes(obj, errors=\"strict\")\n\n\ndef _dump_bytes(self, obj, dumper=None):\n          \n          if PY3:"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _dump_string(self, obj, dumper=None):\n          \n          if PY3:\n              return to_text(obj, errors=\"strict\")\n          else:\n              return to_bytes(obj, errors=\"strict\")\n\n\ndef _dump_bytes(self, obj, dumper=None):\n          \n          if PY3:", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n      \n      if debug:\n          level = 'DEBUG'\n      else:\n          level = 'INFO'\n      handler = RotatingFileHandler(filename=logfile, maxBytes=10485760)\n      formatter = logging.Formatter(\n          '%(asctime)s [%(levelname)s] - %(message)s')\n     "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n      \n      if debug:\n          level = 'DEBUG'\n      else:\n          level = 'INFO'\n      handler = RotatingFileHandler(filename=logfile, maxBytes=10485760)\n      formatter = logging.Formatter(\n          '%(asctime)s [%(levelname)s] - %(message)s')\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["\ndef pretty(self, indent=0, debug=False):\n          \n          if debug:\n              debug_details = \"\"\n              if self.isliteral:\n                  debug_details += f\"{self.isliteral!r}\"\n              if self.iscanonical:\n                  debug_details += f\"{self.iscanonical!r}\"\n              return (\" \" * indent) + f\"{self.__class__."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pretty(self, indent=0, debug=False):\n          \n          if debug:\n              debug_details = \"\"\n              if self.isliteral:\n                  debug_details += f\"{self.isliteral!r}\"\n              if self.iscanonical:\n                  debug_details += f\"{self.iscanonical!r}\"\n              return (\" \" * indent) + f\"{self.__class__.", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["\ndef absorb(self, args):\n          \n          args = list(args)\n          if not args:\n              args = list(self.args)\n          i = 0\n          while i < len(args):\n              absorber = args[i]\n              j = 0\n              while j < len(args):\n                  if j == i:\n                      j += 1\n                      continue\n                  target = args[j]\n                  if not isinstance(target, self.dual):\n                      j += 1\n                      continue"], "level": "class_runnable", "generate_results": []}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["\ndef validate(self, path):\n          \n          status_str = self.validate(path)\n          if status_str:\n              self.log.info(\"[OCFL] %s\", status_str)\n          return status_str\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, path):\n          \n          status_str = self.validate(path)\n          if status_str:\n              self.log.info(\"[OCFL] %s\", status_str)\n          return status_str\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["\ndef status_str(self, prefix=''):\n          \n          return self.log.status_str(prefix=prefix)\n\ndef status_str_passk_validte(self, prefix=''):\n      \n      return self.log.status_str_passk_validte(prefix=prefix)\n\ndef status_str_passk_validte2(self, prefix=''):\n      \n      return self.log.status"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n          \n          return self.log.status_str(prefix=prefix)\n\ndef status_str_passk_validte(self, prefix=''):\n      \n      return self.log.status_str_passk_validte(prefix=prefix)\n\ndef status_str_passk_validte2(self, prefix=''):\n      \n      return self.log.status", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["\ndef status_str(self, prefix=''):\n          \n          return self.log.status_str(prefix=prefix)\n\ndef validate(self, path):\n          '''Validate OCFL object at path or pyfs root.\n          \n          Returns True if valid (warnings permitted), False otherwise.\n          '''\n          self.initialize()\n          try:\n              if isinstance(path, str):\n                  self.obj_fs = open_fs(path)\n              else:\n                  self.obj_fs = path\n                  path = self.obj"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n          \n          return self.log.status_str(prefix=prefix)\n\ndef validate(self, path):\n          '''Validate OCFL object at path or pyfs root.\n          \n          Returns True if valid (warnings permitted), False otherwise.\n          '''\n          self.initialize()\n          try:\n              if isinstance(path, str):\n                  self.obj_fs = open_fs(path)\n              else:\n                  self.obj_fs = path\n                  path = self.obj", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["\ndef is_valid(self, identifier):\n    \n    return True\n\ndef check_"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_valid(self, identifier):\n    \n    return True\n\ndef check_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["\ndef validate(self, inventory, extract_spec_version=False):\n          \n          if 'type' in inventory:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, inventory, extract_spec_version=False):\n          \n          if 'type' in inventory:", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n          "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["\ndef validate_as_prior_version(self, prior):\n          "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_as_prior_version(self, prior):\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):pass"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["\ndef next_version(version):\n      \n      if version == \"\":\n          return \"\"\n      version_list = version.split('.')\n      if version_list[-"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef next_version(version):\n      \n      if version == \"\":\n          return \"\"\n      version_list = version.split('.')\n      if version_list[-", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["\ndef validate_version_inventories(self, version_dirs):\n          \n          \n          for version in version_dirs:\n              inventory_path = os.path.join(version, 'inventory')\n             "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_version_inventories(self, version_dirs):\n          \n          \n          for version in version_dirs:\n              inventory_path = os.path.join(version, 'inventory')\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["\ndef find_path_type(path):\n      \n      try:\n          pyfs = open_fs(path, create=False)\n      except (fs.opener.errors.Op"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_path_type(path):\n      \n      try:\n          pyfs = open_fs(path, create=False)\n      except (fs.opener.errors.Op", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["\ndef strip_root(self, path, root):\n          \n          if path.startswith(root):\n              path = path[len(root):]\n          if path.endswith("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef strip_root(self, path, root):\n          \n          if path.startswith(root):\n              path = path[len(root):]\n          if path.endswith(", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["\ndef identify_request(request: RequestType):\n      \n      try:\n          data = json.loads("], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType):\n      \n      try:\n          data = json.loads(", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["\ndef identify_request(request: RequestType) -> bool:\n      \n      try:\n          data = json."], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType) -> bool:\n      \n      try:\n          data = json.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["\ndef format_dt(dt):\n      \n      return ensure_timezone(dt).strftime('%Y-%m-"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef format_dt(dt):\n      \n      return ensure_timezone(dt).strftime('%Y-%m-", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      tags = set()\n      replaced_text = \"\"\n      \n      for"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      tags = set()\n      replaced_text = \"\"\n      \n      for", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["\ndef process_text_links(text):\n      \n      return text\n\ndef test_tag(tag: str) -> bool:\n      \n      if not tag:\n          return False"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef process_text_links(text):\n      \n      return text\n\ndef test_tag(tag: str) -> bool:\n      \n      if not tag:\n          return False", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["\ndef fetch_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = urllib.request.urlopen(url, timeout=10)\n      except (urllib.error.HTTPError, urllib.error.URLEr"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef fetch_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = urllib.request.urlopen(url, timeout=10)\n      except (urllib.error.HTTPError, urllib.error.URLEr", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["\ndef test_tag(tag: str) -> bool:\n      \n      if not tag:\n          return False\n      for char in ILLEGAL_TAG_CHARS:\n          if char in tag:\n              return False\n      return True\n      \n\ndef"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef test_tag(tag: str) -> bool:\n      \n      if not tag:\n          return False\n      for char in ILLEGAL_TAG_CHARS:\n          if char in tag:\n              return False\n      return True\n      \n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["\ndef xml_children_as_dict(node):\n      \n      children_dict = {}\n      for child in node:\n          if child.tag not in children_dict:\n              children_dict[child.tag] = []\n          children_dict[child"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef xml_children_as_dict(node):\n      \n      children_dict = {}\n      for child in node:\n          if child.tag not in children_dict:\n              children_dict[child.tag] = []\n          children_dict[child", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n      \n      if sender_handle!= entity_handle:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n      \n      if sender_handle!= entity_handle:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["\ndef get_nodeinfo_well_known_document(url, document_path=None):\n      \n      return {\n          \"links\": [\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nodeinfo_well_known_document(url, document_path=None):\n      \n      return {\n          \"links\": [\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["\ndef verify_relayable_signature(public_key, doc, signature):\n      \n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef verify_relayable_signature(public_key, doc, signature):\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["\ndef parse_diaspora_webfinger(document: str) -> Dict:\n      \n     "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_diaspora_webfinger(document: str) -> Dict:\n      \n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n      \n      try:\n          host = handle.split(\"@\")[1]\n      except (AttributeError, IndexError):\n          logger.warning(\"retrieve_webfinger_document: invalid handle given: %s\", handle)\n          return None\n      document, code, exception = fetch_document(\n          host=host, path=\"/.well-known/webfinger?resource=acct:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n      \n      try:\n          host = handle.split(\"@\")[1]\n      except (AttributeError, IndexError):\n          logger.warning(\"retrieve_webfinger_document: invalid handle given: %s\", handle)\n          return None\n      document, code, exception = fetch_document(\n          host=host, path=\"/.well-known/webfinger?resource=acct:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["\ndef retrieve_and_parse_diaspora_webfinger(handle):\n      \n      document = try_retrieve_webfinger_document(handle)\n      if document:\n          return parse_diaspora_webfinger(document)\n      host = handle.split(\"@\")[1]\n      hostmeta = retrieve_diaspora_host_meta(host)\n      if not hostmeta:\n          return None\n      url = hostmeta.find_link(rel"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef retrieve_and_parse_diaspora_webfinger(handle):\n      \n      document = try_retrieve_webfinger_document(handle)\n      if document:\n          return parse_diaspora_webfinger(document)\n      host = handle.split(\"@\")[1]\n      hostmeta = retrieve_diaspora_host_meta(host)\n      if not hostmeta:\n          return None\n      url = hostmeta.find_link(rel", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["\ndef retrieve_diaspora_host_meta(host):\n      \n      document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")\n      if exception:\n          return None\n      xrd = XRD.parse_xrd(document)\n      return xrd\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef retrieve_diaspora_host_meta(host):\n      \n      document, code, exception = fetch_document(host=host, path=\"/.well-known/host-meta\")\n      if exception:\n          return None\n      xrd = XRD.parse_xrd(document)\n      return xrd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n      \n      logger.info(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n      try:\n          return requests.post(url, data=data, timeout=timeout, headers={'User-Agent': USER_AGENT, **kwargs})\n      except requests.exceptions.RequestException as"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n      \n      logger.info(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n      try:\n          return requests.post(url, data=data, timeout=timeout, headers={'User-Agent': USER_AGENT, **kwargs})\n      except requests.exceptions.RequestException as", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["\ndef get_versions():\n      \n     "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_versions():\n      \n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["\ndef render(pieces, style):\n      \n      if pieces[\"error\"]:\n          return {\"version\": \"unknown\",\n                  \"full-revisionid\": pieces"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef render(pieces, style):\n      \n      if pieces[\"error\"]:\n          return {\"version\": \"unknown\",\n                  \"full-revisionid\": pieces", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["\ndef plus_or_dot(pieces):\n      \n      if \"+\" in pieces.get(\"closest-tag\", \"\"):\n          return \".\"\n      return \"+"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef plus_or_dot(pieces):\n      \n      if \"+\" in pieces.get(\"closest-tag\", \"\"):\n          return \".\"\n      return \"+", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n      \n      assert isinstance(commands, list)\n      process = None\n \n      popen_kwargs = {}"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n      \n      assert isinstance(commands, list)\n      process = None\n \n      popen_kwargs = {}", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["\ndef get_config():\n      \n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_config():\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["\ndef register_vcs_handler(vcs, method):\n    \n    def decorate(f):\n      \"\"\"Store f in HANDLERS[vcs][method].\"\"\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef register_vcs_handler(vcs, method):\n    \n    def decorate(f):\n      \"\"\"Store f in HANDLERS[vcs][method].\"\"\"", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["\n@classmethod\n      def extostr(cls, e, max_level=30, max_path_level=5):\n          \n          list_frame = []\n          if isinstance(e, Exception):"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def extostr(cls, e, max_level=30, max_path_level=5):\n          \n          list_frame = []\n          if isinstance(e, Exception):", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["\n@staticmethod\n      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n          \n          try:"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n          \n          try:", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["\n@staticmethod\n      def file_to_textbuffer(file_name, encoding):\n          \n          try:\n             "], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n      def file_to_textbuffer(file_name, encoding):\n          \n          try:\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["\n@staticmethod\n      def is_file_exist(file_name):\n          \n          try:\n              os.path.exists(file_name)\n          except:\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n      def is_file_exist(file_name):\n          \n          try:\n              os.path.exists(file_name)\n          except:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["\n@classmethod\n      def _reset_logging(cls):\n          \n          cls._reset()\n          if cls._logging_initialized:\n              cls"], "level": "plib_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def _reset_logging(cls):\n          \n          cls._reset()\n          if cls._logging_initialized:\n              cls", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["\ndef _getTargetClass(self):\n          \n          raise NotImplementedError\n\ndef _getFallbackClass(self):\n          ''"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _getTargetClass(self):\n          \n          raise NotImplementedError\n\ndef _getFallbackClass(self):\n          ''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["\ndef _legacy_mergeOrderings(orderings):\n      \n      result = []\n      seen = set()\n     "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _legacy_mergeOrderings(orderings):\n      \n      result = []\n      seen = set()\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["\ndef directlyProvidedBy(object):\n \n return object.__provides__\n\ndef classProv"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef directlyProvidedBy(object):\n \n return object.__provides__\n\ndef classProv", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["\ndef minimalBases(classes):\n      \n      if not __python3: # pragma: no"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef minimalBases(classes):\n      \n      if not __python3: # pragma: no", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["\ndef namesAndDescriptions(self, all=False):\n \n return self.__attrs.items()\n \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef namesAndDescriptions(self, all=False):\n \n return self.__attrs.items()\n \n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["\ndef names(self, all=False):\n \n return self.__attrs.keys()\n\ndef getDescriptionFor(self, name):\n \n return self."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef names(self, all=False):\n \n return self.__attrs.keys()\n\ndef getDescriptionFor(self, name):\n \n return self.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["\ndef _normalizeargs(sequence, output=None):\n      \n      if output is None:\n          output = []\n\n      cls = sequence.__class__\n      if InterfaceClass in cls.__mro__ or Imple"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _normalizeargs(sequence, output=None):\n      \n      if output is None:\n          output = []\n\n      cls = sequence.__class__\n      if InterfaceClass in cls.__mro__ or Imple", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["\ndef _c_optimizations_available():\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_available():\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["\ndef _should_attempt_c_optimizations():\n      \n      return _use_c_impl(py_impl, name=None, globs=None)\n\ndef _use_c_impl(py_impl, name"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _should_attempt_c_optimizations():\n      \n      return _use_c_impl(py_impl, name=None, globs=None)\n\ndef _use_c_impl(py_impl, name", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["\ndef _c_optimizations_ignored():\n      \n      return True\n\ndef _should_attempt"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_ignored():\n      \n      return True\n\ndef _should_attempt", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["\ndef _c_optimizations_required():\n      \n      return _c_optimizations_available()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_required():\n      \n      return _c_optimizations_available()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["\ndef _verify(iface, candidate, tentative=False, vtype=None):\n      \n      if isinstance(iface, Iface):"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _verify(iface, candidate, tentative=False, vtype=None):\n      \n      if isinstance(iface, Iface):", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["\ndef verifyObject(iface, candidate, tentative=False):\n      \n      if not tentative:\n          if not iface"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyObject(iface, candidate, tentative=False):\n      \n      if not tentative:\n          if not iface", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["\ndef verifyClass(iface, candidate, tentative=False):\n      \n      assert isinstance(candidate, zope.interface.Interface)\n      assert candidate.providedBy(iface)\n\n     "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyClass(iface, candidate, tentative=False):\n      \n      assert isinstance(candidate, zope.interface.Interface)\n      assert candidate.providedBy(iface)\n\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["\ndef determineMetaclass(bases, explicit_mc=None):\n      \n      if explicit_mc is not None:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef determineMetaclass(bases, explicit_mc=None):\n      \n      if explicit_mc is not None:", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["\ndef force_string(obj):\n      \n      if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n          return obj.decode('utf-8')\n      return obj\n\ndef default_plot"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef force_string(obj):\n      \n      if isinstance(obj,numpy.bytes_)==True or isinstance(obj,bytes)==True:\n          return obj.decode('utf-8')\n      return obj\n\ndef default_plot", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["\ndef unquote(name):\n      \n      return unquote_url(name).decode('utf-8')\n\n\ndef unquote_url(url):\n      \n      return url.replace('\\n',"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef unquote(name):\n      \n      return unquote_url(name).decode('utf-8')\n\n\ndef unquote_url(url):\n      \n      return url.replace('\\n',", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n      \n      if alphabet is None:\n          return str(number)\n      if isinstance(number, int):\n          assert number >= 0\n          return \"\".join(\n              [alphabet[digit] if digit in range(0, len(alphabet)) else alphabet[0] for digit"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n      \n      if alphabet is None:\n          return str(number)\n      if isinstance(number, int):\n          assert number >= 0\n          return \"\".join(\n              [alphabet[digit] if digit in range(0, len(alphabet)) else alphabet[0] for digit", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n      \n      return int(string, 10)\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n      \n      return int(string, 10)\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["\ndef _dictsum(dicts):\n      \n      return sum(dict.values())\n\ndef _get_ds_name(ds):\n      \n      names = ds.name.split('_')\n      names.sort()\n      return '_'.join(names"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _dictsum(dicts):\n      \n      return sum(dict.values())\n\ndef _get_ds_name(ds):\n      \n      names = ds.name.split('_')\n      names.sort()\n      return '_'.join(names", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["\ndef files_list(path):\n      \n      import os\n      return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n      \ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n      with open("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list(path):\n      \n      import os\n      return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n      \ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n      with open(", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["\ndef _group_files_by_xml_filename(source, xmls, files):\n      \n      result = []\n      for xml in xmls:\n          basename = os.path.basename(xml)\n          prefix, ext = os.path."], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _group_files_by_xml_filename(source, xmls, files):\n      \n      result = []\n      for xml in xmls:\n          basename = os.path.basename(xml)\n          prefix, ext = os.path.", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["\ndef match_file_by_prefix(prefix, file_path):\n      \n      basename = os.path.basename(file_path)\n      if basename.startswith(prefix + \"-\") or basename.startswith"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match_file_by_prefix(prefix, file_path):\n      \n      basename = os.path.basename(file_path)\n      if basename.startswith(prefix + \"-\") or basename.startswith", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["\ndef select_filenames_by_prefix(prefix, files):\n      \n      return files[:]"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef select_filenames_by_prefix(prefix, files):\n      \n      return files[:]", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["\ndef _explore_folder(folder):\n      \n      if file_utils.is_folder(folder):\n          data = _group_files_by_xml_filename(folder, file_utils.xml_files"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_folder(folder):\n      \n      if file_utils.is_folder(folder):\n          data = _group_files_by_xml_filename(folder, file_utils.xml_files", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["\ndef _eval_file(prefix, file_path):\n      \n      if not match_file_by_prefix(prefix, file_path):"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _eval_file(prefix, file_path):\n      \n      if not match_file_by_prefix(prefix, file_path):", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["\ndef add_rendition(self, lang, file_path):\n          \n          self._renditions[lang] = self.file_path(file_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_rendition(self, lang, file_path):\n          \n          self._renditions[lang] = self.file_path(file_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["\ndef add_asset(self, basename, file_path):\n          \n          if basename in self._assets:\n              return self._assets[bas"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_asset(self, basename, file_path):\n          \n          if basename in self._assets:\n              return self._assets[bas", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["\ndef _explore_zipfile(zip_path):\n      \n      with ZipFile(zip_path, 'r') as zip_file:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_zipfile(zip_path):\n      \n      with ZipFile(zip_path, 'r') as zip_file:", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["\ndef files_list_from_zipfile(zip_path):\n      \n      import zipfile\n      with zipfile.ZipFile(zip_path) as zf:\n          return zf"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list_from_zipfile(zip_path):\n      \n      import zipfile\n      with zipfile.ZipFile(zip_path) as zf:\n          return zf", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["\ndef fix_namespace_prefix_w(content):\n      \n      content = content.replace(\"w:st=\", \"w-st=\")\n      content = content.replace(\""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef fix_namespace_prefix_w(content):\n      \n      content = content.replace(\"w:st=\", \"w-st=\")\n      content = content.replace(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["\ndef match_pubdate(node, pubdate_xpaths):\n      \n      \n      for xpath in pubdate_xpaths:\n          match = node.xpath(xpath)"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef match_pubdate(node, pubdate_xpaths):\n      \n      \n      for xpath in pubdate_xpaths:\n          match = node.xpath(xpath)", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["\ndef _extract_number_and_supplment_from_issue_element(issue):\n      \n      number = None\n      sup = None\n      "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _extract_number_and_supplment_from_issue_element(issue):\n      \n      number = None\n      sup = None\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["\ndef size_to_bytes(size: str) -> int:\n      \n      if size.endswith(\"B\"):\n          return int(size[:-1])\n      else:\n          raise ValueError(\"size must end with bytes\")\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef size_to_bytes(size: str) -> int:\n      \n      if size.endswith(\"B\"):\n          return int(size[:-1])\n      else:\n          raise ValueError(\"size must end with bytes\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n          \n          archive_path = urljoin(self.url, \"archives\")\n          if not archive_path.startswith(self.url):\n              archive_path = urljoin(self.url, \"archives\", \"1-1"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n          \n          archive_path = urljoin(self.url, \"archives\")\n          if not archive_path.startswith(self.url):\n              archive_path = urljoin(self.url, \"archives\", \"1-1", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["\ndef prepare_repository_from_archive(\n      archive_path: str,\n      filename: Optional[str] = None,\n      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n      \n      archive_path = Path(archive_path)\n      if not archive_path.is_file():\n          raise TypeError(\"archive_path must be a file\")\n      archive_path = archive_path.relative_to("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef prepare_repository_from_archive(\n      archive_path: str,\n      filename: Optional[str] = None,\n      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n      \n      archive_path = Path(archive_path)\n      if not archive_path.is_file():\n          raise TypeError(\"archive_path must be a file\")\n      archive_path = archive_path.relative_to(", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["\ndef _replace_register(flow_params, register_number, register_value):\n      \n     "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_register(flow_params, register_number, register_value):\n      \n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["\ndef hydrate_time(nanoseconds, tz=None):\n      \n      from pytz import (\n          FixedOffset,\n          timezone,\n      )\n      minutes, seconds"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef hydrate_time(nanoseconds, tz=None):\n      \n      from pytz import (\n          FixedOffset,\n          timezone,\n      )\n      minutes, seconds", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["\ndef dehydrate_timedelta(value):\n      \n      months = 0\n      days = value.days\n      seconds = value.seconds\n      nanoseconds ="], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_timedelta(value):\n      \n      months = 0\n      days = value.days\n      seconds = value.seconds\n      nanoseconds =", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["\ndef dehydrate_time(value):\n      \n      months = 0\n      days = value.days\n      seconds = value.seconds\n      nanoseconds ="], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_time(value):\n      \n      months = 0\n      days = value.days\n      seconds = value.seconds\n      nanoseconds =", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["\ndef dehydrate_point(value):\n      \n      dim = len(value)\n      if dim == 2:\n          return Structure(b\"X\", value."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_point(value):\n      \n      dim = len(value)\n      if dim == 2:\n          return Structure(b\"X\", value.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["\ndef keys(self):\n          \n          raise NotImplemented"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef keys(self):\n          \n          raise NotImplemented", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["\n@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          handlers = {\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          handlers = {\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["\ndef unit_of_work(metadata=None, timeout=None):\n      \n      def decorator(func"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef unit_of_work(metadata=None, timeout=None):\n      \n      def decorator(func", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["\ndef index(self, key):\n          \n          if isinstance(key"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef index(self, key):\n          \n          if isinstance(key", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["\ndef values(self, *keys):\n          \n          if keys:\n              d: t.List[t.Any] ="], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef values(self, *keys):\n          \n          if keys:\n              d: t.List[t.Any] =", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["\ndef data(self, *keys):\n          \n          if keys:\n              d = {}\n              for key in keys:\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef data(self, *keys):\n          \n          if keys:\n              d = {}\n              for key in keys:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["\ndef pop_u16(self):\n          \n          if self.used >= 2:\n              value = 0x100 * self"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop_u16(self):\n          \n          if self.used >= 2:\n              value = 0x100 * self", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n          \n          pass\n\ndef pull(self, n=-1, qid=-1"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n          \n          pass\n\ndef pull(self, n=-1, qid=-1", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):pass"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):pass", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["\n@classmethod\n      def from_ticks(cls, ticks, tz=None):\n          \n          if ticks < 0:\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def from_ticks(cls, ticks, tz=None):\n          \n          if ticks < 0:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["\n@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          if protocol_version is None"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          if protocol_version is None", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["\n@classmethod\n      def from_raw_values(cls, values):\n          \n          obj = cls()\n"], "level": "self_contained", "generate_results": [{"generate_code": "\n@classmethod\n      def from_raw_values(cls, values):\n          \n          obj = cls()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["\ndef amend_bzparams(self, params, bug_ids):\n          \n          pass\n\ndef get_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef amend_bzparams(self, params, bug_ids):\n          \n          pass\n\ndef get_", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["\ndef vertex3tuple(vertices):\n      "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef vertex3tuple(vertices):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["\ndef _validate_labels(labels):\n      \n      if not isinstance(labels, dict):\n          return False\n\n      for key, value in labels.items():\n          if not validate_key(key) or not"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _validate_labels(labels):\n      \n      if not isinstance(labels, dict):\n          return False\n\n      for key, value in labels.items():\n          if not validate_key(key) or not", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["\ndef _get_resource_name_regex():\n      \n      global _resource_name_regex, _resource_name_pattern\n      \n      if _resource_name_re"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _get_resource_name_regex():\n      \n      global _resource_name_regex, _resource_name_pattern\n      \n      if _resource_name_re", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["\ndef validate_value(value):\n      \n      _, value_regex = _get_labels_regex()\n      if not value_regex.fullmatch(value):\n          raise ValidationError("], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_value(value):\n      \n      _, value_regex = _get_labels_regex()\n      if not value_regex.fullmatch(value):\n          raise ValidationError(", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["\ndef validate_key(key):\n      \n      _, key_regex = _get_labels_regex()\n      if not key_regex.fullmatch(key):\n          raise ValidationError(\n              f\"Label key {key!r} does"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_key(key):\n      \n      _, key_regex = _get_labels_regex()\n      if not key_regex.fullmatch(key):\n          raise ValidationError(\n              f\"Label key {key!r} does", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["\ndef update_last_applied_manifest_list_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      for idx, val in enumerate(observer_schema[:-1]):"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_list_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      for idx, val in enumerate(observer_schema[:-1]):", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["\ndef update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      for idx, val in enumerate(observer_schema):\n          last_applied_manifest[idx] = update_last_applied_manifest_list_from_resp(\n              last_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      for idx, val in enumerate(observer_schema):\n          last_applied_manifest[idx] = update_last_applied_manifest_list_from_resp(\n              last_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["\ndef generate_default_observer_schema(app):\n      \n      app.status.mangled_observer_schema = deepcopy(app.spec"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema(app):\n      \n      app.status.mangled_observer_schema = deepcopy(app.spec", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["\ndef on(self, hook):\n          \n          self.registry[hook.name] = hook\n          return hook\n\ndef to"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef on(self, hook):\n          \n          self.registry[hook.name] = hook\n          return hook\n\ndef to", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n      \n      return {\n          \"tls\": {\n              \"enabled\": False,\n              \""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n      \n      return {\n          \"tls\": {\n              \"enabled\": False,\n              \"", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["\ndef paging(response, max_results):\n      \n      page = response.json()\n      assert isinstance(page, dict)\n      assert"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef paging(response, max_results):\n      \n      page = response.json()\n      assert isinstance(page, dict)\n      assert", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["\ndef _fromutc(self, dt):\n          "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _fromutc(self, dt):\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["\ndef normalized(self):\n          \n          return self.__class__(years=self.years, months=self.months,\n                                days=self.days, hours=self.hours,\n                                minutes=self.minutes, seconds=self.seconds,\n                                microseconds=self.microseconds,\n                                leapdays=self.leapdays,\n                                year=self.year, month=self.month,\n                                day=self.day, hour=self.hour,\n                                minute="], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef normalized(self):\n          \n          return self.__class__(years=self.years, months=self.months,\n                                days=self.days, hours=self.hours,\n                                minutes=self.minutes, seconds=self.seconds,\n                                microseconds=self.microseconds,\n                                leapdays=self.leapdays,\n                                year=self.year, month=self.month,\n                                day=self.day, hour=self.hour,\n                                minute=", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["\ndef tzname_in_python2(namefunc):\n      \n      if PY2:\n          @wraps(namefunc)\n          def adjust_encoding(*args, **kwargs):\n              name = namefunc(*args, **kwargs)\n              if name is not None:\n                  name = name.encode('utf-8')\n              return name\n      else:\n          @wraps"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef tzname_in_python2(namefunc):\n      \n      if PY2:\n          @wraps(namefunc)\n          def adjust_encoding(*args, **kwargs):\n              name = namefunc(*args, **kwargs)\n              if name is not None:\n                  name = name.encode('utf-8')\n              return name\n      else:\n          @wraps", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["\n@_takes_ascii\n      def isoparse(self, dt_str):\n          \n          return self._parse_isodate(dt_str)\n\n\n@_takes_ascii\n      def isoparse_passk(self, dt_str):\n          \n          return self._parse_isodate(dt_str)\n\n\n@_takes_ascii\n      def isoparse_passk_"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_takes_ascii\n      def isoparse(self, dt_str):\n          \n          return self._parse_isodate(dt_str)\n\n\n@_takes_ascii\n      def isoparse_passk(self, dt_str):\n          \n          return self._parse_isodate(dt_str)\n\n\n@_takes_ascii\n      def isoparse_passk_", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["\ndef parse(self, timestr, default=None,\n                ignoretz=False, tzinfos=None, **kwargs):\n          \n          return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)._replace(tzinfo=None)\n\ndef parse_using"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef parse(self, timestr, default=None,\n                ignoretz=False, tzinfos=None, **kwargs):\n          \n          return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)._replace(tzinfo=None)\n\ndef parse_using", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["\n@_validate_fromutc_inputs\n      def fromutc(self, dt):\n          \n          dt_wall = self._fromutc(dt)\n          if self._fold_status(dt, dt_wall) == self._fold:\n              dt_"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_validate_fromutc_inputs\n      def fromutc(self, dt):\n          \n          dt_wall = self._fromutc(dt)\n          if self._fold_status(dt, dt_wall) == self._fold:\n              dt_", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["\ndef default_tzinfo(dt, tzinfo):\n      \n      if dt.tzinfo is not None:\n          return dt\n      else:\n          return dt.replace(tzinfo=tzinfo)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef default_tzinfo(dt, tzinfo):\n      \n      if dt.tzinfo is not None:\n          return dt\n      else:\n          return dt.replace(tzinfo=tzinfo)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["\ndef is_none_string(val: Any) -> bool:\n      \n      return val is None or isinstance(val, str) and not val\n\n\ndef is_empty_string(val: Any) -> bool:\n      '''Check if"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_none_string(val: Any) -> bool:\n      \n      return val is None or isinstance(val, str) and not val\n\n\ndef is_empty_string(val: Any) -> bool:\n      '''Check if", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n      "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["\ndef _inline_r_setup(code: str) -> str:\n      \n      code = code."], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _inline_r_setup(code: str) -> str:\n      \n      code = code.", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["\ndef xargs(\n          cmd: tuple[str,...],\n          varargs: Sequence[str],\n          *,\n          color: bool = False,\n          target_concurrency: int = 1,\n          _max_length: int = _get_platform_max_length(),\n          **kwargs: Any,\n) -> tuple[int, bytes]:\n      "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef xargs(\n          cmd: tuple[str,...],\n          varargs: Sequence[str],\n          *,\n          color: bool = False,\n          target_concurrency: int = 1,\n          _max_length: int = _get_platform_max_length(),\n          **kwargs: Any,\n) -> tuple[int, bytes]:\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n      \n      random.shuffle"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n      \n      random.shuffle", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["\ndef parse_version(s: str) -> tuple[int,...]:\n      \n      return tuple(int(p) for p in s.split('.'))\n\ndef check_min_version(version: str)"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef parse_version(s: str) -> tuple[int,...]:\n      \n      return tuple(int(p) for p in s.split('.'))\n\ndef check_min_version(version: str)", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["\ndef normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      \n      exe = normexe(cmd[0], env=env)\n "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      \n      exe = normexe(cmd[0], env=env)\n ", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["\ndef gaussian(self, x):\n          \n          return np.exp(-(x**2)/0.2**2)\n\n\nclass TestPositioner(TestCase):\n      def"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef gaussian(self, x):\n          \n          return np.exp(-(x**2)/0.2**2)\n\n\nclass TestPositioner(TestCase):\n      def", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["\ndef get_pattern(self, pattern, strip=True):\n          \n          try:\n              if type(pattern) == re.Pattern:\n                  return pattern\n          except AttributeError:\n              pass\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_pattern(self, pattern, strip=True):\n          \n          try:\n              if type(pattern) == re.Pattern:\n                  return pattern\n          except AttributeError:\n              pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["\ndef deep_merge_nodes(nodes):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["\ndef parse_arguments(*arguments):\n      \n      parser"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n      \n      parser", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["\ndef parser_flags(parser):\n      \n      return"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n      \n      return", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["\ndef parse_arguments(*unparsed_arguments):\n      \n      args"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n      \n      args", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():pass", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):pass"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["\ndef remove_ending_os_sep(input_list):\n      \n      string_set = set(input_list)\n\n      for item in string_set:\n          if input_list.index(item) == len"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef remove_ending_os_sep(input_list):\n      \n      string_set = set(input_list)\n\n      for item in string_set:\n          if input_list.index(item) == len", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["\ndef run_command(self, cmd, verbose):\n          \n          return subprocess.check_output(cmd, shell=True)\n\n\ndef run_command_async(self, cmd, verbose):\n          \n          return subprocess.check_call(cmd, shell=True)\n\n\ndef run_command_raw"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef run_command(self, cmd, verbose):\n          \n          return subprocess.check_output(cmd, shell=True)\n\n\ndef run_command_async(self, cmd, verbose):\n          \n          return subprocess.check_call(cmd, shell=True)\n\n\ndef run_command_raw", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n          \n          if before == after:\n              self.parts[-1] = b\"(\" + self.parts[-1] + b\")\"\n          else:\n              self.parts[-1] = b\"(\" + before + b\"(\" + after + b\")\"\n\ndef split_parts(self,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n          \n          if before == after:\n              self.parts[-1] = b\"(\" + self.parts[-1] + b\")\"\n          else:\n              self.parts[-1] = b\"(\" + before + b\"(\" + after + b\")\"\n\ndef split_parts(self,", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, dtype=dtype)\n\ndef make_array_float(shape=(10, 10), dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, d"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, dtype=dtype)\n\ndef make_array_float(shape=(10, 10), dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, d", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["\ndef addignored(self, ignored):\n          \n          import os\n          os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n          fldr = subprocess.run([\"git\", \"-C\", ignored, \""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef addignored(self, ignored):\n          \n          import os\n          os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n          fldr = subprocess.run([\"git\", \"-C\", ignored, \"", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["\ndef reset(self):\n          \n          self._hist = histogram_scale_passk_validte_8.histogram()\n          self._cur_context = {}\n          self._hist_bins = histogram_scale_passk_validte_8"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef reset(self):\n          \n          self._hist = histogram_scale_passk_validte_8.histogram()\n          self._cur_context = {}\n          self._hist_bins = histogram_scale_passk_validte_8", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["\ndef to_csv(self, separator=\",\", header=None):\n          \n          csv_file = StringIO()\n          csv_file.write(separator.join(header or []))\n          for item in self:\n              csv_file.write(separator.join(item) + \"\\n\")"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef to_csv(self, separator=\",\", header=None):\n          \n          csv_file = StringIO()\n          csv_file.write(separator.join(header or []))\n          for item in self:\n              csv_file.write(separator.join(item) + \"\\n\")", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["\ndef _get_err_indices(self, coord_name):\n          "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _get_err_indices(self, coord_name):\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["\ndef _update_context(self, context):\n          \n          pass\n\ncovariance_type_functions = {\n      'histogram': _update_context,\n      'hist"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _update_context(self, context):\n          \n          pass\n\ncovariance_type_functions = {\n      'histogram': _update_context,\n      'hist", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["\ndef integral(bins, edges):\n      \n      total = 0\n      for ind, bin_content in iter_bins(bins):\n          bin_lengths = [\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef integral(bins, edges):\n      \n      total = 0\n      for ind, bin_content in iter_bins(bins):\n          bin_lengths = [\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["\ndef is_fill_request_seq(seq):\n      \n      for el in seq:\n          if not isinstance(el, FillRequest):\n              return False\n      return True\n\ndef is"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef is_fill_request_seq(seq):\n      \n      for el in seq:\n          if not isinstance(el, FillRequest):\n              return False\n      return True\n\ndef is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["\ndef is_fill_request_el(obj):\n      \n      return hasattr(obj, \"fill\") and hasattr(obj, \"request\")"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_request_el(obj):\n      \n      return hasattr(obj, \"fill\") and hasattr(obj, \"request\")", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["\ndef is_run_el(obj):\n      \n      return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_source(seq):\n      \n     "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_run_el(obj):\n      \n      return hasattr(obj, \"run\") and callable(obj.run)\n\ndef is_source(seq):\n      \n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["\ndef is_fill_compute_el(obj):\n      \n      return hasattr(obj, \"fill\") and hasattr(obj, \"compute\")\n\ndef is_fill_compute_seq(seq):\n      '''Object contains executable methods 'fill' and 'compute"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_compute_el(obj):\n      \n      return hasattr(obj, \"fill\") and hasattr(obj, \"compute\")\n\ndef is_fill_compute_seq(seq):\n      '''Object contains executable methods 'fill' and 'compute", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["\ndef difference(d1, d2, level=-1):\n      \n      if _has_context(d1):\n          d1 = get_context(d1)\n      elif _has_context(d2):\n          d2 = get_context(d2)\n      if"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef difference(d1, d2, level=-1):\n      \n      if _has_context(d1):\n          d1 = get_context(d1)\n      elif _has_context(d2):\n          d2 = get_context(d2)\n      if", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["\ndef fill(self, coord, weight=1):\n          \n          indices = hf.get_bin_on_value(coord, self.edges)\n          subarr = self.bins\n          for ind in indices[:-1]:\n              if"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef fill(self, coord, weight=1):\n          \n          indices = hf.get_bin_on_value(coord, self.edges)\n          subarr = self.bins\n          for ind in indices[:-1]:\n              if", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["\ndef _get_seq_with_type(seq, bufsize=None):\n      \n      sequence = seq if isinstance(seq, (list, tuple, str, bytes)) else [seq]\n      sequence_type = type(sequence)\n      return sequence,"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _get_seq_with_type(seq, bufsize=None):\n      \n      sequence = seq if isinstance(seq, (list, tuple, str, bytes)) else [seq]\n      sequence_type = type(sequence)\n      return sequence,", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["\ndef scale(self, other=None, recompute=False):\n          \n          self.scale(other=other, recompute=recompute)\n\ndef reset_passk_validte(self, other=None, recompute=False):"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None, recompute=False):\n          \n          self.scale(other=other, recompute=recompute)\n\ndef reset_passk_validte(self, other=None, recompute=False):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["\ndef scale(self, other=None):\n          \n          if other is None:\n              self._scale = self._current_scale\n          else:\n              self._scale = other\n          return self._scale\n\n\ndef scale"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None):\n          \n          if other is None:\n              self._scale = self._current_scale\n          else:\n              self._scale = other\n          return self._scale\n\n\ndef scale", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                    field_names=(\"x\", \"y\"), scale=None):\n      \n      graph = Graph()\n      for bin_ in hist.bins:\n          if make_value is None:\n              value = bin_\n          else:\n              value"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                    field_names=(\"x\", \"y\"), scale=None):\n      \n      graph = Graph()\n      for bin_ in hist.bins:\n          if make_value is None:\n              value = bin_\n          else:\n              value", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():pass"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):pass"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):pass", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["\ndef parse_frequency(frequency):\n      \n      if not frequency:\n          return None\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef parse_frequency(frequency):\n      \n      if not frequency:\n          return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["\ndef make_find_paths(find_paths):\n      \n      if not find_paths:\n         "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef make_find_paths(find_paths):\n      \n      if not find_paths:\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      if not overwrite and os.path.ex"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      if not overwrite and os.path.ex", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["\ndef _resolve_string(matcher):\n      \n      if matcher.group('escape') is"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _resolve_string(matcher):\n      \n      if matcher.group('escape') is", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n      \n      configs = collections.OrderedDict()\n      logs = []\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n      \n      configs = collections.OrderedDict()\n      logs = []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["\ndef _replace_url_args(url, url_args):\n      \n      if url_args:\n          for key, value in url_args.items():\n              url = url.replace(f\"/{key}/\", f\"/{value}/"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_url_args(url, url_args):\n      \n      if url_args:\n          for key, value in url_args.items():\n              url = url.replace(f\"/{key}/\", f\"/{value}/", "is_pass": false, "return_code": 1}]}
