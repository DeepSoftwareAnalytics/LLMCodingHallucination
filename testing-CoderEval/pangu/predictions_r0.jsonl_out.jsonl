{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n      \n      def _hydrate(value):\n          if isinstance(value, (datetime.time, datetime.datetime, datetime.date)):\n              return value\n          elif isinstance(value, (tuple, list)):\n              return tz.localize(tz.fromtimestamp(value))\n          elif isinstance(value, (datetime.timedelta, int)):\n              return tz.localize(value)\n          else:\n              return value\n      return tz.tzoffset(tz, nanoseconds) if tz else nanoseconds\n\n\ndef _to_timedelta(value):\n      if isinstance(value, (timedelta, int, float, datetime.timedelta)):\n          return value\n      if isinstance(value, (tuple, list)):\n         "], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n      \n      def _hydrate(value):\n          if isinstance(value, (datetime.time, datetime.datetime, datetime.date)):\n              return value\n          elif isinstance(value, (tuple, list)):\n              return tz.localize(tz.fromtimestamp(value))\n          elif isinstance(value, (datetime.timedelta, int)):\n              return tz.localize(value)\n          else:\n              return value\n      return tz.tzoffset(tz, nanoseconds) if tz else nanoseconds\n\n\ndef _to_timedelta(value):\n      if isinstance(value, (timedelta, int, float, datetime.timedelta)):\n          return value\n      if isinstance(value, (tuple, list)):\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n      \n      return value.total_seconds()\n\n\ndef add_date_formatters(app):\n      \n      app.add_date_formatters(\n          [\n              format_date_format_date,\n              format_date_format_time,\n              format_date_format_datetime,\n              format_date_format_duration,\n              format_date_format_total_seconds,\n          ]\n      )\n      app.add_list_formatters(\n          [\n              format_date_format_date_list,\n              format_date_format_duration_list,\n              format_date_format_total_seconds_list,\n          ]\n      )\n\n\ndef add_time_formatters(app):\n      \n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n      \n      return value.total_seconds()\n\n\ndef add_date_formatters(app):\n      \n      app.add_date_formatters(\n          [\n              format_date_format_date,\n              format_date_format_time,\n              format_date_format_datetime,\n              format_date_format_duration,\n              format_date_format_total_seconds,\n          ]\n      )\n      app.add_list_formatters(\n          [\n              format_date_format_date_list,\n              format_date_format_duration_list,\n              format_date_format_total_seconds_list,\n          ]\n      )\n\n\ndef add_time_formatters(app):\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n      \n      if value == 1:\n          return'second'\n      if value == 2:\n          return'minute'\n      if value == 3:\n          return 'hour'\n      if value == 4:\n          return 'day'\n      if value == 5:\n          return 'week'\n\n\nclass TimeDelta(models.Model):\n      '''TimeDelta model.\n\n      A time period that is expressed as a timedelta.\n      '''\n\n      start = models.DateTimeField(\n          verbose_name='start',\n          help_text='Start time of the period',\n      )\n      end = models.DateTimeField(\n          verbose_name='end',\n          help_text='End time of the period',\n      )\n      duration = models.DurationField(\n          verbose_name='duration',\n          help_text='Duration"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n      \n      if value == 1:\n          return'second'\n      if value == 2:\n          return'minute'\n      if value == 3:\n          return 'hour'\n      if value == 4:\n          return 'day'\n      if value == 5:\n          return 'week'\n\n\nclass TimeDelta(models.Model):\n      '''TimeDelta model.\n\n      A time period that is expressed as a timedelta.\n      '''\n\n      start = models.DateTimeField(\n          verbose_name='start',\n          help_text='Start time of the period',\n      )\n      end = models.DateTimeField(\n          verbose_name='end',\n          help_text='End time of the period',\n      )\n      duration = models.DurationField(\n          verbose_name='duration',\n          help_text='Duration", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n      \n      return value.__str__()\n\nclass Point(models.Model):\n      '''Point model.\n\n      Attributes:\n          name (str): the name of the Point\n          coordinates (list): the coordinates of the Point\n          point_type (str): the point type (e.g. 'A', 'B', 'C')\n      '''\n      name = models.CharField(max_length=50)\n      coordinates = models.ListField(models.FloatField())\n      point_type = models.CharField(max_length=50)\n\n      def __str__(self):\n          return self.name\n\n      def dehydrate_point(self, value):\n          \n          return value.__str__()\n\nclass Polygon(models.Model):\n      '''Polygon model"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n      \n      return value.__str__()\n\nclass Point(models.Model):\n      '''Point model.\n\n      Attributes:\n          name (str): the name of the Point\n          coordinates (list): the coordinates of the Point\n          point_type (str): the point type (e.g. 'A', 'B', 'C')\n      '''\n      name = models.CharField(max_length=50)\n      coordinates = models.ListField(models.FloatField())\n      point_type = models.CharField(max_length=50)\n\n      def __str__(self):\n          return self.name\n\n      def dehydrate_point(self, value):\n          \n          return value.__str__()\n\nclass Polygon(models.Model):\n      '''Polygon model", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n          \n          return self._keys\n\n      def read(self):\n          \n          line = self._file.readline()\n          if not line:\n              return None\n          record, = line.split(None, 1)\n          record = record.strip()\n          self._keys = []\n          return record\n\n      def write(self, record):\n          \n          self._file.write(record + '\\n')\n\n\nclass RecordParser(object):\n      '''A class that parses a binary xml file.\n\n      The record parser is used to parse a binary xml file,\n      and it allows to parse and display the record.\n\n      The record parser is a recursive function,\n      which can parse and display the record.\n\n      '''\n\n      def __init__(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n          \n          return self._keys\n\n      def read(self):\n          \n          line = self._file.readline()\n          if not line:\n              return None\n          record, = line.split(None, 1)\n          record = record.strip()\n          self._keys = []\n          return record\n\n      def write(self, record):\n          \n          self._file.write(record + '\\n')\n\n\nclass RecordParser(object):\n      '''A class that parses a binary xml file.\n\n      The record parser is used to parse a binary xml file,\n      and it allows to parse and display the record.\n\n      The record parser is a recursive function,\n      which can parse and display the record.\n\n      '''\n\n      def __init__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          if protocol_version is None:\n              protocol_version = cls.default_protocol_version\n          return {\n              version: handler\n              for version, handler in cls._protocol_handlers.items()\n              if version == protocol_version\n          }\n\n      @classmethod\n      def get_handler(cls, version, id):\n          \n          return cls._protocol_handlers.get(version, None)\n\n      @classmethod\n      def get_default_protocol_version(cls):\n          \n          return cls.default_protocol_version\n\n      @classmethod\n      def get_default_handler(cls):\n          '''Return the"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          if protocol_version is None:\n              protocol_version = cls.default_protocol_version\n          return {\n              version: handler\n              for version, handler in cls._protocol_handlers.items()\n              if version == protocol_version\n          }\n\n      @classmethod\n      def get_handler(cls, version, id):\n          \n          return cls._protocol_handlers.get(version, None)\n\n      @classmethod\n      def get_default_protocol_version(cls):\n          \n          return cls.default_protocol_version\n\n      @classmethod\n      def get_default_handler(cls):\n          '''Return the", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n      \n      def decorator(f):\n          def wrapper(obj, *args, **kwargs):\n              obj.metadata = metadata\n              obj.timeout = timeout\n              return f(obj, *args, **kwargs)\n          return wrapper\n      return decorator\n\ndef add_user(user):\n      \n      user.name = input(\"Enter name: \")\n      user.email = input(\"Enter email: \")\n      user.password = input(\"Enter password: \")\n      user.save()\n      return user\n\ndef add_book(metadata, book):\n      \n      book.metadata = metadata\n      book.title = input(\"Enter title: \")\n      book.author"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n      \n      def decorator(f):\n          def wrapper(obj, *args, **kwargs):\n              obj.metadata = metadata\n              obj.timeout = timeout\n              return f(obj, *args, **kwargs)\n          return wrapper\n      return decorator\n\ndef add_user(user):\n      \n      user.name = input(\"Enter name: \")\n      user.email = input(\"Enter email: \")\n      user.password = input(\"Enter password: \")\n      user.save()\n      return user\n\ndef add_book(metadata, book):\n      \n      book.metadata = metadata\n      book.title = input(\"Enter title: \")\n      book.author", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n          \n          return self.index(key, start=1)\n\n      def iterview(self):\n          \n          return iter(self._items)\n\n      def iterkeys(self):\n          \n          return iter(self._keys)\n\n      def keys(self):\n          \n          return list(self._keys)\n\n      def items(self):\n          \n          return list(self._items)\n\n      def iteritems(self):\n          \n          return iter(self._items)\n\n      def itervalues(self):\n          '''Return an iterator over"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n          \n          return self.index(key, start=1)\n\n      def iterview(self):\n          \n          return iter(self._items)\n\n      def iterkeys(self):\n          \n          return iter(self._keys)\n\n      def keys(self):\n          \n          return list(self._keys)\n\n      def items(self):\n          \n          return list(self._items)\n\n      def iteritems(self):\n          \n          return iter(self._items)\n\n      def itervalues(self):\n          '''Return an iterator over", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              keys = (keys, )\n          return self.env['mail.message'].sudo().read(keys, load='_classic_read')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n          \n          if len(keys) == 1 and isinstance(keys[0], int):\n              keys = (keys, )\n          return self.env['mail.message'].sudo().read(keys, load='_classic_read')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n          \n          if len(keys) > 1:\n              raise NotImplementedError(\"The data() method is deprecated\")\n          elif len(keys) == 1:\n              raise NotImplementedError(\"The data() method is deprecated\")\n          else:\n              index = keys[0]\n          if index is None:\n              return dict(self)\n          else:\n              return dict(self[index])\n\nclass Record:\n      \n      def __init__(self, *args, **kwargs):\n          self.data = {}\n          self.args = args\n          self.kwargs = kwargs\n      def"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n          \n          if len(keys) > 1:\n              raise NotImplementedError(\"The data() method is deprecated\")\n          elif len(keys) == 1:\n              raise NotImplementedError(\"The data() method is deprecated\")\n          else:\n              index = keys[0]\n          if index is None:\n              return dict(self)\n          else:\n              return dict(self[index])\n\nclass Record:\n      \n      def __init__(self, *args, **kwargs):\n          self.data = {}\n          self.args = args\n          self.kwargs = kwargs\n      def", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n          \n          self._data = self._data[-2:]\n          return struct.unpack('<H', self._data)[0]\n\n\n\n      def read(self, size):\n          \n          if len(self._data) < size:\n              raise IndexError(\"The buffer is empty.\")\n          if len(self._data) < size + 4:\n              self._data += struct.pack('<H', self.pop_u16())\n          return self._data[:size]\n\n\n      def read_u16(self):\n          \n          return struct.unpack('<H', self._data[:2])[0]\n\n      def read_u32(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n          \n          self._data = self._data[-2:]\n          return struct.unpack('<H', self._data)[0]\n\n\n\n      def read(self, size):\n          \n          if len(self._data) < size:\n              raise IndexError(\"The buffer is empty.\")\n          if len(self._data) < size + 4:\n              self._data += struct.pack('<H', self.pop_u16())\n          return self._data[:size]\n\n\n      def read_u16(self):\n          \n          return struct.unpack('<H', self._data[:2])[0]\n\n      def read_u32(self", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n          \n          self.outputs.discard(n, qid, **handlers)\n          self.hydration_hooks.discard(n, qid, **handlers)\n          self.dehydration_hooks.discard(n, qid, **handlers)\n\n      def discard_all(self, n=-1, qid=-1, **handlers):\n          \n          self.outputs.discard_all(n, qid, **handlers)\n          self.hydration_hooks.discard_all(n, qid, **handlers)\n          self.dehydration_hooks.discard_all(n, qid, **handlers)\n\n      def _handle_hydration_message(self, msg):\n          ''"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                  hydration_hooks=None, **handlers):\n          \n          self.outputs.discard(n, qid, **handlers)\n          self.hydration_hooks.discard(n, qid, **handlers)\n          self.dehydration_hooks.discard(n, qid, **handlers)\n\n      def discard_all(self, n=-1, qid=-1, **handlers):\n          \n          self.outputs.discard_all(n, qid, **handlers)\n          self.hydration_hooks.discard_all(n, qid, **handlers)\n          self.dehydration_hooks.discard_all(n, qid, **handlers)\n\n      def _handle_hydration_message(self, msg):\n          ''", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n                db=None, imp_user=None, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n          \n          if handlers is None:\n              handlers = default_handlers\n          handlers['begin'] = self.begin\n          if mode is not None:\n              handlers['begin'](mode)\n\n          if timeout is None:\n              timeout = self.timeout\n          if mode is not None:\n              handlers['begin'](mode, timeout)\n\n          if db is None:\n              db = self.db\n\n          if metadata is None:\n              metadata = self.metadata\n\n          if metadata is not None:\n              handlers['begin'](metadata)\n\n          if metadata is not None:\n              handlers['begin'](db, metadata)\n\n          if not (metadata or db):\n              return\n\n          if"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n                db=None, imp_user=None, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n          \n          if handlers is None:\n              handlers = default_handlers\n          handlers['begin'] = self.begin\n          if mode is not None:\n              handlers['begin'](mode)\n\n          if timeout is None:\n              timeout = self.timeout\n          if mode is not None:\n              handlers['begin'](mode, timeout)\n\n          if db is None:\n              db = self.db\n\n          if metadata is None:\n              metadata = self.metadata\n\n          if metadata is not None:\n              handlers['begin'](metadata)\n\n          if metadata is not None:\n              handlers['begin'](db, metadata)\n\n          if not (metadata or db):\n              return\n\n          if", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n      \n      return round(n/2)\n\ndef round_half_to_even_simple(n):\n      \n      return round(n*(1/2))\n\ndef round_half_to_even_simple_again(n):\n      '''>>> round_half_to"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n      \n      return round(n/2)\n\ndef round_half_to_even_simple(n):\n      \n      return round(n*(1/2))\n\ndef round_half_to_even_simple_again(n):\n      '''>>> round_half_to", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n      \n      if name in fields:\n          return Point\n      elif name in srid_map:\n          return PointAdapter(Point, srid_map[name])\n      elif name == 'geom':\n          return GeometryAdapter(ogr.Geometry(ogr.wkbPoint), srid_map[name])\n      else:\n          raise ValueError('Unknown field used for %s' % name)\n\nclass OGRGeomType(GMLAdapter):\n      def __init__(self, type, srid_map):\n          self.type = type\n          self.srid_map = srid_map\n\n      def geometry_type(self):\n          return self.type\n\n      def geometry_type_name(self):\n          return self.type\n\nclass GeometryAdapter(GMLAdapter):\n      def __init__("], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n      \n      if name in fields:\n          return Point\n      elif name in srid_map:\n          return PointAdapter(Point, srid_map[name])\n      elif name == 'geom':\n          return GeometryAdapter(ogr.Geometry(ogr.wkbPoint), srid_map[name])\n      else:\n          raise ValueError('Unknown field used for %s' % name)\n\nclass OGRGeomType(GMLAdapter):\n      def __init__(self, type, srid_map):\n          self.type = type\n          self.srid_map = srid_map\n\n      def geometry_type(self):\n          return self.type\n\n      def geometry_type_name(self):\n          return self.type\n\nclass GeometryAdapter(GMLAdapter):\n      def __init__(", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          return wrapper\n      return decorator\n\n\ndef deprecated_args(message, *deprecated_args):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          for deprecated_arg in deprecated_args:\n              deprecated_arg(*args, **kwargs)\n          return wrapper\n     "], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          return wrapper\n      return decorator\n\n\ndef deprecated_args(message, *deprecated_args):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              warnings.warn(message, DeprecationWarning, stacklevel=2)\n              return func(*args, **kwargs)\n          for deprecated_arg in deprecated_args:\n              deprecated_arg(*args, **kwargs)\n          return wrapper\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n      \n      if code == 'R' or code == 'r':\n          return 'R'\n      elif code == 'R-R' or code == 'r-r':\n          return 'R-R'\n      elif code == 'R-R-R' or code == 'r-r-r':\n          return 'R-R-R'\n      elif code == 'R-R-R-R' or code == 'r-r-r-r':\n          return 'R-R-R-R'\n      elif code == 'R-R-R-R-R' or code == 'r-r-r-r-r':\n          return 'R-R-R-R-R'\n      elif code == 'R-R-R-R-R-R' or code == 'r-r-r-"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n      \n      if code == 'R' or code == 'r':\n          return 'R'\n      elif code == 'R-R' or code == 'r-r':\n          return 'R-R'\n      elif code == 'R-R-R' or code == 'r-r-r':\n          return 'R-R-R'\n      elif code == 'R-R-R-R' or code == 'r-r-r-r':\n          return 'R-R-R-R'\n      elif code == 'R-R-R-R-R' or code == 'r-r-r-r-r':\n          return 'R-R-R-R-R'\n      elif code == 'R-R-R-R-R-R' or code == 'r-r-r-", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n          cmd: tuple[str,...],\n          varargs: Sequence[str],\n          *,\n          color: bool = False,\n          target_concurrency: int = 1,\n          _max_length: int = _get_platform_max_length(),\n          **kwargs: Any,\n) -> tuple[int, bytes]:\n      \n      args: list[str] = []\n      for arg in varargs:\n          args.append(arg)\n      args.append(cmd)\n      if color:\n          args.append(f'{sys.platform}-{_get_platform_name()}-{os.getpid()}')\n      return _run_xargs(args, target_concurrency, _max_length, **kwargs)\n\n\ndef _run_xargs(\n      args: list[str],\n      concurrency: int,\n      max_length: int,\n      **kwargs: Any,\n) -> Tuple[int, bytes]:\n      \n      tasks: list[asyncio.Task] = []\n      for arg in args:\n          tasks."], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n          cmd: tuple[str,...],\n          varargs: Sequence[str],\n          *,\n          color: bool = False,\n          target_concurrency: int = 1,\n          _max_length: int = _get_platform_max_length(),\n          **kwargs: Any,\n) -> tuple[int, bytes]:\n      \n      args: list[str] = []\n      for arg in varargs:\n          args.append(arg)\n      args.append(cmd)\n      if color:\n          args.append(f'{sys.platform}-{_get_platform_name()}-{os.getpid()}')\n      return _run_xargs(args, target_concurrency, _max_length, **kwargs)\n\n\ndef _run_xargs(\n      args: list[str],\n      concurrency: int,\n      max_length: int,\n      **kwargs: Any,\n) -> Tuple[int, bytes]:\n      \n      tasks: list[asyncio.Task] = []\n      for arg in args:\n          tasks.", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n      \n      import random\n      return list(random.sample(seq, len(seq)))\n\n\ndef _normalize(seq: Sequence[str]) -> str:\n      \n      return ''.join(\n          c for c in seq if c in string.ascii_letters + string.digits\n          ).lower()\n\n\nclass Data(object):\n      '''\n      A collection of texts and their labels.\n\n      Attributes\n      ----------\n      texts : iterable of list of str\n          A list of texts.\n      labels : list of str\n          A list of labels.\n      '''\n\n      def __init__(self, texts: Iterable[list], labels: Iterable[str]):\n          self.texts = texts\n          self.labels"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n      \n      import random\n      return list(random.sample(seq, len(seq)))\n\n\ndef _normalize(seq: Sequence[str]) -> str:\n      \n      return ''.join(\n          c for c in seq if c in string.ascii_letters + string.digits\n          ).lower()\n\n\nclass Data(object):\n      '''\n      A collection of texts and their labels.\n\n      Attributes\n      ----------\n      texts : iterable of list of str\n          A list of texts.\n      labels : list of str\n          A list of labels.\n      '''\n\n      def __init__(self, texts: Iterable[list], labels: Iterable[str]):\n          self.texts = texts\n          self.labels", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short_version_version(s: str) -> tuple[int,...]:\n      \n      return"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short_version(s: str) -> tuple[int,...]:\n      \n      return tuple(map(int, s.split('.')))\n\n\ndef parse_version_short_version_version(s: str) -> tuple[int,...]:\n      \n      return", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      \n      cmd = cmd.replace('(', '(').replace(')', ')')\n      cmd = cmd.replace(';', ';').replace('\\\\', '\\\\').replace('\"', '\"').replace(\"'\", \"\")\n      return cmd\n\n\ndef split_cmd(cmd: str) -> tuple[str,...]:\n      \n      return cmd.split(), cmd[len(cmd) :]\n\n\ndef split_cmd_args(cmd: str) -> tuple[str,...]:\n      \n      return split_cmd(cmd)[0], split_cmd(cmd)[1]\n\n\ndef normalize_args(args: tuple[str,...]) -> tuple[str"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str,...]) -> tuple[str,...]:\n      \n      cmd = cmd.replace('(', '(').replace(')', ')')\n      cmd = cmd.replace(';', ';').replace('\\\\', '\\\\').replace('\"', '\"').replace(\"'\", \"\")\n      return cmd\n\n\ndef split_cmd(cmd: str) -> tuple[str,...]:\n      \n      return cmd.split(), cmd[len(cmd) :]\n\n\ndef split_cmd_args(cmd: str) -> tuple[str,...]:\n      \n      return split_cmd(cmd)[0], split_cmd(cmd)[1]\n\n\ndef normalize_args(args: tuple[str,...]) -> tuple[str", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n      \n      def _cached(func):\n          @functools.wraps(func)\n          def _wrapper(cache, *args, **kwargs):\n              try:\n                  return cache[key(args, kwargs)]\n              except KeyError:\n                  cache[key] = result = func(args, kwargs)\n                  return result\n          return _wrapper\n      return _cached\n\nclass Saver(object):\n      '''A class that remembers and saves a dictionary of objects to disk.\n\n      The dictionary is kept in a file specified by the `filename` argument.\n      The file is opened in 'w' mode ('w' opens for writing, 'r' opens for\n      reading).    The dictionary is automatically created by calling the\n      `save()` method.\n\n      The dictionary can be saved to disk with the `save()` method"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n      \n      def _cached(func):\n          @functools.wraps(func)\n          def _wrapper(cache, *args, **kwargs):\n              try:\n                  return cache[key(args, kwargs)]\n              except KeyError:\n                  cache[key] = result = func(args, kwargs)\n                  return result\n          return _wrapper\n      return _cached\n\nclass Saver(object):\n      '''A class that remembers and saves a dictionary of objects to disk.\n\n      The dictionary is kept in a file specified by the `filename` argument.\n      The file is opened in 'w' mode ('w' opens for writing, 'r' opens for\n      reading).    The dictionary is automatically created by calling the\n      `save()` method.\n\n      The dictionary can be saved to disk with the `save()` method", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n      \n      def wrapper(func):\n          wrapper.func = func\n          wrapper.ttl = ttl\n          wrapper.maxsize = maxsize\n          wrapper.typed = typed\n          wrapper.timer = timer\n\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              memo = LRU(maxsize)\n\n              try:\n                  for item in memo.cache[func]:\n                      result = func(*args, **kwargs)\n                      yield result\n              except KeyError:\n                  pass\n\n              for item in memo.cache[func]:\n                  result = func(*args, **kwargs)\n                  yield result\n                  if item[0] is not None:\n                      item[0].ttl -= timer()\n                  if item[1] is not None:\n                      item[1].ttl -= timer"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n      \n      def wrapper(func):\n          wrapper.func = func\n          wrapper.ttl = ttl\n          wrapper.maxsize = maxsize\n          wrapper.typed = typed\n          wrapper.timer = timer\n\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              memo = LRU(maxsize)\n\n              try:\n                  for item in memo.cache[func]:\n                      result = func(*args, **kwargs)\n                      yield result\n              except KeyError:\n                  pass\n\n              for item in memo.cache[func]:\n                  result = func(*args, **kwargs)\n                  yield result\n                  if item[0] is not None:\n                      item[0].ttl -= timer()\n                  if item[1] is not None:\n                      item[1].ttl -= timer", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              if len(func.cache) < maxsize:\n                  func.cache.append(args)\n                  if typed:\n                      return func(*args, **kwargs)\n                  else:\n                      return func(*args, **kwargs)\n              else:\n                  return func(*args, **kwargs)\n          wrapper.cache = []\n          return wrapper\n      return decorator\n\n\ndef mr_cache(maxsize=128, typed=False):\n      '''Decorator to wrap a function with a memoizing callable that saves up to `maxsize` results based on a Most Recently Used (MRU"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          @functools.wraps(func)\n          def wrapper(*args, **kwargs):\n              if len(func.cache) < maxsize:\n                  func.cache.append(args)\n                  if typed:\n                      return func(*args, **kwargs)\n                  else:\n                      return func(*args, **kwargs)\n              else:\n                  return func(*args, **kwargs)\n          wrapper.cache = []\n          return wrapper\n      return decorator\n\n\ndef mr_cache(maxsize=128, typed=False):\n      '''Decorator to wrap a function with a memoizing callable that saves up to `maxsize` results based on a Most Recently Used (MRU", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          cache = LRUCache(maxsize=maxsize, typed=typed)\n          def wrapper(*args, **kwargs):\n              try:\n                  return cache[args]\n              except KeyError:\n                  result = cache[args] = func(*args, **kwargs)\n                  return result\n          wrapper.__name__ = func.__name__\n          wrapper.__doc__ = func.__doc__\n          return wrapper\n      return decorator\n\ndef lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          cache = LRUCache(maxsize=maxsize, typed=ty"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          cache = LRUCache(maxsize=maxsize, typed=typed)\n          def wrapper(*args, **kwargs):\n              try:\n                  return cache[args]\n              except KeyError:\n                  result = cache[args] = func(*args, **kwargs)\n                  return result\n          wrapper.__name__ = func.__name__\n          wrapper.__doc__ = func.__doc__\n          return wrapper\n      return decorator\n\ndef lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          cache = LRUCache(maxsize=maxsize, typed=ty", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = LRUcache(maxsize, typed=typed)\n              try:\n                  return memo[args, kwargs]\n              except KeyError:\n                  result = memoize(func, args, kwargs)\n                  return result\n          wrapper.cache_info = func.cache_info\n          wrapper.cache_clear = func.cache_clear\n          return wrapper\n      return decorator\n\ndef lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = LRUcache(maxsize,"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = LRUcache(maxsize, typed=typed)\n              try:\n                  return memo[args, kwargs]\n              except KeyError:\n                  result = memoize(func, args, kwargs)\n                  return result\n          wrapper.cache_info = func.cache_info\n          wrapper.cache_clear = func.cache_clear\n          return wrapper\n      return decorator\n\ndef lru_cache(maxsize=128, typed=False):\n      \n      def decorator(func):\n          def wrapper(*args, **kwargs):\n              memo = LRUcache(maxsize,", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n          \n          return self.items.popitem()\n\n      def clear(self):\n          \n          self.items = {}\n\n      def __contains__(self, key):\n          return key in self.items\n\n      def __iter__(self):\n          return iter(self.items)\n\n      def __len__(self):\n          return len(self.items)\n\n      def __repr__(self):\n          return repr(self.items)\n\n\nclass MutableMapping(Mutable, dict):\n      '''A Mutable version of dict that supports certain set operations.\n\n      * popitem(key, /)\n      * pop(key, /)\n      * clear()\n      * copy()\n      * fromkeys(seq[, v])\n      * items(), keys()\n      * values(), values"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n          \n          return self.items.popitem()\n\n      def clear(self):\n          \n          self.items = {}\n\n      def __contains__(self, key):\n          return key in self.items\n\n      def __iter__(self):\n          return iter(self.items)\n\n      def __len__(self):\n          return len(self.items)\n\n      def __repr__(self):\n          return repr(self.items)\n\n\nclass MutableMapping(Mutable, dict):\n      '''A Mutable version of dict that supports certain set operations.\n\n      * popitem(key, /)\n      * pop(key, /)\n      * clear()\n      * copy()\n      * fromkeys(seq[, v])\n      * items(), keys()\n      * values(), values", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n          \n          return self.__dict__.setdefault(key, default)\n\n      def __contains__(self, key):\n          return key in self.__dict__\n\n      def __len__(self):\n          return len(self.__dict__)\n\n      def __repr__(self):\n          return repr(self.__dict__)\n\n      def __getitem__(self, key):\n          return self.__dict__[key]\n\n      def __setitem__(self, key, value):\n          self.__dict__[key] = value\n\n      def get(self, key, default=None):\n          if key in self:\n              return self[key]\n          else:\n              return default\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n          \n          return self.__dict__.setdefault(key, default)\n\n      def __contains__(self, key):\n          return key in self.__dict__\n\n      def __len__(self):\n          return len(self.__dict__)\n\n      def __repr__(self):\n          return repr(self.__dict__)\n\n      def __getitem__(self, key):\n          return self.__dict__[key]\n\n      def __setitem__(self, key, value):\n          self.__dict__[key] = value\n\n      def get(self, key, default=None):\n          if key in self:\n              return self[key]\n          else:\n              return default\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n          \n          try:\n              return self[key]\n          except KeyError:\n              return default\n\n      def __setitem__(self, key, value):\n          self.data[key] = value\n          self.update(key, value)\n\n      def __delitem__(self, key):\n          del self.data[key]\n          self.update(key, None)\n\n      def clear(self):\n          self.data.clear()\n          self.update(None, None)\n\n      def update(self, key, value):\n          self.data[key] = value\n          if key in self:\n              self.data.move_to_end(key)\n\n      def keys(self):\n          return self.data.keys()\n\n      def values(self):\n          return self.data.values()\n\n      def items(self):\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n          \n          try:\n              return self[key]\n          except KeyError:\n              return default\n\n      def __setitem__(self, key, value):\n          self.data[key] = value\n          self.update(key, value)\n\n      def __delitem__(self, key):\n          del self.data[key]\n          self.update(key, None)\n\n      def clear(self):\n          self.data.clear()\n          self.update(None, None)\n\n      def update(self, key, value):\n          self.data[key] = value\n          if key in self:\n              self.data.move_to_end(key)\n\n      def keys(self):\n          return self.data.keys()\n\n      def values(self):\n          return self.data.values()\n\n      def items(self):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n      \n      def cachedmethod(fn):\n          cache_key = (key, fn.__name__)\n          if cache_key not in cache:\n              cache[cache_key] = fn\n              if lock:\n                  lock.acquire()\n                  try:\n                      cache[cache_key] = fn\n                  finally:\n                      lock.release()\n          return cache[cache_key]\n      return cachedmethod\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n      \n      def cachedmethod(fn):\n          cache_key = (key, fn.__name__)\n          if cache_key not in cache:\n              cache[cache_key] = fn\n              if lock:\n                  lock.acquire()\n                  try:\n                      cache[cache_key] = fn\n                  finally:\n                      lock.release()\n          return cache[cache_key]\n      return cachedmethod\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod\n      def extostr(cls, e, max_level=30, max_path_level=5):\n          \n          output = []\n          if e.args:\n              output.append(e.args[0])\n          if e.args and (len(e.args) > 1):\n              output.append(str(e.args[1]))\n          if e.args and (len(e.args) > 2):\n              output.append(str(e.args[2]))\n          if e.args and (len(e.args) > 3):\n              output.append(str(e.args[3]))\n          if e.args and (len(e.args) > 4):\n              output.append(str(e.args[4]))\n          if e.args and (len(e.args) > 5):\n              output.append(str(e.args[5]))\n          if e.args and (len"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n      def extostr(cls, e, max_level=30, max_path_level=5):\n          \n          output = []\n          if e.args:\n              output.append(e.args[0])\n          if e.args and (len(e.args) > 1):\n              output.append(str(e.args[1]))\n          if e.args and (len(e.args) > 2):\n              output.append(str(e.args[2]))\n          if e.args and (len(e.args) > 3):\n              output.append(str(e.args[3]))\n          if e.args and (len(e.args) > 4):\n              output.append(str(e.args[4]))\n          if e.args and (len(e.args) > 5):\n              output.append(str(e.args[5]))\n          if e.args and (len", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod\n      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n          \n          with open(file_name, 'wb') as f:\n              f.write(text_buffer.encode(encoding))\n          if overwrite:\n              os.remove(file_name)\n\nclass FileObjectEncoder(object):\n      def __init__(self, file_object, encoding):\n          self.file_object = file_object\n          self.encoding = encoding\n          self.buffer = bytearray()\n\n      def write(self, text_buffer):\n          try:\n              self.buffer.extend(text_buffer.encode(self.encoding))\n          except UnicodeEncodeError:\n              self.file_object.write(text_buffer.encode(self.encoding))\n\n      def flush(self):\n          self.file_object.flush()\n          self.buffer.clear()\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n      def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n          \n          with open(file_name, 'wb') as f:\n              f.write(text_buffer.encode(encoding))\n          if overwrite:\n              os.remove(file_name)\n\nclass FileObjectEncoder(object):\n      def __init__(self, file_object, encoding):\n          self.file_object = file_object\n          self.encoding = encoding\n          self.buffer = bytearray()\n\n      def write(self, text_buffer):\n          try:\n              self.buffer.extend(text_buffer.encode(self.encoding))\n          except UnicodeEncodeError:\n              self.file_object.write(text_buffer.encode(self.encoding))\n\n      def flush(self):\n          self.file_object.flush()\n          self.buffer.clear()\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod\n      def file_to_textbuffer(file_name, encoding):\n          \n          f = open(file_name, \"r\", encoding=encoding)\n          buf_text = f.read()\n          f.close()\n          return buf_text\n\n      def get_file(self, file_name):\n          \n          if self.file_exists(file_name):\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n          return None\n\n      def get_file_path(self, file_name):\n          \n          if self.file_exists(file_name):\n              return self.get_file_fullpath(file_name)\n          return None\n\n      def get_file_fullpath(self, file_name):\n          '''Get a file path by its name"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n      def file_to_textbuffer(file_name, encoding):\n          \n          f = open(file_name, \"r\", encoding=encoding)\n          buf_text = f.read()\n          f.close()\n          return buf_text\n\n      def get_file(self, file_name):\n          \n          if self.file_exists(file_name):\n              return self.file_to_textbuffer(file_name, \"utf-8\")\n          return None\n\n      def get_file_path(self, file_name):\n          \n          if self.file_exists(file_name):\n              return self.get_file_fullpath(file_name)\n          return None\n\n      def get_file_fullpath(self, file_name):\n          '''Get a file path by its name", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod\n      def is_file_exist(file_name):\n          \n          return os.path.isfile(file_name)\n\n      def _load_config(self):\n          \n          config = configparser.ConfigParser()\n          config.read(self.config_file)\n          if config.has_section(\"database\"):\n              self.db_url = config[\"database\"][\"url\"]\n          else:\n              raise FileNotFoundError(\"Config file is not found.\")\n          if config.has_section(\"user\"):\n              self.user = config[\"user\"][\"username\"]\n          else:\n              raise FileNotFoundError(\"Config file is not found.\")\n\n      def _load_model(self):\n          \n          model = load_model(self.model_file)\n          self.model = model\n          self.model.summary()"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n      def is_file_exist(file_name):\n          \n          return os.path.isfile(file_name)\n\n      def _load_config(self):\n          \n          config = configparser.ConfigParser()\n          config.read(self.config_file)\n          if config.has_section(\"database\"):\n              self.db_url = config[\"database\"][\"url\"]\n          else:\n              raise FileNotFoundError(\"Config file is not found.\")\n          if config.has_section(\"user\"):\n              self.user = config[\"user\"][\"username\"]\n          else:\n              raise FileNotFoundError(\"Config file is not found.\")\n\n      def _load_model(self):\n          \n          model = load_model(self.model_file)\n          self.model = model\n          self.model.summary()", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod\n      def _reset_logging(cls):\n          \n          logging.basicConfig(level=logging.INFO,\n                              format='%(asctime)s - %(levelname)s - %(message)s',\n                              datefmt='%d-%b-%y %H:%M:%S')\n          logger = logging.getLogger(__name__)\n          logger.handlers = []\n          logger.setLevel(logging.INFO)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod\n      def _reset_logging(cls):\n          \n          logging.basicConfig(level=logging.INFO,\n                              format='%(asctime)s - %(levelname)s - %(message)s',\n                              datefmt='%d-%b-%y %H:%M:%S')\n          logger = logging.getLogger(__name__)\n          logger.handlers = []\n          logger.setLevel(logging.INFO)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n          \n          return self.__class__\n\n      def _getSupportedFeatures(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is a list of strings, each of which is a suffix of the\n          implementation's feature name.\n          '''\n          return []\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n          \n          return self.__class__\n\n      def _getSupportedFeatures(self):\n          '''Define this to return the implementation's features that are supported.\n\n          This is a list of strings, each of which is a suffix of the\n          implementation's feature name.\n          '''\n          return []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n      \n      if not orderings:\n          return orderings\n      if len(orderings) > 1:\n          first = orderings[0]\n          for order in orderings[1:]:\n              if order < first:\n                  orderings.insert(0, order)\n              elif order > first:\n                  orderings.append(order)\n              else:\n                  pass\n      return orderings\n\n\ndef _generate_order_markers(orderings):\n      '''\n      Generate the markers for a list of orderings.\n      '''\n      if not order"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n      \n      if not orderings:\n          return orderings\n      if len(orderings) > 1:\n          first = orderings[0]\n          for order in orderings[1:]:\n              if order < first:\n                  orderings.insert(0, order)\n              elif order > first:\n                  orderings.append(order)\n              else:\n                  pass\n      return orderings\n\n\ndef _generate_order_markers(orderings):\n      '''\n      Generate the markers for a list of orderings.\n      '''\n      if not order", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n\ndef directlyProvidedByCallable(object):\n \n\ndef getSettersFor(object):\n \n\ndef getSettersForCallable(object):\n \n\ndef setSettersFor(object):\n \n\ndef setSettersForCallable(object):\n \n\ndef getMethodsFor(object):\n \n\ndef getMethodsForCallable(object):\n \n\ndef setMethodsFor(object):\n '''"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n\ndef directlyProvidedByCallable(object):\n \n\ndef getSettersFor(object):\n \n\ndef getSettersForCallable(object):\n \n\ndef setSettersFor(object):\n \n\ndef setSettersForCallable(object):\n \n\ndef getMethodsFor(object):\n \n\ndef getMethodsForCallable(object):\n \n\ndef setMethodsFor(object):\n '''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n      \n      return min(classes, key=lambda c: len(c.bases))\n\ndef minimalBases(classes):\n      \n      return min(classes, key=len)\n\ndef findSubclasses(cls):\n      \n      return [c for c in cls.__subclasses__() if c is not cls]\n\ndef findSubclasses(cls):\n      \n      return [c for c in cls.__subclasses__() if c is not cls]\n\nclass BaseObject(object):\n      \n\n      def __init__(self"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n      \n      return min(classes, key=lambda c: len(c.bases))\n\ndef minimalBases(classes):\n      \n      return min(classes, key=len)\n\ndef findSubclasses(cls):\n      \n      return [c for c in cls.__subclasses__() if c is not cls]\n\ndef findSubclasses(cls):\n      \n      return [c for c in cls.__subclasses__() if c is not cls]\n\nclass BaseObject(object):\n      \n\n      def __init__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n if not all:\n    names = [a for a in self.__dict__.keys() if a[0]!= '_']\n    descriptions = [self.__dict__[a] for a in names]\n else:\n    names = []\n    descriptions = []\n    for a in self.__dict__.keys():\n     if a[0]!= '_':\n      names.append(a)\n      descriptions.append(self.__dict__[a])\n\n if not all:\n    names.sort()\n    descriptions.sort()\n    return ', '.join(names), ', '.join(descriptions)\n\ndef _getMethod(self, name):\n    if not hasattr(self, name):\n       raise AttributeError, name\n    meth = getattr(self, name)"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n if not all:\n    names = [a for a in self.__dict__.keys() if a[0]!= '_']\n    descriptions = [self.__dict__[a] for a in names]\n else:\n    names = []\n    descriptions = []\n    for a in self.__dict__.keys():\n     if a[0]!= '_':\n      names.append(a)\n      descriptions.append(self.__dict__[a])\n\n if not all:\n    names.sort()\n    descriptions.sort()\n    return ', '.join(names), ', '.join(descriptions)\n\ndef _getMethod(self, name):\n    if not hasattr(self, name):\n       raise AttributeError, name\n    meth = getattr(self, name)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \n '''\n return self._names\n '''\n def __getattribute__(self, name):\n    \n    return _getattr(self, name)\n '''\n def __setattr__(self, name, value):\n    \n    return _setattr(self, name, value)\n '''\n def __delattr__(self, name):\n    \n    return _delattr(self, name)\n '''\n def __call__(self, *args, **kwds):\n    \n    return _call(self, args, kwds)\n '''\n def __str__(self):\n    '''Return the representation"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \n '''\n return self._names\n '''\n def __getattribute__(self, name):\n    \n    return _getattr(self, name)\n '''\n def __setattr__(self, name, value):\n    \n    return _setattr(self, name, value)\n '''\n def __delattr__(self, name):\n    \n    return _delattr(self, name)\n '''\n def __call__(self, *args, **kwds):\n    \n    return _call(self, args, kwds)\n '''\n def __str__(self):\n    '''Return the representation", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n      \n      if output is None:\n          output = []\n      if not isinstance(sequence, list):\n          sequence = [sequence]\n      for x in sequence:\n          if isinstance(x, (tuple, list)):\n              _normalizeargs(x, output)\n          else:\n              output.append(x)\n      return output\n\ndef _get_args(function):\n      '''\n      Return a tuple of the arguments of the function.\n      '''\n      return _normalizeargs(function.args)\n\ndef _get_kwargs(function):\n      '''\n      Return a dictionary of the keyword arguments of the function.\n      '''\n      return _normalizeargs(function.keywords)\n\ndef _get_func_name(function):\n      '''\n      Return a name for the function"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n      \n      if output is None:\n          output = []\n      if not isinstance(sequence, list):\n          sequence = [sequence]\n      for x in sequence:\n          if isinstance(x, (tuple, list)):\n              _normalizeargs(x, output)\n          else:\n              output.append(x)\n      return output\n\ndef _get_args(function):\n      '''\n      Return a tuple of the arguments of the function.\n      '''\n      return _normalizeargs(function.args)\n\ndef _get_kwargs(function):\n      '''\n      Return a dictionary of the keyword arguments of the function.\n      '''\n      return _normalizeargs(function.keywords)\n\ndef _get_func_name(function):\n      '''\n      Return a name for the function", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n      \n      try:\n          with open('/usr/local/c++/SRC/libc.cpp', 'r') as f:\n              return bool(f.readline().strip())\n      except IOError:\n          return False\n\n\n_c_optimizations = _c_optimizations_available()\n\nif _c_optimizations:\n      _COPHABI = '''#define COPHABI_HAS_OPTIMIZATION_HINT\n\nextern \"C\" {\n\n/* This section is for the C++ optimization hints */\n\n/* This section is for the C++ optimizations"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n      \n      try:\n          with open('/usr/local/c++/SRC/libc.cpp', 'r') as f:\n              return bool(f.readline().strip())\n      except IOError:\n          return False\n\n\n_c_optimizations = _c_optimizations_available()\n\nif _c_optimizations:\n      _COPHABI = '''#define COPHABI_HAS_OPTIMIZATION_HINT\n\nextern \"C\" {\n\n/* This section is for the C++ optimization hints */\n\n/* This section is for the C++ optimizations", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n      \n      return _should_optimize() or _should_use_c_optimizations()\n\n\ndef _should_optimize():\n      \n      return False\n\n\ndef _should_use_c_optimizations():\n      \n      return False\n\n\ndef _is_optimized():\n      \n      return _should_optimize() or _should_use_c_optimizations()\n\n\ndef _make_optimizer(optimizer, **kwargs):\n      if isinstance(optimizer, _Optimizer):\n          return optimizer\n      else:\n          return _Optimizer(optimizer, **kwargs)\n\n\ndef _init_optimizer(optim"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n      \n      return _should_optimize() or _should_use_c_optimizations()\n\n\ndef _should_optimize():\n      \n      return False\n\n\ndef _should_use_c_optimizations():\n      \n      return False\n\n\ndef _is_optimized():\n      \n      return _should_optimize() or _should_use_c_optimizations()\n\n\ndef _make_optimizer(optimizer, **kwargs):\n      if isinstance(optimizer, _Optimizer):\n          return optimizer\n      else:\n          return _Optimizer(optimizer, **kwargs)\n\n\ndef _init_optimizer(optim", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n      \n      return [\n          '__pyx_memoryview_without_gil',\n          '__pyx_memview_without_gil',\n          '__pyx_memview_without_gil_static',\n          '__pyx_memview_without_gil_dynamic',\n          '__pyx_memview_without_gil_dynamic_assign',\n          '__pyx_memview_without_gil_dynamic_assign_release',\n          '__pyx_memview_without_gil_dynamic_assign_no_release',\n          '__pyx_memview_without_gil_dynamic_assign_nogil',\n          '__pyx_memview_without_gil_nogil',\n          '__pyx_memview_without_gil_nogil_assign"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n      \n      return [\n          '__pyx_memoryview_without_gil',\n          '__pyx_memview_without_gil',\n          '__pyx_memview_without_gil_static',\n          '__pyx_memview_without_gil_dynamic',\n          '__pyx_memview_without_gil_dynamic_assign',\n          '__pyx_memview_without_gil_dynamic_assign_release',\n          '__pyx_memview_without_gil_dynamic_assign_no_release',\n          '__pyx_memview_without_gil_dynamic_assign_nogil',\n          '__pyx_memview_without_gil_nogil',\n          '__pyx_memview_without_gil_nogil_assign", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n      \n      return (\n          c_optimizations_required() is not None\n      )\n\n\ndef _c_optimizations_required_v1():\n      \n      return (\n          c_optimizations_required() is not None and\n          'v1' in c_optimizations_required()\n      )\n\n\ndef _c_optimizations_required_v2():\n      \n      return (\n          c_optimizations_required() is not None and\n          'v2' in c_optimizations_required()\n      )\n\n\ndef _c_optimizations_required_v3():\n      \n      return (\n          c_optimizations_required() is not None"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n      \n      return (\n          c_optimizations_required() is not None\n      )\n\n\ndef _c_optimizations_required_v1():\n      \n      return (\n          c_optimizations_required() is not None and\n          'v1' in c_optimizations_required()\n      )\n\n\ndef _c_optimizations_required_v2():\n      \n      return (\n          c_optimizations_required() is not None and\n          'v2' in c_optimizations_required()\n      )\n\n\ndef _c_optimizations_required_v3():\n      \n      return (\n          c_optimizations_required() is not None", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n          \n          self.x = np.arange(len(self.hist[0]))\n          self.y = np.arange(len(self.hist[0]))\n          self.hist_x, self.hist_y = np.histogram(self.x, bins=self.bins,\n                                                    range=self.bins_range)\n          self.hist_x = np.append(self.hist_x, np.zeros(len(self.hist[0])))\n          self.hist_y = np.append(self.hist_y, np.zeros(len(self.hist[0])))\n          self.hist_x[0] = self.hist[0][0]\n          self.hist_y[0] = self.hist[0][0]\n          self.bin_width ="], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n          \n          self.x = np.arange(len(self.hist[0]))\n          self.y = np.arange(len(self.hist[0]))\n          self.hist_x, self.hist_y = np.histogram(self.x, bins=self.bins,\n                                                    range=self.bins_range)\n          self.hist_x = np.append(self.hist_x, np.zeros(len(self.hist[0])))\n          self.hist_y = np.append(self.hist_y, np.zeros(len(self.hist[0])))\n          self.hist_x[0] = self.hist[0][0]\n          self.hist_y[0] = self.hist[0][0]\n          self.bin_width =", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n          \n          with open(self.path, \"w\", newline=\"\") as f:\n              csv_writer = csv.writer(f, delimiter=separator)\n              if header:\n                  csv_writer.writerow(header)\n              for i, row in enumerate(self.rows):\n                  csv_writer.writerow(row)\n          return self.path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n          \n          with open(self.path, \"w\", newline=\"\") as f:\n              csv_writer = csv.writer(f, delimiter=separator)\n              if header:\n                  csv_writer.writerow(header)\n              for i, row in enumerate(self.rows):\n                  csv_writer.writerow(row)\n          return self.path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self.coord_names[coord_name])\n              else:\n                  err_indices = np.arange(len(self.coord_names))\n          else:\n              err_indices = np.array([])\n          return err_indices\n\n\n      def _get_coord_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self.coord_names[coord_name])\n              else:\n                  err_indices = np.arange(len(self.coord_names))\n          else:\n              err_indices = np.array([])\n          return err_indices\n\n\n      def _get_coord_err_indices(self, coord_name):\n          \n          if coord_name in self.coord_names:\n              if self.coord_names[coord_name] in self.coord_names:\n                  err_indices = self._get_coord_err_indices(self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n          \n          context['graph_type'] = self.__class__.__name__\n          context['model'] = self.model\n          context['view'] = self.view\n          context['view_name'] = self.view_name\n          context['model_name'] = self.model_name\n          context['model_label'] = self.model_label\n          context['model_module'] = self.model_module\n          context['model_module_name'] = self.model_module_name\n          context['model_module_path'] = self.model_module_path\n          context['model_module_label'] = self.model_module_label\n          context['model_module_description'] = self.model_module_description\n          context['model_module_label_description'] = self.model_module_label_description\n          context['model"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n          \n          context['graph_type'] = self.__class__.__name__\n          context['model'] = self.model\n          context['view'] = self.view\n          context['view_name'] = self.view_name\n          context['model_name'] = self.model_name\n          context['model_label'] = self.model_label\n          context['model_module'] = self.model_module\n          context['model_module_name'] = self.model_module_name\n          context['model_module_path'] = self.model_module_path\n          context['model_module_label'] = self.model_module_label\n          context['model_module_description'] = self.model_module_description\n          context['model_module_label_description'] = self.model_module_label_description\n          context['model", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n      \n      return bins[1] - bins[0] + edges[1] - edges[0]\n\n\ndef smooth(a, b, c, d, e, f, g, h, i, j, k):\n      \n      h = (b - a) / 2 + a\n      if i == 0:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if j == 0:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if i == 1 and j == 1:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if i == 1 and j == 2 and k == 1:\n          return (f("], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n      \n      return bins[1] - bins[0] + edges[1] - edges[0]\n\n\ndef smooth(a, b, c, d, e, f, g, h, i, j, k):\n      \n      h = (b - a) / 2 + a\n      if i == 0:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if j == 0:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if i == 1 and j == 1:\n          return (f(h) - g(h)) / (c(h) - d(h))\n      if i == 1 and j == 2 and k == 1:\n          return (f(", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n      \n      return isinstance(seq, FillRequestSeq)\n\ndef is_fill_request(seq):\n      \n      return isinstance(seq, FillRequest)\n\ndef is_fill_response_seq(seq):\n      \n      return isinstance(seq, FillResponseSeq)\n\ndef is_fill_response(seq):\n      \n      return isinstance(seq, FillResponse)\n\ndef is_get_order_request_seq(seq):\n      \n      return isinstance(seq, GetOrderRequestSeq)\n\ndef is"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n      \n      return isinstance(seq, FillRequestSeq)\n\ndef is_fill_request(seq):\n      \n      return isinstance(seq, FillRequest)\n\ndef is_fill_response_seq(seq):\n      \n      return isinstance(seq, FillResponseSeq)\n\ndef is_fill_response(seq):\n      \n      return isinstance(seq, FillResponse)\n\ndef is_get_order_request_seq(seq):\n      \n      return isinstance(seq, GetOrderRequestSeq)\n\ndef is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n      \n      return obj.__class__.__name__ in {'FillRequest', 'Request'}\n\n\ndef _is_fill_request_el(obj):\n      \n      return obj.__class__.__name__ in {'FillRequest', 'Request'}\n\n\ndef _is_create_request_el(obj):\n      \n      return obj.__class__.__name__ in {'CreateRequest', 'Request'}\n\n\ndef _is_create_request_el(obj):\n      \n      return obj.__class__.__name__ in {'CreateRequest', 'Request'}\n\n\ndef _is_request_el(obj):"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n      \n      return obj.__class__.__name__ in {'FillRequest', 'Request'}\n\n\ndef _is_fill_request_el(obj):\n      \n      return obj.__class__.__name__ in {'FillRequest', 'Request'}\n\n\ndef _is_create_request_el(obj):\n      \n      return obj.__class__.__name__ in {'CreateRequest', 'Request'}\n\n\ndef _is_create_request_el(obj):\n      \n      return obj.__class__.__name__ in {'CreateRequest', 'Request'}\n\n\ndef _is_request_el(obj):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n      \n      return isinstance(obj, _run_el)\n\n\nclass _run_el(object):\n      \n      def __init__(self, func, *args):\n          self.func = func\n          self.args = args\n          self.__doc__ = func.__doc__\n\n      def __call__(self, *args, **kwargs):\n          return self.func(*self.args + args, **kwargs)\n\n      def __get__(self, obj, type=None):\n          return self.__doc__ % self.func.__name__\n\n\ndef run_el(obj, *args, **kwargs):\n      \n      return _run_el(obj, *args, **kwargs)\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n      \n      return isinstance(obj, _run_el)\n\n\nclass _run_el(object):\n      \n      def __init__(self, func, *args):\n          self.func = func\n          self.args = args\n          self.__doc__ = func.__doc__\n\n      def __call__(self, *args, **kwargs):\n          return self.func(*self.args + args, **kwargs)\n\n      def __get__(self, obj, type=None):\n          return self.__doc__ % self.func.__name__\n\n\ndef run_el(obj, *args, **kwargs):\n      \n      return _run_el(obj, *args, **kwargs)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return True\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return True\n      return False\n\n\nclass AbstractCalculator(object):\n      \n\n      def __init__(self, data_set, mode, verbose=False):\n          self.verbose = verbose\n          self.data_set = data_set\n          self.mode = mode\n          self.calculator_type = None\n          self.calculation_type = None\n          self.name = None\n          self.default_name = ''\n          self.default_description = ''\n          self.fill_function = None\n          self.compute_function = None\n          self.data_set"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n      \n      if hasattr(obj, 'fill') and callable(obj.fill):\n          return True\n      if hasattr(obj, 'compute') and callable(obj.compute):\n          return True\n      return False\n\n\nclass AbstractCalculator(object):\n      \n\n      def __init__(self, data_set, mode, verbose=False):\n          self.verbose = verbose\n          self.data_set = data_set\n          self.mode = mode\n          self.calculator_type = None\n          self.calculation_type = None\n          self.name = None\n          self.default_name = ''\n          self.default_description = ''\n          self.fill_function = None\n          self.compute_function = None\n          self.data_set", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n      \n      new = {}\n      for k, v in d1.items():\n          if k not in d2:\n              if k in new:\n                  if level == 0:\n                      new[k] = v\n                  else:\n                      new[k] += v\n              else:\n                  new[k] = v\n      return new\n\n\ndef intersects_list(l1, l2):\n      '''Return *True* if the lists are intersecting.\n\n      *l1* and *l2* are lists of comparable items.\n      '''\n      if not l1 or not l2:\n          return False\n      return intersect(l1, l2)\n\n\ndef remove_duplicates(l):\n      '''Return a copy of *l* with duplicate key removed.\n\n      >>> l1 = [1, 2, 3, 4"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n      \n      new = {}\n      for k, v in d1.items():\n          if k not in d2:\n              if k in new:\n                  if level == 0:\n                      new[k] = v\n                  else:\n                      new[k] += v\n              else:\n                  new[k] = v\n      return new\n\n\ndef intersects_list(l1, l2):\n      '''Return *True* if the lists are intersecting.\n\n      *l1* and *l2* are lists of comparable items.\n      '''\n      if not l1 or not l2:\n          return False\n      return intersect(l1, l2)\n\n\ndef remove_duplicates(l):\n      '''Return a copy of *l* with duplicate key removed.\n\n      >>> l1 = [1, 2, 3, 4", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [0]\n          if coord not in self.__hist:\n              self.__hist[0] = weight\n          else:\n              self.__hist[coord] = weight\n\n      def add(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [weight]\n          else:\n              self.__hist[coord] = weight\n\nclass Histogram(object):\n      '''A histogram is a container for a list of values.\n      It is built from an input list of values, and provides methods\n      to get the histogram values.\n      '''\n      def __init__(self, values):\n          '''Initialize the hist"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [0]\n          if coord not in self.__hist:\n              self.__hist[0] = weight\n          else:\n              self.__hist[coord] = weight\n\n      def add(self, coord, weight=1):\n          \n          if not self.__hist:\n              self.__hist = [weight]\n          else:\n              self.__hist[coord] = weight\n\nclass Histogram(object):\n      '''A histogram is a container for a list of values.\n      It is built from an input list of values, and provides methods\n      to get the histogram values.\n      '''\n      def __init__(self, values):\n          '''Initialize the hist", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n      \n      for key in labels:\n          if isinstance(key, str):\n              if not re.match(r'^[a-zA-Z0-9_]+$', key):\n                  raise ValueError('Key name %s must be a string that matches the regular expression '\n                                   '\"^[a-zA-Z0-9_]+$\"' % key)\n          else:\n              raise TypeError('Key type must be str')\n      return labels\n\n\ndef _get_labels(labels):\n      \n      return [(label.strip(), val.strip()) for label, val in labels]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n      \n      for key in labels:\n          if isinstance(key, str):\n              if not re.match(r'^[a-zA-Z0-9_]+$', key):\n                  raise ValueError('Key name %s must be a string that matches the regular expression '\n                                   '\"^[a-zA-Z0-9_]+$\"' % key)\n          else:\n              raise TypeError('Key type must be str')\n      return labels\n\n\ndef _get_labels(labels):\n      \n      return [(label.strip(), val.strip()) for label, val in labels]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n      \n      if hasattr(krake_config,'resources'):\n          return krake_config.resources.get('krake', {}).get('name_regex', None)\n\n      return None\n\n\ndef _get_resource_names(config):\n      '''Get a list of resource names from the configuration.\n\n      :param config: the config dict\n      :returns: a list of resource names\n      '''\n      resource_names = []\n      if hasattr(config,'resources'):\n          for resource in config.resources:\n              resource_names.append(resource['name'])\n\n      return resource_names\n\n\ndef _get_resource_names_from_config(config):\n      '''Get a list of resource names from the configuration.\n\n      :param config: the config dict\n      :returns: a list of"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n      \n      if hasattr(krake_config,'resources'):\n          return krake_config.resources.get('krake', {}).get('name_regex', None)\n\n      return None\n\n\ndef _get_resource_names(config):\n      '''Get a list of resource names from the configuration.\n\n      :param config: the config dict\n      :returns: a list of resource names\n      '''\n      resource_names = []\n      if hasattr(config,'resources'):\n          for resource in config.resources:\n              resource_names.append(resource['name'])\n\n      return resource_names\n\n\ndef _get_resource_names_from_config(config):\n      '''Get a list of resource names from the configuration.\n\n      :param config: the config dict\n      :returns: a list of", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex(value):\n      \n      if not validate_value(value):\n          raise ValueError('Invalid value: \"%s\"' % value)\n      return re.compile(value)\n\ndef validate_value_with_regex_dict(value):\n      \n      if not validate_value(value):\n          raise ValueError('Invalid value: \"%s\"' % value)\n      return re.compile(value)\n\ndef validate_value_with_regex_list(value):\n      \n      if not validate_value(value):"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n      \n      if value == '' or value == None:\n          return False\n      return True\n\ndef validate_value_with_regex(value):\n      \n      if not validate_value(value):\n          raise ValueError('Invalid value: \"%s\"' % value)\n      return re.compile(value)\n\ndef validate_value_with_regex_dict(value):\n      \n      if not validate_value(value):\n          raise ValueError('Invalid value: \"%s\"' % value)\n      return re.compile(value)\n\ndef validate_value_with_regex_list(value):\n      \n      if not validate_value(value):", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n      \n      if not re.search(regex, key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):\n      \n      if not re.search(r'^[a-zA-Z0-9_.-]+$', key):\n          raise ValueError('Invalid key')\n\ndef validate_value(value):\n      \n      if not re.search(regex, value):\n          raise ValueError('Invalid value')\n\ndef validate_value(value):\n      \n      if not re.search(r'^[a-zA-Z0-9_.-]+$', value):\n          raise ValueError('Invalid value')"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n      \n      if not re.search(regex, key):\n          raise ValueError('Invalid key')\n\ndef validate_key(key):\n      \n      if not re.search(r'^[a-zA-Z0-9_.-]+$', key):\n          raise ValueError('Invalid key')\n\ndef validate_value(value):\n      \n      if not re.search(regex, value):\n          raise ValueError('Invalid value')\n\ndef validate_value(value):\n      \n      if not re.search(r'^[a-zA-Z0-9_.-]+$', value):\n          raise ValueError('Invalid value')", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      \n      observer_schema_dict = {}\n      for ob_schema in manifest_dict['observers']:\n          observer_schema_dict[ob_schema] = generate_default_observer_schema_dict(\n              manifest_dict['observers'], first_level=first_level)\n      return observer_schema_dict\n\n\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      \n      observer_schema_dict = {}\n      for ob_schema in manifest_dict['observers']:\n          observer"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      \n      observer_schema_dict = {}\n      for ob_schema in manifest_dict['observers']:\n          observer_schema_dict[ob_schema] = generate_default_observer_schema_dict(\n              manifest_dict['observers'], first_level=first_level)\n      return observer_schema_dict\n\n\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n      \n      observer_schema_dict = {}\n      for ob_schema in manifest_dict['observers']:\n          observer", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      last_applied_manifest_dict = {\n          \"last_applied_manifest\": last_applied_manifest,\n      }\n      if last_applied_manifest_dict not in observer_schema.get(\"status\"):\n          observer_schema[\"status\"].append(last_applied_manifest_dict)\n      last_applied_manifest_dict = update_last_applied_manifest_dict_from_resp(\n          last_applied_manifest, observer_schema, response\n      )\n      last_applied_manifest = last_applied_manifest_dict\n      return last_applied_manifest\n\n\ndef update_last_applied_manifest_dict_from_resp(\n      last_"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      last_applied_manifest_dict = {\n          \"last_applied_manifest\": last_applied_manifest,\n      }\n      if last_applied_manifest_dict not in observer_schema.get(\"status\"):\n          observer_schema[\"status\"].append(last_applied_manifest_dict)\n      last_applied_manifest_dict = update_last_applied_manifest_dict_from_resp(\n          last_applied_manifest, observer_schema, response\n      )\n      last_applied_manifest = last_applied_manifest_dict\n      return last_applied_manifest\n\n\ndef update_last_applied_manifest_dict_from_resp(\n      last_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      if observer_schema is None:\n          observer_schema = response.get('schema', {})\n      if 'last_applied_manifest' not in observer_schema:\n          last_applied_manifest['last_applied_manifest'] = {}\n      if response.get('data', {}).get('items', None):\n          last_applied_manifest['last_applied_manifest']['items'] = response['data']['items']\n      if response.get('data', {}).get('updated_at'):\n          last_applied_manifest['last_applied_manifest']['updated_at'] = response['data']['updated_at']\n      if response.get('data', {}).get('updated_since'):\n          last_applied_man"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n      last_applied_manifest, observer_schema, response\n):\n      \n      if observer_schema is None:\n          observer_schema = response.get('schema', {})\n      if 'last_applied_manifest' not in observer_schema:\n          last_applied_manifest['last_applied_manifest'] = {}\n      if response.get('data', {}).get('items', None):\n          last_applied_manifest['last_applied_manifest']['items'] = response['data']['items']\n      if response.get('data', {}).get('updated_at'):\n          last_applied_manifest['last_applied_manifest']['updated_at'] = response['data']['updated_at']\n      if response.get('data', {}).get('updated_since'):\n          last_applied_man", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n      \n      def is_schema_required(schema):\n          return schema is not None and \"schema\" in schema\n      def is_resource_required(resource):\n          return resource in app.resources and \"resource\" in app.resources[resource] and \"schema\" in app.resources[resource][\"resource\"]\n      def is_namespaced_resource_required(resource):\n          return resource in app.resources and \"namespace\" in app.resources[resource] and \"schema\" in app.resources[resource][\"namespace\"]\n\n      return {\n          \"type\": \"object\",\n          \"properties\": {\n              \"all\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                      \"namespace\": {\"type\": \"string\"},\n                      \"resource\": {\"type\": \"string\"},\n                      \"schema\": {\"type\": \""], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n      \n      def is_schema_required(schema):\n          return schema is not None and \"schema\" in schema\n      def is_resource_required(resource):\n          return resource in app.resources and \"resource\" in app.resources[resource] and \"schema\" in app.resources[resource][\"resource\"]\n      def is_namespaced_resource_required(resource):\n          return resource in app.resources and \"namespace\" in app.resources[resource] and \"schema\" in app.resources[resource][\"namespace\"]\n\n      return {\n          \"type\": \"object\",\n          \"properties\": {\n              \"all\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                      \"namespace\": {\"type\": \"string\"},\n                      \"resource\": {\"type\": \"string\"},\n                      \"schema\": {\"type\": \"", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n \t\t \n \t\t if self.database:\n \t\t\t sql = f'{self.database}.\"{self.table}\".{sql}'\n \t\t if self.where:\n \t\t\t sql = f'{sql} WHERE {self.where}'\n \t\t if self.limit:\n \t\t\t sql = f'{sql} LIMIT {self.limit}'\n \t\t if self.offset:\n \t\t\t sql = f'{sql} OFFSET {self.offset}'\n \t\t if self.order_by:\n \t\t\t sql = f'{sql} ORDER BY {self.order_by}'\n \t\t if self.group_by:\n \t\t\t sql = f'{sql} GROUP BY {self.group_by}'\n \t\t if self.having:\n \t\t\t sql = f'{sql} HAVING {self.having}'\n\n \t\t return sql, params\n\n\nclass QueryBuilder"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n \t\t \n \t\t if self.database:\n \t\t\t sql = f'{self.database}.\"{self.table}\".{sql}'\n \t\t if self.where:\n \t\t\t sql = f'{sql} WHERE {self.where}'\n \t\t if self.limit:\n \t\t\t sql = f'{sql} LIMIT {self.limit}'\n \t\t if self.offset:\n \t\t\t sql = f'{sql} OFFSET {self.offset}'\n \t\t if self.order_by:\n \t\t\t sql = f'{sql} ORDER BY {self.order_by}'\n \t\t if self.group_by:\n \t\t\t sql = f'{sql} GROUP BY {self.group_by}'\n \t\t if self.having:\n \t\t\t sql = f'{sql} HAVING {self.having}'\n\n \t\t return sql, params\n\n\nclass QueryBuilder", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n \t\t \n \t\t if many_params is None:\n \t\t\t many_params = {}\n \t\t if isinstance(many_params, dict):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [many_params]\n \t\t return self.__format(sql, many_params)\n\n\tdef formatone(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], List[Union[str, int]]]]:\n \t\t \n \t\t return self.__format(sql, params)\n\n\tdef formatone_or(\n \t\t self"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t many_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n \t\t \n \t\t if many_params is None:\n \t\t\t many_params = {}\n \t\t if isinstance(many_params, dict):\n \t\t\t many_params = [many_params]\n \t\t if isinstance(many_params, Iterable):\n \t\t\t many_params = [many_params]\n \t\t return self.__format(sql, many_params)\n\n\tdef formatone(\n \t\t self,\n \t\t sql: AnyStr,\n \t\t params: Union[Dict[Union[str, int], Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], List[Union[str, int]]]]:\n \t\t \n \t\t return self.__format(sql, params)\n\n\tdef formatone_or(\n \t\t self", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n          \n          if path.startswith('/'):\n              return self._validate_pyfs_path(path)\n          else:\n              return self._validate_pyfs_root(path)\n\n      def read(self, path):\n          \n          return self._read(self._validate(path))\n\n      def write(self, path, content):\n          \n          self._write(self._validate(path), content)\n\n      def _validate(self, path):\n          \n          path = path.strip('/')\n          if path.startswith('/'):\n              return '/' + path\n          return path\n\n      def _validate_pyfs_root(self, path"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n          \n          if path.startswith('/'):\n              return self._validate_pyfs_path(path)\n          else:\n              return self._validate_pyfs_root(path)\n\n      def read(self, path):\n          \n          return self._read(self._validate(path))\n\n      def write(self, path, content):\n          \n          self._write(self._validate(path), content)\n\n      def _validate(self, path):\n          \n          path = path.strip('/')\n          if path.startswith('/'):\n              return '/' + path\n          return path\n\n      def _validate_pyfs_root(self, path", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n          \n          if self.valid:\n              return prefix + 'valid'\n          return prefix + 'invalid'\n\n      def __repr__(self):\n          return '<{} {}>'.format(self.__class__.__name__, self.status_str())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n          \n          if self.valid:\n              return prefix + 'valid'\n          return prefix + 'invalid'\n\n      def __repr__(self):\n          return '<{} {}>'.format(self.__class__.__name__, self.status_str())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n          \n          return self.format_log('Status:', prefix=prefix)\n\n      def get_log_str(self, prefix=''):\n          \n          return self.format_log('Log', prefix=prefix)\n\n      def get_log_line(self, prefix=''):\n          \n          return self.get_log_str(prefix=prefix)\n\n      def log_info(self, msg):\n          \n          self.verbose_logging(msg, 'info', prefix='[')\n\n      def log_warning(self, msg):\n          \n          self.verbose_logging(msg, 'warning', prefix='[WARNING"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n          \n          return self.format_log('Status:', prefix=prefix)\n\n      def get_log_str(self, prefix=''):\n          \n          return self.format_log('Log', prefix=prefix)\n\n      def get_log_line(self, prefix=''):\n          \n          return self.get_log_str(prefix=prefix)\n\n      def log_info(self, msg):\n          \n          self.verbose_logging(msg, 'info', prefix='[')\n\n      def log_warning(self, msg):\n          \n          self.verbose_logging(msg, 'warning', prefix='[WARNING", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    \n    return True\n\n\nclass _Void(object):\n    \n\n    def __bool__(self):\n      return False\n\n\nclass _Int(object):\n    \n\n    def __int__(self):\n      return 0\n\n\nclass _Float(object):\n    \n\n    def __float__(self):\n      return 0.0\n\n\nclass _Complex(object):\n    \n\n    def __complex__(self):\n      return 0.0\n\n\nclass _String(object):\n    \n\n    def __str__(self):\n      return ''\n\n\nclass _Bool(object):\n    \n\n    def __bool__(self):\n      return False\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    \n    return True\n\n\nclass _Void(object):\n    \n\n    def __bool__(self):\n      return False\n\n\nclass _Int(object):\n    \n\n    def __int__(self):\n      return 0\n\n\nclass _Float(object):\n    \n\n    def __float__(self):\n      return 0.0\n\n\nclass _Complex(object):\n    \n\n    def __complex__(self):\n      return 0.0\n\n\nclass _String(object):\n    \n\n    def __str__(self):\n      return ''\n\n\nclass _Bool(object):\n    \n\n    def __bool__(self):\n      return False\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n          \n          valid_keys = ['hosts', 'vars', 'groups', 'credentials', 'groups_vars', 'vars_groups', 'options', 'tasks']\n          for key in valid_keys:\n              if key in inventory.keys():\n                  if key == 'options':\n                      if not isinstance(inventory[key], dict):\n                          raise AnsibleError('The inventory option %s should be a dict, got %s' % (key, type(inventory[key])))\n                  elif not isinstance(inventory[key], list):\n                      raise AnsibleError('The inventory option %s should be a list, got %s' % (key, type(inventory[key])))\n          return inventory\n\n      def _get_inventory_hosts(self, inventory):\n          "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n          \n          valid_keys = ['hosts', 'vars', 'groups', 'credentials', 'groups_vars', 'vars_groups', 'options', 'tasks']\n          for key in valid_keys:\n              if key in inventory.keys():\n                  if key == 'options':\n                      if not isinstance(inventory[key], dict):\n                          raise AnsibleError('The inventory option %s should be a dict, got %s' % (key, type(inventory[key])))\n                  elif not isinstance(inventory[key], list):\n                      raise AnsibleError('The inventory option %s should be a list, got %s' % (key, type(inventory[key])))\n          return inventory\n\n      def _get_inventory_hosts(self, inventory):\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n          \n          warnings = []\n          for manifest_file in manifest_files:\n              if manifest_file not in self.manifest:\n                  warnings.append(\n                      'File %s is missing in manifest. Skipping.' % manifest_file)\n                  continue\n              if not self.manifest[manifest_file].get('needs_update'):\n                  warnings.append(\n                      'File %s is not needed and should be updated. Skipping.' %\n                      manifest_file)\n                  continue\n              if not self.manifest[manifest_file].get('needs_update'):\n                  warnings.append(\n                      'File %s is not needed and should be updated. Skipping.' %\n                      manifest_file)\n                  continue\n              for digest in self.manifest[manifest_file]['needs_update']:\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n          \n          warnings = []\n          for manifest_file in manifest_files:\n              if manifest_file not in self.manifest:\n                  warnings.append(\n                      'File %s is missing in manifest. Skipping.' % manifest_file)\n                  continue\n              if not self.manifest[manifest_file].get('needs_update'):\n                  warnings.append(\n                      'File %s is not needed and should be updated. Skipping.' %\n                      manifest_file)\n                  continue\n              if not self.manifest[manifest_file].get('needs_update'):\n                  warnings.append(\n                      'File %s is not needed and should be updated. Skipping.' %\n                      manifest_file)\n                  continue\n              for digest in self.manifest[manifest_file]['needs_update']:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n          \n          if prior.is_valid():\n              return prior\n\n          raise AnsibleError(\"Invalid prior version provided.    Valid prior versions are {0}\".format(sorted(prior.version_list())))\n\n      def validate_as_update_version(self, update):\n          \n          if update.is_valid():\n              return update\n\n          raise AnsibleError(\"Invalid update version provided.    Valid update versions are {0}\".format(sorted(update.version_list())))\n\n      def validate_as_check_mode(self, check_mode):\n          \n          if check_mode is not None:\n              if check_mode == 'yes' or check_mode == 'true':\n                  return check_mode"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n          \n          if prior.is_valid():\n              return prior\n\n          raise AnsibleError(\"Invalid prior version provided.    Valid prior versions are {0}\".format(sorted(prior.version_list())))\n\n      def validate_as_update_version(self, update):\n          \n          if update.is_valid():\n              return update\n\n          raise AnsibleError(\"Invalid update version provided.    Valid update versions are {0}\".format(sorted(update.version_list())))\n\n      def validate_as_check_mode(self, check_mode):\n          \n          if check_mode is not None:\n              if check_mode == 'yes' or check_mode == 'true':\n                  return check_mode", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n      \n      logical_path_map = {}\n      for logical_path in inventory.get_logical_paths(version):\n          logical_path_map[logical_path] = inventory.get_files(logical_path)\n      return logical_path_map\n\n\ndef get_logical_path_map_from_file(inventory, filename):\n      \n      logical_path_map = {}\n      with open(filename, 'r') as f:\n          for line in f:\n              logical_path_map[line.strip()] = inventory.get_files(line.strip())\n      return logical_path_map\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n      \n      logical_path_map = {}\n      for logical_path in inventory.get_logical_paths(version):\n          logical_path_map[logical_path] = inventory.get_files(logical_path)\n      return logical_path_map\n\n\ndef get_logical_path_map_from_file(inventory, filename):\n      \n      logical_path_map = {}\n      with open(filename, 'r') as f:\n          for line in f:\n              logical_path_map[line.strip()] = inventory.get_files(line.strip())\n      return logical_path_map\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n          \n          if fixity in self.fixities:\n              fixity_name = fixity + \".\"\n              self.logger.info(\"Fixity '%s' already exists in inventory\", fixity_name)\n              return fixity_name, fixity_name\n\n          fixity_name = fixity + \".fixity\"\n          self.logger.info(\"Adding fixity '%s' to inventory\", fixity_name)\n\n          if fixity in manifest_files:\n              self.logger.debug(\"Fixity '%s' already exists in manifest\", fixity_name)\n              return fixity_name, fixity_name\n\n          self.fixities[fixity] = fixity_name\n          return fixity_name, fixity_name\n\n      def get_fixities(self):\n          '''Get list of fixities in inventory"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n          \n          if fixity in self.fixities:\n              fixity_name = fixity + \".\"\n              self.logger.info(\"Fixity '%s' already exists in inventory\", fixity_name)\n              return fixity_name, fixity_name\n\n          fixity_name = fixity + \".fixity\"\n          self.logger.info(\"Adding fixity '%s' to inventory\", fixity_name)\n\n          if fixity in manifest_files:\n              self.logger.debug(\"Fixity '%s' already exists in manifest\", fixity_name)\n              return fixity_name, fixity_name\n\n          self.fixities[fixity] = fixity_name\n          return fixity_name, fixity_name\n\n      def get_fixities(self):\n          '''Get list of fixities in inventory", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef get_files(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef make_dir(path):\n      \n      try:\n          os.mkdir(path)\n      except FileExistsError:\n          pass\n\ndef is_file(path, extension=None):\n      \n      if not extension:\n          extension = ['.zip', '.zip.gz', '.zip.xz', '.zip.rar'"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef get_files(path):\n      \n      files = []\n      for root, dirs, files in os.walk(path):\n          files.extend(files)\n      return files\n\ndef make_dir(path):\n      \n      try:\n          os.mkdir(path)\n      except FileExistsError:\n          pass\n\ndef is_file(path, extension=None):\n      \n      if not extension:\n          extension = ['.zip', '.zip.gz', '.zip.xz', '.zip.rar'", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n      \n      if source.get_xml():\n          return {xmls[f]: f for f in files}\n      else:\n          return {f: f for f in files}\n\n\nclass Document(object):\n      \n\n      def __init__(self, xml_root, text):\n          self.xml_root = xml_root\n          self.text = text\n          self.filename = None\n          self.filename_dict = {}\n          self.filename_dict_cached_keys = []\n\n      def __str__(self):\n          return '<' + self.__class__.__name__ +'' + self.text + '>'\n\n      def __repr__(self):\n          return '<' + self.__"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n      \n      if source.get_xml():\n          return {xmls[f]: f for f in files}\n      else:\n          return {f: f for f in files}\n\n\nclass Document(object):\n      \n\n      def __init__(self, xml_root, text):\n          self.xml_root = xml_root\n          self.text = text\n          self.filename = None\n          self.filename_dict = {}\n          self.filename_dict_cached_keys = []\n\n      def __str__(self):\n          return '<' + self.__class__.__name__ +'' + self.text + '>'\n\n      def __repr__(self):\n          return '<' + self.__", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n      \n      if prefix[-1]!= '/':\n          prefix += '/'\n      if os.path.exists(file_path):\n          return False\n      if os.path.isdir(file_path):\n          return False\n      if os.path.isfile(file_path):\n          return False\n      return True\n\n\ndef get_package_name(package_path):\n      \n      dir_name = os.path.basename(package_path)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n      \n      if prefix[-1]!= '/':\n          prefix += '/'\n      if os.path.exists(file_path):\n          return False\n      if os.path.isdir(file_path):\n          return False\n      if os.path.isfile(file_path):\n          return False\n      return True\n\n\ndef get_package_name(package_path):\n      \n      dir_name = os.path.basename(package_path)", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n      \n      if not prefix:\n          prefix = ''\n      files = sorted(files, key=lambda f: f.path.startswith(prefix))\n      return files\n\n\nclass DocumentPackage(object):\n      '''Class representing a document package.\n\n     .. attribute:: content\n\n         The content of the document package.\n\n      '''\n\n      def __init__(self, content):\n          self.content = content\n          self.name = None\n          self.version = None\n          self.license = None\n          self.author = None\n          self.description = None\n          self.maintainer = None\n          self.url = None\n          self.copyright = None\n          self.extras = set()\n          self.maintainers = set()\n          self.license_files = set()\n          self.platform_files = set()\n         "], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n      \n      if not prefix:\n          prefix = ''\n      files = sorted(files, key=lambda f: f.path.startswith(prefix))\n      return files\n\n\nclass DocumentPackage(object):\n      '''Class representing a document package.\n\n     .. attribute:: content\n\n         The content of the document package.\n\n      '''\n\n      def __init__(self, content):\n          self.content = content\n          self.name = None\n          self.version = None\n          self.license = None\n          self.author = None\n          self.description = None\n          self.maintainer = None\n          self.url = None\n          self.copyright = None\n          self.extras = set()\n          self.maintainers = set()\n          self.license_files = set()\n          self.platform_files = set()\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder(folder)\n\ndef pkgs_from_folder(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_tree(folder)\n\ndef pkgs_from_tree(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder(folder)\n\ndef pkgs_from_folder_recursive(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder(folder)\n\ndef pkgs_from_folder(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_tree(folder)\n\ndef pkgs_from_tree(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder(folder)\n\ndef pkgs_from_folder_recursive(folder):\n      \n      if not os.path.isdir(folder):\n          return None\n      return pkgs_from_folder_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n          \n          if not os.path.isfile(file_path):\n              raise FileNotFoundError\n          if not os.path.exists(file_path):\n              raise FileNotFoundError\n\n          file_name = os.path.basename(file_path)\n          if file_name.endswith('.pdf'):\n              logging.info('Adding %s', file_path)\n              self.pdf_files.append(file_path)\n              self.pdf_files_index += 1\n              self.pdf_files_paths[self.pdf_files_index] = file_path\n              self.pdf_files_paths_len += 1\n\n          elif file_name.endswith('.jpg'):\n              logging.info('Adding %s', file_path)\n              self.jpg_files.append"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n          \n          if not os.path.isfile(file_path):\n              raise FileNotFoundError\n          if not os.path.exists(file_path):\n              raise FileNotFoundError\n\n          file_name = os.path.basename(file_path)\n          if file_name.endswith('.pdf'):\n              logging.info('Adding %s', file_path)\n              self.pdf_files.append(file_path)\n              self.pdf_files_index += 1\n              self.pdf_files_paths[self.pdf_files_index] = file_path\n              self.pdf_files_paths_len += 1\n\n          elif file_name.endswith('.jpg'):\n              logging.info('Adding %s', file_path)\n              self.jpg_files.append", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n          \n          if basename not in self.assets:\n              self.assets[basename] = {}\n          if file_path not in self.assets[basename]:\n              self.assets[basename][file_path] = tiff.TiffFile(file_path)\n      \n      def load_assets(self):\n          for basename in self.assets:\n              for filepath in self.assets[basename]:\n                  self.assets[basename][filepath] = tiff.TiffFile(filepath)\n      \n      def save(self, filename):\n          for basename in self.assets:\n              for filepath in self.assets[basename]:\n                  tiff.write(self.assets[basename][filepath], filename + '.' + filepath.split('.')[-1])\n\ndef main():\n      import"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n          \n          if basename not in self.assets:\n              self.assets[basename] = {}\n          if file_path not in self.assets[basename]:\n              self.assets[basename][file_path] = tiff.TiffFile(file_path)\n      \n      def load_assets(self):\n          for basename in self.assets:\n              for filepath in self.assets[basename]:\n                  self.assets[basename][filepath] = tiff.TiffFile(filepath)\n      \n      def save(self, filename):\n          for basename in self.assets:\n              for filepath in self.assets[basename]:\n                  tiff.write(self.assets[basename][filepath], filename + '.' + filepath.split('.')[-1])\n\ndef main():\n      import", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n      \n      def _unzip(source, target):\n          \n          if not os.path.exists(target):\n              if not os.path.exists(target + '.zip'):\n                  with zipfile.ZipFile(source) as zip_ref:\n                      zip_ref.extractall(target)\n          if not os.path.exists(target + '.zip'):\n              raise RuntimeError('Unable to extract file: {}'.format(source))\n          if not os.path.exists(target + '.tar.gz'):\n              raise RuntimeError('Unable to extract file: {}'.format("], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n      \n      def _unzip(source, target):\n          \n          if not os.path.exists(target):\n              if not os.path.exists(target + '.zip'):\n                  with zipfile.ZipFile(source) as zip_ref:\n                      zip_ref.extractall(target)\n          if not os.path.exists(target + '.zip'):\n              raise RuntimeError('Unable to extract file: {}'.format(source))\n          if not os.path.exists(target + '.tar.gz'):\n              raise RuntimeError('Unable to extract file: {}'.format(", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n      \n      with ZipFile(zip_path, 'r') as zip:\n          zip.printdir()\n          zip.extractall()\n          return zip.namelist()\n\n\ndef files_list_from_file(file_path):\n      \n      with open(file_path, 'rb') as f:\n          return f.read().splitlines()\n\n\ndef files_list_from_dir(dir_path):\n      \n      return [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]\n\n\ndef files_list_from_dir_with_filenames(dir_path):\n      '''Return the files in `dir"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n      \n      with ZipFile(zip_path, 'r') as zip:\n          zip.printdir()\n          zip.extractall()\n          return zip.namelist()\n\n\ndef files_list_from_file(file_path):\n      \n      with open(file_path, 'rb') as f:\n          return f.read().splitlines()\n\n\ndef files_list_from_dir(dir_path):\n      \n      return [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]\n\n\ndef files_list_from_dir_with_filenames(dir_path):\n      '''Return the files in `dir", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n      "], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n      \n      pubdate_xpath = pubdate_xpaths[0]\n      if pubdate_xpath is not None:\n          match = re.search(r\"(\\d{4}-\\d{2}-\\d{2})\", pubdate_xpath)\n          if match:\n              return match.group(1)\n      return None\n\n\ndef get_pubdate(node):\n      \n      if node.get(\"pubdate\"):\n          return match_pubdate(node, pubdate_xpaths)\n      return None\n\n\ndef get_title(node):\n      \n      if node.get(\"title\"):\n          return node.get(\"title\")\n      return node.text\n\n\ndef get_"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n      \n      pubdate_xpath = pubdate_xpaths[0]\n      if pubdate_xpath is not None:\n          match = re.search(r\"(\\d{4}-\\d{2}-\\d{2})\", pubdate_xpath)\n          if match:\n              return match.group(1)\n      return None\n\n\ndef get_pubdate(node):\n      \n      if node.get(\"pubdate\"):\n          return match_pubdate(node, pubdate_xpaths)\n      return None\n\n\ndef get_title(node):\n      \n      if node.get(\"title\"):\n          return node.get(\"title\")\n      return node.text\n\n\ndef get_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n      \n      number = ''\n      issue_number = ''\n      suppl = ''\n      text = issue.find('div', {\"class\": \"issue-summary\"}).contents[0]\n      list_of_contents = text.split('\\n')\n      for content in list_of_contents:\n          if content.startswith('Number:'):\n              number = content.partition('Number:')[2]\n          elif content.startswith('Suppl:'):\n              suppl = content.partition('Suppl:')[2]\n          elif number!= '':\n              issue_number = content.partition('Issue number:')[2]\n              break\n      return number, suppl, issue_number\n\ndef _extract_number_and_suppl_from_issue_body(issue):\n      '''"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n      \n      number = ''\n      issue_number = ''\n      suppl = ''\n      text = issue.find('div', {\"class\": \"issue-summary\"}).contents[0]\n      list_of_contents = text.split('\\n')\n      for content in list_of_contents:\n          if content.startswith('Number:'):\n              number = content.partition('Number:')[2]\n          elif content.startswith('Suppl:'):\n              suppl = content.partition('Suppl:')[2]\n          elif number!= '':\n              issue_number = content.partition('Issue number:')[2]\n              break\n      return number, suppl, issue_number\n\ndef _extract_number_and_suppl_from_issue_body(issue):\n      '''", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n          \n          return self.__pretty(indent=indent, debug=debug)\n\n\n\n      @classmethod\n      def create(\n          cls,\n          body: Optional[ModifyUserRequest] = None,\n          body_schema: Optional[str] = None,\n          namespace: Optional[str] = None,\n      ) -> SendUserEmail:\n          instance = cls()\n          if body is not None:\n              instance.body = body\n          if body_schema is not None:\n              instance.body_schema = body_schema\n          if namespace is not None:\n              instance.namespace = namespace\n          return instance\n\n      @classmethod\n      def create_from_dict(cls, dict_: dict, include_empty: bool = False) -> SendUser"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n          \n          return self.__pretty(indent=indent, debug=debug)\n\n\n\n      @classmethod\n      def create(\n          cls,\n          body: Optional[ModifyUserRequest] = None,\n          body_schema: Optional[str] = None,\n          namespace: Optional[str] = None,\n      ) -> SendUserEmail:\n          instance = cls()\n          if body is not None:\n              instance.body = body\n          if body_schema is not None:\n              instance.body_schema = body_schema\n          if namespace is not None:\n              instance.namespace = namespace\n          return instance\n\n      @classmethod\n      def create_from_dict(cls, dict_: dict, include_empty: bool = False) -> SendUser", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(args[0])]\n          elif len(args) == 2:\n              return [self.absorption(args[0]), self.absorption(args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or 2.\")\n\n      def abs_neg(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(-args[0])]\n          elif len(args) == 2:\n              return [self.absorption(-args[0]), self.absorption(-args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(args[0])]\n          elif len(args) == 2:\n              return [self.absorption(args[0]), self.absorption(args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or 2.\")\n\n      def abs_neg(self, args):\n          \n          if len(args) == 1:\n              return [self.absorption(-args[0])]\n          elif len(args) == 2:\n              return [self.absorption(-args[0]), self.absorption(-args[1])]\n          else:\n              raise ValueError(\"The argument list must be of length 1 or", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n          \n          return self.add(hook)\n\n      def remove(self, hook):\n          '''Remove a previously added handler from the registry.\n\n          :param hook: the handler to remove\n          :type hook: callable\n          '''\n          if not hasattr(hook, '__call__'):\n              raise ValueError('The handler must be a callable')\n          self._reg.remove(hook)\n          self._emit('remove', hook)\n\n      def __contains__(self, hook):\n          \n          return hook in self._reg\n\n      def __setitem__(self, key, val):\n          \n          if not isinstance(key, six.string_types):\n              raise ValueError('The key must be a string')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n          \n          return self.add(hook)\n\n      def remove(self, hook):\n          '''Remove a previously added handler from the registry.\n\n          :param hook: the handler to remove\n          :type hook: callable\n          '''\n          if not hasattr(hook, '__call__'):\n              raise ValueError('The handler must be a callable')\n          self._reg.remove(hook)\n          self._emit('remove', hook)\n\n      def __contains__(self, hook):\n          \n          return hook in self._reg\n\n      def __setitem__(self, key, val):\n          \n          if not isinstance(key, six.string_types):\n              raise ValueError('The key must be a string')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n      \n      global base_config_file\n      global base_config_path\n      global base_config_file_name\n      global base_config_file\n      \n      base_config_path = os.path.dirname(os.path.abspath(__file__))\n      \n      base_config_file = open(os.path.join(base_config_path, \"base_config.json\"), 'w')\n      base_config_file.write(\"[\")\n      base_config_file.write(\"{}\".format(etcd_host))\n      base_config_file.write(\"\\n\")\n      base_config_file.write(\"{}\".format(etcd_port))\n      base_config_file."], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n      \n      global base_config_file\n      global base_config_path\n      global base_config_file_name\n      global base_config_file\n      \n      base_config_path = os.path.dirname(os.path.abspath(__file__))\n      \n      base_config_file = open(os.path.join(base_config_path, \"base_config.json\"), 'w')\n      base_config_file.write(\"[\")\n      base_config_file.write(\"{}\".format(etcd_host))\n      base_config_file.write(\"\\n\")\n      base_config_file.write(\"{}\".format(etcd_port))\n      base_config_file.", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n          \n          if not isinstance(dt, datetime):\n              raise TypeError('Must be a datetime object')\n          if dt.tzinfo is not self:\n              raise ValueError('dt is not in same timezone as self')\n          if dt.tzinfo.utcoffset(dt) is None:\n              raise ValueError('utcoffset(dt) is None')\n          return dt.replace(tzinfo=self)\n\n      def __eq__(self, other):\n          if not isinstance(other, self.__class__):\n              return False\n          return (self.year, self.month, self.day) == (other.year, other.month, other.day)\n\n      def __ne__(self, other):\n          if not isinstance(other, self.__class__):\n              return True\n         "], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n          \n          if not isinstance(dt, datetime):\n              raise TypeError('Must be a datetime object')\n          if dt.tzinfo is not self:\n              raise ValueError('dt is not in same timezone as self')\n          if dt.tzinfo.utcoffset(dt) is None:\n              raise ValueError('utcoffset(dt) is None')\n          return dt.replace(tzinfo=self)\n\n      def __eq__(self, other):\n          if not isinstance(other, self.__class__):\n              return False\n          return (self.year, self.month, self.day) == (other.year, other.month, other.day)\n\n      def __ne__(self, other):\n          if not isinstance(other, self.__class__):\n              return True\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n          \n          return self.__normalize('left', 'right')\n\n      def __normalize(self, attr1, attr2):\n          \n          return self.__normalize_number(attr1, attr2)\n\n      def __normalize_number(self, attr1, attr2):\n          \n          if attr1 < 0 or attr1 > 100:\n              raise ValueError('%s: %s should be in the range [0, 100]' % (attr1, attr1))\n          if attr2 < 0 or attr2 > 100:\n              raise ValueError('%s: %s should be in the"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n          \n          return self.__normalize('left', 'right')\n\n      def __normalize(self, attr1, attr2):\n          \n          return self.__normalize_number(attr1, attr2)\n\n      def __normalize_number(self, attr1, attr2):\n          \n          if attr1 < 0 or attr1 > 100:\n              raise ValueError('%s: %s should be in the range [0, 100]' % (attr1, attr1))\n          if attr2 < 0 or attr2 > 100:\n              raise ValueError('%s: %s should be in the", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n      return inner\ntzname_in_python2 = tzname_in_python2(str)\n\ndef tzoffset_in_python2(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n      return inner\ntzoffset_in_python2 = tzoffset_in_python2(str)\n\ndef tzoffset_in_python3(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n      return inner\ntzname_in_python2 = tzname_in_python2(str)\n\ndef tzoffset_in_python2(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *args, **kwargs)\n      return inner\ntzoffset_in_python2 = tzoffset_in_python2(str)\n\ndef tzoffset_in_python3(namefunc):\n      \n      def inner(self, *args, **kwargs):\n          return namefunc(self, *", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n      \n\n      cfg = get_config()\n      verbose = cfg.verbose\n\n      try:\n          return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                               verbose)\n      except NotThisMethod:\n          pass\n\n      try:\n          root = os.path.realpath(__file__)"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n      \n\n      cfg = get_config()\n      verbose = cfg.verbose\n\n      try:\n          return git_versions_from_keywords(get_keywords(), cfg.tag_prefix,\n                                               verbose)\n      except NotThisMethod:\n          pass\n\n      try:\n          root = os.path.realpath(__file__)", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n      \n      if pieces[\"error\"]:\n          return {\"version\": \"unknown\",\n                  \"full-revisionid\": pieces.get(\"long\"),\n                  \"dirty\": None,\n                  \"error\": pieces[\"error\"],\n                  \"date\": None}\n\n      if not style or style == \"default\":\n          style = \"pep440\"    # the default\n\n      if style == \"pep440\":\n          rendered = render_pep440(pieces)\n      elif style == \"pep440-pre\":\n          rendered = render_pep440_pre(pieces)\n      elif style == \"pep440-post\":\n          rendered = render_pep440_post(pieces)\n      elif style == \"pep440-old\":\n          rendered = render_pep440_old(pieces)\n      elif style == \"git-describe"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n      \n      if pieces[\"error\"]:\n          return {\"version\": \"unknown\",\n                  \"full-revisionid\": pieces.get(\"long\"),\n                  \"dirty\": None,\n                  \"error\": pieces[\"error\"],\n                  \"date\": None}\n\n      if not style or style == \"default\":\n          style = \"pep440\"    # the default\n\n      if style == \"pep440\":\n          rendered = render_pep440(pieces)\n      elif style == \"pep440-pre\":\n          rendered = render_pep440_pre(pieces)\n      elif style == \"pep440-post\":\n          rendered = render_pep440_post(pieces)\n      elif style == \"pep440-old\":\n          rendered = render_pep440_old(pieces)\n      elif style == \"git-describe", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n      \n      if '.' in pieces.in_name:\n          return '.'\n      return '+'\n\ndef extract_tags(s):\n      \n      return [(k, v.strip()) for k, v in re.findall(r'(\\w+)=([^;]+)', s)]\n\ndef get_css_score(tags):\n      \n      return {\n          '1.0"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n      \n      if '.' in pieces.in_name:\n          return '.'\n      return '+'\n\ndef extract_tags(s):\n      \n      return [(k, v.strip()) for k, v in re.findall(r'(\\w+)=([^;]+)', s)]\n\ndef get_css_score(tags):\n      \n      return {\n          '1.0", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n      \n      if isinstance(commands, basestring):\n          commands = commands.split()\n      if isinstance(args, basestring):\n          args = args.split()\n      if env is None:\n          env = os.environ\n      for command in commands:\n          if command in commands_dict:\n              func = commands_dict[command]\n              args = list(args)\n              args.insert(0, command)\n              result = func(*args, **env)\n              if not result:\n                  log.warn(\"Command %s failed\", command)\n                  if hide_stderr:\n                      log.warn(format_exc())\n              elif log.isEnabledFor(logging.DEBUG):\n                  path = pjoin(log.log_dir, \"debug-%s.log\""], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n      \n      if isinstance(commands, basestring):\n          commands = commands.split()\n      if isinstance(args, basestring):\n          args = args.split()\n      if env is None:\n          env = os.environ\n      for command in commands:\n          if command in commands_dict:\n              func = commands_dict[command]\n              args = list(args)\n              args.insert(0, command)\n              result = func(*args, **env)\n              if not result:\n                  log.warn(\"Command %s failed\", command)\n                  if hide_stderr:\n                      log.warn(format_exc())\n              elif log.isEnabledFor(logging.DEBUG):\n                  path = pjoin(log.log_dir, \"debug-%s.log\"", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n      \n      cfg = VersioneerConfig()\n      cfg.edit(dict(\n          version=\n      ))\n      cfg.edit(dict(\n          username='',\n          email='',\n          reqs_path='''The project's main directory.    This directory must\n          contain a setup.py that calls setup(1) and then run `setup.py\n          setup2` and so on.'''\n      ))\n      return cfg\n\n\ndef get_plugin_modules(plugin_loader):\n      '''Get all the plugins for this name; either by looking them up\n      on the 'plugin_loader' attribute or by looking them up directly\n      in the 'plugin_modules' attribute.\n      '''\n      if hasattr(plugin"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n      \n      cfg = VersioneerConfig()\n      cfg.edit(dict(\n          version=\n      ))\n      cfg.edit(dict(\n          username='',\n          email='',\n          reqs_path='''The project's main directory.    This directory must\n          contain a setup.py that calls setup(1) and then run `setup.py\n          setup2` and so on.'''\n      ))\n      return cfg\n\n\ndef get_plugin_modules(plugin_loader):\n      '''Get all the plugins for this name; either by looking them up\n      on the 'plugin_loader' attribute or by looking them up directly\n      in the 'plugin_modules' attribute.\n      '''\n      if hasattr(plugin", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n    \n    def decorator(func):\n      vcs_instance.register_handler(vcs, method, func)\n      return func\n    return decorator\n\n\ndef run_command(args, show_stdout=True, cwd=None,\n                  on_returncode='raise',\n                  command_level=logging.INFO, command_desc=None,\n                  extra_environ=None, spinner=None):\n    \"\"\"Run a VCS command (calls the progress output daemon).\"\"\"\n    env = os.environ.copy()\n    if extra_environ:\n      env.update(extra_environ)\n\n    if len(args) == 1:\n      cmd_args = args[0]\n      provider = command_provider.get_provider(cmd_"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n    \n    def decorator(func):\n      vcs_instance.register_handler(vcs, method, func)\n      return func\n    return decorator\n\n\ndef run_command(args, show_stdout=True, cwd=None,\n                  on_returncode='raise',\n                  command_level=logging.INFO, command_desc=None,\n                  extra_environ=None, spinner=None):\n    \"\"\"Run a VCS command (calls the progress output daemon).\"\"\"\n    env = os.environ.copy()\n    if extra_environ:\n      env.update(extra_environ)\n\n    if len(args) == 1:\n      cmd_args = args[0]\n      provider = command_provider.get_provider(cmd_", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.root:\n              raise ValueError(\"storage root is not set\")\n\n          if not self.root.is_directory():\n              raise ValueError(\"storage root is not a directory\")\n\n          if not self.root.is_file():\n              raise ValueError(\"storage root is not a file\")\n\n          if not self.root.is_symlink():\n              raise ValueError(\"storage root is not a symlink\")\n\n          if check_digests and not check_digests(self.root):\n              raise ValueError(\"storage root is not a valid storage root\")\n\n          return self.root\n\n      def validate_files(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.files:\n              raise ValueError(\"files is"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.root:\n              raise ValueError(\"storage root is not set\")\n\n          if not self.root.is_directory():\n              raise ValueError(\"storage root is not a directory\")\n\n          if not self.root.is_file():\n              raise ValueError(\"storage root is not a file\")\n\n          if not self.root.is_symlink():\n              raise ValueError(\"storage root is not a symlink\")\n\n          if check_digests and not check_digests(self.root):\n              raise ValueError(\"storage root is not a valid storage root\")\n\n          return self.root\n\n      def validate_files(self, validate_objects=True, check_digests=True, show_warnings=False):\n          \n          if not self.files:\n              raise ValueError(\"files is", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n          \n          pass\n\n      def get_root(self):\n          \n          pass\n\n      def get_storage_path(self, path):\n          '''Return the path of the storage root.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The path of the storage root.\n          :rtype: str\n          '''\n          pass\n\n      def get_storage(self, path):\n          '''Return the OCFL storage object.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The OCFL storage object.\n          :rtype: OCFLStorage\n          '''\n          pass\n\n      def get_storage_list(self):\n          '''Return the list of OCFL storage"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n          \n          pass\n\n      def get_root(self):\n          \n          pass\n\n      def get_storage_path(self, path):\n          '''Return the path of the storage root.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The path of the storage root.\n          :rtype: str\n          '''\n          pass\n\n      def get_storage(self, path):\n          '''Return the OCFL storage object.\n\n          :param path: The path of the storage root.\n          :type path: str\n          :return: The OCFL storage object.\n          :rtype: OCFLStorage\n          '''\n          pass\n\n      def get_storage_list(self):\n          '''Return the list of OCFL storage", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n      \n      return version + 1\n\n\ndef create_version_number(version):\n      \n      if version == 1:\n          return 1\n      else:\n          return version + 1\n\n\ndef create_version_range(version):\n      \n      if version == 1:\n          return range(1, 1)\n      else:\n          return range(version, create_version_number(version))\n\n\ndef create_versioned_range(version):\n      \n      if version == 1:\n          return range(1, create_version_number(version))\n      else:\n          return range(version, create_version_number(version))\n\n\ndef create_versioned_range_with_version(version"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n      \n      return version + 1\n\n\ndef create_version_number(version):\n      \n      if version == 1:\n          return 1\n      else:\n          return version + 1\n\n\ndef create_version_range(version):\n      \n      if version == 1:\n          return range(1, 1)\n      else:\n          return range(version, create_version_number(version))\n\n\ndef create_versioned_range(version):\n      \n      if version == 1:\n          return range(1, create_version_number(version))\n      else:\n          return range(version, create_version_number(version))\n\n\ndef create_versioned_range_with_version(version", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n          \n          for v_dir in version_dirs:\n              if not os.path.isdir(v_dir):\n                  raise IOError('The directory %s does not exist.' % v_dir)\n              if not os.path.isfile(os.path.join(v_dir, 'inventory.toml')):\n                  raise IOError('The inventory file %s does not exist.' % os.path.join(v_dir, 'inventory.toml'))\n\n      def validate_version_data(self, version_data):\n          \n          if not isinstance(version_data, dict):\n              raise ValueError('Version data must be a dictionary.')\n          if not set(version_data.keys()) == set(['version', 'description']):\n              raise ValueError('Key names must be \""], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n          \n          for v_dir in version_dirs:\n              if not os.path.isdir(v_dir):\n                  raise IOError('The directory %s does not exist.' % v_dir)\n              if not os.path.isfile(os.path.join(v_dir, 'inventory.toml')):\n                  raise IOError('The inventory file %s does not exist.' % os.path.join(v_dir, 'inventory.toml'))\n\n      def validate_version_data(self, version_data):\n          \n          if not isinstance(version_data, dict):\n              raise ValueError('Version data must be a dictionary.')\n          if not set(version_data.keys()) == set(['version', 'description']):\n              raise ValueError('Key names must be \"", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n      \n      if path[0] == '.':\n          return 'path'\n      elif path[0] == '..':\n          return 'directory'\n      else:\n          return 'file'\n\n\ndef is_valid_path(path):\n      \n      return path!= ''\n\n\ndef is_valid_file(path):\n      \n      return is_valid_path(path) and path.suffix in ('.py', '.pyi')\n\n\ndef is_valid_directory(path):\n      \n      return is_valid_path(path) and os.path.isdir(path)\n\n\ndef is_valid_filepath(path):\n      ''"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n      \n      if path[0] == '.':\n          return 'path'\n      elif path[0] == '..':\n          return 'directory'\n      else:\n          return 'file'\n\n\ndef is_valid_path(path):\n      \n      return path!= ''\n\n\ndef is_valid_file(path):\n      \n      return is_valid_path(path) and path.suffix in ('.py', '.pyi')\n\n\ndef is_valid_directory(path):\n      \n      return is_valid_path(path) and os.path.isdir(path)\n\n\ndef is_valid_filepath(path):\n      ''", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n          \n          params['bug_ids'] = list(set(params['bug_ids']).union(set(bug_ids)))\n          return params\n\n\nclass Bugzilla(object):\n      \n\n      def __init__(self, base_url, token, username, password):\n          \n          self.base_url = base_url\n          self.token = token\n          self.username = username\n          self.password = password\n          self.session = requests.Session()\n\n      def login(self):\n          \n          login_url = '{}/api/v1/auth/login'.format(self.base_url)\n          data = {'username': self.username, 'password': self.password,"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n          \n          params['bug_ids'] = list(set(params['bug_ids']).union(set(bug_ids)))\n          return params\n\n\nclass Bugzilla(object):\n      \n\n      def __init__(self, base_url, token, username, password):\n          \n          self.base_url = base_url\n          self.token = token\n          self.username = username\n          self.password = password\n          self.session = requests.Session()\n\n      def login(self):\n          \n          login_url = '{}/api/v1/auth/login'.format(self.base_url)\n          data = {'username': self.username, 'password': self.password,", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n      \n      if not nodes:\n          return []\n      return deep_merge_nodes(nodes[0]) + deep_merge_nodes(nodes[1:])\n\ndef build_nodes(config_data):\n      \n      if not config_data:\n          return []\n      return [build_nodes(node) for node in config_data]"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n      \n      if not nodes:\n          return []\n      return deep_merge_nodes(nodes[0]) + deep_merge_nodes(nodes[1:])\n\ndef build_nodes(config_data):\n      \n      if not config_data:\n          return []\n      return [build_nodes(node) for node in config_data]", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n      \n      parser = argparse.ArgumentParser()\n\n      parser.add_argument(\n          '--version', action='version', version='%(prog)s'+ __version__,\n      )\n\n      parser.add_argument(\n          '-i', '--input', metavar='PATH', type=str, default='-',\n          help='input file(s) (default: stdin)',\n      )\n\n      parser.add_argument(\n          '-o', '--output', metavar='PATH', default='-',\n          help='output file(s) (default: stdout)',\n      )\n\n      parser.add_argument(\n          '-v', '--verbose', action='count', default=0,\n          help='increase output verbosity (can be specified multiple times)',\n      )\n\n      parser.add"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n      \n      parser = argparse.ArgumentParser()\n\n      parser.add_argument(\n          '--version', action='version', version='%(prog)s'+ __version__,\n      )\n\n      parser.add_argument(\n          '-i', '--input', metavar='PATH', type=str, default='-',\n          help='input file(s) (default: stdin)',\n      )\n\n      parser.add_argument(\n          '-o', '--output', metavar='PATH', default='-',\n          help='output file(s) (default: stdout)',\n      )\n\n      parser.add_argument(\n          '-v', '--verbose', action='count', default=0,\n          help='increase output verbosity (can be specified multiple times)',\n      )\n\n      parser.add", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n      \n      return ', '.join(f.name for f in parser.flags)\n\n\ndef parser_args(parser):\n      \n      return parser.format_help()\n\n\ndef parser_help(parser, *, show_args=None):\n      '''Helper for help_format(): show the command line arguments for the given parser.\n\n      If show_args is True, then a list of arguments will be returned.\n      '''\n      if show_args is None:\n          show_args = parser.show_args\n      if show_args:\n          return parser.format_help(show_args=show_args)\n      else:\n          return parser.format_help()\n\n\ndef parser_version(parser):\n      '''Return the version of the"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n      \n      return ', '.join(f.name for f in parser.flags)\n\n\ndef parser_args(parser):\n      \n      return parser.format_help()\n\n\ndef parser_help(parser, *, show_args=None):\n      '''Helper for help_format(): show the command line arguments for the given parser.\n\n      If show_args is True, then a list of arguments will be returned.\n      '''\n      if show_args is None:\n          show_args = parser.show_args\n      if show_args:\n          return parser.format_help(show_args=show_args)\n      else:\n          return parser.format_help()\n\n\ndef parser_version(parser):\n      '''Return the version of the", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n      \n      shot_subparser_map = {}\n      for subparser_name, subparser_arguments in subparsers.items():\n          shot_subparser = subparser_arguments.add_parser(subparser_name, help=subparser_name)\n          shot_subparser.set_defaults(shot_subparser_map=shot_subparser_map)\n          shot_subparser_map[subparser_name] = shot_subparser\n      \n      return subparsers\n\ndef main(argv):\n      parse_subparser_arguments(argv, subparsers=argparse.ArgumentParser())\n\n      args = argparse.Namespace(cmd=argparse.Namespace(**vars(cli_args_parser.parse_args(argv[1:]))), \n          subparsers=subp"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n      \n      shot_subparser_map = {}\n      for subparser_name, subparser_arguments in subparsers.items():\n          shot_subparser = subparser_arguments.add_parser(subparser_name, help=subparser_name)\n          shot_subparser.set_defaults(shot_subparser_map=shot_subparser_map)\n          shot_subparser_map[subparser_name] = shot_subparser\n      \n      return subparsers\n\ndef main(argv):\n      parse_subparser_arguments(argv, subparsers=argparse.ArgumentParser())\n\n      args = argparse.Namespace(cmd=argparse.Namespace(**vars(cli_args_parser.parse_args(argv[1:]))), \n          subparsers=subp", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n      \n      parser = argparse.ArgumentParser(description='Makes a simple command line interface.',\n                                         epilog='Example: \"python -m cmd.cli\"')\n      subparsers = parser.add_subparsers(dest='command', help='commands to run')\n      subparsers.required = True\n      return (parser, subparsers)\n\n\ndef main(args):\n      parser, subparsers = make_parsers()\n      return run(parser, subparsers, args)\n\n\nif __name__ == \"__main__\":\n      sys.exit(main(sys.argv[1:]))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n      \n      parser = argparse.ArgumentParser(description='Makes a simple command line interface.',\n                                         epilog='Example: \"python -m cmd.cli\"')\n      subparsers = parser.add_subparsers(dest='command', help='commands to run')\n      subparsers.required = True\n      return (parser, subparsers)\n\n\ndef main(args):\n      parser, subparsers = make_parsers()\n      return run(parser, subparsers, args)\n\n\nif __name__ == \"__main__\":\n      sys.exit(main(sys.argv[1:]))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n      "], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n      ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n      \n      parser = ArgumentParser()\n      parser.add_argument('-s', '--seed', help='Random seed for reproducibility.')\n      parser.add_argument('-m', '--model', help='Path to the model to load.')\n      parser.add_argument('-d', '--device', default='cuda', help='Device to use for training (default: \"cuda\".)')\n      parser.add_argument('-b', '--batch-size', type=int, default=32, help='Batch size.')\n      parser.add_argument('-w', '--workers', type=int, default=4, help='Number of workers.')\n      parser.add_argument('--epochs', type=int, default=10, help='Number of epochs to run.')\n      parser.add_argument"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n      \n      parser = ArgumentParser()\n      parser.add_argument('-s', '--seed', help='Random seed for reproducibility.')\n      parser.add_argument('-m', '--model', help='Path to the model to load.')\n      parser.add_argument('-d', '--device', default='cuda', help='Device to use for training (default: \"cuda\".)')\n      parser.add_argument('-b', '--batch-size', type=int, default=32, help='Batch size.')\n      parser.add_argument('-w', '--workers', type=int, default=4, help='Number of workers.')\n      parser.add_argument('--epochs', type=int, default=10, help='Number of epochs to run.')\n      parser.add_argument", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n      \n      return parser.flags.as_text()\n\ndef get_flags(parser):\n      \n      return parser.flags.value\n\ndef get_opt_flags(parser):\n      \n      return parser.flags.names\n\ndef get_arg_flags(args):\n      \n      return args.flags_by_opt_arg\n\ndef get_flags_by_opt_arg(args):\n      \n      return args.flags_by_opt_arg\n\ndef"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n      \n      return parser.flags.as_text()\n\ndef get_flags(parser):\n      \n      return parser.flags.value\n\ndef get_opt_flags(parser):\n      \n      return parser.flags.names\n\ndef get_arg_flags(args):\n      \n      return args.flags_by_opt_arg\n\ndef get_flags_by_opt_arg(args):\n      \n      return args.flags_by_opt_arg\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n      \n      return bash_completion_script\n\n\ndef bash_completion_script():\n      \n      script = '''\n          %bash_completion\n          borgmatic\n          -b\n          -t\n          -l\n          -q\n          -v\n          -q\n          -p\n          -c\n          -s\n          -n\n          -c\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n -V\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n      \n      return bash_completion_script\n\n\ndef bash_completion_script():\n      \n      script = '''\n          %bash_completion\n          borgmatic\n          -b\n          -t\n          -l\n          -q\n          -v\n          -q\n          -p\n          -c\n          -s\n          -n\n          -c\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n -V\n          -n\n          -n\n          -n\n          -n\n          -n\n          -n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n      \n      arguments = {}\n      for argument in unparsed_arguments:\n          name, value = argument.split(\"=\")\n          if name == \"verbose\":\n              arguments[name] = bool(value)\n          elif name == \"help\":\n              arguments[name] = value\n          elif name == \"version\":\n              arguments[name] = int(value)\n      return arguments\n\n\ndef parse_args(argv):\n      \n      parser = argparse.ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers(dest=\"subcommand\")\n      subparsers.required = True\n      subparsers"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n      \n      arguments = {}\n      for argument in unparsed_arguments:\n          name, value = argument.split(\"=\")\n          if name == \"verbose\":\n              arguments[name] = bool(value)\n          elif name == \"help\":\n              arguments[name] = value\n          elif name == \"version\":\n              arguments[name] = int(value)\n      return arguments\n\n\ndef parse_args(argv):\n      \n      parser = argparse.ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers(dest=\"subcommand\")\n      subparsers.required = True\n      subparsers", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n      \n      for i, arg in enumerate(unparsed_arguments):\n          if arg.option_strings:\n              subparsers.add_parser(arg.name, **arg.parse_args._get_kwargs())\n          else:\n              arg.func(arg, subparsers)\n\n\ndef parse_arguments(arguments):\n      \n      parser = argparse.ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers(dest='action')\n      subparsers.required = True\n\n      for arg in arguments:\n          if isinstance(arg, argparse.FileType):\n              subparsers.add_parser(arg.name, **arg.parse_args._get_kwargs())\n          else"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n      \n      for i, arg in enumerate(unparsed_arguments):\n          if arg.option_strings:\n              subparsers.add_parser(arg.name, **arg.parse_args._get_kwargs())\n          else:\n              arg.func(arg, subparsers)\n\n\ndef parse_arguments(arguments):\n      \n      parser = argparse.ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers(dest='action')\n      subparsers.required = True\n\n      for arg in arguments:\n          if isinstance(arg, argparse.FileType):\n              subparsers.add_parser(arg.name, **arg.parse_args._get_kwargs())\n          else", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n      \n      parser = ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers()\n\n      parser_test = subparsers.add_parser('test', help='Test the parser.')\n      parser_test.set_defaults(func=parser_test_cli_entrypoint)\n\n      parser_train = subparsers.add_parser('train', help='Train the parser.')\n      parser_train.set_defaults(func=parser_train_cli_entrypoint)\n\n      parser_train_eval = subparsers.add_parser('train_eval', help='Train the parser.')\n      parser_train_eval.set"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n      \n      parser = ArgumentParser(add_help=False)\n      subparsers = parser.add_subparsers()\n\n      parser_test = subparsers.add_parser('test', help='Test the parser.')\n      parser_test.set_defaults(func=parser_test_cli_entrypoint)\n\n      parser_train = subparsers.add_parser('train', help='Train the parser.')\n      parser_train.set_defaults(func=parser_train_cli_entrypoint)\n\n      parser_train_eval = subparsers.add_parser('train_eval', help='Train the parser.')\n      parser_train_eval.set", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n      \n      result = []\n      if response.status == 200:\n          for item in response.json()['Items']:\n              result.append(item)\n          return result\n      else:\n          raise Exception(response.status, response.reason)\n\ndef get_vault(token, vault_name):\n      \n      return Vault(token, vault_name)\n\ndef get_vault_by_name(token, vault_name):\n      \n      return Vault(token, vault_name)\n\ndef get_vault_by_id(token, vault_id):\n      \n      return Vault(token, vault_id)\n\ndef get_v"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n      \n      result = []\n      if response.status == 200:\n          for item in response.json()['Items']:\n              result.append(item)\n          return result\n      else:\n          raise Exception(response.status, response.reason)\n\ndef get_vault(token, vault_name):\n      \n      return Vault(token, vault_name)\n\ndef get_vault_by_name(token, vault_name):\n      \n      return Vault(token, vault_name)\n\ndef get_vault_by_id(token, vault_id):\n      \n      return Vault(token, vault_id)\n\ndef get_v", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n      \n      if size.endswith(\"B\"):\n          return int(size[:-1])\n      elif size.endswith(\"KB\"):\n          return int(size[:-2])*1000\n      elif size.endswith(\"MB\"):\n          return int(size[:-3])*1000*1000\n      elif size.endswith(\"GB\"):\n          return int(size[:-4])*1000*1000*1000\n      else:\n          raise NotImplementedError\n\n\ndef extract_filesize(path: str) -> int:\n      \n      return size_to_bytes(os.path.getsize(path))\n\n\ndef extract_filesize_human(path: str) -> str:\n      \n     "], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n      \n      if size.endswith(\"B\"):\n          return int(size[:-1])\n      elif size.endswith(\"KB\"):\n          return int(size[:-2])*1000\n      elif size.endswith(\"MB\"):\n          return int(size[:-3])*1000*1000\n      elif size.endswith(\"GB\"):\n          return int(size[:-4])*1000*1000*1000\n      else:\n          raise NotImplementedError\n\n\ndef extract_filesize(path: str) -> int:\n      \n      return size_to_bytes(os.path.getsize(path))\n\n\ndef extract_filesize_human(path: str) -> str:\n      \n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n      \n      return {k: dicts[k].sum() for k in dicts}\n\n\ndef _get_subgraph_from_graph(graph, subgraph_name):\n      '''Get a subgraph from a graph.\n\n      Parameters\n      ----------\n      graph : networkx.Graph\n          The graph to get the subgraph from.\n      subgraph_name : str\n          The name of the subgraph to get.\n\n      Returns\n      -------\n      networkx.Graph\n          The subgraph.\n      '''\n      return graph.subgraph(graph.nodes[subgraph_name])\n\n\ndef _get_subgraph_from_graph_dict(graph_dict, subgraph_name):\n      '''Get a subgraph from a graph.\n\n      Parameters\n      ----------\n      graph_dict : dict\n          The graph to get the subgraph"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n      \n      return {k: dicts[k].sum() for k in dicts}\n\n\ndef _get_subgraph_from_graph(graph, subgraph_name):\n      '''Get a subgraph from a graph.\n\n      Parameters\n      ----------\n      graph : networkx.Graph\n          The graph to get the subgraph from.\n      subgraph_name : str\n          The name of the subgraph to get.\n\n      Returns\n      -------\n      networkx.Graph\n          The subgraph.\n      '''\n      return graph.subgraph(graph.nodes[subgraph_name])\n\n\ndef _get_subgraph_from_graph_dict(graph_dict, subgraph_name):\n      '''Get a subgraph from a graph.\n\n      Parameters\n      ----------\n      graph_dict : dict\n          The graph to get the subgraph", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n      \n      url = url.replace('{args}', ','.join(url_args))\n      return url\n\n\ndef _parse_url(url, default_scheme='https', use_relative_urls=False):\n      '''Parse a url into a tuple of (scheme, netloc, path, params, query, fragment)\n\n      The order of priority is:\n\n      1. scheme: default_scheme\n      2. netloc\n      3. path\n      4. query\n      5. fragment\n\n      This function does not use urlparse.\n      '''\n      parsed = urlparse(url, default_scheme=default_scheme)\n      if parsed.scheme:\n          return parsed.scheme, parsed.netloc, parsed.path, parsed.query, parsed.fragment\n      elif use_relative"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n      \n      url = url.replace('{args}', ','.join(url_args))\n      return url\n\n\ndef _parse_url(url, default_scheme='https', use_relative_urls=False):\n      '''Parse a url into a tuple of (scheme, netloc, path, params, query, fragment)\n\n      The order of priority is:\n\n      1. scheme: default_scheme\n      2. netloc\n      3. path\n      4. query\n      5. fragment\n\n      This function does not use urlparse.\n      '''\n      parsed = urlparse(url, default_scheme=default_scheme)\n      if parsed.scheme:\n          return parsed.scheme, parsed.netloc, parsed.path, parsed.query, parsed.fragment\n      elif use_relative", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n      \n      return type(val) is str and val == 'None'\n\n\ndef is_none_number(val: Any) -> bool:\n      \n      return type(val) is float and val == 0.0\n\n\ndef convert_to_int(val: Any) -> int:\n      \n      if is_none_string(val):\n          return 0\n      if is_none_number(val):\n          return 0\n      return int(val)\n\n\ndef convert_to_float(val: Any) -> float:\n      \n      if is_none_string(val):\n          return 0.0\n      if is_none_number(val):\n          return 0.0\n      return float("], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n      \n      return type(val) is str and val == 'None'\n\n\ndef is_none_number(val: Any) -> bool:\n      \n      return type(val) is float and val == 0.0\n\n\ndef convert_to_int(val: Any) -> int:\n      \n      if is_none_string(val):\n          return 0\n      if is_none_number(val):\n          return 0\n      return int(val)\n\n\ndef convert_to_float(val: Any) -> float:\n      \n      if is_none_string(val):\n          return 0.0\n      if is_none_number(val):\n          return 0.0\n      return float(", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n      \n      flags = []\n      for flag in parser.flags:\n          if flag[0] == '-':\n              flags.append(flag[1:])\n          else:\n              flags.append('{}{}'.format(flag, parser.get_default(flag)))\n      return''.join(flags)\n\n\ndef parse_flags(parser, arg_flags, flag_mapping=None):\n      '''Parse command line flags into a dictionary of flag values.\n\n      Arguments:\n      parser -- ArgumentParser instance\n      arg_flags -- List of strings, the command line flags\n      flag_mapping -- A dictionary of flag names to their corresponding value\n      '''\n      if flag_mapping is None:\n          flag_mapping = {}\n      for flag in arg_flags:\n          if flag[0] == '-':\n             "], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n      \n      flags = []\n      for flag in parser.flags:\n          if flag[0] == '-':\n              flags.append(flag[1:])\n          else:\n              flags.append('{}{}'.format(flag, parser.get_default(flag)))\n      return''.join(flags)\n\n\ndef parse_flags(parser, arg_flags, flag_mapping=None):\n      '''Parse command line flags into a dictionary of flag values.\n\n      Arguments:\n      parser -- ArgumentParser instance\n      arg_flags -- List of strings, the command line flags\n      flag_mapping -- A dictionary of flag names to their corresponding value\n      '''\n      if flag_mapping is None:\n          flag_mapping = {}\n      for flag in arg_flags:\n          if flag[0] == '-':\n             ", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n      \n      if processed!= [] and processed[-1]!= path_name:\n          if verbose:\n              print('    [+] Processing %s' % path_name)\n          return True\n      return False\n\n\ndef print_status(status, verbose):\n      \n      if verbose:\n          print('\\r[*] %s' % status)\n      return status\n\n\ndef print_err(err, verbose):\n      \n      if verbose:\n          print('\\r[!] %s' % err)\n      return err\n\n\ndef print_n_err(n_err, verbose):\n      \n      if verbose:\n          print('\\r["], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n      \n      if processed!= [] and processed[-1]!= path_name:\n          if verbose:\n              print('    [+] Processing %s' % path_name)\n          return True\n      return False\n\n\ndef print_status(status, verbose):\n      \n      if verbose:\n          print('\\r[*] %s' % status)\n      return status\n\n\ndef print_err(err, verbose):\n      \n      if verbose:\n          print('\\r[!] %s' % err)\n      return err\n\n\ndef print_n_err(n_err, verbose):\n      \n      if verbose:\n          print('\\r[", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n      \n      return tuple(vertices)\n\n\ndef vertextuple(vertices):\n      \n      return tuple(range(len(vertices)))\n\n\ndef edge_index(edges):\n      \n      return edge_index_from_edges(edges)\n\n\ndef edge_index_from_edges(edges):\n      \n      i, j = edge_index(edges)\n      i, j = map(as_cupy_array, (i, j))\n      return cupy.cuda.asarray_chkfinite(i.astype(int),\n                                            dtype=cupy.int64)\n\n\ndef edge_from_index(index,"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n      \n      return tuple(vertices)\n\n\ndef vertextuple(vertices):\n      \n      return tuple(range(len(vertices)))\n\n\ndef edge_index(edges):\n      \n      return edge_index_from_edges(edges)\n\n\ndef edge_index_from_edges(edges):\n      \n      i, j = edge_index(edges)\n      i, j = map(as_cupy_array, (i, j))\n      return cupy.cuda.asarray_chkfinite(i.astype(int),\n                                            dtype=cupy.int64)\n\n\ndef edge_from_index(index,", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n      \n      result = \"\"\n      if padding is None:\n          padding = len(alphabet) - 1\n      for _ in range(padding):\n          result += alphabet[0]\n      result += alphabet[-1]\n      if number >= 0:\n          result += str(number)\n      else:\n          result += str(-number)\n      return result\n\ndef get_random_number(size: int = 6) -> int:\n      \n      import random\n      return random.randrange(0, 10 ** size)\n\ndef get_random_alphabet(size: int = 3) -> List[str]:\n      \n      import random\n      return [\n          random.choice(string.ascii_lowercase + string.digits)"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n      \n      result = \"\"\n      if padding is None:\n          padding = len(alphabet) - 1\n      for _ in range(padding):\n          result += alphabet[0]\n      result += alphabet[-1]\n      if number >= 0:\n          result += str(number)\n      else:\n          result += str(-number)\n      return result\n\ndef get_random_number(size: int = 6) -> int:\n      \n      import random\n      return random.randrange(0, 10 ** size)\n\ndef get_random_alphabet(size: int = 3) -> List[str]:\n      \n      import random\n      return [\n          random.choice(string.ascii_lowercase + string.digits)", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n      \n      if register_number == 0:\n          return register_value\n      else:\n          return flow_params[0][register_number]\n\n\nclass Flow:\n\n      def __init__(self, flow_params, flow_name, step_size=1.0,\n                   flow_time_constant=0.01):\n          \n          self._flow_params = flow_params\n          self._flow_name = flow_name\n          self._step_size = step_size\n          self._flow_time_constant = flow_time_constant\n          self._flow_time = 0.0\n          self._flow_time_end = 0.0\n          self._time_step = 0.0\n          self._flow_time_end_flag = False\n          self._time_step_flag = False"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n      \n      if register_number == 0:\n          return register_value\n      else:\n          return flow_params[0][register_number]\n\n\nclass Flow:\n\n      def __init__(self, flow_params, flow_name, step_size=1.0,\n                   flow_time_constant=0.01):\n          \n          self._flow_params = flow_params\n          self._flow_name = flow_name\n          self._step_size = step_size\n          self._flow_time_constant = flow_time_constant\n          self._flow_time = 0.0\n          self._flow_time_end = 0.0\n          self._time_step = 0.0\n          self._flow_time_end_flag = False\n          self._time_step_flag = False", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n      \n      return value.replace('.', arg) if value else value\n\n\ndef replace_whitespace(value):\n      \n      return''.join(value.split())\n\n\ndef remove_at_position(string, position):\n      \n      return string[:position] + string[position + 1:]\n\n\n\n\ndef upper(value):\n      \n      return value.upper()\n\n\ndef capitalize(value):\n      \n      return value.capitalize()\n\n\ndef capitalize_first(value):"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n      \n      return value.replace('.', arg) if value else value\n\n\ndef replace_whitespace(value):\n      \n      return''.join(value.split())\n\n\ndef remove_at_position(string, position):\n      \n      return string[:position] + string[position + 1:]\n\n\n\n\ndef upper(value):\n      \n      return value.upper()\n\n\ndef capitalize(value):\n      \n      return value.capitalize()\n\n\ndef capitalize_first(value):", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n      \n      return cls.__subclasses__()\n\nclass Sized(object):\n      '''Sized is an abstract base class.\n\n      Classes can define one or more concrete derived classes.\n      '''\n      def __len__(self):\n          '''Returns the total size of all elements.\n\n          Implemented to override to implement __len__ in a subclass.\n          '''\n          raise NotImplementedError\n      def __iter__(self):\n          '''Generates all elements.\n\n          Implemented to override to implement __iter__ in a subclass.\n          '''\n          raise NotImplementedError\n      def __contains__(self, value):\n          '''Returns True if any element is an instance of the object.\n\n          Implemented to override to implement __contains__ in a subclass.\n          '''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n      \n      return cls.__subclasses__()\n\nclass Sized(object):\n      '''Sized is an abstract base class.\n\n      Classes can define one or more concrete derived classes.\n      '''\n      def __len__(self):\n          '''Returns the total size of all elements.\n\n          Implemented to override to implement __len__ in a subclass.\n          '''\n          raise NotImplementedError\n      def __iter__(self):\n          '''Generates all elements.\n\n          Implemented to override to implement __iter__ in a subclass.\n          '''\n          raise NotImplementedError\n      def __contains__(self, value):\n          '''Returns True if any element is an instance of the object.\n\n          Implemented to override to implement __contains__ in a subclass.\n          '''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n      \n      return alphabet.index(string.lower())\n\n\ndef string_to_int_list(string: str, alphabet: List[str]) -> List[int]:\n      \n      return [alphabet.index(string.lower()) for string in string.split()]\n\n\ndef string_to_int_list_v2(string: str, alphabet: List[str]) -> List[int]:\n      \n      return [alphabet.index(string.lower()) for string in string.split()]\n\n\ndef string_to_int_list_v3(string: str, alphabet: List[str]) -> List[int]:\n      '''Convert a string to a list of integers, using the"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n      \n      return alphabet.index(string.lower())\n\n\ndef string_to_int_list(string: str, alphabet: List[str]) -> List[int]:\n      \n      return [alphabet.index(string.lower()) for string in string.split()]\n\n\ndef string_to_int_list_v2(string: str, alphabet: List[str]) -> List[int]:\n      \n      return [alphabet.index(string.lower()) for string in string.split()]\n\n\ndef string_to_int_list_v3(string: str, alphabet: List[str]) -> List[int]:\n      '''Convert a string to a list of integers, using the", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n          \n          with tempfile.TemporaryDirectory() as tmp_dir:\n              archive = tarfile.open(url)\n              archive.extractall(tmp_dir)\n              archive.close()\n              return Path(tmp_dir) / Path(destination_path)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n          \n          with tempfile.TemporaryDirectory() as tmp_dir:\n              archive = tarfile.open(url)\n              archive.extractall(tmp_dir)\n              archive.close()\n              return Path(tmp_dir) / Path(destination_path)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n      \n      return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n      \n      return platform.system() == \"Linux\"\n\n\ndef os_is_osx():\n      \n      return platform.system() == \"Darwin\"\n\n\ndef os_is_cygwin():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_win():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_darwin"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n      \n      return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n      \n      return platform.system() == \"Linux\"\n\n\ndef os_is_osx():\n      \n      return platform.system() == \"Darwin\"\n\n\ndef os_is_cygwin():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_win():\n      \n      return platform.system() == \"Windows\"\n\n\ndef os_is_darwin", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n      \n      if isinstance(item, list):\n          return [regex_dict(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:regex_dict(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_list(item):\n      if isinstance(item, list):\n          return item\n      elif isinstance(item, dict):\n          return [_convert_to_list(i) for i in item.values()]\n      else:\n          return [item]\n\n\ndef _process_list(list_, regex_dict):\n      \n      return [regex_dict(i) for i in list_]\n\n\ndef _process_dict(dict"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n      \n      if isinstance(item, list):\n          return [regex_dict(i) for i in item]\n      elif isinstance(item, dict):\n          return {key:regex_dict(val) for (key,val) in item.items()}\n      else:\n          return item\n\n\ndef _convert_to_list(item):\n      if isinstance(item, list):\n          return item\n      elif isinstance(item, dict):\n          return [_convert_to_list(i) for i in item.values()]\n      else:\n          return [item]\n\n\ndef _process_list(list_, regex_dict):\n      \n      return [regex_dict(i) for i in list_]\n\n\ndef _process_dict(dict", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n      \n      if len(name) > 1:\n          if name[0] == name[1] == '\\'':\n              return name[2:-1]\n          elif name[0] == name[1] and name[1] <> '\\'':\n              return name[1:]\n      return name\n\n\ndef quote(name):\n      \n      return '\"%s\"' % name.replace('\\\\', '\\\\\\\\')\n\n\ndef xmlescape(name):\n      \n      return name.replace('&', '&amp;')\n\n\ndef xmlescape_html(name):\n      \n      return name.replace('&', '&amp;')\n\n\ndef xmlescape_sql(name"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n      \n      if len(name) > 1:\n          if name[0] == name[1] == '\\'':\n              return name[2:-1]\n          elif name[0] == name[1] and name[1] <> '\\'':\n              return name[1:]\n      return name\n\n\ndef quote(name):\n      \n      return '\"%s\"' % name.replace('\\\\', '\\\\\\\\')\n\n\ndef xmlescape(name):\n      \n      return name.replace('&', '&amp;')\n\n\ndef xmlescape_html(name):\n      \n      return name.replace('&', '&amp;')\n\n\ndef xmlescape_sql(name", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n      \n      if platform not in ['this', 'any']:\n          raise ValueError('invalid platform: {}'.format(platform))\n      if '(' in s and platform == 'this':\n          return shlex.split(s)\n      elif '(' in s:\n          return shlex.split(s, posix=platform == 'any')\n      else:\n          return shlex.split(s)\n\n\ndef expand_env_var(v, env=os.environ):\n      '''Expand environment variables in a string.\n      '''\n      if isinstance(v, EnvironmentVarGuard):\n          for name in v:\n              if name not in env:\n                  raise ValueError('unalias environment variable: {}'.format(name))\n              value = env["], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n      \n      if platform not in ['this', 'any']:\n          raise ValueError('invalid platform: {}'.format(platform))\n      if '(' in s and platform == 'this':\n          return shlex.split(s)\n      elif '(' in s:\n          return shlex.split(s, posix=platform == 'any')\n      else:\n          return shlex.split(s)\n\n\ndef expand_env_var(v, env=os.environ):\n      '''Expand environment variables in a string.\n      '''\n      if isinstance(v, EnvironmentVarGuard):\n          for name in v:\n              if name not in env:\n                  raise ValueError('unalias environment variable: {}'.format(name))\n              value = env[", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n      archive_path: str,\n      filename: Optional[str] = None,\n      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      return uncompressed_path.as_posix()\n\n\ndef read_file_contents(archive_path: str) -> str:\n      \n      with tempfile.TemporaryFile(mode=\"r\") as file:\n          file.write(read_archive(archive_path))\n          return file.read().decode()\n\n\ndef read_archive(archive_path: str) -> str:\n      \n      archive_path = f\"{archive_path}{os.path.sep}\"\n      with tempfile.TemporaryDirectory() as tmp_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n      archive_path: str,\n      filename: Optional[str] = None,\n      tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n      \n      if not filename:\n          filename = os.path.basename(archive_path)\n      uncompressed_path = uncompress_archive(archive_path, tmp_path)\n      return uncompressed_path.as_posix()\n\n\ndef read_file_contents(archive_path: str) -> str:\n      \n      with tempfile.TemporaryFile(mode=\"r\") as file:\n          file.write(read_archive(archive_path))\n          return file.read().decode()\n\n\ndef read_archive(archive_path: str) -> str:\n      \n      archive_path = f\"{archive_path}{os.path.sep}\"\n      with tempfile.TemporaryDirectory() as tmp_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):\n          \n          files_to_process = self.files + ignored\n          files_to_process = sorted(files_to_process)\n          files_to_process = [file for file in files_to_process if file not in self.files]\n          files_to_process = [file for file in files_to_process if file in self.files]\n          ignored_files = [file for file in ignored if file in self.files]\n          ignored_files = [file for file in ignored_files if file in self.files]\n          ignored"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):\n          \n          files_to_process = self.files + ignored\n          files_to_process = sorted(files_to_process)\n          files_to_process = [file for file in files_to_process if file not in self.files]\n          files_to_process = [file for file in files_to_process if file in self.files]\n          ignored_files = [file for file in ignored if file in self.files]\n          ignored_files = [file for file in ignored_files if file in self.files]\n          ignored", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(\n          self, left: list[LeafPattern], collected: list[Pattern] = None\n      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n          \n          if self.__module_path.startswith('.'):\n              return True, left, collected\n          if self.__module_path in self.__module_paths:\n              return True, left, collected\n          return False, [], []\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(\n          self, left: list[LeafPattern], collected: list[Pattern] = None\n      ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n          \n          if self.__module_path.startswith('.'):\n              return True, left, collected\n          if self.__module_path in self.__module_paths:\n              return True, left, collected\n          return False, [], []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n      \n      return datetime.timedelta(\n          days=int(frequency.split('/')[1]),\n          seconds=int(frequency.split('/')[0]),\n          microseconds=int(frequency.split('/')[2])\n      )\n\n\ndef parse_date(date):\n      '''Parse a date string to a datetime.date instance or None.\n      This will be used when parsing dates in the format \"YYYY-MM-DD\".'''\n      return datetime.date(\n          int(date.split('-')[2]),\n          int(date.split('-')[1]),\n          int(date.split('-')[0])\n      )\n\n\ndef parse_time(time):\n      '''Parse a time string to a datetime.time instance or None.\n      This will be used"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n      \n      return datetime.timedelta(\n          days=int(frequency.split('/')[1]),\n          seconds=int(frequency.split('/')[0]),\n          microseconds=int(frequency.split('/')[2])\n      )\n\n\ndef parse_date(date):\n      '''Parse a date string to a datetime.date instance or None.\n      This will be used when parsing dates in the format \"YYYY-MM-DD\".'''\n      return datetime.date(\n          int(date.split('-')[2]),\n          int(date.split('-')[1]),\n          int(date.split('-')[0])\n      )\n\n\ndef parse_time(time):\n      '''Parse a time string to a datetime.time instance or None.\n      This will be used", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n      \n      return socket.gethostname() == 'localhost'\n\n\ndef is_local(host):\n      \n      return (socket.gethostname() == 'localhost')\n\n\ndef is_ipv4(host):\n      \n      try:\n          socket.inet_pton(socket.AF_INET, host)\n          return True\n      except socket.error:\n          return False\n\n\ndef is_ipv6(host):\n      \n      try:\n          socket.inet_pton(socket.AF_INET6, host)\n          return True\n      except socket.error:\n          return False\n\n\ndef is_host_valid(host):\n      '''"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n      \n      return socket.gethostname() == 'localhost'\n\n\ndef is_local(host):\n      \n      return (socket.gethostname() == 'localhost')\n\n\ndef is_ipv4(host):\n      \n      try:\n          socket.inet_pton(socket.AF_INET, host)\n          return True\n      except socket.error:\n          return False\n\n\ndef is_ipv6(host):\n      \n      try:\n          socket.inet_pton(socket.AF_INET6, host)\n          return True\n      except socket.error:\n          return False\n\n\ndef is_host_valid(host):\n      '''", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n      \n      if isinstance(find_paths, str):\n          find_paths = [find_paths]\n      if isinstance(find_paths, list):\n          find_paths = list(find_paths)\n      for path in find_paths:\n          if os.path.isabs(path):\n              raise ValueError('path must not be an absolute path')\n      for path in find_paths:\n          if not os.path.isabs(path):\n              path = os.path.abspath(path)\n              if not os.path.isabs(path):\n                  raise ValueError('path must not be an absolute path')\n      all"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n      \n      if isinstance(find_paths, str):\n          find_paths = [find_paths]\n      if isinstance(find_paths, list):\n          find_paths = list(find_paths)\n      for path in find_paths:\n          if os.path.isabs(path):\n              raise ValueError('path must not be an absolute path')\n      for path in find_paths:\n          if not os.path.isabs(path):\n              path = os.path.abspath(path)\n              if not os.path.isabs(path):\n                  raise ValueError('path must not be an absolute path')\n      all", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n      \n      return os.environ.get('PATH', '').find('git')!= -1\n\n\ndef is_git_repo():\n      \n      return os.environ.get('PATH', '').find('git-repos')!= -1\n\n\ndef is_git_repo_root():\n      \n      return os.environ.get('PATH', '').find('git-repos') == -1\n\n\ndef is_root():\n      \n      return os.environ.get('GIT_AUTHOR_ROOT', '').find('git-repos')!= -1\n\n\ndef is_root_dir():\n      '''"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n      \n      return os.environ.get('PATH', '').find('git')!= -1\n\n\ndef is_git_repo():\n      \n      return os.environ.get('PATH', '').find('git-repos')!= -1\n\n\ndef is_git_repo_root():\n      \n      return os.environ.get('PATH', '').find('git-repos') == -1\n\n\ndef is_root():\n      \n      return os.environ.get('GIT_AUTHOR_ROOT', '').find('git-repos')!= -1\n\n\ndef is_root_dir():\n      '''", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      with open(config_filename, 'w') as f:\n          f.write(rendered_config)\n      if not overwrite:\n          raise Exception('configuration should be overwritten')\n\ndef write_configuration_to_disk(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      with open(config_filename, 'w') as f:\n          f.write(rendered_config)\n      if not overwrite:\n          raise Exception('configuration should be overwritten')\n\ndef read_configuration(config_filename):\n      \n      with open(config_filename, 'r') as f:\n          config = yaml.safe_load(f)\n      return config"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      with open(config_filename, 'w') as f:\n          f.write(rendered_config)\n      if not overwrite:\n          raise Exception('configuration should be overwritten')\n\ndef write_configuration_to_disk(config_filename, rendered_config, mode=0o600, overwrite=False):\n      \n      with open(config_filename, 'w') as f:\n          f.write(rendered_config)\n      if not overwrite:\n          raise Exception('configuration should be overwritten')\n\ndef read_configuration(config_filename):\n      \n      with open(config_filename, 'r') as f:\n          config = yaml.safe_load(f)\n      return config", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n          \n          return script.replace(seperator, '\\n')\n\n      def format_script(self, script):\n          \n          return self.oneline(script)\n\n      def get_command(self, script):\n          \n          return self.format_script(script)\n\n      def get_script(self, args):\n          \n          return self.format_script(args)\n\n      def get_script_name(self, args):\n          \n          return self.format_script(args)\n\n      def run(self, args):\n          \n          return self.get_command(self.format_script(args))"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n          \n          return script.replace(seperator, '\\n')\n\n      def format_script(self, script):\n          \n          return self.oneline(script)\n\n      def get_command(self, script):\n          \n          return self.format_script(script)\n\n      def get_script(self, args):\n          \n          return self.format_script(args)\n\n      def get_script_name(self, args):\n          \n          return self.format_script(args)\n\n      def run(self, args):\n          \n          return self.get_command(self.format_script(args))", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n      \n      import subprocess\n      import select\n      import signal\n      import time\n\n      proc = subprocess.Popen([sys.executable, '-c', 'import time; time.sleep(0.1)'],\n                              stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                              stderr=subprocess.PIPE, shell=True)\n      proc.stdin.write(func)\n      proc.stdin.flush()\n      proc.stdout.close()\n      proc.stderr.close()\n      stdin, stdout, stderr = proc.communicate(timeout=timeout)\n      if proc.returncode!= 0:\n          raise subprocess.CalledProcessError(proc.returncode, [proc.args])\n      return stdout\n\n\ndef subprocess_run(func"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n      \n      import subprocess\n      import select\n      import signal\n      import time\n\n      proc = subprocess.Popen([sys.executable, '-c', 'import time; time.sleep(0.1)'],\n                              stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                              stderr=subprocess.PIPE, shell=True)\n      proc.stdin.write(func)\n      proc.stdin.flush()\n      proc.stdout.close()\n      proc.stderr.close()\n      stdin, stdout, stderr = proc.communicate(timeout=timeout)\n      if proc.returncode!= 0:\n          raise subprocess.CalledProcessError(proc.returncode, [proc.args])\n      return stdout\n\n\ndef subprocess_run(func", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n      \n      import os\n\n      if isinstance(matcher, string_types):\n          matcher = os.environ.get(matcher, None)\n\n      if matcher is None:\n          return None\n\n      if isinstance(matcher, bool):\n          return matcher\n\n      return matcher\n\n\ndef _check_environment_variable(name, value, default=None):\n      \n      if value is None and default is not None:\n          value = default\n\n      value = _resolve_string(value)\n      if value is None:\n          raise AnsibleError(\"Environment variable '%s' not set.\" % name)\n\n      return value\n\n\ndef _check_required(required, value):\n      \n      if value is"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n      \n      import os\n\n      if isinstance(matcher, string_types):\n          matcher = os.environ.get(matcher, None)\n\n      if matcher is None:\n          return None\n\n      if isinstance(matcher, bool):\n          return matcher\n\n      return matcher\n\n\ndef _check_environment_variable(name, value, default=None):\n      \n      if value is None and default is not None:\n          value = default\n\n      value = _resolve_string(value)\n      if value is None:\n          raise AnsibleError(\"Environment variable '%s' not set.\" % name)\n\n      return value\n\n\ndef _check_required(required, value):\n      \n      if value is", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_id_re.match(image_href):\n          return None, None, False\n\n      image_id = _image_id_re.search(image_href).group(1)\n      if image_id!= image_href:\n          return image_href, image_id, False\n\n      image_id = image_id.strip('/')\n      return image_href, image_id, True\n\n\ndef _parse_image_url(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_url_re.match(image_href):\n          return None, None,"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_id_re.match(image_href):\n          return None, None, False\n\n      image_id = _image_id_re.search(image_href).group(1)\n      if image_id!= image_href:\n          return image_href, image_id, False\n\n      image_id = image_id.strip('/')\n      return image_href, image_id, True\n\n\ndef _parse_image_url(image_href: str) -> Tuple[str, str, bool]:\n      \n      if not image_href:\n          return None, None, False\n      if not _image_url_re.match(image_href):\n          return None, None,", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              continue\n          yield elem.rstrip('\\\\')\n\ndef remove_leading_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.startswith('\\\\'):\n              continue\n          yield elem[1:]\n\ndef get_longest_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              break\n          if elem.startswith('\\\\'):\n              return elem\n      return None"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              continue\n          yield elem.rstrip('\\\\')\n\ndef remove_leading_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.startswith('\\\\'):\n              continue\n          yield elem[1:]\n\ndef get_longest_os_sep(input_list):\n      \n      for elem in input_list:\n          if elem.endswith('\\\\'):\n              break\n          if elem.startswith('\\\\'):\n              return elem\n      return None", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):\n          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def get_patterns(self, patterns):\n          \n          return [self.get_pattern(pattern) for pattern in patterns]\n\n      def _get_pattern_set(self, patterns):\n          \n          return set(patterns)\n\n      def _get_pattern_set_str(self, patterns):\n          \n          return '|'.join(self._get_pattern_set(patterns))\n\n      def _get_pattern_set_regex(self, patterns):\n          '''This method is used to get the"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):\n          \n          return re.compile(pattern, re.IGNORECASE) if strip else re.compile(pattern)\n\n      def get_patterns(self, patterns):\n          \n          return [self.get_pattern(pattern) for pattern in patterns]\n\n      def _get_pattern_set(self, patterns):\n          \n          return set(patterns)\n\n      def _get_pattern_set_str(self, patterns):\n          \n          return '|'.join(self._get_pattern_set(patterns))\n\n      def _get_pattern_set_regex(self, patterns):\n          '''This method is used to get the", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):\n          \n          if isinstance(cmd, list):\n              cmd = [' '.join(cmd)]\n          return self.run_command_stdout(cmd, verbose)\n\n      def run_command_stdout(self, cmd, verbose=False):\n          '''Run command using its standard output API.\n\n          The method returns the standard output of the command as a string.\n\n          :param cmd: The command to run.\n          :type cmd: list\n          :param verbose: Whether to show verbose output.\n          :type verbose: bool\n          :returns: The standard output of the command as a string.\n          :rtype: str\n          '''\n          if not self.use_tty():\n              cmd = self._fix_command(cmd)\n          if not cmd:\n              return ''\n          self.check_command(cmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):\n          \n          if isinstance(cmd, list):\n              cmd = [' '.join(cmd)]\n          return self.run_command_stdout(cmd, verbose)\n\n      def run_command_stdout(self, cmd, verbose=False):\n          '''Run command using its standard output API.\n\n          The method returns the standard output of the command as a string.\n\n          :param cmd: The command to run.\n          :type cmd: list\n          :param verbose: Whether to show verbose output.\n          :type verbose: bool\n          :returns: The standard output of the command as a string.\n          :rtype: str\n          '''\n          if not self.use_tty():\n              cmd = self._fix_command(cmd)\n          if not cmd:\n              return ''\n          self.check_command(cmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n      \n      return is_ipv4(target) or target.endswith('.')\n\n\ndef is_ipv6(target):\n      \n      return is_ipv6(target) or target.endswith(\":\")\n\n\ndef is_valid_ip(target):\n      \n      return is_ipv4(target) or is_ipv6(target)\n\n\ndef is_valid_ipv6(target):\n      \n      return is_ipv6(target)\n\n\ndef is_valid_port(target):\n      \n      return is_valid_ipv6(target) and is_valid_ip(target)\n\n\ndef is_valid_port"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n      \n      return is_ipv4(target) or target.endswith('.')\n\n\ndef is_ipv6(target):\n      \n      return is_ipv6(target) or target.endswith(\":\")\n\n\ndef is_valid_ip(target):\n      \n      return is_ipv4(target) or is_ipv6(target)\n\n\ndef is_valid_ipv6(target):\n      \n      return is_ipv6(target)\n\n\ndef is_valid_port(target):\n      \n      return is_valid_ipv6(target) and is_valid_ip(target)\n\n\ndef is_valid_port", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n      graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n      \n      if roots is None:\n          roots = set()\n      for root in graph.roots():\n          if root in roots:\n              roots.remove(root)\n          if root.prop(prop) is not None:\n              roots.update(root.prop(prop))\n      return roots\n\n\ndef find_roots_all(\n      graph: \"Graph\",\n      prop: \"URIRef\",\n      roots: Optional[Set[\"Node\"]] = None,\n      ignore_prop: Optional[Set[str]] = None\n) -> Set[\"Node\"]:\n      \n      if roots is None:\n          roots = set()\n      for root in graph.roots():\n          if root in roots:\n              roots.remove(root)\n          if root.prop(prop) is not None:"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n      graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n      \n      if roots is None:\n          roots = set()\n      for root in graph.roots():\n          if root in roots:\n              roots.remove(root)\n          if root.prop(prop) is not None:\n              roots.update(root.prop(prop))\n      return roots\n\n\ndef find_roots_all(\n      graph: \"Graph\",\n      prop: \"URIRef\",\n      roots: Optional[Set[\"Node\"]] = None,\n      ignore_prop: Optional[Set[str]] = None\n) -> Set[\"Node\"]:\n      \n      if roots is None:\n          roots = set()\n      for root in graph.roots():\n          if root in roots:\n              roots.remove(root)\n          if root.prop(prop) is not None:", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):\n          \n          if dumper is None:\n              dumper = self.default_dumper\n\n          if isinstance(obj, bytes):\n              return obj.decode(self.encoding)\n          else:\n              return dumper.represent_str(obj).encode(self.encoding)\n\n      def dump_yaml_object(self, obj):\n          \n          data = self.dumps(obj)\n          if self.encoding:\n              data = data.encode(self.encoding)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):\n          \n          if dumper is None:\n              dumper = self.default_dumper\n\n          if isinstance(obj, bytes):\n              return obj.decode(self.encoding)\n          else:\n              return dumper.represent_str(obj).encode(self.encoding)\n\n      def dump_yaml_object(self, obj):\n          \n          data = self.dumps(obj)\n          if self.encoding:\n              data = data.encode(self.encoding)", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n      \n      logger = logging.getLogger(name)\n      logger.setLevel(logging.DEBUG if debug else logging.INFO)\n      ch = logging.StreamHandler()\n      ch.setLevel(logging.DEBUG if debug else logging.INFO)\n      ch.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n      logger.addHandler(ch)\n      return logger\n\ndef get_logger(logfile=None, debug=None):\n      \n      logger = logging.getLogger('app')\n      if not logger.handlers:\n          logger.addHandler(build_app_logger(name='app', logfile=logfile, debug=debug))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n      \n      logger = logging.getLogger(name)\n      logger.setLevel(logging.DEBUG if debug else logging.INFO)\n      ch = logging.StreamHandler()\n      ch.setLevel(logging.DEBUG if debug else logging.INFO)\n      ch.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n      logger.addHandler(ch)\n      return logger\n\ndef get_logger(logfile=None, debug=None):\n      \n      logger = logging.getLogger('app')\n      if not logger.handlers:\n          logger.addHandler(build_app_logger(name='app', logfile=logfile, debug=debug))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, dtype=dtype)\n\n      def reset_states(self):\n          \n          return self.cell.reset_states()\n\n      def get_initial_state(self):\n          \n          return self.cell.get_initial_state()\n\n      def __call__(self, inputs, initial_state=None, **kwargs):\n          \n          outputs, final_states = self.cell(inputs, initial_state, **kwargs)\n          if self.return_sequences:\n              return outputs\n          else:\n              return outputs, final_states\n\n\nclass GRU(RNN):\n      '''Gated Recurrent Unit - Choosing one from"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n          \n          return np.zeros(shape, dtype=dtype)\n\n      def reset_states(self):\n          \n          return self.cell.reset_states()\n\n      def get_initial_state(self):\n          \n          return self.cell.get_initial_state()\n\n      def __call__(self, inputs, initial_state=None, **kwargs):\n          \n          outputs, final_states = self.cell(inputs, initial_state, **kwargs)\n          if self.return_sequences:\n              return outputs\n          else:\n              return outputs, final_states\n\n\nclass GRU(RNN):\n      '''Gated Recurrent Unit - Choosing one from", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):\n          \n          return np.exp(-(x - 0.2) ** 2 / 0.1 ** 2) / (0.1 ** 2 * np.pi)\n\n      def gauss(self, x, mean, sigma):\n          \n          return gaussian(x, mean) * sigma\n\n      def gauss_noise(self, x, mean, sigma):\n          \n          return gaussian(x, mean) / sigma\n\n      def add_gauss_noise(self, x, mean, sigma):\n          \n          return np.add(x, gauss(x, mean, sigma))\n\n      def add_gauss_noise2(self, x, mean, sigma"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):\n          \n          return np.exp(-(x - 0.2) ** 2 / 0.1 ** 2) / (0.1 ** 2 * np.pi)\n\n      def gauss(self, x, mean, sigma):\n          \n          return gaussian(x, mean) * sigma\n\n      def gauss_noise(self, x, mean, sigma):\n          \n          return gaussian(x, mean) / sigma\n\n      def add_gauss_noise(self, x, mean, sigma):\n          \n          return np.add(x, gauss(x, mean, sigma))\n\n      def add_gauss_noise2(self, x, mean, sigma", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n      \n      config_files = []\n      for config_filename in config_filenames:\n          if not os.path.isfile(config_filename):\n              raise IOError('Configuration file \"{}\" does not exist'.format(config_filename))\n          config_files.append(config_filename)\n      \n      config_files = sorted(config_files)\n\n      if overrides is not None:\n          for config_filename in config_files:\n              config = get_config(config_filename)\n              config.merge(overrides, resolve=resolve_env)\n              config.validate()\n      \n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n      \n      config_files = []\n      for config_filename in config_filenames:\n          if not os.path.isfile(config_filename):\n              raise IOError('Configuration file \"{}\" does not exist'.format(config_filename))\n          config_files.append(config_filename)\n      \n      config_files = sorted(config_files)\n\n      if overrides is not None:\n          for config_filename in config_files:\n              config = get_config(config_filename)\n              config.merge(overrides, resolve=resolve_env)\n              config.validate()\n      \n", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n      \n      if isinstance(obj, bytes):\n          return obj\n      if isinstance(obj, six.text_type):\n          return obj.encode('utf-8')\n      if six.PY3:\n          return str(obj).encode('utf-8')\n      return obj\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n      \n      if isinstance(obj, bytes):\n          return obj\n      if isinstance(obj, six.text_type):\n          return obj.encode('utf-8')\n      if six.PY3:\n          return str(obj).encode('utf-8')\n      return obj\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod\n      def from_ticks(cls, ticks, tz=None):\n          \n          return cls.from_datetime(ticks, tz=tz)\n\n      def to_datetime(self):\n          \n          if self._tzinfo is None:\n              return self.replace(microsecond=0)\n          if self._tzinfo._utcoffset(None) is None:\n              return self\n          return self.astimezone(self._tzinfo)\n\n      def astimezone(self, tz):\n          \n          if not isinstance(tz, tzinfo):\n              return self.replace(tzinfo=tz)\n          if self._tzinfo is None:\n              return self.replace(tzinfo=tz)"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n      def from_ticks(cls, ticks, tz=None):\n          \n          return cls.from_datetime(ticks, tz=tz)\n\n      def to_datetime(self):\n          \n          if self._tzinfo is None:\n              return self.replace(microsecond=0)\n          if self._tzinfo._utcoffset(None) is None:\n              return self\n          return self.astimezone(self._tzinfo)\n\n      def astimezone(self, tz):\n          \n          if not isinstance(tz, tzinfo):\n              return self.replace(tzinfo=tz)\n          if self._tzinfo is None:\n              return self.replace(tzinfo=tz)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          protocol_handlers = {}\n          if protocol_version is not None:\n              protocol_handlers['v{}'.format(protocol_version)] = cls\n          return protocol_handlers\n"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n      def protocol_handlers(cls, protocol_version=None):\n          \n          protocol_handlers = {}\n          if protocol_version is not None:\n              protocol_handlers['v{}'.format(protocol_version)] = cls\n          return protocol_handlers\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod\n      def from_raw_values(cls, values):\n          \n          return cls(\n              bookmark=values[0],\n              date=values[1],\n              last_update=values[2],\n              last_update_date=datetime.strptime(values[3], \"%Y-%m-%d\"),\n              status=values[4]\n          )\n\n      def __str__(self):\n          \n          return \"{} - {} - {}\".format(\n              self.bookmark, self.date, self.last_update)\n\n\nclass User(db.Model):\n      \n      __tablename__ = \"users\"\n      id = db.Column(db.Integer, primary_key=True)\n      username = db.Column(db.String(128), unique=True, nullable"], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod\n      def from_raw_values(cls, values):\n          \n          return cls(\n              bookmark=values[0],\n              date=values[1],\n              last_update=values[2],\n              last_update_date=datetime.strptime(values[3], \"%Y-%m-%d\"),\n              status=values[4]\n          )\n\n      def __str__(self):\n          \n          return \"{} - {} - {}\".format(\n              self.bookmark, self.date, self.last_update)\n\n\nclass User(db.Model):\n      \n      __tablename__ = \"users\"\n      id = db.Column(db.Integer, primary_key=True)\n      username = db.Column(db.String(128), unique=True, nullable", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n      \n      if bufsize is None:\n          bufsize = max(200, len(seq))\n      return seq, b''.join(bytearray(seq))[:bufsize]\n\n\nclass _MappingProxyType(object):\n      '''\n      Proxy type for which `get` returns a proxy object which\n      is a subtype of the underlying `Mapping` type.\n      '''\n      def __init__(self, mapping=None):\n          self.mapping = mapping\n\n      def __getitem__(self, key):\n          if self.mapping is None:\n              return MappingProxyType(self.__dict__)\n          return MappingProxyType(self.mapping[key])\n\n      def get(self, key, default=None):\n          if self.mapping is None:\n              return default\n          return"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n      \n      if bufsize is None:\n          bufsize = max(200, len(seq))\n      return seq, b''.join(bytearray(seq))[:bufsize]\n\n\nclass _MappingProxyType(object):\n      '''\n      Proxy type for which `get` returns a proxy object which\n      is a subtype of the underlying `Mapping` type.\n      '''\n      def __init__(self, mapping=None):\n          self.mapping = mapping\n\n      def __getitem__(self, key):\n          if self.mapping is None:\n              return MappingProxyType(self.__dict__)\n          return MappingProxyType(self.mapping[key])\n\n      def get(self, key, default=None):\n          if self.mapping is None:\n              return default\n          return", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n          \n          if self.bins.size > 0:\n              if other is None:\n                  other = self._bin_edges[1]\n              if other is not self._bin_edges[0]:\n                  self._bin_edges = other\n          if self.bins.size == 0 or other is None: return self.sum()\n\n          if recompute:\n              self._compute()\n\n          self.edges = self._bin_edges\n          return self.sum() / (other - self._bin_edges[0])\n\n      def _compute(self):\n          \n          self.bins = np.linspace(self._bin_edges[0], self._bin_edges[1], self.bins+1)\n          self.edges ="], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n          \n          if self.bins.size > 0:\n              if other is None:\n                  other = self._bin_edges[1]\n              if other is not self._bin_edges[0]:\n                  self._bin_edges = other\n          if self.bins.size == 0 or other is None: return self.sum()\n\n          if recompute:\n              self._compute()\n\n          self.edges = self._bin_edges\n          return self.sum() / (other - self._bin_edges[0])\n\n      def _compute(self):\n          \n          self.bins = np.linspace(self._bin_edges[0], self._bin_edges[1], self.bins+1)\n          self.edges =", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n          \n          if self.scale is not None:\n              self.scale = other\n              return self.scale\n          if other is not None:\n              self.scale = other\n              return self.scale\n          return self.scale_\n\n      @scale.setter\n      def scale(self, other):\n          \n          self.scale = other\n          self._scale_changed()\n          self.scale_\n\n      @property\n      def scale_x(self):\n          \n          if self.scale_x is not None:\n              return self.scale_x\n          return self.scale_x_\n\n      @scale_x.setter\n      def scale_x(self, value):\n          \n          self"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n          \n          if self.scale is not None:\n              self.scale = other\n              return self.scale\n          if other is not None:\n              self.scale = other\n              return self.scale\n          return self.scale_\n\n      @scale.setter\n      def scale(self, other):\n          \n          self.scale = other\n          self._scale_changed()\n          self.scale_\n\n      @property\n      def scale_x(self):\n          \n          if self.scale_x is not None:\n              return self.scale_x\n          return self.scale_x_\n\n      @scale_x.setter\n      def scale_x(self, value):\n          \n          self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                    field_names=(\"x\", \"y\"), scale=None):\n      \n      from.graph import graph\n      from.axis import axis\n      from.transform import (\n          Transform, Affine2D, ScaledTranslation, IdentityTransform,\n          make_transforms, TransformedPath, BboxBase,\n      )\n      from.patches import Rectangle, Circle, PathPatch, Polygon\n\n      if hist.bins is None:\n          bins = None\n      else:\n          bins = hist.bins\n      kwargs = dict(\n          histtype=hist.histtype,\n          fill=hist.fill,\n          hist_weights=hist.hist_weights,\n          orientation=hist.orientation,\n          extend=hist.extend,\n          stacked=hist.stacked,\n          density=hist.density,\n          color=hist.color,\n          hist_alpha=hist.hist"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                    field_names=(\"x\", \"y\"), scale=None):\n      \n      from.graph import graph\n      from.axis import axis\n      from.transform import (\n          Transform, Affine2D, ScaledTranslation, IdentityTransform,\n          make_transforms, TransformedPath, BboxBase,\n      )\n      from.patches import Rectangle, Circle, PathPatch, Polygon\n\n      if hist.bins is None:\n          bins = None\n      else:\n          bins = hist.bins\n      kwargs = dict(\n          histtype=hist.histtype,\n          fill=hist.fill,\n          hist_weights=hist.hist_weights,\n          orientation=hist.orientation,\n          extend=hist.extend,\n          stacked=hist.stacked,\n          density=hist.density,\n          color=hist.color,\n          hist_alpha=hist.hist", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n      \n      if tentative:\n          return True\n\n      iface_version = get_if_version(iface)\n      candidate_version = get_if_version(candidate)\n      iface_ver = tuple(iface_version)\n      candidate_ver = tuple(candidate_version)\n      if iface_ver < candidate_ver:\n          return False\n\n      candidate_ver = tuple(candidate_version)\n      iface_ver = tuple(iface_version)\n      iface"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n      \n      if tentative:\n          return True\n\n      iface_version = get_if_version(iface)\n      candidate_version = get_if_version(candidate)\n      iface_ver = tuple(iface_version)\n      candidate_ver = tuple(candidate_version)\n      if iface_ver < candidate_ver:\n          return False\n\n      candidate_ver = tuple(candidate_version)\n      iface_ver = tuple(iface_version)\n      iface", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n      \n      if not candidate:\n          return False\n\n      if not cand_iface:\n          cand_iface = candidate.get('iface', None)\n          if cand_iface is None:\n              cand_iface = candidate.get('iface_index', None)\n          if cand_iface is None:\n              cand_iface = candidate.get('iface_indexer', None)\n\n      if not isinstance(candidate, dict):\n          return False\n\n      return True\n\n\ndef get_"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n      \n      if not candidate:\n          return False\n\n      if not cand_iface:\n          cand_iface = candidate.get('iface', None)\n          if cand_iface is None:\n              cand_iface = candidate.get('iface_index', None)\n          if cand_iface is None:\n              cand_iface = candidate.get('iface_indexer', None)\n\n      if not isinstance(candidate, dict):\n          return False\n\n      return True\n\n\ndef get_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n      \n      candidate_class = candidate.__class__\n      iface_class = iface.__class__\n      if candidate_class!= iface_class:\n          raise Exception('Expected interface %r, but got interface %r' % (candidate_class, iface_class))\n      if not tentative:\n          iface.verify(candidate)\n      else:\n          iface.tentative(candidate)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n      \n      candidate_class = candidate.__class__\n      iface_class = iface.__class__\n      if candidate_class!= iface_class:\n          raise Exception('Expected interface %r, but got interface %r' % (candidate_class, iface_class))\n      if not tentative:\n          iface.verify(candidate)\n      else:\n          iface.tentative(candidate)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n      \n      if explicit_mc is not None:\n          return explicit_mc\n      class_bases = list(bases)\n      while len(class_bases) > 1:\n          class_bases.sort(key=lambda x: isinstance(x, type))\n          class_bases = [b for b in class_bases if not\n                         isinstance(b, type)]\n      class_bases = class_bases[0]\n      class_bases_list = []\n      for base in class_bases:\n          if isinstance(base, type):\n              base_bases = list(base.__bases__)\n              if len(base_bases) > 1:\n                  raise TypeError('multiple inheritance not allowed')\n              if len(base_bases) == 0:\n                  base_bases ="], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n      \n      if explicit_mc is not None:\n          return explicit_mc\n      class_bases = list(bases)\n      while len(class_bases) > 1:\n          class_bases.sort(key=lambda x: isinstance(x, type))\n          class_bases = [b for b in class_bases if not\n                         isinstance(b, type)]\n      class_bases = class_bases[0]\n      class_bases_list = []\n      for base in class_bases:\n          if isinstance(base, type):\n              base_bases = list(base.__bases__)\n              if len(base_bases) > 1:\n                  raise TypeError('multiple inheritance not allowed')\n              if len(base_bases) == 0:\n                  base_bases =", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n          \n          if key in self:\n              result = self[key]\n              del self[key]\n              return result\n          if default is self.__marker:\n              raise KeyError(key)\n          return default\n      pop.__safe_for_unpickling__ = True\n\n      def __setitem__(self, key, value):\n          self._dirty = True\n          dict.__setitem__(self, key, value)\n\n          if hasattr(self, '_box'):\n              self._box._commit_change()\n\n      def __delitem__(self, key):\n          dict.__delitem__(self, key)\n\n          if hasattr(self, '_box'):\n              self._box._commit_change()\n\n      def clear(self):\n          self._dirty = True\n          dict.clear(self)"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n          \n          if key in self:\n              result = self[key]\n              del self[key]\n              return result\n          if default is self.__marker:\n              raise KeyError(key)\n          return default\n      pop.__safe_for_unpickling__ = True\n\n      def __setitem__(self, key, value):\n          self._dirty = True\n          dict.__setitem__(self, key, value)\n\n          if hasattr(self, '_box'):\n              self._box._commit_change()\n\n      def __delitem__(self, key):\n          dict.__delitem__(self, key)\n\n          if hasattr(self, '_box'):\n              self._box._commit_change()\n\n      def clear(self):\n          self._dirty = True\n          dict.clear(self)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n          \n          return self.items.popitem()\n\n      def __str__(self):\n          \n          return str(dict(self.items))\n\n      def __repr__(self):\n          \n          return '{%s}' % ', '.join('%r: %r' % (key, value)\n                  for key, value in self.items())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n          \n          return self.items.popitem()\n\n      def __str__(self):\n          \n          return str(dict(self.items))\n\n      def __repr__(self):\n          \n          return '{%s}' % ', '.join('%r: %r' % (key, value)\n                  for key, value in self.items())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n          \n          return self.heap[0]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n          \n          return self.heap[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n          \n          return self.items[0]\n\n      def clear(self):\n          \n          self.items = []\n\n      def __iter__(self):\n          \n          return iter(self.items)\n\n      def __contains__(self, val):\n          \n          return val in self.items\n\n      def __len__(self):\n          \n          return len(self.items)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n          \n          return self.items[0]\n\n      def clear(self):\n          \n          self.items = []\n\n      def __iter__(self):\n          \n          return iter(self.items)\n\n      def __contains__(self, val):\n          \n          return val in self.items\n\n      def __len__(self):\n          \n          return len(self.items)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n          \n          return self.popitem()\n\n      def pop(self, *args):\n          '''Remove and return a random `(key, value)` pair.\n\n          If no args are given, pop the most recent item, yielding a pair\n          consisting of the key and the value.\n\n          '''\n          return self.popitem()\n\n      def clear(self):\n          \n          self.data.clear()\n\n      def update(self, dict):\n          '''Update the container with the given dictionary of key/value pairs.\n          '''\n          self.data.update(dict)\n\n      def setdefault(self, key, value=None):\n          '''If the key is not present, insert the key, with the given\n          value, and return"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n          \n          return self.popitem()\n\n      def pop(self, *args):\n          '''Remove and return a random `(key, value)` pair.\n\n          If no args are given, pop the most recent item, yielding a pair\n          consisting of the key and the value.\n\n          '''\n          return self.popitem()\n\n      def clear(self):\n          \n          self.data.clear()\n\n      def update(self, dict):\n          '''Update the container with the given dictionary of key/value pairs.\n          '''\n          self.data.update(dict)\n\n      def setdefault(self, key, value=None):\n          '''If the key is not present, insert the key, with the given\n          value, and return", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.in_regex)\n\n\tdef _create_out_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.out_regex)\n\n\tdef _create_parameter_name_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.parameter_name_regex)\n\n\tdef _create_parameter_value_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.parameter_value_regex)\n\n\tdef _create_parameter_value_type_regex(self) -> Pattern:\n \t\t \n \t\t return re"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.in_regex)\n\n\tdef _create_out_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.out_regex)\n\n\tdef _create_parameter_name_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.parameter_name_regex)\n\n\tdef _create_parameter_value_regex(self) -> Pattern:\n \t\t \n \t\t return re.compile(self.parameter_value_regex)\n\n\tdef _create_parameter_value_type_regex(self) -> Pattern:\n \t\t \n \t\t return re", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n \t\t \n \t\t return self._converters[self._parameter_style]\n\n\t@property\n\tdef name(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].name\n\n\t@property\n\tdef description(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].description\n\n\t@property\n\tdef units(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].units\n\n\t@property\n\tdef default(self) -> Optional[Any]:\n \t\t \n \t\t return self._converters[self._parameter_style].default\n\n\t"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n \t\t \n \t\t return self._converters[self._parameter_style]\n\n\t@property\n\tdef name(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].name\n\n\t@property\n\tdef description(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].description\n\n\t@property\n\tdef units(self) -> str:\n \t\t \n \t\t return self._converters[self._parameter_style].units\n\n\t@property\n\tdef default(self) -> Optional[Any]:\n \t\t \n \t\t return self._converters[self._parameter_style].default\n\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii\n      def isoparse(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._ascii_lower(dt_str)\n          return _dateutil.parse(dt_str)\n\n      @_takes_ascii\n      def parse(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._ascii_lower(dt_str)\n          return _dateutil.parse(dt_str)\n\n      @_takes_ascii\n      def parse_datetime(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._asci"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii\n      def isoparse(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._ascii_lower(dt_str)\n          return _dateutil.parse(dt_str)\n\n      @_takes_ascii\n      def parse(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._ascii_lower(dt_str)\n          return _dateutil.parse(dt_str)\n\n      @_takes_ascii\n      def parse_datetime(self, dt_str):\n          \n          import _dateutil\n          dt_str = self._asci", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n                ignoretz=False, tzinfos=None, **kwargs):\n          \n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          sign = 1 if self._isdate(timestr) else -1\n          if sign == 1:\n              return self._parse_date_time(timestr, ignoretz=ignoretz,\n                  tzinfos=tzinfos, **kwargs)\n          else:\n              return self._parse_time(timestr, tzinfos=tzinfos, **kwargs)\n\n      def _parse_date_time(self, timestr, tzinfos=None, **kwargs):\n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          if '.' in timestr:\n              return self._parse_time_w_units(timestr, tzinfos=tz"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n                ignoretz=False, tzinfos=None, **kwargs):\n          \n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          sign = 1 if self._isdate(timestr) else -1\n          if sign == 1:\n              return self._parse_date_time(timestr, ignoretz=ignoretz,\n                  tzinfos=tzinfos, **kwargs)\n          else:\n              return self._parse_time(timestr, tzinfos=tzinfos, **kwargs)\n\n      def _parse_date_time(self, timestr, tzinfos=None, **kwargs):\n          if tzinfos is None:\n              tzinfos = self.tzinfos\n          if '.' in timestr:\n              return self._parse_time_w_units(timestr, tzinfos=tz", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs\n      def fromutc(self, dt):\n          \n          if self._tzinfo is None:\n              self._tzinfo = dt.tzinfo\n          return self._tzinfo.fromutc(dt)\n\n      def _convert_for_strptime(self, s):\n          if isinstance(s, datetime):\n              return _convert_for_strptime_datetime(s)\n          else:\n              return s\n\n\n      def __abs__(self):\n          return self.__class__(0, 0, 0, 0, 0, 0, 0, 0)\n\n      def __neg__(self):\n          return self.__class__(0, 0, -1, 0, 0, 0, 0, 0)\n\n      def __pos__(self):\n          return self.__class"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs\n      def fromutc(self, dt):\n          \n          if self._tzinfo is None:\n              self._tzinfo = dt.tzinfo\n          return self._tzinfo.fromutc(dt)\n\n      def _convert_for_strptime(self, s):\n          if isinstance(s, datetime):\n              return _convert_for_strptime_datetime(s)\n          else:\n              return s\n\n\n      def __abs__(self):\n          return self.__class__(0, 0, 0, 0, 0, 0, 0, 0)\n\n      def __neg__(self):\n          return self.__class__(0, 0, -1, 0, 0, 0, 0, 0)\n\n      def __pos__(self):\n          return self.__class", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n      \n      if tzinfo is None:\n          return tzinfo\n      if dt.tzinfo is not None:\n          return dt.tzinfo\n      return tzinfo()\n\n\nclass DefaultTimezoneInfo(datetime.tzinfo):\n      def __init__(self, tzoffset=None):\n          self._tzoffset = tzoffset\n\n      def tzoffset(self, dt, offset):\n          return self._tzoffset\n\n      def utcoffset(self, dt):\n          return timedelta(hours=self._tzoffset)\n\n      def dst(self, dt):\n          return timedelta(0)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n      \n      if tzinfo is None:\n          return tzinfo\n      if dt.tzinfo is not None:\n          return dt.tzinfo\n      return tzinfo()\n\n\nclass DefaultTimezoneInfo(datetime.tzinfo):\n      def __init__(self, tzoffset=None):\n          self._tzoffset = tzoffset\n\n      def tzoffset(self, dt, offset):\n          return self._tzoffset\n\n      def utcoffset(self, dt):\n          return timedelta(hours=self._tzoffset)\n\n      def dst(self, dt):\n          return timedelta(0)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n          \n          self.cut_chars = before\n          self.cut_chars_len = len(self.cut_chars)\n\n      def set_n_bins(self, n_bins: int) -> None:\n          \n          self.n_bins = n_bins\n          self.n_bins_len = len(self.n_bins)\n\n      def set_n_bins_range(self, b_min: int, b_max: int) -> None:\n          \n          self.b_min = b_min\n          self.b_min_len = len(self.b_min)\n          self.b_max = b_max\n          self.b_max"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n          \n          self.cut_chars = before\n          self.cut_chars_len = len(self.cut_chars)\n\n      def set_n_bins(self, n_bins: int) -> None:\n          \n          self.n_bins = n_bins\n          self.n_bins_len = len(self.n_bins)\n\n      def set_n_bins_range(self, b_min: int, b_max: int) -> None:\n          \n          self.b_min = b_min\n          self.b_min_len = len(self.b_min)\n          self.b_max = b_max\n          self.b_max", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n      \n      from. import diaspora\n      if diaspora.is_diaspora_request(request):\n          return True\n      return False\n\n\ndef is_diaspora_response(response: ResponseType) -> bool:\n      \n      from. import diaspora\n      if diaspora.is_diaspora_response(response):\n          return True\n      return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n      \n      from. import diaspora\n      if diaspora.is_diaspora_request(request):\n          return True\n      return False\n\n\ndef is_diaspora_response(response: ResponseType) -> bool:\n      \n      from. import diaspora\n      if diaspora.is_diaspora_response(response):\n          return True\n      return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n      \n      if request.method == 'POST':\n          return True\n      return False\n\n\ndef get_request(request: RequestType) -> Optional[str]:\n      \n      if request.method == 'GET':\n          return request.url\n      return None\n\n\ndef get_request_data(request: RequestType) -> Optional[Dict[str, Any]]:\n      \n      if request.method == 'GET':\n          return request.data\n      return None\n\n\ndef get_request_headers(request: RequestType) -> Optional[Dict[str, Any]]:\n      \n      if request.method == 'GET':\n          return request.headers\n      return None\n\n\ndef get_request_user_agent(request"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n      \n      if request.method == 'POST':\n          return True\n      return False\n\n\ndef get_request(request: RequestType) -> Optional[str]:\n      \n      if request.method == 'GET':\n          return request.url\n      return None\n\n\ndef get_request_data(request: RequestType) -> Optional[Dict[str, Any]]:\n      \n      if request.method == 'GET':\n          return request.data\n      return None\n\n\ndef get_request_headers(request: RequestType) -> Optional[Dict[str, Any]]:\n      \n      if request.method == 'GET':\n          return request.headers\n      return None\n\n\ndef get_request_user_agent(request", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n      \n      if not dt:\n          return ''\n      if not dt.tzinfo:\n          return dt.strftime('%Y-%m-%dT%H:%M:%S')\n      return dt.strftime('%Y-%m-%dT%H:%M:%S.%f')\n\n\ndef get_format_dt(dt):\n      \n      if not dt:\n          return ''\n      if not dt.tzinfo:\n          return dt.strftime('%Y-%m-%dT%H:%M:%S')\n      return dt.strftime('%Y-%m-%dT%H:%M:%S.%f')\n\n\ndef format_dt_time"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n      \n      if not dt:\n          return ''\n      if not dt.tzinfo:\n          return dt.strftime('%Y-%m-%dT%H:%M:%S')\n      return dt.strftime('%Y-%m-%dT%H:%M:%S.%f')\n\n\ndef get_format_dt(dt):\n      \n      if not dt:\n          return ''\n      if not dt.tzinfo:\n          return dt.strftime('%Y-%m-%dT%H:%M:%S')\n      return dt.strftime('%Y-%m-%dT%H:%M:%S.%f')\n\n\ndef format_dt_time", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text.translate(str.maketrans('', '', string.punctuation))\n      text = re.sub(r'\\s+','', text)\n      if replacer:\n          text = replacer(text)\n      tags = set()\n      for word in re.split(r'\\s+', text):\n          if word in tags:\n              continue\n          for tag in re.split(r'\\s+', word):\n              tags.add(tag)\n      return tags, text\n\n\ndef find_tags_and_replace(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text.translate(str."], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text.translate(str.maketrans('', '', string.punctuation))\n      text = re.sub(r'\\s+','', text)\n      if replacer:\n          text = replacer(text)\n      tags = set()\n      for word in re.split(r'\\s+', text):\n          if word in tags:\n              continue\n          for tag in re.split(r'\\s+', word):\n              tags.add(tag)\n      return tags, text\n\n\ndef find_tags_and_replace(text: str, replacer: callable = None) -> Tuple[Set, str]:\n      \n      text = text.lower()\n      text = text.translate(str.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n      \n      text = re.sub(r'\\s+','', text.strip())\n      text = re.sub(r'\\s+','', text)\n      text = text.replace('\\t','')\n      text = text.replace('\\n','')\n      text = text.replace('\\r','')\n      text = text.replace('\\xa0','')\n      text = text.replace('\\u2028','')\n      text = text.replace('\\u2029','')\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n      \n      text = re.sub(r'\\s+','', text.strip())\n      text = re.sub(r'\\s+','', text)\n      text = text.replace('\\t','')\n      text = text.replace('\\n','')\n      text = text.replace('\\r','')\n      text = text.replace('\\xa0','')\n      text = text.replace('\\u2028','')\n      text = text.replace('\\u2029','')\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s+','', text)\n      text = re.sub(r'\\s", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = requests.head(url, timeout=10, allow_redirects=False)\n          if response.status_code == 200:\n              return response.headers['content-type']\n      except requests.exceptions.RequestException:\n          pass\n      return None\n\n\ndef get_all_content_type(url: str) -> List[str]:\n      \n      try:\n          response = requests.head(url, timeout=10, allow_redirects=False)\n          if response.status_code == 200:\n              return response.headers['content-type'].split('/')\n      except requests.exceptions.RequestException:\n          pass\n      return []\n\n\ndef get_all_content_type_from_url(url:"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n      \n      try:\n          response = requests.head(url, timeout=10, allow_redirects=False)\n          if response.status_code == 200:\n              return response.headers['content-type']\n      except requests.exceptions.RequestException:\n          pass\n      return None\n\n\ndef get_all_content_type(url: str) -> List[str]:\n      \n      try:\n          response = requests.head(url, timeout=10, allow_redirects=False)\n          if response.status_code == 200:\n              return response.headers['content-type'].split('/')\n      except requests.exceptions.RequestException:\n          pass\n      return []\n\n\ndef get_all_content_type_from_url(url:", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n      \n      return tag in tags\n\n\n@pytest.mark.parametrize(\"word,tag\", [\n      (\"hello\", \"hello\"),\n      (\"hello\", \"hello_world\"),\n      (\"he\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n      \n      return tag in tags\n\n\n@pytest.mark.parametrize(\"word,tag\", [\n      (\"hello\", \"hello\"),\n      (\"hello\", \"hello_world\"),\n      (\"he\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n      (\"hello\", \"hello_world\"),\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value'}\n                  }\n              }\n          }\n      }\n\n\ndef xml_as_dict(node):\n      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name'\n              },\n              'children': xml_children_as_dict(node)\n          }\n      }\n\n\ndef xml_as_string(node):\n      '''Turn an XML node into a string, keyed by"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name',\n                  'value': 'value'\n              },\n              'child': {\n                  'attributes': {'name': 'name'},\n                  'child': {\n                      'attributes': {'value': 'value'}\n                  }\n              }\n          }\n      }\n\n\ndef xml_as_dict(node):\n      \n      return {\n          'xml': {\n              'attributes': {\n                  'name': 'name'\n              },\n              'children': xml_children_as_dict(node)\n          }\n      }\n\n\ndef xml_as_string(node):\n      '''Turn an XML node into a string, keyed by", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n      \n      if not (\n          sender_handle == entity_handle.sender_handle and\n          entity_handle.entity_handle == sender_handle\n      ):\n          raise Exception(\n              \"sender and entity handles do not match: {} vs {}\".format(\n                  sender_handle, entity_handle\n              )\n          )\n\ndef check_sender_and_entity_handle_exists(sender_handle):\n      \n      if not sender_handle:\n          raise Exception(\"sender handle is None\")\n\ndef check_entity_and_sender_handles_exists(entity_handle, sender_handle):\n      \n      if not (\n          entity_handle.entity_handle == sender_handle and\n          entity_handle.s"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n      \n      if not (\n          sender_handle == entity_handle.sender_handle and\n          entity_handle.entity_handle == sender_handle\n      ):\n          raise Exception(\n              \"sender and entity handles do not match: {} vs {}\".format(\n                  sender_handle, entity_handle\n              )\n          )\n\ndef check_sender_and_entity_handle_exists(sender_handle):\n      \n      if not sender_handle:\n          raise Exception(\"sender handle is None\")\n\ndef check_entity_and_sender_handles_exists(entity_handle, sender_handle):\n      \n      if not (\n          entity_handle.entity_handle == sender_handle and\n          entity_handle.s", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n      \n      return NodeInfo(\n          hostname=url.get_hostname(),\n          hostname_prefix=url.get_hostname_prefix(),\n          port=url.get_port(),\n          name=url.get_name(),\n          username=url.get_username(),\n          password=url.get_password(),\n          certificate=url.get_certificate(),\n          certificate_key=url.get_certificate_key(),\n          certificate_key_passphrase=url.get_certificate_key_passphrase(),\n          certificate_alias=url.get_certificate_alias(),\n          certificate_alias_passphrase=url.get_certificate_alias_passphrase(),\n          certificate_alias_url=url.get_certificate_alias_url(),\n          certificate_alias_url_passphrase"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n      \n      return NodeInfo(\n          hostname=url.get_hostname(),\n          hostname_prefix=url.get_hostname_prefix(),\n          port=url.get_port(),\n          name=url.get_name(),\n          username=url.get_username(),\n          password=url.get_password(),\n          certificate=url.get_certificate(),\n          certificate_key=url.get_certificate_key(),\n          certificate_key_passphrase=url.get_certificate_key_passphrase(),\n          certificate_alias=url.get_certificate_alias(),\n          certificate_alias_passphrase=url.get_certificate_alias_passphrase(),\n          certificate_alias_url=url.get_certificate_alias_url(),\n          certificate_alias_url_passphrase", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n      \n      if doc.get('signature'):\n          try:\n              signature_bytes = base64.b64decode(doc['signature'])\n              signature_bytes = base64.b64decode(signature_bytes)\n              signature_bytes = base64.b64decode(signature_bytes)\n              sig_bytes = signature_bytes['sig']\n              sig_bytes = base64.b64decode(sig_bytes)\n              sig_bytes = base64.b64decode(sig_bytes)\n              pk_bytes = base64.b64decode(public_key)\n              pk_bytes = base64.b64decode(pk_bytes)\n              pk_bytes = base64.b64decode(pk_"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n      \n      if doc.get('signature'):\n          try:\n              signature_bytes = base64.b64decode(doc['signature'])\n              signature_bytes = base64.b64decode(signature_bytes)\n              signature_bytes = base64.b64decode(signature_bytes)\n              sig_bytes = signature_bytes['sig']\n              sig_bytes = base64.b64decode(sig_bytes)\n              sig_bytes = base64.b64decode(sig_bytes)\n              pk_bytes = base64.b64decode(public_key)\n              pk_bytes = base64.b64decode(pk_bytes)\n              pk_bytes = base64.b64decode(pk_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n      \n      diaspora_webfinger_data = json.loads(document)\n\n      if diaspora_webfinger_data[\"type\"] == \"new\":\n          return parse_diaspora_webfinger_new(diaspora_webfinger_data)\n      elif diaspora_webfinger_data[\"type\"] == \"old\":\n          return parse_diaspora_webfinger_old(diaspora_webfinger_data)\n      else:\n          return {}\n\n\ndef parse_diaspora_webfinger_new(diaspora_webfinger_data: Dict) -> Dict:\n      \n      diaspora_webfinger_data[\"url\"] = diaspora_webfinger_data[\"url\"].replace"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n      \n      diaspora_webfinger_data = json.loads(document)\n\n      if diaspora_webfinger_data[\"type\"] == \"new\":\n          return parse_diaspora_webfinger_new(diaspora_webfinger_data)\n      elif diaspora_webfinger_data[\"type\"] == \"old\":\n          return parse_diaspora_webfinger_old(diaspora_webfinger_data)\n      else:\n          return {}\n\n\ndef parse_diaspora_webfinger_new(diaspora_webfinger_data: Dict) -> Dict:\n      \n      diaspora_webfinger_data[\"url\"] = diaspora_webfinger_data[\"url\"].replace", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n      \n      try:\n          with open(os.path.expanduser(f'~/.{handle}'), 'rb') as f:\n              return f.read().decode('utf-8').strip()\n      except IOError:\n          return None\n\n\ndef try_get_webfinger_document_url(handle: str) -> Optional[str]:\n      \n      try:\n          url = try_retrieve_webfinger_document(handle)\n          if url:\n              return url\n      except IOError:\n          pass\n      return None\n\n\ndef _get_webfinger_document_url(handle: str) -> Optional[str]:\n      \n      url = try_get_webfinger_document_url(handle)\n     "], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n      \n      try:\n          with open(os.path.expanduser(f'~/.{handle}'), 'rb') as f:\n              return f.read().decode('utf-8').strip()\n      except IOError:\n          return None\n\n\ndef try_get_webfinger_document_url(handle: str) -> Optional[str]:\n      \n      try:\n          url = try_retrieve_webfinger_document(handle)\n          if url:\n              return url\n      except IOError:\n          pass\n      return None\n\n\ndef _get_webfinger_document_url(handle: str) -> Optional[str]:\n      \n      url = try_get_webfinger_document_url(handle)\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n      \n      url = 'https://diaspora.org/diaspora/webfinger/webfinger/'\n      req = Request(url + handle, headers={'User-Agent': 'Mozilla/5.0'})\n      try:\n          response = urlopen(req)\n      except HTTPError as e:\n          if e.code == 404:\n              return None\n          raise\n      except URLError as e:\n          if e.reason == 'ConnectionRefusedError':\n              return None\n          raise\n      elif response.getcode() == 200:\n          return BeautifulSoup(response.read().decode('utf-8'),\n                               features='html.parser')\n\ndef retrieve_and_parse_diaspora_tbs_webfinger(handle, target_tag):\n      '''Retrieve a and parse a remote D"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n      \n      url = 'https://diaspora.org/diaspora/webfinger/webfinger/'\n      req = Request(url + handle, headers={'User-Agent': 'Mozilla/5.0'})\n      try:\n          response = urlopen(req)\n      except HTTPError as e:\n          if e.code == 404:\n              return None\n          raise\n      except URLError as e:\n          if e.reason == 'ConnectionRefusedError':\n              return None\n          raise\n      elif response.getcode() == 200:\n          return BeautifulSoup(response.read().decode('utf-8'),\n                               features='html.parser')\n\ndef retrieve_and_parse_diaspora_tbs_webfinger(handle, target_tag):\n      '''Retrieve a and parse a remote D", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n      \n      return Document(host, Document.host_meta, host.metadata.get('host_meta', {}))\n\n\n@dataclass\nclass Document:\n      \n      host: str\n      host_meta: Dict[str, Dict[str, str]]\n      host_name: str\n      host_meta_name: str\n      host_meta_type: str\n      host_meta_id: Optional[str] = None\n\n      @classmethod\n      def from_doc(cls, doc: Document) -> Document:\n          return cls(doc.host, doc.host_meta, doc.host_name)\n\n      def to_doc(self) -> Document:\n          return Document(\n              self.host,\n              self.host_meta,\n              self.host"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n      \n      return Document(host, Document.host_meta, host.metadata.get('host_meta', {}))\n\n\n@dataclass\nclass Document:\n      \n      host: str\n      host_meta: Dict[str, Dict[str, str]]\n      host_name: str\n      host_meta_name: str\n      host_meta_type: str\n      host_meta_id: Optional[str] = None\n\n      @classmethod\n      def from_doc(cls, doc: Document) -> Document:\n          return cls(doc.host, doc.host_meta, doc.host_name)\n\n      def to_doc(self) -> Document:\n          return Document(\n              self.host,\n              self.host_meta,\n              self.host", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n      \n      return requests.post(url, data=data, timeout=timeout,\n                           headers={'Content-Type': 'application/json'},\n                           params=args, **kwargs)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n      \n      return requests.post(url, data=data, timeout=timeout,\n                           headers={'Content-Type': 'application/json'},\n                           params=args, **kwargs)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          return dict_insert(dic[key], val, *keys)\n\n\ndef dict_update(dic, val, key, *keys):\n      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          return dict_update(dic[key], val, *keys)\n\n\ndef dict_pop(dic, key, *keys):\n      \n      if len(keys) == 0:\n          dic.pop(key)\n          return dic\n      else:\n          return dict_pop(dic[key"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          return dict_insert(dic[key], val, *keys)\n\n\ndef dict_update(dic, val, key, *keys):\n      \n      if len(keys) == 0:\n          dic[key] = val\n          return dic\n      else:\n          return dict_update(dic[key], val, *keys)\n\n\ndef dict_pop(dic, key, *keys):\n      \n      if len(keys) == 0:\n          dic.pop(key)\n          return dic\n      else:\n          return dict_pop(dic[key", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n      \n      import os\n      import re\n      import traceback\n      import tempfile\n      import itertools\n      import json\n      import types\n      import subprocess\n      import shutil\n      import zipfile\n\n      from pyngus.exception import PyngusException\n      from pyngus.utils import read_file_to_str, get_sub_dirs\n      from pyngus.utils.misc import make_dirs\n\n      def list_dirs(dir_path):\n          if not os.path.isdir(dir_path):\n              raise PyngusException('Directory does not exist: %s' % dir_path)\n          return os.listdir(dir_path)\n\n      def list_files(dir_path):\n          if not os.path"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n      \n      import os\n      import re\n      import traceback\n      import tempfile\n      import itertools\n      import json\n      import types\n      import subprocess\n      import shutil\n      import zipfile\n\n      from pyngus.exception import PyngusException\n      from pyngus.utils import read_file_to_str, get_sub_dirs\n      from pyngus.utils.misc import make_dirs\n\n      def list_dirs(dir_path):\n          if not os.path.isdir(dir_path):\n              raise PyngusException('Directory does not exist: %s' % dir_path)\n          return os.listdir(dir_path)\n\n      def list_files(dir_path):\n          if not os.path", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod\n      def ansible_config_manager(cls):\n          \n          return cls._config_manager\n\n      @classmethod\n      def ansible_config_manager_version(cls):\n          \n          return cls._config_manager_version\n\n      @classmethod\n      def ansible_config_manager_config_version(cls):\n          \n          return cls._config_manager_config_version\n\n      @classmethod\n      def ansible_config_manager_config_major_version(cls):\n          \n          return cls._config_manager_config_major_version\n\n      @classmethod\n      def ansible_config_manager_config_minor_version(cls):\n          '''Gets the ansible config"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n      def ansible_config_manager(cls):\n          \n          return cls._config_manager\n\n      @classmethod\n      def ansible_config_manager_version(cls):\n          \n          return cls._config_manager_version\n\n      @classmethod\n      def ansible_config_manager_config_version(cls):\n          \n          return cls._config_manager_config_version\n\n      @classmethod\n      def ansible_config_manager_config_major_version(cls):\n          \n          return cls._config_manager_config_major_version\n\n      @classmethod\n      def ansible_config_manager_config_minor_version(cls):\n          '''Gets the ansible config", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod\n      def workspace_manager(cls):\n          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def workspace_manager_class(cls, workspace_manager_class):\n          \n          return cls.__metaclass__(\n              'WorkspaceManager', (),\n              {'workspace_manager_class': workspace_manager_class})\n\n      @classmethod\n      def workspace(cls, name):\n          \n          return cls.__metaclass__(\n              'Workspace', (),\n              {'name': name})\n\n      @classmethod\n      def get_workspace(cls, name):\n          '''Returns a workspace by its name.\n\n          :param name: The name of the workspace.\n          :"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n      def workspace_manager(cls):\n          \n          return cls.workspace_manager_class(cls.workspace_manager_class.workspace)\n\n      @classmethod\n      def workspace_manager_class(cls, workspace_manager_class):\n          \n          return cls.__metaclass__(\n              'WorkspaceManager', (),\n              {'workspace_manager_class': workspace_manager_class})\n\n      @classmethod\n      def workspace(cls, name):\n          \n          return cls.__metaclass__(\n              'Workspace', (),\n              {'name': name})\n\n      @classmethod\n      def get_workspace(cls, name):\n          '''Returns a workspace by its name.\n\n          :param name: The name of the workspace.\n          :", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod\n      def plugins_manager(cls):\n          \n          return cls._plugins\n\n      @classmethod\n      def get_plugin(cls, plugin):\n          \n          return cls._plugins.get(plugin)\n\n      @classmethod\n      def get_plugin_manager(cls):\n          \n          return cls._plugins_manager\n\n      @classmethod\n      def get_plugin_manager_for(cls, plugin):\n          \n          return cls._plugins_manager.get(plugin)\n\n      @classmethod\n      def get_plugin_manager_for_all(cls):\n          \n          return cls._plugins_manager\n\n      @classmethod\n      def get_plugins_manager(cls):"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n      def plugins_manager(cls):\n          \n          return cls._plugins\n\n      @classmethod\n      def get_plugin(cls, plugin):\n          \n          return cls._plugins.get(plugin)\n\n      @classmethod\n      def get_plugin_manager(cls):\n          \n          return cls._plugins_manager\n\n      @classmethod\n      def get_plugin_manager_for(cls, plugin):\n          \n          return cls._plugins_manager.get(plugin)\n\n      @classmethod\n      def get_plugin_manager_for_all(cls):\n          \n          return cls._plugins_manager\n\n      @classmethod\n      def get_plugins_manager(cls):", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod\n      def validate_from_content(cls, spec_content=None):\n          \n          spec_content = spec_content or {}\n          if not all(k in spec_content for k in ('name','version', 'license', 'description')):\n              return False\n\n          if not all(\n              k in spec_content for k in\n              ('url', 'packages', 'platforms', 'python', 'install_requires','setup_requires', 'extras_require')\n          ):\n              return False\n\n          if 'license' not in spec_content:\n              spec_content['license'] = 'MIT'\n\n          return True\n\n      @classmethod\n      def validate_version(cls, spec_version):\n          \n          if not isinstance(spec_version, str):\n              return False\n          try:\n              spec_version = spec_version.strip().lower()"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n      def validate_from_content(cls, spec_content=None):\n          \n          spec_content = spec_content or {}\n          if not all(k in spec_content for k in ('name','version', 'license', 'description')):\n              return False\n\n          if not all(\n              k in spec_content for k in\n              ('url', 'packages', 'platforms', 'python', 'install_requires','setup_requires', 'extras_require')\n          ):\n              return False\n\n          if 'license' not in spec_content:\n              spec_content['license'] = 'MIT'\n\n          return True\n\n      @classmethod\n      def validate_version(cls, spec_version):\n          \n          if not isinstance(spec_version, str):\n              return False\n          try:\n              spec_version = spec_version.strip().lower()", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod\n      def validate_from_file(cls, yaml_file=None):\n          \n          with open(yaml_file, 'r') as stream:\n              try:\n                  try:\n                      cls.from_yaml(stream)\n                  except Exception as e:\n                      raise Exception(f'Error parsing YAML: {e}')\n              except yaml.YAMLError as e:\n                  raise Exception(f'Error parsing YAML: {e}')\n\n      @classmethod\n      def from_yaml(cls, yaml_stream):\n          \n          try:\n              cls.validate_yaml(yaml_stream)\n              cls.validate_fields(yaml_stream)\n          except Exception as e:\n              raise Exception(f'Error parsing YAML: {e}')\n\n      @classmethod\n      def"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n      def validate_from_file(cls, yaml_file=None):\n          \n          with open(yaml_file, 'r') as stream:\n              try:\n                  try:\n                      cls.from_yaml(stream)\n                  except Exception as e:\n                      raise Exception(f'Error parsing YAML: {e}')\n              except yaml.YAMLError as e:\n                  raise Exception(f'Error parsing YAML: {e}')\n\n      @classmethod\n      def from_yaml(cls, yaml_stream):\n          \n          try:\n              cls.validate_yaml(yaml_stream)\n              cls.validate_fields(yaml_stream)\n          except Exception as e:\n              raise Exception(f'Error parsing YAML: {e}')\n\n      @classmethod\n      def", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n          \n          if not self.config.get_option('reftarget', 'include'):\n              return\n          elif not self.config.get_option('reftarget', 'groups'):\n              return\n          groups = self.config.get_option('reftarget', 'groups')\n          included = self.config.get_option('reftarget', 'include')\n          for group in groups:\n              if group not in included:\n                  included.append(group)\n              parser_dict['include'] = included\n\n      def _include_file(self, parser_dict, path, line):\n          \n          if not self.config.get_option('reftarget', 'include'):\n              return\n         "], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n          \n          if not self.config.get_option('reftarget', 'include'):\n              return\n          elif not self.config.get_option('reftarget', 'groups'):\n              return\n          groups = self.config.get_option('reftarget', 'groups')\n          included = self.config.get_option('reftarget', 'include')\n          for group in groups:\n              if group not in included:\n                  included.append(group)\n              parser_dict['include'] = included\n\n      def _include_file(self, parser_dict, path, line):\n          \n          if not self.config.get_option('reftarget', 'include'):\n              return\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n          \n          if self.spec is None:\n              self.spec = self.get_spec()\n\n          if self.spec.description is not None:\n              self.description = self.spec.description\n          if self.spec.version is not None:\n              self.version = self.spec.version\n          if self.spec.epoch is not None:\n              self.epoch = self.spec.epoch\n          if self.spec.build is not None:\n              self.build = self.spec.build\n          if self.spec.python is not None:\n              self.python = self.spec.python\n          if self.spec.python_requires is not None:\n              self.python_requires = self.spec.python_requires\n          if self.spec.platform is not None:\n              self.platforms = self.spec.platforms"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n          \n          if self.spec is None:\n              self.spec = self.get_spec()\n\n          if self.spec.description is not None:\n              self.description = self.spec.description\n          if self.spec.version is not None:\n              self.version = self.spec.version\n          if self.spec.epoch is not None:\n              self.epoch = self.spec.epoch\n          if self.spec.build is not None:\n              self.build = self.spec.build\n          if self.spec.python is not None:\n              self.python = self.spec.python\n          if self.spec.python_requires is not None:\n              self.python_requires = self.spec.python_requires\n          if self.spec.platform is not None:\n              self.platforms = self.spec.platforms", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n          \n          if self.args:\n              return self.args\n          return {}\n\n      @classmethod\n      def _get_type_name(cls, type_):\n          return type_.__name__\n\n      def _get_type_args(self):\n          \n          if self.args:\n              return self.args\n          return []\n\n      def _get_type_kwargs(self):\n          \n          if self.kwargs:\n              return self.kwargs\n          return {}\n\n      def _get_type_func(self):\n          \n          if self.func:\n              return self.func\n          return None\n\n      def _get_type_func_args(self):\n          '''Return"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n          \n          if self.args:\n              return self.args\n          return {}\n\n      @classmethod\n      def _get_type_name(cls, type_):\n          return type_.__name__\n\n      def _get_type_args(self):\n          \n          if self.args:\n              return self.args\n          return []\n\n      def _get_type_kwargs(self):\n          \n          if self.kwargs:\n              return self.kwargs\n          return {}\n\n      def _get_type_func(self):\n          \n          if self.func:\n              return self.func\n          return None\n\n      def _get_type_func_args(self):\n          '''Return", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n          \n          if not self.args.no_deprecation:\n              if self.args.deprecation_version:\n                  if self.args.deprecation_version < self.args.deprecation_version_latest:\n                      print('The deprecated argument is not valid. The new version is '\n                            '{0}'.format(self.args.deprecation_version_latest))\n                      answer_file_args.add_error('deprecation_version',\n                                                   self.args.deprecation_version_latest)\n                      self.args.deprecation_version = self.args.deprecation_version_latest\n                  else:\n                      print('The deprecated argument is not valid. The new version is '\n                            '{0}'.format(self.args.deprecation_version))"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n          \n          if not self.args.no_deprecation:\n              if self.args.deprecation_version:\n                  if self.args.deprecation_version < self.args.deprecation_version_latest:\n                      print('The deprecated argument is not valid. The new version is '\n                            '{0}'.format(self.args.deprecation_version_latest))\n                      answer_file_args.add_error('deprecation_version',\n                                                   self.args.deprecation_version_latest)\n                      self.args.deprecation_version = self.args.deprecation_version_latest\n                  else:\n                      print('The deprecated argument is not valid. The new version is '\n                            '{0}'.format(self.args.deprecation_version))", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n          \n          option_specs = {}\n          if command_name.endswith('_log'):\n              option_specs['log'] = dict(type='bool', default=False,\n                                            help='Enable logging')\n          if command_name.endswith('_interactive'):\n              option_specs['interactive'] = dict(type='bool', default=False,\n                                                    help='Enable interactive mode')\n          if command_name.endswith('_wait'):\n              option_specs['wait'] = dict(type='int', default=1,\n                                            help='Number of seconds to wait')\n          if command_name.endswith('_output'):\n              option_specs['output'] = dict(type='str', default='text',\n                                               help='Output type"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n          \n          option_specs = {}\n          if command_name.endswith('_log'):\n              option_specs['log'] = dict(type='bool', default=False,\n                                            help='Enable logging')\n          if command_name.endswith('_interactive'):\n              option_specs['interactive'] = dict(type='bool', default=False,\n                                                    help='Enable interactive mode')\n          if command_name.endswith('_wait'):\n              option_specs['wait'] = dict(type='int', default=1,\n                                            help='Number of seconds to wait')\n          if command_name.endswith('_output'):\n              option_specs['output'] = dict(type='str', default='text',\n                                               help='Output type", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n          \n          option_spec = self.get_option_spec_for(command_name, argument_name)\n          if option_spec:\n              return option_spec\n          return {}\n\n\n      def get_option(self, command_name, argument_name):\n          '''Gets an option from the command line.\n\n          :param str command_name: The command name.\n          :param str argument_name: The option name.\n          :returns: The option.\n          :raises KeyError: If the option was not found.\n          '''\n          return getattr(self, '_get_%s_%s' % (command_name, argument_name))()\n\n      def get_option_spec_for(self, command_name, argument_name):\n          '''Gets the option"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n          \n          option_spec = self.get_option_spec_for(command_name, argument_name)\n          if option_spec:\n              return option_spec\n          return {}\n\n\n      def get_option(self, command_name, argument_name):\n          '''Gets an option from the command line.\n\n          :param str command_name: The command name.\n          :param str argument_name: The option name.\n          :returns: The option.\n          :raises KeyError: If the option was not found.\n          '''\n          return getattr(self, '_get_%s_%s' % (command_name, argument_name))()\n\n      def get_option_spec_for(self, command_name, argument_name):\n          '''Gets the option", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n          \n          return [a for a in args if a.silenced]\n\n      def get_silent_args_list(self, args):\n          \n          return [a for a in args if not a.silenced]\n\n      def get_silent_args_by_mod(self, args):\n          \n          return [a for a in args if a.silenced and self.module.get_mod(a.mod).get_silent_args_by_mod(a.mod)]\n\n      def get_silent_args_by_mod_list(self, args):\n          \n          return [a for a in args if a.silenced and self.module.get_mod(a.mod).get_silent_args_by_"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n          \n          return [a for a in args if a.silenced]\n\n      def get_silent_args_list(self, args):\n          \n          return [a for a in args if not a.silenced]\n\n      def get_silent_args_by_mod(self, args):\n          \n          return [a for a in args if a.silenced and self.module.get_mod(a.mod).get_silent_args_by_mod(a.mod)]\n\n      def get_silent_args_by_mod_list(self, args):\n          \n          return [a for a in args if a.silenced and self.module.get_mod(a.mod).get_silent_args_by_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n          \n          for arg in self.required_args:\n              if arg not in args:\n                  raise ValueError(f'{arg} is required')\n\n      def get_required_args(self):\n          \n          return self.required_args\n\n      def get_required_args_str(self):\n          \n          return ','.join(self.required_args)\n\n      def validate_optional_args(self, args):\n          \n          for arg in self.optional_args:\n              if arg not in args:\n                  raise ValueError(f'{arg} is optional')\n\n      def get_optional_args(self):\n          \n          return self.optional"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n          \n          for arg in self.required_args:\n              if arg not in args:\n                  raise ValueError(f'{arg} is required')\n\n      def get_required_args(self):\n          \n          return self.required_args\n\n      def get_required_args_str(self):\n          \n          return ','.join(self.required_args)\n\n      def validate_optional_args(self, args):\n          \n          for arg in self.optional_args:\n              if arg not in args:\n                  raise ValueError(f'{arg} is optional')\n\n      def get_optional_args(self):\n          \n          return self.optional", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                            args):\n          \n          args_for_command = []\n          for option in options_spec.get('options', []):\n              if option.get('when', None) and option['when'] not in self.required_when:\n                  continue\n              args_for_command.append(option['option'])\n          return args_for_command\n\n      def _get_command_args(self, command_name, options_spec, args):\n          \n          args_for_command = []\n          for option in options_spec.get('options', []):\n              if option.get('args') is not None and option['args'] not in args:\n                  continue\n              args_for_command.append(option['option'])\n          return args_for_command\n\n      def _get_default_args(self, command"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                            args):\n          \n          args_for_command = []\n          for option in options_spec.get('options', []):\n              if option.get('when', None) and option['when'] not in self.required_when:\n                  continue\n              args_for_command.append(option['option'])\n          return args_for_command\n\n      def _get_command_args(self, command_name, options_spec, args):\n          \n          args_for_command = []\n          for option in options_spec.get('options', []):\n              if option.get('args') is not None and option['args'] not in args:\n                  continue\n              args_for_command.append(option['option'])\n          return args_for_command\n\n      def _get_default_args(self, command", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n          \n          if len(args) > self.length:\n              raise ValueError('Length {} is greater than the maximum value of {}'.format(len(args), self.length))\n\n      def validate_args(self, args):\n          '''Validate arguments.\n\n          Args:\n              args (list): List of arguments.\n\n          Raises:\n              ValueError: If arguments are not of type list.\n              ValueError: If arguments are not of type string.\n              ValueError: If arguments are not of type float.\n              ValueError: If arguments are not of type bool.\n              ValueError: If arguments are not of type int.\n              ValueError: If arguments are not of type tuple.\n              ValueError: If arguments are not of type dict.\n              ValueError: If arguments are not of type None.\n          '''\n          if isinstance(args,"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n          \n          if len(args) > self.length:\n              raise ValueError('Length {} is greater than the maximum value of {}'.format(len(args), self.length))\n\n      def validate_args(self, args):\n          '''Validate arguments.\n\n          Args:\n              args (list): List of arguments.\n\n          Raises:\n              ValueError: If arguments are not of type list.\n              ValueError: If arguments are not of type string.\n              ValueError: If arguments are not of type float.\n              ValueError: If arguments are not of type bool.\n              ValueError: If arguments are not of type int.\n              ValueError: If arguments are not of type tuple.\n              ValueError: If arguments are not of type dict.\n              ValueError: If arguments are not of type None.\n          '''\n          if isinstance(args,", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n          \n          choices = self.choices\n          if choices is None:\n              choices = []\n          if args[1] not in choices:\n              raise forms.ValidationError(\n                  _('Please select a valid choice.'))\n\n      def clean_choice(self):\n          choice = self.cleaned_data['choice']\n          if choice not in self.choices:\n              raise forms.ValidationError(\n                  _('Please select a valid choice.'))\n          return choice\n\n\nclass UserForm(forms.Form):\n      email = forms.EmailField(label=_('Email'))\n      password1 = forms.CharField(\n          label=_('Password'),\n          widget=forms.PasswordInput)\n      password2 = forms.CharField(\n          label=_('Password confirmation'),\n          widget=forms.PasswordInput,\n         "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n          \n          choices = self.choices\n          if choices is None:\n              choices = []\n          if args[1] not in choices:\n              raise forms.ValidationError(\n                  _('Please select a valid choice.'))\n\n      def clean_choice(self):\n          choice = self.cleaned_data['choice']\n          if choice not in self.choices:\n              raise forms.ValidationError(\n                  _('Please select a valid choice.'))\n          return choice\n\n\nclass UserForm(forms.Form):\n      email = forms.EmailField(label=_('Email'))\n      password1 = forms.CharField(\n          label=_('Password'),\n          widget=forms.PasswordInput)\n      password2 = forms.CharField(\n          label=_('Password confirmation'),\n          widget=forms.PasswordInput,\n         ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n          \n          if args.get('min_value') is not None and args.get('max_value') is not None:\n              if args.get('min_value') < args.get('max_value'):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be greater than or equal to '\n                     'maximum value.'\n                  )\n\n      def validate_min_value(self, args):\n          \n          if args.get('min_value') is not None:\n              if not isinstance(args.get('min_value'), numbers.Number):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be a number.'\n                  )\n              if args.get('min_value') < 0:\n                  raise argparse.ArgumentTypeError("], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n          \n          if args.get('min_value') is not None and args.get('max_value') is not None:\n              if args.get('min_value') < args.get('max_value'):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be greater than or equal to '\n                     'maximum value.'\n                  )\n\n      def validate_min_value(self, args):\n          \n          if args.get('min_value') is not None:\n              if not isinstance(args.get('min_value'), numbers.Number):\n                  raise argparse.ArgumentTypeError(\n                      'Minimum value must be a number.'\n                  )\n              if args.get('min_value') < 0:\n                  raise argparse.ArgumentTypeError(", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                       spec_option):\n          \n          return spec_option.add_argument(\n              f'--{type_name}',\n              dest=option_name,\n              nargs=spec_option.nargs,\n              default=None,\n              required=spec_option.required,\n              help=f'Type of argument to be passed to {subcommand}'\n          )\n\n      def create_complex_argument_type(self, spec_option, subcommand, type_name,\n                                         option_name):\n          \n          return spec_option.add_argument(\n              f'--{type_name}',\n              action='store_true',\n              dest=option_name,\n              required=spec_option.required,\n              help=f'Type of argument to be passed to {subcommand}'\n          )\n\n     "], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                       spec_option):\n          \n          return spec_option.add_argument(\n              f'--{type_name}',\n              dest=option_name,\n              nargs=spec_option.nargs,\n              default=None,\n              required=spec_option.required,\n              help=f'Type of argument to be passed to {subcommand}'\n          )\n\n      def create_complex_argument_type(self, spec_option, subcommand, type_name,\n                                         option_name):\n          \n          return spec_option.add_argument(\n              f'--{type_name}',\n              action='store_true',\n              dest=option_name,\n              required=spec_option.required,\n              help=f'Type of argument to be passed to {subcommand}'\n          )\n\n     ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n          \n          custom_args = []\n          control_args = []\n          for arg in args:\n              if isinstance(arg, list):\n                  if len(arg) > 0 and isinstance(arg[0], list):\n                      control_args.append(arg[0])\n                  else:\n                      custom_args.append(arg)\n              elif isinstance(arg, dict):\n                  control_args.append(arg)\n              else:\n                  custom_args.append(arg)\n          return custom_args, control_args\n\n      def get_nested_custom_and_control_args_by_type(self, args):\n          \n          custom_args = []\n          control_args = []\n          for arg in args:\n              if isinstance(arg, list):\n                  if"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n          \n          custom_args = []\n          control_args = []\n          for arg in args:\n              if isinstance(arg, list):\n                  if len(arg) > 0 and isinstance(arg[0], list):\n                      control_args.append(arg[0])\n                  else:\n                      custom_args.append(arg)\n              elif isinstance(arg, dict):\n                  control_args.append(arg)\n              else:\n                  custom_args.append(arg)\n          return custom_args, control_args\n\n      def get_nested_custom_and_control_args_by_type(self, args):\n          \n          custom_args = []\n          control_args = []\n          for arg in args:\n              if isinstance(arg, list):\n                  if", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod\n      def merge_extra_vars(vars_dict, extra_vars=None):\n          \n          if extra_vars is None:\n              extra_vars = {}\n          if 'extra-vars' not in vars_dict:\n              vars_dict['extra-vars'] = extra_vars\n          else:\n              if not isinstance(vars_dict['extra-vars'], dict):\n                  raise AnsibleParserError('\"extra-vars\" must be a dictionary')\n              for k, v in iteritems(vars_dict['extra-vars']):\n                  if isinstance(k, string_types):\n                      k = 'extra-vars.%s' % k\n                  if isinstance(v, dict):\n                      v = merge_extra_vars(v, extra_vars.get(k, {}))\n                  extra_vars["], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod\n      def merge_extra_vars(vars_dict, extra_vars=None):\n          \n          if extra_vars is None:\n              extra_vars = {}\n          if 'extra-vars' not in vars_dict:\n              vars_dict['extra-vars'] = extra_vars\n          else:\n              if not isinstance(vars_dict['extra-vars'], dict):\n                  raise AnsibleParserError('\"extra-vars\" must be a dictionary')\n              for k, v in iteritems(vars_dict['extra-vars']):\n                  if isinstance(k, string_types):\n                      k = 'extra-vars.%s' % k\n                  if isinstance(v, dict):\n                      v = merge_extra_vars(v, extra_vars.get(k, {}))\n                  extra_vars[", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                       extra_vars=None, ansible_args=None):\n      \n      if verbose is None:\n          verbose = ansible_playbook._verbose\n\n      for module in ir_plugin.modules.values():\n          module.set_verbosity(verbose)\n\n      for plugin in ir_plugin.plugins.values():\n          plugin.set_verbosity(verbose)\n\n      for module in ir_plugin.modules.values():\n          module.set_verbosity(verbose)\n\n      for plugin in ir_plugin.plugins.values():\n          plugin.set_verbosity(verbose)\n\n      for variable in ir_workspace.variables.values():"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                       extra_vars=None, ansible_args=None):\n      \n      if verbose is None:\n          verbose = ansible_playbook._verbose\n\n      for module in ir_plugin.modules.values():\n          module.set_verbosity(verbose)\n\n      for plugin in ir_plugin.plugins.values():\n          plugin.set_verbosity(verbose)\n\n      for module in ir_plugin.modules.values():\n          module.set_verbosity(verbose)\n\n      for plugin in ir_plugin.plugins.values():\n          plugin.set_verbosity(verbose)\n\n      for variable in ir_workspace.variables.values():", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n      \n      playbook = cli_args.playbook\n      inventory_path = cli_args.inventory_path\n      inventory_file = cli_args.inventory_file\n      inventory = cli_args.inventory\n      tags = cli_args.tags\n      tags_path = cli_args.tags_path\n      tags_file = cli_args.tags_file\n      tags_vars = cli_args.tags_vars\n      tags_ignore_patterns = cli_args.tags_ignore_patterns\n      tags_exclude_patterns = cli_args.tags_exclude_patterns\n      tags_append_patterns = cli_args.tags_append_patterns\n      tags_purge_patterns = cli_args.tags_purge_patterns\n      tags_config"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n      \n      playbook = cli_args.playbook\n      inventory_path = cli_args.inventory_path\n      inventory_file = cli_args.inventory_file\n      inventory = cli_args.inventory\n      tags = cli_args.tags\n      tags_path = cli_args.tags_path\n      tags_file = cli_args.tags_file\n      tags_vars = cli_args.tags_vars\n      tags_ignore_patterns = cli_args.tags_ignore_patterns\n      tags_exclude_patterns = cli_args.tags_exclude_patterns\n      tags_append_patterns = cli_args.tags_append_patterns\n      tags_purge_patterns = cli_args.tags_purge_patterns\n      tags_config", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n          \n          for key in values_dict:\n              if key in self.CLI_ARGS_KEY:\n                  values_dict[key] = self.CLI_ARGS_KEY[key]\n          return values_dict\n\n\nclass CliArgumentParser(ArgumentParser):\n      '''Argument parser with a CLI style argument group.\n\n      This is a subclass of ArgumentParser that can be used by\n      the CliArgumentContext object.\n\n      The use of this object is discouraged, but it is still\n      supported by the `argparse` module.\n      '''\n\n      def __init__(self, *args, **kwargs):\n          super(CliArgumentParser, self).__init__(*args, **kwargs)\n          self.add_argument(\n              '--debug', dest='debug', action='store_true',"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n          \n          for key in values_dict:\n              if key in self.CLI_ARGS_KEY:\n                  values_dict[key] = self.CLI_ARGS_KEY[key]\n          return values_dict\n\n\nclass CliArgumentParser(ArgumentParser):\n      '''Argument parser with a CLI style argument group.\n\n      This is a subclass of ArgumentParser that can be used by\n      the CliArgumentContext object.\n\n      The use of this object is discouraged, but it is still\n      supported by the `argparse` module.\n      '''\n\n      def __init__(self, *args, **kwargs):\n          super(CliArgumentParser, self).__init__(*args, **kwargs)\n          self.add_argument(\n              '--debug', dest='debug', action='store_true',", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n      \n      files_to_add = []\n      for filename in os.listdir(plugin_dir):\n          if not filename.endswith('.py'):\n              continue\n          file_path = os.path.join(plugin_dir, filename)\n          try:\n              with open(file_path, 'r') as file:\n                  code = compile(file.read(), file_path, 'exec')\n                  exec(code, {'__file__': file_path})\n          except SyntaxError as e:\n              if e.lineno <= 0:\n                  continue\n              else:\n                  raise\n\n          files_to_add.append(filename)\n      return files_to_add\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n      \n      files_to_add = []\n      for filename in os.listdir(plugin_dir):\n          if not filename.endswith('.py'):\n              continue\n          file_path = os.path.join(plugin_dir, filename)\n          try:\n              with open(file_path, 'r') as file:\n                  code = compile(file.read(), file_path, 'exec')\n                  exec(code, {'__file__': file_path})\n          except SyntaxError as e:\n              if e.lineno <= 0:\n                  continue\n              else:\n                  raise\n\n          files_to_add.append(filename)\n      return files_to_add\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n          \n          if self.config_path is None:\n              return\n          self._check_path_exists()\n          os.environ['XDG_CONFIG_HOME'] = self.config_path\n          os.environ['XDG_CONFIG_HOME'] = self.config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n          \n          if self.config_path is None:\n              return\n          self._check_path_exists()\n          os.environ['XDG_CONFIG_HOME'] = self.config_path\n          os.environ['XDG_CONFIG_HOME'] = self.config_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n          \n          self.add_spec_cli_options(root_subparsers)\n          self.add_spec_subcommand(root_subparsers)\n          return root_subparsers\n\n      def add_spec_cli_options(self, root_subparsers):\n          \n          spec_cli_options = [\n              ('-h', '--help'),\n              ('-H', '--help-all'),\n              ('-H', '--help-all --h', '--help-all', '--help-all', '--help'),\n              ('-v', '--verbose'),\n              ('-V', '--verbose', '--"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n          \n          self.add_spec_cli_options(root_subparsers)\n          self.add_spec_subcommand(root_subparsers)\n          return root_subparsers\n\n      def add_spec_cli_options(self, root_subparsers):\n          \n          spec_cli_options = [\n              ('-h', '--help'),\n              ('-H', '--help-all'),\n              ('-H', '--help-all --h', '--help-all', '--help-all', '--help'),\n              ('-v', '--verbose'),\n              ('-V', '--verbose', '--", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):\n          \n          if root is None:\n              return path\n          if root == '/':\n              return path\n          if path == root:\n              return '/'\n          if path[:len(root)] == root:\n              return path[len(root):]\n          if path == '/' or path.startswith(root + '/'):\n              return '/'\n          return os.path.join(self.root, path[len(root):])\n\n      def read_file(self, path):\n          \n          with open(path, 'rb') as f:\n              return f.read()\n\n      def write_file(self, path, data):\n          \n          with open(path, 'wb') as f:\n              f.write(data)\n\n      def read_"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):\n          \n          if root is None:\n              return path\n          if root == '/':\n              return path\n          if path == root:\n              return '/'\n          if path[:len(root)] == root:\n              return path[len(root):]\n          if path == '/' or path.startswith(root + '/'):\n              return '/'\n          return os.path.join(self.root, path[len(root):])\n\n      def read_file(self, path):\n          \n          with open(path, 'rb') as f:\n              return f.read()\n\n      def write_file(self, path, data):\n          \n          with open(path, 'wb') as f:\n              f.write(data)\n\n      def read_", "is_pass": false, "return_code": 1}]}
