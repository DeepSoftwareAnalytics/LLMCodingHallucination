{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \n    seconds, nanoseconds = divmod(nanoseconds, 10**9)\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    return time(hours, minutes, seconds, nanoseconds, tz)\n\n\ndef dehydrate_time(value):\n    \n    return value.hour * 3600000000000 + value.minute * 60000000000 + value.second * 1000000000 + value.microsecond\n\n\ndef hydrate_date(nanoseconds):\n    '''Hydrator for `Date`"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \n    seconds, nanoseconds = divmod(nanoseconds, 10**9)\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    return time(hours, minutes, seconds, nanoseconds, tz)\n\n\ndef dehydrate_time(value):\n    \n    return value.hour * 3600000000000 + value.minute * 60000000000 + value.second * 1000000000 + value.microsecond\n\n\ndef hydrate_date(nanoseconds):\n    '''Hydrator for `Date`", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \n    return (value.days, value.seconds, value.microseconds)\n\n\ndef hydrate_timedelta(value):\n    \n    return datetime.timedelta(*value)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \n    return (value.days, value.seconds, value.microseconds)\n\n\ndef hydrate_timedelta(value):\n    \n    return datetime.timedelta(*value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \n    if value is None:\n        return None\n\n    return value.isoformat()\n\n\ndef hydrate_time(value):\n    \n    if value is None:\n        return None\n\n    from datetime import time\n\n    return time(*value.split(':'))\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \n    if value is None:\n        return None\n\n    return value.isoformat()\n\n\ndef hydrate_time(value):\n    \n    if value is None:\n        return None\n\n    from datetime import time\n\n    return time(*value.split(':'))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    \n    return dict(\n        x=value.x,\n        y=value.y,\n        z=value.z,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )\n\n\ndef dehydrate_multipoint(value):\n    \n    return dict(\n        coordinates=value.json,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )\n\n\ndef dehydrate_linestring(value):\n    \n    return dict(\n        coordinates=value.json,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    \n    return dict(\n        x=value.x,\n        y=value.y,\n        z=value.z,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )\n\n\ndef dehydrate_multipoint(value):\n    \n    return dict(\n        coordinates=value.json,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )\n\n\ndef dehydrate_linestring(value):\n    \n    return dict(\n        coordinates=value.json,\n        crs=value.crs.to_dict() if value.crs is not None else None\n    )", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n        \n        return tuple(self._columns.keys())\n\n    def values(self):\n        \n        return tuple(self._columns.values())\n\n    def items(self):\n        \n        return tuple(self._columns.items())\n\n    def get(self, key, default=None):\n        \n        self._columns.get(key, default)\n\n    def __eq__(self, other):\n        \n        if isinstance(other, Record):\n            return self._columns == other._columns\n        return NotImplemented\n\n    def __ne__(self, other):\n        \n        if isinstance(other,"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n        \n        return tuple(self._columns.keys())\n\n    def values(self):\n        \n        return tuple(self._columns.values())\n\n    def items(self):\n        \n        return tuple(self._columns.items())\n\n    def get(self, key, default=None):\n        \n        self._columns.get(key, default)\n\n    def __eq__(self, other):\n        \n        if isinstance(other, Record):\n            return self._columns == other._columns\n        return NotImplemented\n\n    def __ne__(self, other):\n        \n        if isinstance(other,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        protocol_handlers = {}\n        for subclass in cls.__subclasses__():\n            if not hasattr(subclass, 'SUPPORTED_PROTOCOL_VERSIONS'):\n                continue\n            if protocol_version is None:\n                protocol_handlers.update(\n                    {version: subclass for version in subclass.SUPPORTED_PROTOCOL_VERSIONS}\n                )\n            elif protocol_version in subclass.SUPPORTED_PROTOCOL_VERSIONS:\n                protocol_handlers[protocol_version] = subclass\n        return protocol_handlers\n\n    @property\n    @abc.abstractmethod\n    def local_product_tokens(self):\n        \n\n    @classmethod\n    def can_switch(cls, common_product_tokens, resolved_"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        protocol_handlers = {}\n        for subclass in cls.__subclasses__():\n            if not hasattr(subclass, 'SUPPORTED_PROTOCOL_VERSIONS'):\n                continue\n            if protocol_version is None:\n                protocol_handlers.update(\n                    {version: subclass for version in subclass.SUPPORTED_PROTOCOL_VERSIONS}\n                )\n            elif protocol_version in subclass.SUPPORTED_PROTOCOL_VERSIONS:\n                protocol_handlers[protocol_version] = subclass\n        return protocol_handlers\n\n    @property\n    @abc.abstractmethod\n    def local_product_tokens(self):\n        \n\n    @classmethod\n    def can_switch(cls, common_product_tokens, resolved_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__wrapped__ = func\n        return wrapper\n    return decorator\n\n\ndef transactional(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__wrapped__ = func\n        return wrapper\n    return decorator\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__wrapped__ = func\n        return wrapper\n    return decorator\n\n\ndef transactional(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__wrapped__ = func\n        return wrapper\n    return decorator\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n        \n        return self.it.index(key)\n\n    def __getitem__(self, key):\n        \n        return self.it[self.index(key)]\n\n    def __setitem__(self, key, value):\n        \n        self.it[self.index(key)] = value\n\n    def __delitem__(self, key):\n        \n        del self.it[self.index(key)]\n\n    def __iter__(self):\n        return iter(self.it)\n\n    def __reversed__(self):\n        return reversed(self.it)\n\n    def __contains__(self, key):\n        return key in self.it"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n        \n        return self.it.index(key)\n\n    def __getitem__(self, key):\n        \n        return self.it[self.index(key)]\n\n    def __setitem__(self, key, value):\n        \n        self.it[self.index(key)] = value\n\n    def __delitem__(self, key):\n        \n        del self.it[self.index(key)]\n\n    def __iter__(self):\n        return iter(self.it)\n\n    def __reversed__(self):\n        return reversed(self.it)\n\n    def __contains__(self, key):\n        return key in self.it", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n        \n        return self._values(keys)\n    def items(self, *keys):\n        \n        return self._items(keys)\n    def __getitem__(self, key):\n        if isinstance(key, str):\n            return self._d.get(key)\n        else:\n            return self._l[key]\n    def __getattr__(self, key):\n        if key == '_d' or key == '_l':\n            return self.__dict__[key]\n        else:\n            return self._d.get(key)\n    def __setattr__(self, key, value):\n        if key in ['_d', '_l']:\n            self.__dict__[key] = value\n        else:\n            self._d"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n        \n        return self._values(keys)\n    def items(self, *keys):\n        \n        return self._items(keys)\n    def __getitem__(self, key):\n        if isinstance(key, str):\n            return self._d.get(key)\n        else:\n            return self._l[key]\n    def __getattr__(self, key):\n        if key == '_d' or key == '_l':\n            return self.__dict__[key]\n        else:\n            return self._d.get(key)\n    def __setattr__(self, key, value):\n        if key in ['_d', '_l']:\n            self.__dict__[key] = value\n        else:\n            self._d", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n        \n        return self.dict(*keys)\n\n    def dict(self, *keys):\n        \n        return {k:self[k] for k in keys or self.keys()}\n\n    def values(self, *keys):\n        \n        return tuple(self[k] for k in keys or self.keys())\n\n    def items(self, *keys):\n        \n        return tuple((k,self[k]) for k in keys or self.keys())\n\n    def update(self, *args, **kwds):\n        '''Update this record, either"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n        \n        return self.dict(*keys)\n\n    def dict(self, *keys):\n        \n        return {k:self[k] for k in keys or self.keys()}\n\n    def values(self, *keys):\n        \n        return tuple(self[k] for k in keys or self.keys())\n\n    def items(self, *keys):\n        \n        return tuple((k,self[k]) for k in keys or self.keys())\n\n    def update(self, *args, **kwds):\n        '''Update this record, either", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n        \n        return self.pop() | (self.pop() << 8)\n    def pop_u32(self):\n        \n        return self.pop() | (self.pop() << 8) | (self.pop() << 16) | (self.pop() << 24)\n    def pop_u64(self):\n        \n        return self.pop() | (self.pop() << 8) | (self.pop() << 16) | (self.pop() << 24) | (self.pop() << 32) | (self.pop() << 4"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n        \n        return self.pop() | (self.pop() << 8)\n    def pop_u32(self):\n        \n        return self.pop() | (self.pop() << 8) | (self.pop() << 16) | (self.pop() << 24)\n    def pop_u64(self):\n        \n        return self.pop() | (self.pop() << 8) | (self.pop() << 16) | (self.pop() << 24) | (self.pop() << 32) | (self.pop() << 4", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.append(\n            self.pack_discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                              hydration_hooks=hydration_hooks),\n            **handlers)\n\n    def pack_discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                     hydration_hooks=None):\n        \n        flags = 0\n        if n != -1:\n            flags |= 0x0001\n        if qid != -1:\n            flags |= 0x0002\n        return self.pack_struct(\n            b'<BHI',\n            0"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.append(\n            self.pack_discard(n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                              hydration_hooks=hydration_hooks),\n            **handlers)\n\n    def pack_discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                     hydration_hooks=None):\n        \n        flags = 0\n        if n != -1:\n            flags |= 0x0001\n        if qid != -1:\n            flags |= 0x0002\n        return self.pack_struct(\n            b'<BHI',\n            0", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is None:\n            mode = self.default_mode\n        if bookmarks is None:\n            bookmarks = []\n        if metadata is None:\n            metadata = {}\n        if self.in_transaction():\n            raise TransactionError(\"BEGIN already in progress\")\n\n        self._append_query(b'BEGIN', (mode, bookmarks, metadata),\n                           (db, imp_user, timeout),\n                           (dehydration_hooks, hydration_hooks), handlers)\n        self.in_tx = True\n\n    def commit(self, n=None, qid=None, timeout=None):\n        \"\"\"Appends a COMMIT message to the output queue.\n        \"\"\"\n        if qid is None:\n            qid = self.most_recent_query_id\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode is None:\n            mode = self.default_mode\n        if bookmarks is None:\n            bookmarks = []\n        if metadata is None:\n            metadata = {}\n        if self.in_transaction():\n            raise TransactionError(\"BEGIN already in progress\")\n\n        self._append_query(b'BEGIN', (mode, bookmarks, metadata),\n                           (db, imp_user, timeout),\n                           (dehydration_hooks, hydration_hooks), handlers)\n        self.in_tx = True\n\n    def commit(self, n=None, qid=None, timeout=None):\n        \"\"\"Appends a COMMIT message to the output queue.\n        \"\"\"\n        if qid is None:\n            qid = self.most_recent_query_id\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \n    return int(n + 0.5)\n\n\ndef round_half_up(n):\n    \n    return int(n + 0.5) if n % 1 == 0.5 else int(n + 0.4)\n\n\ndef round_half_down(n):\n    '''>>> round_half_down(3) 3 >>> round_half_"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \n    return int(n + 0.5)\n\n\ndef round_half_up(n):\n    \n    return int(n + 0.5) if n % 1 == 0.5 else int(n + 0.4)\n\n\ndef round_half_down(n):\n    '''>>> round_half_down(3) 3 >>> round_half_", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    \n    from django.contrib.gis.geos import Point\n    from django.contrib.gis.db.models.fields import GeometryField\n    from django.db.models import SubfieldBase\n\n    class PointType(type):\n        def __new__(cls, name, bases, attrs):\n            return super(PointType, cls).__new__(cls, name, bases, attrs)\n\n        def __init__(cls, name, bases, attrs):\n            super(PointType, cls).__init__(name, bases, attrs)\n\n            for field_name, field_props in fields.items():\n                srid ="], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    \n    from django.contrib.gis.geos import Point\n    from django.contrib.gis.db.models.fields import GeometryField\n    from django.db.models import SubfieldBase\n\n    class PointType(type):\n        def __new__(cls, name, bases, attrs):\n            return super(PointType, cls).__new__(cls, name, bases, attrs)\n\n        def __init__(cls, name, bases, attrs):\n            super(PointType, cls).__init__(name, bases, attrs)\n\n            for field_name, field_props in fields.items():\n                srid =", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    \n\n    def deprecated_decorator(func):\n        \n\n        def deprecate(*args, **kwargs):\n            \n\n            warnings.warn(message, DeprecationWarning)\n            return func(*args, **kwargs)\n\n        deprecate.__name__ = func.__name__\n        deprecate.__doc__ = func.__doc__\n        deprecate.__dict__.update(func.__dict__)\n        return deprecate\n\n    return deprecated_decorator\n\n\n\n\nPY3 = (sys.version_info[0] == 3)\n\nif PY3:\n    string_types = str,\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    \n\n    def deprecated_decorator(func):\n        \n\n        def deprecate(*args, **kwargs):\n            \n\n            warnings.warn(message, DeprecationWarning)\n            return func(*args, **kwargs)\n\n        deprecate.__name__ = func.__name__\n        deprecate.__doc__ = func.__doc__\n        deprecate.__dict__.update(func.__dict__)\n        return deprecate\n\n    return deprecated_decorator\n\n\n\n\nPY3 = (sys.version_info[0] == 3)\n\nif PY3:\n    string_types = str,\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n        .libPaths(c({str(list(map(str,ro.rinternal_package_folders())))[1:-1]}))\n        options(device.dpi={str(ro.rinternal_device_dpi())})\n        options(repos=structure(c(CRAN=\"https://cloud.r-project.org\"), CRANextra=NULL))\n        options(download.file.method=\"libcurl\")\n        options(showDevice=FALSE)\n        options(warn=2)\n        {code}\n    '''\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    \n    return f'''\n        .libPaths(c({str(list(map(str,ro.rinternal_package_folders())))[1:-1]}))\n        options(device.dpi={str(ro.rinternal_device_dpi())})\n        options(repos=structure(c(CRAN=\"https://cloud.r-project.org\"), CRANextra=NULL))\n        options(download.file.method=\"libcurl\")\n        options(showDevice=FALSE)\n        options(warn=2)\n        {code}\n    '''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    max_length = min(_max_length, len(varargs))\n    if color:\n        if target_concurrency > 1:\n            fmt = '{}{}{}'\n        else:\n            fmt = '{}{}{}{}'\n        cmd = (\n            'bash', '-c', f'{cmd[0]} | xargs -P {target_concurrency} -n {max_length} -d \"\\n\" --color=always ' + ' '.join(\n                f'{{{i}}}' for i in range(1, len(cmd) + 1)\n            )\n        )\n    else:\n        cmd = (\n            'bash', '-c', f'{cmd[0]} | xargs -P {target_concurrency} -n {max_length} -d \"\\n\" ' + ' '.join(\n                f"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    max_length = min(_max_length, len(varargs))\n    if color:\n        if target_concurrency > 1:\n            fmt = '{}{}{}'\n        else:\n            fmt = '{}{}{}{}'\n        cmd = (\n            'bash', '-c', f'{cmd[0]} | xargs -P {target_concurrency} -n {max_length} -d \"\\n\" --color=always ' + ' '.join(\n                f'{{{i}}}' for i in range(1, len(cmd) + 1)\n            )\n        )\n    else:\n        cmd = (\n            'bash', '-c', f'{cmd[0]} | xargs -P {target_concurrency} -n {max_length} -d \"\\n\" ' + ' '.join(\n                f", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    shuffled = list(seq)\n    shuffled.sort(key=lambda x: hash(x))\n    return shuffled\n\n\ndef _shuffled_list(lst: list[T]) -> list[T]:\n    \n    shuffled = list(lst)\n    shuffled.sort(key=lambda x: hash(x))\n    return shuffled\n\n\ndef _shuffled_dict(dct: dict[K, T]) -> dict[K, T]:\n    \n    shuffled = dict(dct)\n    keys = list(shuffled.keys())\n    keys.sort(key=lambda x: hash(x))\n    shuffled = {k: shuffled[k] for k in"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    shuffled = list(seq)\n    shuffled.sort(key=lambda x: hash(x))\n    return shuffled\n\n\ndef _shuffled_list(lst: list[T]) -> list[T]:\n    \n    shuffled = list(lst)\n    shuffled.sort(key=lambda x: hash(x))\n    return shuffled\n\n\ndef _shuffled_dict(dct: dict[K, T]) -> dict[K, T]:\n    \n    shuffled = dict(dct)\n    keys = list(shuffled.keys())\n    keys.sort(key=lambda x: hash(x))\n    shuffled = {k: shuffled[k] for k in", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(map(int, s.split('.')))\n\n\n__all__ = [\n    'parse_version',\n]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(map(int, s.split('.')))\n\n\n__all__ = [\n    'parse_version',\n]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    if cmd[0].startswith('#!'):\n        if cmd[0].strip().split()[0] == '#!python':\n            cmd = ('python', *cmd[1:])\n        else:\n            cmd = (cmd[0].strip().split()[1], *cmd[1:])\n    return cmd\n\n\ndef normalize_env(env: dict[str, str]) -> dict[str, str]:\n    \n    if 'env' in env:\n        env['env'] = {k.upper(): v for k, v in env['env'].items()}\n\n    return env\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    if cmd[0].startswith('#!'):\n        if cmd[0].strip().split()[0] == '#!python':\n            cmd = ('python', *cmd[1:])\n        else:\n            cmd = (cmd[0].strip().split()[1], *cmd[1:])\n    return cmd\n\n\ndef normalize_env(env: dict[str, str]) -> dict[str, str]:\n    \n    if 'env' in env:\n        env['env'] = {k.upper(): v for k, v in env['env'].items()}\n\n    return env\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            k = key(*args, **kwargs)\n            try:\n                result = cache[k]\n            except KeyError:\n                if lock is None:\n                    result = func(*args, **kwargs)\n                    cache[k] = result\n                else:\n                    with lock:\n                        result = func(*args, **kwargs)\n                        cache[k] = result\n            except TypeError:\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            k = key(*args, **kwargs)\n            try:\n                result = cache[k]\n            except KeyError:\n                if lock is None:\n                    result = func(*args, **kwargs)\n                    cache[k] = result\n                else:\n                    with lock:\n                        result = func(*args, **kwargs)\n                        cache[k] = result\n            except TypeError:\n                result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def wrapper(func, *args, **kwargs):\n        try:\n            cache = wrapper.cache\n        except AttributeError:\n            cache = wrapper.cache = TTLCache(maxsize, ttl, timer, typed)\n\n        try:\n            return cache[args]\n        except KeyError:\n            result = func(*args, **kwargs)\n            try:\n                cache[args] = result\n            except ValueError:\n                pass\n            return result\n        except TypeError:\n            return func(*args, **kwargs)\n\n    return functools.update_wrapper(wrapper, func)\n\n\ndef ttl_lru_cache(maxsize=128, ttl=600, timer=time.monotonic, typed="], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    def wrapper(func, *args, **kwargs):\n        try:\n            cache = wrapper.cache\n        except AttributeError:\n            cache = wrapper.cache = TTLCache(maxsize, ttl, timer, typed)\n\n        try:\n            return cache[args]\n        except KeyError:\n            result = func(*args, **kwargs)\n            try:\n                cache[args] = result\n            except ValueError:\n                pass\n            return result\n        except TypeError:\n            return func(*args, **kwargs)\n\n    return functools.update_wrapper(wrapper, func)\n\n\ndef ttl_lru_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    \n    from functools import update_wrapper\n    from collections import deque\n    def decorating_function(user_function):\n        if typed:\n            key = lambda args, kwds: (type(args[0]),) + args + (tuple(sorted(kwds.items())),)\n        else:\n            key = lambda args, kwds: args\n        cache = {}\n        cache_get = cache.get\n        maxqueue = deque()\n        maxqueue_append = maxqueue.append\n        maxqueue_popleft = maxqueue.popleft\n        refcount = {}\n        refcount_get = refcount.get\n        refcount_setdefault = refcount.setdefault\n        def wrapper(*args, **kwds):\n            k = key(args, kwds)\n            result = cache_get(k)\n            if"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \n    from functools import update_wrapper\n    from collections import deque\n    def decorating_function(user_function):\n        if typed:\n            key = lambda args, kwds: (type(args[0]),) + args + (tuple(sorted(kwds.items())),)\n        else:\n            key = lambda args, kwds: args\n        cache = {}\n        cache_get = cache.get\n        maxqueue = deque()\n        maxqueue_append = maxqueue.append\n        maxqueue_popleft = maxqueue.popleft\n        refcount = {}\n        refcount_get = refcount.get\n        refcount_setdefault = refcount.setdefault\n        def wrapper(*args, **kwds):\n            k = key(args, kwds)\n            result = cache_get(k)\n            if", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    \n\n    from collections import deque\n\n    def decorating_function(user_function):\n        cache = {}\n        use_count = {}\n        head = None\n        tail = None\n        full = False\n\n        @wraps(user_function)\n        def wrapper(*args, **kwargs):\n            nonlocal head\n            nonlocal tail\n            nonlocal full\n            key = args\n            if kwargs:\n                key += tuple(sorted(kwargs.items()))\n\n            try:\n                result = cache[key]\n                use_count[key] += 1\n                wrapper.hits += 1\n            except KeyError:\n                result = user_function(*args, **kwargs)\n                cache[key] = result\n                use_count[key] = 0\n                wrapper.misses += 1\n                tail = key"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \n\n    from collections import deque\n\n    def decorating_function(user_function):\n        cache = {}\n        use_count = {}\n        head = None\n        tail = None\n        full = False\n\n        @wraps(user_function)\n        def wrapper(*args, **kwargs):\n            nonlocal head\n            nonlocal tail\n            nonlocal full\n            key = args\n            if kwargs:\n                key += tuple(sorted(kwargs.items()))\n\n            try:\n                result = cache[key]\n                use_count[key] += 1\n                wrapper.hits += 1\n            except KeyError:\n                result = user_function(*args, **kwargs)\n                cache[key] = result\n                use_count[key] = 0\n                wrapper.misses += 1\n                tail = key", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        raise TypeError('Maximum cache size must be a positive integer')\n\n    if not isinstance(maxsize, int):\n        raise TypeError('Maximum cache size must be a positive integer')\n\n    if maxsize <= 0:\n        raise ValueError('Maximum cache size must be a positive integer')\n\n    def decorating_function(user_function):\n        cache_info_key = f'_cache_info_{user_function.__name__}'\n        cache_info = {}\n        cache_info_get = cache_info.get\n        cache_info_set = cache_info.__setitem__\n\n        def wrapper(*args, **kwds):\n            nonlocal cache_info\n            if typed:\n                key = (args, kwds, type(args), type(kwds))\n            else"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        raise TypeError('Maximum cache size must be a positive integer')\n\n    if not isinstance(maxsize, int):\n        raise TypeError('Maximum cache size must be a positive integer')\n\n    if maxsize <= 0:\n        raise ValueError('Maximum cache size must be a positive integer')\n\n    def decorating_function(user_function):\n        cache_info_key = f'_cache_info_{user_function.__name__}'\n        cache_info = {}\n        cache_info_get = cache_info.get\n        cache_info_set = cache_info.__setitem__\n\n        def wrapper(*args, **kwds):\n            nonlocal cache_info\n            if typed:\n                key = (args, kwds, type(args), type(kwds))\n            else", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n        \n        if self.size == 0:\n            raise KeyError('dictionary is empty')\n        return self._pop(self.first)\n\n    def update(self, *args, **kwds):\n        '''Update the dictionary from *other*, overwriting existing keys.\n\n        update(E, **F) -> None.  Update the dictionary with the key/value pairs from E,\n        and then update with the key/value pairs from F.  If E is a\n        dictionary instance, then its keys and values are\n        inserted into the dictionary.  If E is an iterable of\n        key/value pairs (as produced by iteritems() or\n        iterlists(), for example), then this is equivalent to\n        a sequence of keyword argument pairs (itemname=itemvalue,).\n        If E is a mapping instance (mappings), then its\n        (key"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self.size == 0:\n            raise KeyError('dictionary is empty')\n        return self._pop(self.first)\n\n    def update(self, *args, **kwds):\n        '''Update the dictionary from *other*, overwriting existing keys.\n\n        update(E, **F) -> None.  Update the dictionary with the key/value pairs from E,\n        and then update with the key/value pairs from F.  If E is a\n        dictionary instance, then its keys and values are\n        inserted into the dictionary.  If E is an iterable of\n        key/value pairs (as produced by iteritems() or\n        iterlists(), for example), then this is equivalent to\n        a sequence of keyword argument pairs (itemname=itemvalue,).\n        If E is a mapping instance (mappings), then its\n        (key", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            self[key] = default\n            return default\n\n    def __repr__(self):\n        \n        if not self:\n            return '%s()' % (self.__class__.__name__,)\n        return '%s(%r)' % (self.__class__.__name__, self.items())\n\n    def copy(self):\n        \n        return self.__class__(self)\n\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        '''D.fromkeys(S[, v]) -> D from keys in S, with value v.\n\nIf not specified, the value defaults to None.\n'''"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        else:\n            self[key] = default\n            return default\n\n    def __repr__(self):\n        \n        if not self:\n            return '%s()' % (self.__class__.__name__,)\n        return '%s(%r)' % (self.__class__.__name__, self.items())\n\n    def copy(self):\n        \n        return self.__class__(self)\n\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        '''D.fromkeys(S[, v]) -> D from keys in S, with value v.\n\nIf not specified, the value defaults to None.\n'''", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n        \n        return self._storage.get(key, default)\n\n    def get_storage(self):\n        \n        return self._storage\n\n    def get_storage_name(self):\n        \n        return self._storage_name\n\n    def get_storage_type(self):\n        \n        return self._storage_type\n\n    def get_storage_value(self):\n        \n        return self._storage_value\n\n    def has_key(self, key):\n        \n        return key in self._storage\n\n    def items(self):\n        '''D.items() -> list of D's (key, value) pairs, as"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n        \n        return self._storage.get(key, default)\n\n    def get_storage(self):\n        \n        return self._storage\n\n    def get_storage_name(self):\n        \n        return self._storage_name\n\n    def get_storage_type(self):\n        \n        return self._storage_type\n\n    def get_storage_value(self):\n        \n        return self._storage_value\n\n    def has_key(self, key):\n        \n        return key in self._storage\n\n    def items(self):\n        '''D.items() -> list of D's (key, value) pairs, as", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \n    if isinstance(cache, (list, tuple)):\n        cachelist = cache\n        def decorator(method):\n            def memoizer(*args, **kw):\n                \n                cachelist.append(Cache(method, key, lock))\n                return cachelist[-1](*args, **kw)\n            return memoizer\n        return decorator\n\n    def decorator(method):\n        def memoizer(*args, **kw):\n            \n            key = cache.key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(*args, **kw)\n               "], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    if isinstance(cache, (list, tuple)):\n        cachelist = cache\n        def decorator(method):\n            def memoizer(*args, **kw):\n                \n                cachelist.append(Cache(method, key, lock))\n                return cachelist[-1](*args, **kw)\n            return memoizer\n        return decorator\n\n    def decorator(method):\n        def memoizer(*args, **kw):\n            \n            key = cache.key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                cache[key] = result = method(*args, **kw)\n               ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = e.path_elements\n        if len(path) > max_path_level:\n            path = path[:max_path_level]\n        path = '/'.join(path)\n        return '[%s] %s %s' % (e.code, path, e.msg)\n\n    @classmethod\n    def httperror(cls, msg, code=500, content=None, headers={}):\n        \n        e = HTTPError(code, msg)\n        e.content = content\n        e.headers = headers\n        return e\n\n    def __init__(self, code, msg):\n        \n        self.code = code\n        self.msg = msg\n       "], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        path = e.path_elements\n        if len(path) > max_path_level:\n            path = path[:max_path_level]\n        path = '/'.join(path)\n        return '[%s] %s %s' % (e.code, path, e.msg)\n\n    @classmethod\n    def httperror(cls, msg, code=500, content=None, headers={}):\n        \n        e = HTTPError(code, msg)\n        e.content = content\n        e.headers = headers\n        return e\n\n    def __init__(self, code, msg):\n        \n        self.code = code\n        self.msg = msg\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        if not overwrite and os.path.exists(file_name):\n            raise RuntimeError('File \"%s\" already exists and overwrite is False' % (file_name))\n\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(text_buffer)\n\n    @staticmethod\n    def append_binary_to_file(file_name, binary_buffer, overwrite=False):\n        \n        if not overwrite and os.path.exists(file_name):\n            raise RuntimeError('File \"%s\" already exists and overwrite is False' % (file_name))\n\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(binary_buffer)\n\n    @staticmethod\n    def read"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        if not overwrite and os.path.exists(file_name):\n            raise RuntimeError('File \"%s\" already exists and overwrite is False' % (file_name))\n\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(text_buffer)\n\n    @staticmethod\n    def append_binary_to_file(file_name, binary_buffer, overwrite=False):\n        \n        if not overwrite and os.path.exists(file_name):\n            raise RuntimeError('File \"%s\" already exists and overwrite is False' % (file_name))\n\n        with open(file_name, 'wb') as file_handle:\n            file_handle.write(binary_buffer)\n\n    @staticmethod\n    def read", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        try:\n            file = open(file_name, 'rb')\n        except Exception as e:\n            print(\"Failed to open %s: %s\" % (file_name, e))\n            return\n\n        text_buffer = Gtk.TextBuffer()\n        start_iter = text_buffer.get_start_iter()\n        end_iter = text_buffer.get_end_iter()\n        data = file.read()\n        text_buffer.insert(start_iter, data.decode(encoding), -1)\n        file.close()\n\n        return text_buffer\n\n    @staticmethod\n    def set_textview_language(textview, language):\n        \n        lang_manager = GtkSource.LanguageManager()\n        lang = lang_"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        try:\n            file = open(file_name, 'rb')\n        except Exception as e:\n            print(\"Failed to open %s: %s\" % (file_name, e))\n            return\n\n        text_buffer = Gtk.TextBuffer()\n        start_iter = text_buffer.get_start_iter()\n        end_iter = text_buffer.get_end_iter()\n        data = file.read()\n        text_buffer.insert(start_iter, data.decode(encoding), -1)\n        file.close()\n\n        return text_buffer\n\n    @staticmethod\n    def set_textview_language(textview, language):\n        \n        lang_manager = GtkSource.LanguageManager()\n        lang = lang_", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["@staticmethod\n    def is_file_exist(file_name):\n        \n\n        if os.path.exists(file_name):\n            return True\n        else:\n            return False\n\n    @staticmethod\n    def get_file_name(file_path):\n        \n\n        return os.path.basename(file_path)\n\n    @staticmethod\n    def get_file_name_no_extension(file_path):\n        \n\n        return os.path.splitext(os.path.basename(file_path))[0]\n\n    @staticmethod\n    def get_file_extension(file_path):\n        \n\n        return os.path.splitext(os.path.basename(file_path))[1]\n\n    @staticmethod\n    def get"], "level": "file_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def is_file_exist(file_name):\n        \n\n        if os.path.exists(file_name):\n            return True\n        else:\n            return False\n\n    @staticmethod\n    def get_file_name(file_path):\n        \n\n        return os.path.basename(file_path)\n\n    @staticmethod\n    def get_file_name_no_extension(file_path):\n        \n\n        return os.path.splitext(os.path.basename(file_path))[0]\n\n    @staticmethod\n    def get_file_extension(file_path):\n        \n\n        return os.path.splitext(os.path.basename(file_path))[1]\n\n    @staticmethod\n    def get", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["@classmethod\n    def _reset_logging(cls):\n        \n        logging.basicConfig(level=logging.DEBUG)\n        cls._logger = logging.getLogger('CliTest')\n        cls._logger.handlers = []\n        cls._logger.setLevel(logging.DEBUG)\n\n    @classmethod\n    def _get_log(cls):\n        \n        cls._reset_logging()\n        console_handler = logging.StreamHandler()\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        console_handler.setFormatter(formatter)\n        cls._logger.addHandler(console_handler)\n        return cls._logger\n\n    def test_log_levels(self):\n        \n        self._get_log()"], "level": "plib_runnable", "generate_results": [{"generate_code": "@classmethod\n    def _reset_logging(cls):\n        \n        logging.basicConfig(level=logging.DEBUG)\n        cls._logger = logging.getLogger('CliTest')\n        cls._logger.handlers = []\n        cls._logger.setLevel(logging.DEBUG)\n\n    @classmethod\n    def _get_log(cls):\n        \n        cls._reset_logging()\n        console_handler = logging.StreamHandler()\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        console_handler.setFormatter(formatter)\n        cls._logger.addHandler(console_handler)\n        return cls._logger\n\n    def test_log_levels(self):\n        \n        self._get_log()", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n        \n        raise NotImplementedError()\n\n    def _makeOne(self, *args, **kw):\n        return self._getTargetClass()(*args, **kw)\n\n    def test_class_conforms_to_IMarker(self):\n        from zope.interface.verify import verifyClass\n        from zope.interface.common.interfaces import IMarker\n        verifyClass(IMarker, self._getTargetClass())\n\n    def test_instance_conforms_to_IMarker(self):\n        from zope.interface.verify import verifyObject\n        from zope.interface.common.interfaces import IMarker\n        verifyObject(IMarker, self._makeOne())\n\n    def test_ctor_defaults(self):\n        marker = self._makeOne()\n        self.assertTrue(marker.dis"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n        \n        raise NotImplementedError()\n\n    def _makeOne(self, *args, **kw):\n        return self._getTargetClass()(*args, **kw)\n\n    def test_class_conforms_to_IMarker(self):\n        from zope.interface.verify import verifyClass\n        from zope.interface.common.interfaces import IMarker\n        verifyClass(IMarker, self._getTargetClass())\n\n    def test_instance_conforms_to_IMarker(self):\n        from zope.interface.verify import verifyObject\n        from zope.interface.common.interfaces import IMarker\n        verifyObject(IMarker, self._makeOne())\n\n    def test_ctor_defaults(self):\n        marker = self._makeOne()\n        self.assertTrue(marker.dis", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \n    if not orderings:\n        return []\n\n    mergedOrdering = list(orderings[0])\n    for i in range(1, len(orderings)):\n        otherOrdering = list(orderings[i])\n        for j, otherIndex in enumerate(otherOrdering):\n            if otherIndex in mergedOrdering:\n                continue\n\n            indexToInsertInto = None\n            for k in range(len(mergedOrdering)):\n                if otherIndex < mergedOrdering[k]:\n                    indexToInsertInto = k\n                    break\n            if indexToInsertInto is None:\n                indexToInsertInto = len(mergedOrdering)\n            mergedOrdering.insert(indexToInsertInto, otherIndex)\n\n    return mergedOrdering\n\n\ndef _"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \n    if not orderings:\n        return []\n\n    mergedOrdering = list(orderings[0])\n    for i in range(1, len(orderings)):\n        otherOrdering = list(orderings[i])\n        for j, otherIndex in enumerate(otherOrdering):\n            if otherIndex in mergedOrdering:\n                continue\n\n            indexToInsertInto = None\n            for k in range(len(mergedOrdering)):\n                if otherIndex < mergedOrdering[k]:\n                    indexToInsertInto = k\n                    break\n            if indexToInsertInto is None:\n                indexToInsertInto = len(mergedOrdering)\n            mergedOrdering.insert(indexToInsertInto, otherIndex)\n\n    return mergedOrdering\n\n\ndef _", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n \n return object.__provides__\n\n\ndef objectClassName(object):\n \n return object.__class__.__module__ + '.' + object.__class__.__name__\n\n\ndef objectModuleName(object):\n \n return object.__class__.__module__\n\n\ndef objectClass(object):\n \n return object.__class__\n\n\ndef objectClassAsText(object):\n \n return object.__class__.__name__\n\n\ndef objectClassAsD"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n \n return object.__provides__\n\n\ndef objectClassName(object):\n \n return object.__class__.__module__ + '.' + object.__class__.__name__\n\n\ndef objectModuleName(object):\n \n return object.__class__.__module__\n\n\ndef objectClass(object):\n \n return object.__class__\n\n\ndef objectClassAsText(object):\n \n return object.__class__.__name__\n\n\ndef objectClassAsD", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \n    bases = list(classes)\n    bases.sort()\n    return bases\n\ndef minimalBasesSet(classes):\n    \n    bases = set(classes)\n    bases = list(bases)\n    bases.sort()\n    return bases\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \n    bases = list(classes)\n    bases.sort()\n    return bases\n\ndef minimalBasesSet(classes):\n    \n    bases = set(classes)\n    bases = list(bases)\n    bases.sort()\n    return bases\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n \n\n names = []\n descriptions = []\n\n for name, value in self.__dict__.items():\n  if isinstance(value, description):\n   names.append(name)\n   descriptions.append(value)\n\n if all:\n  for interface in self.__class__.__bases__:\n   names += interface.namesAndDescriptions()[0]\n   descriptions += interface.namesAndDescriptions()[1]\n\n return (names, descriptions)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n \n\n names = []\n descriptions = []\n\n for name, value in self.__dict__.items():\n  if isinstance(value, description):\n   names.append(name)\n   descriptions.append(value)\n\n if all:\n  for interface in self.__class__.__bases__:\n   names += interface.namesAndDescriptions()[0]\n   descriptions += interface.namesAndDescriptions()[1]\n\n return (names, descriptions)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n \n if all:\n  return self._names\n return self._names.union(self._extended_names)\n\n def __init__(self, iface, name, bases, dct):\n  self._names = set()\n  self._extended_names = set()\n  self._iface = iface\n  self._name = name\n  self._bases = bases\n  super(Interface, self).__init__(self, name, bases, dct)\n  self._names.add('__str__')\n  self._names.add('__repr__')\n  self._names.add('__getattr__')\n  self._names.add('__setattr__')\n  self._names.add('__delattr__')\n  self._names.add('__call__')\n  self._names.add('__new__"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n \n if all:\n  return self._names\n return self._names.union(self._extended_names)\n\n def __init__(self, iface, name, bases, dct):\n  self._names = set()\n  self._extended_names = set()\n  self._iface = iface\n  self._name = name\n  self._bases = bases\n  super(Interface, self).__init__(self, name, bases, dct)\n  self._names.add('__str__')\n  self._names.add('__repr__')\n  self._names.add('__getattr__')\n  self._names.add('__setattr__')\n  self._names.add('__delattr__')\n  self._names.add('__call__')\n  self._names.add('__new__", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    if not sequence:\n        return output\n    elif isinstance(sequence[0], (list, tuple)):\n        for item in sequence:\n            _normalizeargs(item, output)\n    else:\n        output.append(sequence)\n    return output\n\ndef _isstring(value):\n    \n    try:\n        value + ''\n    except TypeError:\n        return 0\n    return 1\n\ndef _getargs(func):\n    \n    if hasattr(func, 'im_func'):\n        func = func.im_func\n    if hasattr(func, 'func_code'):\n        code = func.func_code\n        if hasattr(code, 'co_varnames'):\n           "], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n    if not sequence:\n        return output\n    elif isinstance(sequence[0], (list, tuple)):\n        for item in sequence:\n            _normalizeargs(item, output)\n    else:\n        output.append(sequence)\n    return output\n\ndef _isstring(value):\n    \n    try:\n        value + ''\n    except TypeError:\n        return 0\n    return 1\n\ndef _getargs(func):\n    \n    if hasattr(func, 'im_func'):\n        func = func.im_func\n    if hasattr(func, 'func_code'):\n        code = func.func_code\n        if hasattr(code, 'co_varnames'):\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    \n\n    try:\n        import cupy\n    except ImportError:\n        return False\n\n    return cupy\n\n\ndef _c_optimizations_enabled():\n    \n\n    return _c_optimizations_available() is not False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    \n\n    try:\n        import cupy\n    except ImportError:\n        return False\n\n    return cupy\n\n\ndef _c_optimizations_enabled():\n    \n\n    return _c_optimizations_available() is not False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    \n    return not native.repository_name().startswith('@')\n\ndef _c_optimized_sources_impl(ctx):\n    \n    return [DefaultInfo(files = depset(ctx.files.srcs))]\n\nc_optimized_sources = rule(\n    _c_optimized_sources_impl,\n    attrs = {\n        \"srcs\": attr.label_list(\n            allow_files = True,\n            doc = \"The source files that should be copied.\",\n        ),\n    },\n    doc = '''\nCopies the source files to a genrule's output tree and adds the necessary\nCROPTIMIZED_SOURCES_OVERRIDE to the genrule's environment variables.\n''',\n)\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    \n    return not native.repository_name().startswith('@')\n\ndef _c_optimized_sources_impl(ctx):\n    \n    return [DefaultInfo(files = depset(ctx.files.srcs))]\n\nc_optimized_sources = rule(\n    _c_optimized_sources_impl,\n    attrs = {\n        \"srcs\": attr.label_list(\n            allow_files = True,\n            doc = \"The source files that should be copied.\",\n        ),\n    },\n    doc = '''\nCopies the source files to a genrule's output tree and adds the necessary\nCROPTIMIZED_SOURCES_OVERRIDE to the genrule's environment variables.\n''',\n)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    \n    return native.config_setting(\n        name = \"c_optimizations_ignored\",\n        values = [\"-O0\", \"-Og\", \"-O1\", \"-O2\", \"-O3\"],\n        visibility = [\"//visibility:public\"],\n    )\n\ndef _c_optimizations_required():\n    \n    return native.config_setting(\n        name = \"c_optimizations_required\",\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    \n    return native.config_setting(\n        name = \"c_optimizations_ignored\",\n        values = [\"-O0\", \"-Og\", \"-O1\", \"-O2\", \"-O3\"],\n        visibility = [\"//visibility:public\"],\n    )\n\ndef _c_optimizations_required():\n    \n    return native.config_setting(\n        name = \"c_optimizations_required\",\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    \n\n    from SCons.Script import Variables\n    opts = Variables()\n    opts.Add('use_c_optimizations', 'Use C optimizations',\n             'yes', ['yes', 'no'])\n    opts.Update(env)\n    return env['use_c_optimizations'] == 'yes'\n\ndef _c_optimizations_not_required():\n    \n\n    from SCons.Script import Variables\n    opts = Variables()\n    opts.Add('use_c_optimizations', 'Use C optimizations',\n             'yes', ['yes', 'no'])\n    opts.Update(env)\n    return env['use_c_optimizations'] == 'no'\n\ndef _c_optimizations_enabled():\n    '''Return a true value if"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    \n\n    from SCons.Script import Variables\n    opts = Variables()\n    opts.Add('use_c_optimizations', 'Use C optimizations',\n             'yes', ['yes', 'no'])\n    opts.Update(env)\n    return env['use_c_optimizations'] == 'yes'\n\ndef _c_optimizations_not_required():\n    \n\n    from SCons.Script import Variables\n    opts = Variables()\n    opts.Add('use_c_optimizations', 'Use C optimizations',\n             'yes', ['yes', 'no'])\n    opts.Update(env)\n    return env['use_c_optimizations'] == 'no'\n\ndef _c_optimizations_enabled():\n    '''Return a true value if", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n        \n        self._histogram = np.zeros(self.nbins, dtype=np.int32)\n\n    def update(self, x):\n        '''Update the histogram with value *x*.\n\n        Parameters\n        ----------\n        x : scalar\n            The value to be added into the histogram.\n\n        '''\n        i = int(self.bin_edges[0])\n        while i < self.nbins and x > self.bin_edges[i]:\n            i += 1\n        i = min(i, self.nbins - 1)\n        self._histogram[i] += 1\n        self.n += 1\n\n    def pdf(self, x):\n        '''Evaluate the probability density function of the histogram at *x*.\n\n        Parameters\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n        \n        self._histogram = np.zeros(self.nbins, dtype=np.int32)\n\n    def update(self, x):\n        '''Update the histogram with value *x*.\n\n        Parameters\n        ----------\n        x : scalar\n            The value to be added into the histogram.\n\n        '''\n        i = int(self.bin_edges[0])\n        while i < self.nbins and x > self.bin_edges[i]:\n            i += 1\n        i = min(i, self.nbins - 1)\n        self._histogram[i] += 1\n        self.n += 1\n\n    def pdf(self, x):\n        '''Evaluate the probability density function of the histogram at *x*.\n\n        Parameters\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self.fname, \"w\") as f:\n            f.write(header + \"\\n\")\n            for line in self.data:\n                f.write(separator.join(line) + \"\\n\")\n\n\n    def to_txt(self, header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self.fname, \"w\") as f:\n            f.write(header + \"\\n\")\n            for line in self.data:\n                f.write(\" \".join(line) + \"\\n\")\n\n\n    def to_tsv(self, header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self.fname, \"w\") as f:\n            f.write(header + \"\\n\")\n            for line in self.data:\n                f.write(separator.join(line) + \"\\n\")\n\n\n    def to_txt(self, header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self.fname, \"w\") as f:\n            f.write(header + \"\\n\")\n            for line in self.data:\n                f.write(\" \".join(line) + \"\\n\")\n\n\n    def to_tsv(self, header=None):\n        \n        if header is None:\n            header = self.header\n        with open(self", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n        \n\n        if coord_name == 'time':\n            err_indices = self.time_indices\n            err_coord_name = 'time'\n        elif coord_name == 'pressure':\n            err_indices = self.pressure_indices\n            err_coord_name = 'pressure'\n        elif coord_name == 'height':\n            err_indices = self.height_indices\n            err_coord_name = 'height'\n        else:\n            raise ValueError('Unrecognized coordinate name: {0:s}'.format(coord_name))\n\n        return err_indices, err_coord_name\n\n\n    def _get_cov_indices(self, coord_name):\n        '''Get covariance indices corresponding to a coordinate."], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n        \n\n        if coord_name == 'time':\n            err_indices = self.time_indices\n            err_coord_name = 'time'\n        elif coord_name == 'pressure':\n            err_indices = self.pressure_indices\n            err_coord_name = 'pressure'\n        elif coord_name == 'height':\n            err_indices = self.height_indices\n            err_coord_name = 'height'\n        else:\n            raise ValueError('Unrecognized coordinate name: {0:s}'.format(coord_name))\n\n        return err_indices, err_coord_name\n\n\n    def _get_cov_indices(self, coord_name):\n        '''Get covariance indices corresponding to a coordinate.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n        \n\n        context.setdefault('name', self.name)\n        context.setdefault('node_types', self.node_types)\n        context.setdefault('node_types_lut', self.node_types_lut)\n        context.setdefault('nodes', self.nodes)\n        context.setdefault('links', self.links)\n        context.setdefault('groups', self.groups)\n        context.setdefault('options', self.options)\n\n    def clone(self):\n        \n\n        clone = graph()\n        clone.name = self.name\n        clone.node_types = self.node_types.copy()\n        clone.node_types_lut = self.node_types_lut.copy()\n        clone.nodes = self.nodes.copy()\n        clone."], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n        \n\n        context.setdefault('name', self.name)\n        context.setdefault('node_types', self.node_types)\n        context.setdefault('node_types_lut', self.node_types_lut)\n        context.setdefault('nodes', self.nodes)\n        context.setdefault('links', self.links)\n        context.setdefault('groups', self.groups)\n        context.setdefault('options', self.options)\n\n    def clone(self):\n        \n\n        clone = graph()\n        clone.name = self.name\n        clone.node_types = self.node_types.copy()\n        clone.node_types_lut = self.node_types_lut.copy()\n        clone.nodes = self.nodes.copy()\n        clone.", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    \n    return (edges[1:] * bins[:-1] + bins[:-1] * edges[1:]) / 2\n\n\ndef centers(edges):\n    \n    return (edges[1:] + edges[:-1]) / 2\n\n\ndef diff(bins, edges):\n    \n    return edges[1:] - edges[:-1]\n\n\ndef mean(bins, edges):\n    \n    return integral(bins, edges) / diff(bins, edges)\n\n\ndef error(bins, edges):\n    \n    return diff(bins, edges) / 2\n\n\ndef error_bar(bins, edges, nsigma=1):"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    \n    return (edges[1:] * bins[:-1] + bins[:-1] * edges[1:]) / 2\n\n\ndef centers(edges):\n    \n    return (edges[1:] + edges[:-1]) / 2\n\n\ndef diff(bins, edges):\n    \n    return edges[1:] - edges[:-1]\n\n\ndef mean(bins, edges):\n    \n    return integral(bins, edges) / diff(bins, edges)\n\n\ndef error(bins, edges):\n    \n    return diff(bins, edges) / 2\n\n\ndef error_bar(bins, edges, nsigma=1):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    \n    return isinstance(seq, FillRequestSeq)\n\n\ndef is_fill_response_seq(seq):\n    \n    return isinstance(seq, FillResponseSeq)\n\n\ndef is_market_depth_request_seq(seq):\n    \n    return isinstance(seq, MarketDepthRequestSeq)\n\n\ndef is_market_"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    \n    return isinstance(seq, FillRequestSeq)\n\n\ndef is_fill_response_seq(seq):\n    \n    return isinstance(seq, FillResponseSeq)\n\n\ndef is_market_depth_request_seq(seq):\n    \n    return isinstance(seq, MarketDepthRequestSeq)\n\n\ndef is_market_", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef is_fill_request_dict(obj):\n    \n    return 'fill' in obj and 'request' in obj\n\n\ndef is_fill_request_obj(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef is_fill_dict(obj):\n    \n    return 'fill' in obj\n\n\ndef is_fill_obj(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_request_dict(obj):\n    '''Object contains key 'request"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef is_fill_request_dict(obj):\n    \n    return 'fill' in obj and 'request' in obj\n\n\ndef is_fill_request_obj(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n\n\ndef is_fill_dict(obj):\n    \n    return 'fill' in obj\n\n\ndef is_fill_obj(obj):\n    \n    return hasattr(obj, 'fill')\n\n\ndef is_request_dict(obj):\n    '''Object contains key 'request", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ec(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ee(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ep(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_et(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ec(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ee(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_ep(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\ndef is_run_et(obj):\n    \n    return hasattr(obj, 'run') and callable(obj.run)\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\ndef is_fill_compute_empty(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\ndef is_get_set_empty(obj):\n    \n    return hasattr(obj, 'get') and hasattr(obj, 'set')\n\ndef is_get_set_compute_el(obj):\n    \n    return hasattr(obj, 'get') and hasattr(obj, 'set') and hasattr(obj, 'compute')\n\ndef is_get_set_compute_empty(obj):"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\ndef is_fill_compute_empty(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'compute')\n\ndef is_get_set_empty(obj):\n    \n    return hasattr(obj, 'get') and hasattr(obj, 'set')\n\ndef is_get_set_compute_el(obj):\n    \n    return hasattr(obj, 'get') and hasattr(obj, 'set') and hasattr(obj, 'compute')\n\ndef is_get_set_compute_empty(obj):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    \n    d1 = dict(d1)\n    d2 = dict(d2)\n    if level == 0:\n        return dict([(k, d1[k]) for k in d1 if k not in d2])\n    elif level > 0:\n        return dict([(k, difference(d1[k], d2[k], level-1))\n                     for k in d1 if k not in d2 or d2[k] != d1[k]])\n    else:\n        return dict([(k, difference(d1[k], d2[k], level))\n                     for k in d1 if k not in d2 or d2[k] != d1[k]])\n\n\ndef difference_from(d1, d2, level=-1):\n    '''Return a dictionary"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    \n    d1 = dict(d1)\n    d2 = dict(d2)\n    if level == 0:\n        return dict([(k, d1[k]) for k in d1 if k not in d2])\n    elif level > 0:\n        return dict([(k, difference(d1[k], d2[k], level-1))\n                     for k in d1 if k not in d2 or d2[k] != d1[k]])\n    else:\n        return dict([(k, difference(d1[k], d2[k], level))\n                     for k in d1 if k not in d2 or d2[k] != d1[k]])\n\n\ndef difference_from(d1, d2, level=-1):\n    '''Return a dictionary", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n        \n        px, py = coord\n        x = int(px + 0.5)\n        y = int(py + 0.5)\n        self.fill_bin(x, y, weight)\n\n    def fill_bin(self, x, y, weight):\n        \n        if not (0 <= x < self.bins[0] and 0 <= y < self.bins[1]):\n            raise IndexError('(%s, %s) is out of range.' % (x, y))\n        self.array[x, y] += weight\n\n    def _get_data(self, xmin, xmax, ymin, ymax, smooth=None):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n        \n        px, py = coord\n        x = int(px + 0.5)\n        y = int(py + 0.5)\n        self.fill_bin(x, y, weight)\n\n    def fill_bin(self, x, y, weight):\n        \n        if not (0 <= x < self.bins[0] and 0 <= y < self.bins[1]):\n            raise IndexError('(%s, %s) is out of range.' % (x, y))\n        self.array[x, y] += weight\n\n    def _get_data(self, xmin, xmax, ymin, ymax, smooth=None):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    \n    import re\n    import json\n    from . import label_regex\n    if labels is None:\n        return\n    label_regex = re.compile(label_regex)\n    for k, v in labels.items():\n        if not label_regex.fullmatch(k):\n            raise ValueError(f'Label key \"{k}\" does not match against label_regex.')\n        if not label_regex.fullmatch(v):\n            raise ValueError(f'Label value \"{v}\" for key \"{k}\" does not match against label_regex.')\n\n    return json.dumps(labels)\n\n\ndef _validate_tags(tags):\n    \n    import re\n    import json\n    from . import tag_regex\n    if tags is None:\n       "], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    \n    import re\n    import json\n    from . import label_regex\n    if labels is None:\n        return\n    label_regex = re.compile(label_regex)\n    for k, v in labels.items():\n        if not label_regex.fullmatch(k):\n            raise ValueError(f'Label key \"{k}\" does not match against label_regex.')\n        if not label_regex.fullmatch(v):\n            raise ValueError(f'Label value \"{v}\" for key \"{k}\" does not match against label_regex.')\n\n    return json.dumps(labels)\n\n\ndef _validate_tags(tags):\n    \n    import re\n    import json\n    from . import tag_regex\n    if tags is None:\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    \n    from re import compile\n    return {\n        'names': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_optional': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_final': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_unversioned': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_versioned': compile(r'^[a-z0-9]([a"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    \n    from re import compile\n    return {\n        'names': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_optional': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_final': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_unversioned': compile(r'^[a-z0-9]([a-z0-9-]*[a-z0-9])?$'),\n        'names_versioned': compile(r'^[a-z0-9]([a", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    \n    if value == '':\n        return True\n    if value[0] in '0123456789':\n        return re.match(r'[0-9]+', value) is not None\n    if value[0] in '+-':\n        return re.match(r'[-+]?[0-9]+', value) is not None\n    if value[0] in '.,':\n        return re.match(r'[.,]?[0-9]+', value) is not None\n    return re.match(r'[a-zA-Z0-9_]+', value) is not None\n\ndef validate_number(value):\n    \n    return re.match(r'[-+]?[0-9]+', value)"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    \n    if value == '':\n        return True\n    if value[0] in '0123456789':\n        return re.match(r'[0-9]+', value) is not None\n    if value[0] in '+-':\n        return re.match(r'[-+]?[0-9]+', value) is not None\n    if value[0] in '.,':\n        return re.match(r'[.,]?[0-9]+', value) is not None\n    return re.match(r'[a-zA-Z0-9_]+', value) is not None\n\ndef validate_number(value):\n    \n    return re.match(r'[-+]?[0-9]+', value)", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    \n    if key == '':\n        return False\n    if key[:2] != 'K-':\n        return False\n    if len(key) != 12:\n        return False\n    if not key[2:].isdigit():\n        return False\n    return True\n\ndef validate_value(value):\n    \n    if value == '':\n        return False\n    if not value.isdigit():\n        return False\n    return True\n\ndef validate_kv(key, value):\n    \n    if not validate_key(key):\n        return False\n    if not validate_value(value):\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    \n    if key == '':\n        return False\n    if key[:2] != 'K-':\n        return False\n    if len(key) != 12:\n        return False\n    if not key[2:].isdigit():\n        return False\n    return True\n\ndef validate_value(value):\n    \n    if value == '':\n        return False\n    if not value.isdigit():\n        return False\n    return True\n\ndef validate_kv(key, value):\n    \n    if not validate_key(key):\n        return False\n    if not validate_value(value):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n\n    observer_schema_dict = {}\n    for k, v in manifest_dict.items():\n        if k == 'type':\n            observer_schema_dict[k] = v\n        elif k == 'default':\n            observer_schema_dict[k] = v\n        elif k == 'required':\n            observer_schema_dict[k] = v\n        elif k == 'manifest':\n            if first_level is True:\n                for manifest_key, manifest_value in v.items():\n                    observer_schema_dict[manifest_key] = generate_default_observer_schema_list(manifest_value, first_level=True)\n            else:\n                observer_schema_dict[k] = generate_default_observer_schema_list(v)\n        elif k == 'observer_schema':\n            observer_"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n\n    observer_schema_dict = {}\n    for k, v in manifest_dict.items():\n        if k == 'type':\n            observer_schema_dict[k] = v\n        elif k == 'default':\n            observer_schema_dict[k] = v\n        elif k == 'required':\n            observer_schema_dict[k] = v\n        elif k == 'manifest':\n            if first_level is True:\n                for manifest_key, manifest_value in v.items():\n                    observer_schema_dict[manifest_key] = generate_default_observer_schema_list(manifest_value, first_level=True)\n            else:\n                observer_schema_dict[k] = generate_default_observer_schema_list(v)\n        elif k == 'observer_schema':\n            observer_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if not response:\n        return\n\n    if (\n        isinstance(last_applied_manifest, list)\n        and isinstance(response, list)\n        and len(last_applied_manifest) == len(response)\n    ):\n        for i in range(len(last_applied_manifest)):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[i], observer_schema['items'], response[i]\n            )\n\n    elif (\n        isinstance(last_applied_manifest, dict)\n        and isinstance(response, dict)\n        and len(last_applied_manifest) == len(response)\n    ):\n        for k in last_applied_manifest:\n            if k in response:\n                update_last_applied_manifest"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if not response:\n        return\n\n    if (\n        isinstance(last_applied_manifest, list)\n        and isinstance(response, list)\n        and len(last_applied_manifest) == len(response)\n    ):\n        for i in range(len(last_applied_manifest)):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[i], observer_schema['items'], response[i]\n            )\n\n    elif (\n        isinstance(last_applied_manifest, dict)\n        and isinstance(response, dict)\n        and len(last_applied_manifest) == len(response)\n    ):\n        for k in last_applied_manifest:\n            if k in response:\n                update_last_applied_manifest", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if isinstance(last_applied_manifest, str):\n        return response\n    elif isinstance(last_applied_manifest, dict):\n        return {\n            key: update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema[key], response[key]\n            )\n            for key in last_applied_manifest\n        }\n    elif isinstance(last_applied_manifest, list):\n        return [\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[index], observer_schema[index], response[index]\n            )\n            for index in range(len(last_applied_manifest))\n        ]\n    else:\n        raise TypeError(f'Unsupported type: {type"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    if isinstance(last_applied_manifest, str):\n        return response\n    elif isinstance(last_applied_manifest, dict):\n        return {\n            key: update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[key], observer_schema[key], response[key]\n            )\n            for key in last_applied_manifest\n        }\n    elif isinstance(last_applied_manifest, list):\n        return [\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[index], observer_schema[index], response[index]\n            )\n            for index in range(len(last_applied_manifest))\n        ]\n    else:\n        raise TypeError(f'Unsupported type: {type", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    \n    observer_schema = {\n        'type': 'object',\n        'properties': {\n            'apiVersion': {'type': 'string'},\n            'kind': {'type': 'string'},\n            'metadata': {\n                'type': 'object',\n                'properties': {\n                    'labels': {'type': 'object'}\n                },\n                'additionalProperties': False,\n            },\n            'spec': {'type': 'object'},\n            'status': {'type': 'object'},\n        },\n        'required': ['apiVersion', 'kind', 'metadata', 'spec', 'status'],\n        'additionalProperties': False,\n    }\n\n    for resource in app.get_schema"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    \n    observer_schema = {\n        'type': 'object',\n        'properties': {\n            'apiVersion': {'type': 'string'},\n            'kind': {'type': 'string'},\n            'metadata': {\n                'type': 'object',\n                'properties': {\n                    'labels': {'type': 'object'}\n                },\n                'additionalProperties': False,\n            },\n            'spec': {'type': 'object'},\n            'status': {'type': 'object'},\n        },\n        'required': ['apiVersion', 'kind', 'metadata', 'spec', 'status'],\n        'additionalProperties': False,\n    }\n\n    for resource in app.get_schema", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\n\t\tif not params:\n\t\t\treturn sql, params\n\n\t\tif isinstance(params, Mapping):\n\t\t\treturn format_map(sql, params)\n\n\t\tif isinstance(params, Sequence):\n\t\t\treturn format_seq(sql, params)\n\n\t\traise TypeError(f\"Unsupported params type: {type(params)}\")\n\n\ndef format_map(sql: AnyStr, params: Dict[Union[str, int], Any]) -> Tuple[AnyStr, Dict[Union[str, int], Any]]:\n\t\n\n\tif not params:\n\t\treturn sql, params\n\n\tif not isinstance(params, Mapping):\n\t\traise TypeError(f\""], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\n\t\tif not params:\n\t\t\treturn sql, params\n\n\t\tif isinstance(params, Mapping):\n\t\t\treturn format_map(sql, params)\n\n\t\tif isinstance(params, Sequence):\n\t\t\treturn format_seq(sql, params)\n\n\t\traise TypeError(f\"Unsupported params type: {type(params)}\")\n\n\ndef format_map(sql: AnyStr, params: Dict[Union[str, int], Any]) -> Tuple[AnyStr, Dict[Union[str, int], Any]]:\n\t\n\n\tif not params:\n\t\treturn sql, params\n\n\tif not isinstance(params, Mapping):\n\t\traise TypeError(f\"", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tif not many_params:\n\t\t\treturn sql, []\n\n\t\tquery, many_params = self._split_query(sql, many_params)\n\n\t\tnew_sql = query.replace('?', '%s')\n\n\t\treturn new_sql, many_params"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\tif not many_params:\n\t\t\treturn sql, []\n\n\t\tquery, many_params = self._split_query(sql, many_params)\n\n\t\tnew_sql = query.replace('?', '%s')\n\n\t\treturn new_sql, many_params", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n        \n        return self._run_ocfl(path, 'validate')\n\n    def inventory(self, path):\n        \n        return self._run_ocfl(path, 'inventory')\n\n    def find_object_root(self, path):\n        \n        return self._run_ocfl(path, 'find-root')\n\n    def fixity_block_path(self, path):\n        \n        return self._run_ocfl(path, 'fixity-block-path')"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n        \n        return self._run_ocfl(path, 'validate')\n\n    def inventory(self, path):\n        \n        return self._run_ocfl(path, 'inventory')\n\n    def find_object_root(self, path):\n        \n        return self._run_ocfl(path, 'find-root')\n\n    def fixity_block_path(self, path):\n        \n        return self._run_ocfl(path, 'fixity-block-path')", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n        \n        if not self.status:\n            return None\n        return prefix + ''.join(self.status)\n\n    def __str__(self):\n        return self.status_str()"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        if not self.status:\n            return None\n        return prefix + ''.join(self.status)\n\n    def __str__(self):\n        return self.status_str()", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n        \n        if self.status == ValidationLog.VALID:\n            return '%s%s' % (prefix, 'VALID')\n        else:\n            return '%s%s' % (prefix, 'INVALID')\n\n    def __str__(self):\n        return self.status_str()\n\n    def __repr__(self):\n        return self.status_str('ValidationLog(')\n\n    def __eq__(self, other):\n        return self.status == other.status\n\n    def __ne__(self, other):\n        return self.status != other.status\n\n    def __lt__(self, other):\n        return self.status < other.status\n\n    def __le__(self, other):\n        return self.status <= other.status\n\n    def __gt__(self, other):\n        return self.status > other."], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n        \n        if self.status == ValidationLog.VALID:\n            return '%s%s' % (prefix, 'VALID')\n        else:\n            return '%s%s' % (prefix, 'INVALID')\n\n    def __str__(self):\n        return self.status_str()\n\n    def __repr__(self):\n        return self.status_str('ValidationLog(')\n\n    def __eq__(self, other):\n        return self.status == other.status\n\n    def __ne__(self, other):\n        return self.status != other.status\n\n    def __lt__(self, other):\n        return self.status < other.status\n\n    def __le__(self, other):\n        return self.status <= other.status\n\n    def __gt__(self, other):\n        return self.status > other.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n  \n  return True\n\ndef assert_valid(self, identifier):\n  \n  pass\n\ndef get_namespace(self, identifier):\n  \n  if identifier.count(':') < 2:\n    return ''\n  return identifier.split(':', 2)[0]\n\ndef get_prefix(self, identifier):\n  \n  if identifier.count(':') < 2:\n    return ''\n  return identifier.split(':', 2)[1]\n\ndef get_localpart(self, identifier):\n  \n  return identifier.split(':', 2)[2]\n\ndef get"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n  \n  return True\n\ndef assert_valid(self, identifier):\n  \n  pass\n\ndef get_namespace(self, identifier):\n  \n  if identifier.count(':') < 2:\n    return ''\n  return identifier.split(':', 2)[0]\n\ndef get_prefix(self, identifier):\n  \n  if identifier.count(':') < 2:\n    return ''\n  return identifier.split(':', 2)[1]\n\ndef get_localpart(self, identifier):\n  \n  return identifier.split(':', 2)[2]\n\ndef get", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n        \n        self._validate_inventory_type(inventory)\n        self._validate_inventory_schema(inventory, extract_spec_version)\n        self._validate_inventory_name(inventory)\n        self._validate_inventory_version(inventory)\n        self._validate_inventory_description(inventory)\n        self._validate_inventory_contributors(inventory)\n        self._validate_inventory_licenses(inventory)\n        self._validate_inventory_copyrights(inventory)\n        self._validate_inventory_resources(inventory)\n        self._validate_inventory_packages(inventory)\n        self._validate_inventory_relationships(inventory)\n        self._validate_inventory_components(inventory)\n        self._validate_inventory_annotations(in"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n        \n        self._validate_inventory_type(inventory)\n        self._validate_inventory_schema(inventory, extract_spec_version)\n        self._validate_inventory_name(inventory)\n        self._validate_inventory_version(inventory)\n        self._validate_inventory_description(inventory)\n        self._validate_inventory_contributors(inventory)\n        self._validate_inventory_licenses(inventory)\n        self._validate_inventory_copyrights(inventory)\n        self._validate_inventory_resources(inventory)\n        self._validate_inventory_packages(inventory)\n        self._validate_inventory_relationships(inventory)\n        self._validate_inventory_components(inventory)\n        self._validate_inventory_annotations(in", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for manifest_file in manifest_files:\n            if manifest_file.digest_algorithm not in digests_used:\n                self.fail('Digest type \"%s\" not used' % manifest_file.digest_algorithm)\n\n            if manifest_file.digest is None:\n                self.fail('Digest for file \"%s\" not present' % manifest_file.path)\n\n    def check_digests_used(self, digests_used):\n        \n        for digest_algorithm in digests_used:\n            if digest_algorithm not in self.digest_algorithms:\n                self.fail('Digest type \"%s\" not supported' % digest_algorithm)\n\n    def check_digests_match(self, manifest_files):\n        '''Check all"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        for manifest_file in manifest_files:\n            if manifest_file.digest_algorithm not in digests_used:\n                self.fail('Digest type \"%s\" not used' % manifest_file.digest_algorithm)\n\n            if manifest_file.digest is None:\n                self.fail('Digest for file \"%s\" not present' % manifest_file.path)\n\n    def check_digests_used(self, digests_used):\n        \n        for digest_algorithm in digests_used:\n            if digest_algorithm not in self.digest_algorithms:\n                self.fail('Digest type \"%s\" not supported' % digest_algorithm)\n\n    def check_digests_match(self, manifest_files):\n        '''Check all", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n        \n        return False\n\n    def validate_as_version(self, prior):\n        \n        return False\n\n    def validate_as_latest_version(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_class(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_superclass(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_superclass_or_sub"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n        \n        return False\n\n    def validate_as_version(self, prior):\n        \n        return False\n\n    def validate_as_latest_version(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_class(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_superclass(self, prior):\n        \n        return False\n\n    def validate_as_latest_version_of_superclass_or_sub", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    \n    result = {}\n    for state_name, state in inventory.states.items():\n        result[state_name] = {}\n        for file_name, file in state.files.items():\n            if file.get_version(version) is not None:\n                result[state_name][file_name] = file.get_logical_path(version)\n    return result\n\ndef get_logical_path_map_by_state(inventory, version, state_name):\n    \n    result = {}\n    state = inventory.states[state_name]\n    for file_name, file in state.files.items():\n        if file.get_version(version) is not None:\n            result[file_name] ="], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    \n    result = {}\n    for state_name, state in inventory.states.items():\n        result[state_name] = {}\n        for file_name, file in state.files.items():\n            if file.get_version(version) is not None:\n                result[state_name][file_name] = file.get_logical_path(version)\n    return result\n\ndef get_logical_path_map_by_state(inventory, version, state_name):\n    \n    result = {}\n    state = inventory.states[state_name]\n    for file_name, file in state.files.items():\n        if file.get_version(version) is not None:\n            result[file_name] =", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n        \n        for f in manifest_files:\n            if fixity[f] != self.get_hash(f):\n                print('Fixity check failed for file: ', f)\n                return False\n        return True\n\n    def validate_manifest(self, manifest, manifest_files):\n        \n        for f in manifest_files:\n            if manifest[f] != self.get_hash(f):\n                print('Manifest check failed for file: ', f)\n                return False\n        return True\n\n    def validate_manifest_files(self, manifest_files):\n        \n        for f in manifest_files:\n            if os.path.isfile(f) is False:\n                print('Missing file: ', f)\n                return False\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n        \n        for f in manifest_files:\n            if fixity[f] != self.get_hash(f):\n                print('Fixity check failed for file: ', f)\n                return False\n        return True\n\n    def validate_manifest(self, manifest, manifest_files):\n        \n        for f in manifest_files:\n            if manifest[f] != self.get_hash(f):\n                print('Manifest check failed for file: ', f)\n                return False\n        return True\n\n    def validate_manifest_files(self, manifest_files):\n        \n        for f in manifest_files:\n            if os.path.isfile(f) is False:\n                print('Missing file: ', f)\n                return False\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \n    return [f for f in listdir(path) if isfile(join(path, f))]\n\ndata_path = '../data/test_files/'\nfiles = files_list(data_path)\n\nfor file in files:\n    print(file)\n    df = pd.read_csv(data_path + file)\n    print(df)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \n    return [f for f in listdir(path) if isfile(join(path, f))]\n\ndata_path = '../data/test_files/'\nfiles = files_list(data_path)\n\nfor file in files:\n    print(file)\n    df = pd.read_csv(data_path + file)\n    print(df)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    \n    basenames = {f.basename: [] for f in xmls}\n    for f in files:\n        for xml in xmls:\n            if xml.basename in f.basename:\n                basenames[xml.basename].append(f)\n                break\n    return basenames\n\ndef _impl(ctx):\n    \n    source = ctx.file.source\n    xmls = ctx.files.xmls\n    files = ctx.files.files\n    ctx.actions.run_shell(\n        inputs = [source, ctx.file.runner] + files + xmls,\n        outputs = ctx.outputs.outs,\n        command = ' && '.join([\n            ctx.file.runner.path,\n            source.path,\n            _group_files_by_"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    basenames = {f.basename: [] for f in xmls}\n    for f in files:\n        for xml in xmls:\n            if xml.basename in f.basename:\n                basenames[xml.basename].append(f)\n                break\n    return basenames\n\ndef _impl(ctx):\n    \n    source = ctx.file.source\n    xmls = ctx.files.xmls\n    files = ctx.files.files\n    ctx.actions.run_shell(\n        inputs = [source, ctx.file.runner] + files + xmls,\n        outputs = ctx.outputs.outs,\n        command = ' && '.join([\n            ctx.file.runner.path,\n            source.path,\n            _group_files_by_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    \n    return file_path.startswith(prefix)\n\n\ndef match_file_by_suffix(suffix, file_path):\n    \n    return file_path.endswith(suffix)\n\n\ndef match_file_by_prefix_and_suffix(prefix, suffix, file_path):\n    \n    return file_path.startswith(prefix) and file_path.endswith(suffix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \n    return file_path.startswith(prefix)\n\n\ndef match_file_by_suffix(suffix, file_path):\n    \n    return file_path.endswith(suffix)\n\n\ndef match_file_by_prefix_and_suffix(prefix, suffix, file_path):\n    \n    return file_path.startswith(prefix) and file_path.endswith(suffix)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.startswith(prefix):\n            selected_files.append(file)\n    return selected_files\n\n\ndef select_filenames_by_suffix(suffix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.endswith(suffix):\n            selected_files.append(file)\n    return selected_files\n\n\ndef select_filenames_by_pattern(pattern, files):\n    \n    selected_files = []\n    for file in files:\n        if pattern in file:\n            selected_files.append(file)\n    return selected_files\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.startswith(prefix):\n            selected_files.append(file)\n    return selected_files\n\n\ndef select_filenames_by_suffix(suffix, files):\n    \n    selected_files = []\n    for file in files:\n        if file.endswith(suffix):\n            selected_files.append(file)\n    return selected_files\n\n\ndef select_filenames_by_pattern(pattern, files):\n    \n    selected_files = []\n    for file in files:\n        if pattern in file:\n            selected_files.append(file)\n    return selected_files\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    \n    from os import path\n    from glob import glob\n    from importlib import import_module\n    from .config import PACKAGE_TEMPLATE\n\n    def _get_package_from_file(file_path):\n        \n        from .config import PACKAGE_TEMPLATE\n        from .utils import json_dump\n\n        name = path.splitext(path.basename(file_path))[0]\n\n        try:\n            package = import_module(name)\n        except:\n            return None\n\n        if hasattr(package, '__all__'):\n            package_data = {\n                'name': name,\n                'title': package.__all__[0],\n                'description': package.__all__[1"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    \n    from os import path\n    from glob import glob\n    from importlib import import_module\n    from .config import PACKAGE_TEMPLATE\n\n    def _get_package_from_file(file_path):\n        \n        from .config import PACKAGE_TEMPLATE\n        from .utils import json_dump\n\n        name = path.splitext(path.basename(file_path))[0]\n\n        try:\n            package = import_module(name)\n        except:\n            return None\n\n        if hasattr(package, '__all__'):\n            package_data = {\n                'name': name,\n                'title': package.__all__[0],\n                'description': package.__all__[1", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    \n    if prefix in file_path:\n        return 'asset'\n    return 'rendition'\n\n\ndef _extract_url_from_asset(file_path):\n    \n    return file_path.split('/')[-1].split('.')[0]\n\n\ndef _extract_url_from_rendition(file_path):\n    \n    \n    file_name = file_path.split('/')[-1]\n    asset_name = file_name.split('.')[0]\n\n    size = file_name.split('-')[-1].split('.')[0]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    \n    if prefix in file_path:\n        return 'asset'\n    return 'rendition'\n\n\ndef _extract_url_from_asset(file_path):\n    \n    return file_path.split('/')[-1].split('.')[0]\n\n\ndef _extract_url_from_rendition(file_path):\n    \n    \n    file_name = file_path.split('/')[-1]\n    asset_name = file_name.split('.')[0]\n\n    size = file_name.split('-')[-1].split('.')[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n        \n        try:\n            rendition = self.renditions[lang]\n            return False\n        except:\n            self.renditions[lang] = file_path\n            return True\n\n    def get_rendition(self, lang):\n        try:\n            rendition = self.renditions[lang]\n            return rendition\n        except:\n            return None\n\n    def get_renditions(self):\n        return self.renditions\n\n    def remove_rendition(self, lang):\n        try:\n            del self.renditions[lang]\n            return True\n        except:\n            return False\n\n    def get_default_rendition(self):\n        try:\n            return self.renditions['original']\n        except:\n            return None\n\n\nclass Rendition(models.Model):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n        \n        try:\n            rendition = self.renditions[lang]\n            return False\n        except:\n            self.renditions[lang] = file_path\n            return True\n\n    def get_rendition(self, lang):\n        try:\n            rendition = self.renditions[lang]\n            return rendition\n        except:\n            return None\n\n    def get_renditions(self):\n        return self.renditions\n\n    def remove_rendition(self, lang):\n        try:\n            del self.renditions[lang]\n            return True\n        except:\n            return False\n\n    def get_default_rendition(self):\n        try:\n            return self.renditions['original']\n        except:\n            return None\n\n\nclass Rendition(models.Model):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path\n\n\n    def remove_asset(self, basename):\n        if basename in self.assets:\n            del self.assets[basename]\n\n\n\n    @property\n    def basenames(self):\n        return list(self.assets.keys())\n\n\n\n    def __str__(self, *args, **kwargs):\n        return \"ArticleJSON:{name:%s, type:%s, created:%s, updated:%s, start:%s, end:%s, assets:%s, links:%s}\" % \\\n                    (self.name, self.type, self.created, self.updated, self.start,"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n        \n        self.assets[basename] = file_path\n\n\n    def remove_asset(self, basename):\n        if basename in self.assets:\n            del self.assets[basename]\n\n\n\n    @property\n    def basenames(self):\n        return list(self.assets.keys())\n\n\n\n    def __str__(self, *args, **kwargs):\n        return \"ArticleJSON:{name:%s, type:%s, created:%s, updated:%s, start:%s, end:%s, assets:%s, links:%s}\" % \\\n                    (self.name, self.type, self.created, self.updated, self.start,", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    \n    import zipfile, re\n    zip_file = zipfile.ZipFile(zip_path)\n    package_name = re.findall(r'[^/\\\\]+', zip_path)[-1]\n\n    file_list = list()\n    for file_name in zip_file.namelist():\n        if file_name.endswith('.py'):\n            file_list.append((package_name, file_name))\n\n    return file_list\n\n\ndef _explore_eggfile(egg_path):\n    \n    import zipfile, re\n    zip_file = zipfile.ZipFile(egg_path)\n    package_name = re.findall(r'[^/\\\\]+', egg_path)[-1]\n\n    file_list = list"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    \n    import zipfile, re\n    zip_file = zipfile.ZipFile(zip_path)\n    package_name = re.findall(r'[^/\\\\]+', zip_path)[-1]\n\n    file_list = list()\n    for file_name in zip_file.namelist():\n        if file_name.endswith('.py'):\n            file_list.append((package_name, file_name))\n\n    return file_list\n\n\ndef _explore_eggfile(egg_path):\n    \n    import zipfile, re\n    zip_file = zipfile.ZipFile(egg_path)\n    package_name = re.findall(r'[^/\\\\]+', egg_path)[-1]\n\n    file_list = list", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    try:\n        with zipfile.ZipFile(zip_path) as z:\n            return z.namelist()\n    except zipfile.BadZipfile as e:\n        raise Exception('%s is not a zip file' % zip_path) from e\n\ndef files_list_from_tarfile(tar_path):\n    \n    import tarfile\n    try:\n        with tarfile.open(tar_path) as t:\n            return t.getnames()\n    except tarfile.ReadError as e:\n        raise Exception('%s is not a tar file' % tar_path) from e\n\ndef files_list_from_directory(dir_path):\n    \n    import os\n    return"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    \n    import zipfile\n    try:\n        with zipfile.ZipFile(zip_path) as z:\n            return z.namelist()\n    except zipfile.BadZipfile as e:\n        raise Exception('%s is not a zip file' % zip_path) from e\n\ndef files_list_from_tarfile(tar_path):\n    \n    import tarfile\n    try:\n        with tarfile.open(tar_path) as t:\n            return t.getnames()\n    except tarfile.ReadError as e:\n        raise Exception('%s is not a tar file' % tar_path) from e\n\ndef files_list_from_directory(dir_path):\n    \n    import os\n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \n\n\n    content = content.replace('w:st=\"', 'w-st=')\n\n\n    return content\n\n\ndef fix_namespace_prefix_w_r(content):\n    \n\n\n    content = content.replace('w:r=\"', 'w-r=')\n\n\n    return content\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \n\n\n    content = content.replace('w:st=\"', 'w-st=')\n\n\n    return content\n\n\ndef fix_namespace_prefix_w_r(content):\n    \n\n\n    content = content.replace('w:r=\"', 'w-r=')\n\n\n    return content\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        try:\n            pubdate = node.xpath(pubdate_xpath)\n            if pubdate:\n                return pubdate[0]\n        except:\n            pass\n\n    return None\n\ndef match_xpath(node, xpaths):\n    \n    for xpath in xpaths:\n        try:\n            match = node.xpath(xpath)\n            if match:\n                return match\n        except:\n            pass\n\n    return None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    for pubdate_xpath in pubdate_xpaths:\n        try:\n            pubdate = node.xpath(pubdate_xpath)\n            if pubdate:\n                return pubdate[0]\n        except:\n            pass\n\n    return None\n\ndef match_xpath(node, xpaths):\n    \n    for xpath in xpaths:\n        try:\n            match = node.xpath(xpath)\n            if match:\n                return match\n        except:\n            pass\n\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \n    issue = issue.strip()\n\n    if issue.startswith('SUPPL'):\n        return None, issue\n\n    if issue.startswith('s1-s'):\n        return 's1', issue[len('s1-s'):]\n\n    if issue.startswith('s2-s'):\n        return 's2', issue[len('s2-s'):]\n\n    if issue.startswith('spe'):\n        return 'spe', issue[len('spe'):]\n\n    if issue.startswith('spe.'):\n        return 'spe', issue[len('spe.'):]\n\n    if issue.startswith('spe '):\n        return 'spe', issue[len('spe '):]\n\n    if issue.startswith('spe.'):\n        return 'spe', issue[len('spe.'):]\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \n    issue = issue.strip()\n\n    if issue.startswith('SUPPL'):\n        return None, issue\n\n    if issue.startswith('s1-s'):\n        return 's1', issue[len('s1-s'):]\n\n    if issue.startswith('s2-s'):\n        return 's2', issue[len('s2-s'):]\n\n    if issue.startswith('spe'):\n        return 'spe', issue[len('spe'):]\n\n    if issue.startswith('spe.'):\n        return 'spe', issue[len('spe.'):]\n\n    if issue.startswith('spe '):\n        return 'spe', issue[len('spe '):]\n\n    if issue.startswith('spe.'):\n        return 'spe', issue[len('spe.'):]\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n        \n        if debug:\n            print(f'pretty({self}, {indent})')\n        if isinstance(self, list):\n            result = [pretty(x, indent + 1, debug) for x in self]\n            if debug:\n                print(f'list: {result}')\n            return '\\n'.join(result)\n        elif isinstance(self, dict):\n            result = [f'{k}: {pretty(v, indent + 1, debug)}' for k, v in self.items()]\n            if debug:\n                print(f'dict: {result}')\n            return '\\n'.join(result)\n        elif isinstance(self, set):\n            result = [pretty(x, indent + 1, debug) for x in self]\n            if debug:\n                print(f'"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n        \n        if debug:\n            print(f'pretty({self}, {indent})')\n        if isinstance(self, list):\n            result = [pretty(x, indent + 1, debug) for x in self]\n            if debug:\n                print(f'list: {result}')\n            return '\\n'.join(result)\n        elif isinstance(self, dict):\n            result = [f'{k}: {pretty(v, indent + 1, debug)}' for k, v in self.items()]\n            if debug:\n                print(f'dict: {result}')\n            return '\\n'.join(result)\n        elif isinstance(self, set):\n            result = [pretty(x, indent + 1, debug) for x in self]\n            if debug:\n                print(f'", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n        \n        absorbable = []\n        for i in range(len(args)):\n            if len(args[i].args) == 1:\n                absorbable.append(args[i])\n                continue\n            for j in range(i + 1, len(args)):\n                if args[i].args[0] == args[j].args[0] and args[i].args[1] == args[j].args[1]:\n                    absorbable.append(args[i].args[0])\n                    break\n        for i in range(len(args)):\n            if len(args[i].args) == 1:\n                continue\n            for j in range(i + 1, len(args)):\n                if args[i].args[0] == args[j].args[1] and args[i]."], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n        \n        absorbable = []\n        for i in range(len(args)):\n            if len(args[i].args) == 1:\n                absorbable.append(args[i])\n                continue\n            for j in range(i + 1, len(args)):\n                if args[i].args[0] == args[j].args[0] and args[i].args[1] == args[j].args[1]:\n                    absorbable.append(args[i].args[0])\n                    break\n        for i in range(len(args)):\n            if len(args[i].args) == 1:\n                continue\n            for j in range(i + 1, len(args)):\n                if args[i].args[0] == args[j].args[1] and args[i].", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n        \n        def inner(func):\n            self.add_hook(hook, func)\n            return func\n        return inner\n\n    def add_hook(self, hook, func):\n        \n        self._hooks.setdefault(hook, []).append(func)\n\n    def remove_hook(self, hook, func):\n        \n        if hook in self._hooks:\n            self._hooks[hook].remove(func)\n\n    def fire_hook(self, hook, *args, **kwargs):\n        \n        if hook in self._hooks:\n            for func in self._hooks[hook]:\n                func(*args, **kwargs)\n\n    def on_install(self, *args, **kwargs):\n        '''Fire the on_"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n        \n        def inner(func):\n            self.add_hook(hook, func)\n            return func\n        return inner\n\n    def add_hook(self, hook, func):\n        \n        self._hooks.setdefault(hook, []).append(func)\n\n    def remove_hook(self, hook, func):\n        \n        if hook in self._hooks:\n            self._hooks[hook].remove(func)\n\n    def fire_hook(self, hook, *args, **kwargs):\n        \n        if hook in self._hooks:\n            for func in self._hooks[hook]:\n                func(*args, **kwargs)\n\n    def on_install(self, *args, **kwargs):\n        '''Fire the on_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n        \n        return dt.replace(tzinfo=self)\n\n    def fromutc(self, dt):\n        \n        if dt.tzinfo is None:\n            raise ValueError('fromutc() requires a timezone-aware input')\n        return self._fromutc(dt)\n\n    def tzname(self, dt):\n        \n        return self._tzname\n\n    def utcoffset(self, dt):\n        \n        return self._utcoffset\n\n    def dst(self, dt):\n        \n        return self._dst"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n        \n        return dt.replace(tzinfo=self)\n\n    def fromutc(self, dt):\n        \n        if dt.tzinfo is None:\n            raise ValueError('fromutc() requires a timezone-aware input')\n        return self._fromutc(dt)\n\n    def tzname(self, dt):\n        \n        return self._tzname\n\n    def utcoffset(self, dt):\n        \n        return self._utcoffset\n\n    def dst(self, dt):\n        \n        return self._dst", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n        \n        return self.scaled(1.0 / self.scale)\n\n    def scaled(self, scale):\n        \n        return self.__class__(self.x * scale, self.y * scale)\n\n    def scaled_down_to(self, size):\n        \n        scale = min(size[0] / self.width, size[1] / self.height)\n        return self.scaled(scale)\n\n    def scaled_up_to(self, size):\n        \n        scale = max(size[0] / self.width, size[1] / self.height)\n        return self.scale"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n        \n        return self.scaled(1.0 / self.scale)\n\n    def scaled(self, scale):\n        \n        return self.__class__(self.x * scale, self.y * scale)\n\n    def scaled_down_to(self, size):\n        \n        scale = min(size[0] / self.width, size[1] / self.height)\n        return self.scaled(scale)\n\n    def scaled_up_to(self, size):\n        \n        scale = max(size[0] / self.width, size[1] / self.height)\n        return self.scale", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    \n    def newfunc(*args, **kwargs):\n        rval = namefunc(*args, **kwargs)\n        if rval is not None and not PY2:\n            return rval.encode()\n        return rval\n\n    return newfunc\n\n\ndef unpickle_compat(pickle_module):\n    \"\"\"Backport the new unpickling interface for Python 2.\n\n    See the related PEP for details:\n        https://www.python.org/dev/peps/pep-3154/\n\n    \"\"\"\n\n    if PY2:\n        Unpickler = pickle_module.Unpickler\n\n        class ImprovedUnpickler(object):\n            def"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    \n    def newfunc(*args, **kwargs):\n        rval = namefunc(*args, **kwargs)\n        if rval is not None and not PY2:\n            return rval.encode()\n        return rval\n\n    return newfunc\n\n\ndef unpickle_compat(pickle_module):\n    \"\"\"Backport the new unpickling interface for Python 2.\n\n    See the related PEP for details:\n        https://www.python.org/dev/peps/pep-3154/\n\n    \"\"\"\n\n    if PY2:\n        Unpickler = pickle_module.Unpickler\n\n        class ImprovedUnpickler(object):\n            def", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    \n    import os\n    from sys import version_info\n    versions = {}\n    try:\n        import numpy\n        versions['numpy'] = numpy.__version__\n    except ImportError:\n        versions['numpy'] = 'N/A'\n    try:\n        import scipy\n        versions['scipy'] = scipy.__version__\n    except ImportError:\n        versions['scipy'] = 'N/A'\n    try:\n        import sklearn\n        versions['sklearn'] = sklearn.__version__\n    except ImportError:\n        versions['sklearn'] = 'N/A'\n    try:\n        import pandas\n        versions['pandas'] = pandas.__version__\n    except ImportError:\n        versions['pandas'] = 'N/A'\n    try:\n        import matplotlib\n        versions['matplotlib'] = matplotlib.__version__"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    \n    import os\n    from sys import version_info\n    versions = {}\n    try:\n        import numpy\n        versions['numpy'] = numpy.__version__\n    except ImportError:\n        versions['numpy'] = 'N/A'\n    try:\n        import scipy\n        versions['scipy'] = scipy.__version__\n    except ImportError:\n        versions['scipy'] = 'N/A'\n    try:\n        import sklearn\n        versions['sklearn'] = sklearn.__version__\n    except ImportError:\n        versions['sklearn'] = 'N/A'\n    try:\n        import pandas\n        versions['pandas'] = pandas.__version__\n    except ImportError:\n        versions['pandas'] = 'N/A'\n    try:\n        import matplotlib\n        versions['matplotlib'] = matplotlib.__version__", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    \n    if style == 'markdown':\n        return ''.join(pieces)\n    elif style == 'html':\n        return ''.join(pieces)\n    else:\n        raise ValueError('Unknown style: {}'.format(style))"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    \n    if style == 'markdown':\n        return ''.join(pieces)\n    elif style == 'html':\n        return ''.join(pieces)\n    else:\n        raise ValueError('Unknown style: {}'.format(style))", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    \n    if '+' in pieces:\n        return '.'\n    return '+'\n\n\ndef is_number(s):\n    \n    if s[0] in '+-.':\n        s = s[1:]\n    if s[0] == '0':\n        if len(s) == 1:\n            return True\n        if s[1] in 'xob':\n            return True\n    if '9' >= s[0] >= '1' and s[1] in '0123456789.eE':\n        return True\n    return False\n\n\ndef split_repeated(string):\n    \n    result = []\n    current = []\n    prev = ''\n    for char in string"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    \n    if '+' in pieces:\n        return '.'\n    return '+'\n\n\ndef is_number(s):\n    \n    if s[0] in '+-.':\n        s = s[1:]\n    if s[0] == '0':\n        if len(s) == 1:\n            return True\n        if s[1] in 'xob':\n            return True\n    if '9' >= s[0] >= '1' and s[1] in '0123456789.eE':\n        return True\n    return False\n\n\ndef split_repeated(string):\n    \n    result = []\n    current = []\n    prev = ''\n    for char in string", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    import subprocess\n\n    if env is None:\n        env = {}\n\n    if verbose:\n        print 'run_command:', commands\n        print 'run_command: args=', args\n        print 'run_command: cwd=', cwd\n        print 'run_command: env=', env\n\n    p = subprocess.Popen(commands, cwd=cwd, env=env,\n                         stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         shell=True)\n    stdout, stderr = p.communicate(args)\n\n    if verbose:\n        print 'run_command: stdout=', stdout\n        print 'run_command: stderr=', stderr\n        print 'run_command: returncode"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    import subprocess\n\n    if env is None:\n        env = {}\n\n    if verbose:\n        print 'run_command:', commands\n        print 'run_command: args=', args\n        print 'run_command: cwd=', cwd\n        print 'run_command: env=', env\n\n    p = subprocess.Popen(commands, cwd=cwd, env=env,\n                         stdin=subprocess.PIPE,\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         shell=True)\n    stdout, stderr = p.communicate(args)\n\n    if verbose:\n        print 'run_command: stdout=', stdout\n        print 'run_command: stderr=', stderr\n        print 'run_command: returncode", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    \n    from ._version import get_versions\n    from . import VersioneerConfig\n    cfg = VersioneerConfig()\n    cfg.VCS = 'git'\n    cfg.verbose = False\n    cfg.versionfile_source = \"src/version.py\"\n    cfg.versionfile_build = \"src/version.py\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"python-\"\n    cfg.error_on_no_tag = False\n    cfg.rev_template = \"{tag}+{sha}\"\n    cfg.build_template = \"{tag}\"\n    cfg.no_write_to_history = True\n    cfg.write_to_tag = True\n    cfg.write_to_versionfile_msg = False\n    cfg"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    \n    from ._version import get_versions\n    from . import VersioneerConfig\n    cfg = VersioneerConfig()\n    cfg.VCS = 'git'\n    cfg.verbose = False\n    cfg.versionfile_source = \"src/version.py\"\n    cfg.versionfile_build = \"src/version.py\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"python-\"\n    cfg.error_on_no_tag = False\n    cfg.rev_template = \"{tag}+{sha}\"\n    cfg.build_template = \"{tag}\"\n    cfg.no_write_to_history = True\n    cfg.write_to_tag = True\n    cfg.write_to_versionfile_msg = False\n    cfg", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n  \n  def decorator(f):\n    f._vcs_handler = (vcs, method)\n    return f\n  return decorator\n\ndef get_vcs_handler(method):\n  \n  try:\n    return method._vcs_handler\n  except AttributeError:\n    return None\n\ndef get_vcs_handlers(cls):\n  \n  for name, method in inspect.getmembers(cls):\n    if not inspect.ismethod(method):\n      continue\n    vcs_handler = get_vcs_handler(method)\n    if vcs_handler:\n      yield vcs_handler\n\n\nclass VCSHandler(object):\n  \n\n  def __init__("], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n  \n  def decorator(f):\n    f._vcs_handler = (vcs, method)\n    return f\n  return decorator\n\ndef get_vcs_handler(method):\n  \n  try:\n    return method._vcs_handler\n  except AttributeError:\n    return None\n\ndef get_vcs_handlers(cls):\n  \n  for name, method in inspect.getmembers(cls):\n    if not inspect.ismethod(method):\n      continue\n    vcs_handler = get_vcs_handler(method)\n    if vcs_handler:\n      yield vcs_handler\n\n\nclass VCSHandler(object):\n  \n\n  def __init__(", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if not os.path.exists(self.storage_root):\n            raise IOError(self.storage_root + ' does not exist')\n        if not os.path.isdir(self.storage_root):\n            raise IOError(self.storage_root + ' is not a directory')\n        if validate_objects:\n            for obj in self.objects.values():\n                obj.validate_hierarchy(show_warnings=show_warnings)\n\n    def validate_data_integrity(self):\n        \n        for obj in self.objects.values():\n            obj.validate_data_integrity()\n\n    def validate_hierarchy_and_data_integrity(self):\n        \n        for obj in self.objects."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        if not os.path.exists(self.storage_root):\n            raise IOError(self.storage_root + ' does not exist')\n        if not os.path.isdir(self.storage_root):\n            raise IOError(self.storage_root + ' is not a directory')\n        if validate_objects:\n            for obj in self.objects.values():\n                obj.validate_hierarchy(show_warnings=show_warnings)\n\n    def validate_data_integrity(self):\n        \n        for obj in self.objects.values():\n            obj.validate_data_integrity()\n\n    def validate_hierarchy_and_data_integrity(self):\n        \n        for obj in self.objects.", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n        \n        self.root = OcflStorageRoot(self.rootdir)\n        self.root.create()\n        self.root.create_inventory()\n        self.root.write_inventory()\n        self.root.create_filesystem_layout()\n        self.root.create_readme()\n        self.root.create_sidecar()\n\n    def finalize(self):\n        \n        pass\n\n    def add_object(self, obj):\n        '''Add the"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n        \n        self.root = OcflStorageRoot(self.rootdir)\n        self.root.create()\n        self.root.create_inventory()\n        self.root.write_inventory()\n        self.root.create_filesystem_layout()\n        self.root.create_readme()\n        self.root.create_sidecar()\n\n    def finalize(self):\n        \n        pass\n\n    def add_object(self, obj):\n        '''Add the", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \n    parts = version.split('.')\n    if len(parts) != 3:\n        raise RuntimeError(\"invalid version: %r\" % version)\n    major, minor, patch = parts\n\n    patch = int(patch) + 1\n\n    return '%s.%s.%s' % (major, minor, patch)\n\n\ndef version2tuple(version):\n    return tuple([int(i) for i in version.split('.')])\n\n\ndef version2str(version):\n    return '.'.join([str(i) for i in version])\n\n\ndef version_is_patch(version):\n    return version2tuple(version)[2] % 2 == 0\n\n\ndef version_is_minor(version):\n    return version2tuple(version)[1] % 2 == 0\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \n    parts = version.split('.')\n    if len(parts) != 3:\n        raise RuntimeError(\"invalid version: %r\" % version)\n    major, minor, patch = parts\n\n    patch = int(patch) + 1\n\n    return '%s.%s.%s' % (major, minor, patch)\n\n\ndef version2tuple(version):\n    return tuple([int(i) for i in version.split('.')])\n\n\ndef version2str(version):\n    return '.'.join([str(i) for i in version])\n\n\ndef version_is_patch(version):\n    return version2tuple(version)[2] % 2 == 0\n\n\ndef version_is_minor(version):\n    return version2tuple(version)[1] % 2 == 0\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            inventory_dir = os.path.join(version_dir, 'inventory')\n            if not os.path.exists(inventory_dir):\n                self.log.warning(\n                    f'{version_dir} does not have an inventory directory')\n\n    def validate_version_inventory(self, version_dir):\n        \n        inventory_dir = os.path.join(version_dir, 'inventory')\n        if not os.path.exists(inventory_dir):\n            self.log.error(f'{version_dir} does not have an inventory directory')\n            return False\n        return True\n\n    def validate_inventory_versions(self, inventory_dirs"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n        \n        for version_dir in version_dirs:\n            inventory_dir = os.path.join(version_dir, 'inventory')\n            if not os.path.exists(inventory_dir):\n                self.log.warning(\n                    f'{version_dir} does not have an inventory directory')\n\n    def validate_version_inventory(self, version_dir):\n        \n        inventory_dir = os.path.join(version_dir, 'inventory')\n        if not os.path.exists(inventory_dir):\n            self.log.error(f'{version_dir} does not have an inventory directory')\n            return False\n        return True\n\n    def validate_inventory_versions(self, inventory_dirs", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    \n    if not path.exists():\n        return 'missing'\n    if path.is_dir():\n        return 'directory'\n    if path.is_file():\n        return 'file'\n    if path.is_symlink():\n        return 'link'\n    return 'unknown'\n\ndef find_path_type_verbose(path):\n    \n    if not path.exists():\n        return 'missing'\n    if path.is_dir():\n        return 'directory'\n    if path.is_file():\n        return 'file'\n    if path.is_symlink():\n        return 'link'\n    return 'unknown (%s)' % path\n\ndef find_paths_type(paths):\n    '''Return a dictionary mapping type of"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    \n    if not path.exists():\n        return 'missing'\n    if path.is_dir():\n        return 'directory'\n    if path.is_file():\n        return 'file'\n    if path.is_symlink():\n        return 'link'\n    return 'unknown'\n\ndef find_path_type_verbose(path):\n    \n    if not path.exists():\n        return 'missing'\n    if path.is_dir():\n        return 'directory'\n    if path.is_file():\n        return 'file'\n    if path.is_symlink():\n        return 'link'\n    return 'unknown (%s)' % path\n\ndef find_paths_type(paths):\n    '''Return a dictionary mapping type of", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n        \n        if len(bug_ids) > 0:\n            params['ids'] = bug_ids\n        return params\n\n\n    def amend_bzsearchparams(self, params, bug_ids):\n        \n        if len(bug_ids) > 0:\n            params['bz_ids'] = bug_ids\n        return params\n\n\n    def process_bugzilla(self, bug_ids):\n        \n        params = self.amend_bzparams({}, bug_ids)\n\n        bugs = self.bugzilla.query(params)\n        return self.process_bugs(bugs)\n\n\n    def process_bugzilla_search(self, bug_ids):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n        \n        if len(bug_ids) > 0:\n            params['ids'] = bug_ids\n        return params\n\n\n    def amend_bzsearchparams(self, params, bug_ids):\n        \n        if len(bug_ids) > 0:\n            params['bz_ids'] = bug_ids\n        return params\n\n\n    def process_bugzilla(self, bug_ids):\n        \n        params = self.amend_bzparams({}, bug_ids)\n\n        bugs = self.bugzilla.query(params)\n        return self.process_bugs(bugs)\n\n\n    def process_bugzilla_search(self, bug_ids):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    \n    \n    \n    \n\n    nodes.sort()\n    new_nodes = []\n    for name, sections in nodes:\n        new_sections = []\n        for section in sections:\n            new_section = {}\n            for k, v in section.items():\n                if k in new_section:\n                    new_section[k].update"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    \n    \n    \n\n    nodes.sort()\n    new_nodes = []\n    for name, sections in nodes:\n        new_sections = []\n        for section in sections:\n            new_section = {}\n            for k, v in section.items():\n                if k in new_section:\n                    new_section[k].update", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    \n    import argparse\n    parser = argparse.ArgumentParser(description=)\n    parser.add_argument('--verbose', '-v', action='count', default=0)\n\n    parser.add_argument('--config-file', '-c', help=, required=True)\n    parser.add_argument('--schema-file', '-s', help=, required=True)\n    parser.add_argument('--output-file', '-f', help=, required=True)\n\n    parsed_arguments = parser.parse_args(list(arguments))\n    return parsed_arguments\n\n\ndef load_configuration_file(configuration_"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n    import argparse\n    parser = argparse.ArgumentParser(description=)\n    parser.add_argument('--verbose', '-v', action='count', default=0)\n\n    parser.add_argument('--config-file', '-c', help=, required=True)\n    parser.add_argument('--schema-file', '-s', help=, required=True)\n    parser.add_argument('--output-file', '-f', help=, required=True)\n\n    parsed_arguments = parser.parse_args(list(arguments))\n    return parsed_arguments\n\n\ndef load_configuration_file(configuration_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \n    args = parser.parse_args([])\n    flags = ''\n    for arg in vars(args):\n        flags += ' ' + arg\n    return flags\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    args = parser.parse_args([])\n    flags = ''\n    for arg in vars(args):\n        flags += ' ' + arg\n    return flags\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    import sys\n\n    subparsers = argparse.ArgumentParser(description='A tool for comparing two JSON files.')\n\n    subparsers.add_argument('--version', action='version', version='%(prog)s 0.0')\n\n    subparsers.add_argument('--verbose', action='store_true', help='Print detailed information.', default=False)\n    subparsers.add_argument('--quiet', action='store_true', help='Print no information.', default=False)\n\n    subparsers.add_argument('--output-file', dest='output_file', help='Path to the output file. Defaults to stdout.')\n\n    subparsers.add_argument('--max-diffs', dest='max_diffs', help='Maximum number of differences"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    import argparse\n    import sys\n\n    subparsers = argparse.ArgumentParser(description='A tool for comparing two JSON files.')\n\n    subparsers.add_argument('--version', action='version', version='%(prog)s 0.0')\n\n    subparsers.add_argument('--verbose', action='store_true', help='Print detailed information.', default=False)\n    subparsers.add_argument('--quiet', action='store_true', help='Print no information.', default=False)\n\n    subparsers.add_argument('--output-file', dest='output_file', help='Path to the output file. Defaults to stdout.')\n\n    subparsers.add_argument('--max-diffs', dest='max_diffs', help='Maximum number of differences", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    unparsed_arguments = list(unparsed_arguments)\n    while len(unparsed_arguments) > 0 and unparsed_arguments[0] in subparsers:\n        subparser_name = unparsed_arguments[0]\n        subparser_arguments = unparsed_arguments[1:]\n        subparser = subparsers[subparser_name]\n        subparser_arguments, subparser_unknown_arguments = subparser.parse_known_args(subparser_arguments)\n        unparsed_arguments = subparser_unknown_arguments + unparsed_arguments[len(subparser_unknown_arguments) + 2:]\n    return subparser_arguments, unparsed_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    unparsed_arguments = list(unparsed_arguments)\n    while len(unparsed_arguments) > 0 and unparsed_arguments[0] in subparsers:\n        subparser_name = unparsed_arguments[0]\n        subparser_arguments = unparsed_arguments[1:]\n        subparser = subparsers[subparser_name]\n        subparser_arguments, subparser_unknown_arguments = subparser.parse_known_args(subparser_arguments)\n        unparsed_arguments = subparser_unknown_arguments + unparsed_arguments[len(subparser_unknown_arguments) + 2:]\n    return subparser_arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    \n    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n    from . import __version__\n    from . import parsers\n\n    parser = ArgumentParser(\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s ' + __version__\n    )\n    subparsers = parser.add_subparsers(\n        dest='command',\n        help='command to run'\n    )\n\n    parsers.setup_config_parser(subparsers)\n    parsers.setup_list_parser(subparsers)\n    parsers.setup_show_parser(subparsers)\n    parsers.setup_update_parser(subparsers)\n    parsers.setup_delete_parser(subparsers"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n    from . import __version__\n    from . import parsers\n\n    parser = ArgumentParser(\n        formatter_class=ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s ' + __version__\n    )\n    subparsers = parser.add_subparsers(\n        dest='command',\n        help='command to run'\n    )\n\n    parsers.setup_config_parser(subparsers)\n    parsers.setup_list_parser(subparsers)\n    parsers.setup_show_parser(subparsers)\n    parsers.setup_update_parser(subparsers)\n    parsers.setup_delete_parser(subparsers", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    \n    \n    \n    \n    \n    \n    \n    \n    '''If a value is a string, it will be replaced by the value of"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    \n    \n    \n    \n    \n    \n    \n    \n    '''If a value is a string, it will be replaced by the value of", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    \n    import argparse\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    for argument in arguments:\n        argument.add_to_parser(parser)\n    return parser.parse_args()\n\ndef add_boolean_argument(parser, *flags, **kwargs):\n    \n    action = 'store_true'\n    dest = None\n    help = None\n    for flag in flags:\n        if flag.startswith('--'):\n            if '--help' in flags:\n                help = flag[2:]\n            continue\n        if dest is None:\n            dest = flag[2:].replace('-', '_')\n            if '--no"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    \n    import argparse\n    parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)\n    for argument in arguments:\n        argument.add_to_parser(parser)\n    return parser.parse_args()\n\ndef add_boolean_argument(parser, *flags, **kwargs):\n    \n    action = 'store_true'\n    dest = None\n    help = None\n    for flag in flags:\n        if flag.startswith('--'):\n            if '--help' in flags:\n                help = flag[2:]\n            continue\n        if dest is None:\n            dest = flag[2:].replace('-', '_')\n            if '--no", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    \n    return ' '.join(sorted(f[1] for f in parser.__dict__['_option_string_actions'].keys()))\n\n\ndef parser_description(parser):\n    \n    return parser.__dict__['_description']\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    return ' '.join(sorted(f[1] for f in parser.__dict__['_option_string_actions'].keys()))\n\n\ndef parser_description(parser):\n    \n    return parser.__dict__['_description']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    \n    return \"\"\"#!/usr/bin/env bash\n\n_borgmatic() {\n    local cur=${COMP_WORDS[COMP_CWORD]}\n    local prev=${COMP_WORDS[COMP_CWORD-1]}\n    local cmds=\"create delete list prune upgrade scan info help version\"\n\n    if [[ ${cur} == -* ]]; then\n        COMPREPLY=( $(compgen -W \"--archive-dir --debug --dry-run --encryption-password --encryption-password-file --list --log-json --log-level --stats --log-file --remote --remote-path --remote-ratelimit --remote-rsh --remote-su --remote-sudo --remote-prefix --restrict-to-path --strip-components --stats --trust-all-crypto --trust-first-cert"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    \n    return \"\"\"#!/usr/bin/env bash\n\n_borgmatic() {\n    local cur=${COMP_WORDS[COMP_CWORD]}\n    local prev=${COMP_WORDS[COMP_CWORD-1]}\n    local cmds=\"create delete list prune upgrade scan info help version\"\n\n    if [[ ${cur} == -* ]]; then\n        COMPREPLY=( $(compgen -W \"--archive-dir --debug --dry-run --encryption-password --encryption-password-file --list --log-json --log-level --stats --log-file --remote --remote-path --remote-ratelimit --remote-rsh --remote-su --remote-sudo --remote-prefix --restrict-to-path --strip-components --stats --trust-all-crypto --trust-first-cert", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    \n\n    import argparse\n    import sys\n    import os\n\n    parser = argparse.ArgumentParser(\n        description = \"Parse the command-line arguments for the script.\",\n        formatter_class = argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument(\n        \"-v\", \"--verbose\",\n        action = \"store_true\",\n        dest = \"verbose\",\n        default = False,\n        help = \"Print verbose output.\")\n    parser.add_argument(\n        \"--silent\",\n        action = \"store_true\",\n        dest = \"silent\",\n        default = False,\n        help = \"Print no output.\")\n    parser.add_argument(\n        \"--debug\",\n        action = \"store_true\",\n        dest = \"debug"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n\n    import argparse\n    import sys\n    import os\n\n    parser = argparse.ArgumentParser(\n        description = \"Parse the command-line arguments for the script.\",\n        formatter_class = argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument(\n        \"-v\", \"--verbose\",\n        action = \"store_true\",\n        dest = \"verbose\",\n        default = False,\n        help = \"Print verbose output.\")\n    parser.add_argument(\n        \"--silent\",\n        action = \"store_true\",\n        dest = \"silent\",\n        default = False,\n        help = \"Print no output.\")\n    parser.add_argument(\n        \"--debug\",\n        action = \"store_true\",\n        dest = \"debug", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    subparser_name = None\n    for subparser_name, subparser in subparsers.items():\n        if unparsed_arguments[0] == \"--help\" or unparsed_arguments[0] == \"-h\":\n            subparser.print_help()\n            exit(0)\n        if subparser.parse_args(unparsed_arguments):\n            break\n    else:\n        parser.print_help()\n        print(\"Error: no subparser could parse the arguments %s. Please provide a subparser\" % (unparsed_arguments,))\n        exit(1)\n    return subparser, unparsed_arguments\n\n\ndef parse_arguments(unparsed_arguments):\n    \n    parser = argparse"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    subparser_name = None\n    for subparser_name, subparser in subparsers.items():\n        if unparsed_arguments[0] == \"--help\" or unparsed_arguments[0] == \"-h\":\n            subparser.print_help()\n            exit(0)\n        if subparser.parse_args(unparsed_arguments):\n            break\n    else:\n        parser.print_help()\n        print(\"Error: no subparser could parse the arguments %s. Please provide a subparser\" % (unparsed_arguments,))\n        exit(1)\n    return subparser, unparsed_arguments\n\n\ndef parse_arguments(unparsed_arguments):\n    \n    parser = argparse", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    \n    from argparse import ArgumentParser\n    from . import parse_args\n\n    parser = ArgumentParser(\n        prog='python -m {}'.format(parse_args.__name__),\n        description='Parse command-line arguments and return a dict.')\n    subparsers = parser.add_subparsers(\n        title='Subcommands', dest='subcommand')\n\n    for name, func in parse_args.__dict__.items():\n        if getattr(func, 'cli', False):\n            subparser = subparsers.add_parser(name)\n            subparser.set_defaults(subcommand=func)\n            func(subparser)\n\n    return parser, subparsers\n\n\ndef main():\n    parser, subparsers = make_"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \n    from argparse import ArgumentParser\n    from . import parse_args\n\n    parser = ArgumentParser(\n        prog='python -m {}'.format(parse_args.__name__),\n        description='Parse command-line arguments and return a dict.')\n    subparsers = parser.add_subparsers(\n        title='Subcommands', dest='subcommand')\n\n    for name, func in parse_args.__dict__.items():\n        if getattr(func, 'cli', False):\n            subparser = subparsers.add_parser(name)\n            subparser.set_defaults(subcommand=func)\n            func(subparser)\n\n    return parser, subparsers\n\n\ndef main():\n    parser, subparsers = make_", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    \n\n    for page in range(1, max_results):\n        yield response.get_page(page)\n\n\ndef format_response(response, data):\n    \n\n    for page in paging(response, data['max_results']):\n        for result in page:\n            yield {\n                'name': result.name,\n                'id': result.id,\n                'type': result.type,\n                'data': result.data\n            }\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    \n\n    for page in range(1, max_results):\n        yield response.get_page(page)\n\n\ndef format_response(response, data):\n    \n\n    for page in paging(response, data['max_results']):\n        for result in page:\n            yield {\n                'name': result.name,\n                'id': result.id,\n                'type': result.type,\n                'data': result.data\n            }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    \n\n    multipliers = {\n        'B': 1,\n        'K': 1024,\n        'M': 1024 * 1024,\n        'G': 1024 * 1024 * 1024,\n        'T': 1024 * 1024 * 1024 * 1024,\n    }\n\n    for suffix, multiplier in multipliers.items():\n        if size.upper().endswith(suffix):\n            return int(size[0:len(size) - len(suffix)]) * multiplier\n\n    return int(size)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    \n\n    multipliers = {\n        'B': 1,\n        'K': 1024,\n        'M': 1024 * 1024,\n        'G': 1024 * 1024 * 1024,\n        'T': 1024 * 1024 * 1024 * 1024,\n    }\n\n    for suffix, multiplier in multipliers.items():\n        if size.upper().endswith(suffix):\n            return int(size[0:len(size) - len(suffix)]) * multiplier\n\n    return int(size)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictmul(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictadd(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictmin(dicts):\n    '''Com"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictmul(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictadd(dicts):\n    \n    return dict((k, sum(d.get(k, 0) for d in dicts)) for k in set(k for d in dicts for k in d))\n\n\ndef _dictmin(dicts):\n    '''Com", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    \n    for url_arg in url_args:\n        url = url.replace('{{{}}}'.format(url_arg), url_args[url_arg])\n    return url\n\n\ndef _get_url(config, url_args):\n    \n    url = config['url']\n    url_args = url_args if url_args else {}\n    if url_args:\n        url = _replace_url_args(url, url_args)\n    return url\n\n\ndef _get_url_args(config):\n    \n    url_args = None\n    if 'url_args' in config:\n        url_args = config['url_args']\n    return url_args\n\n\ndef _get_method(config):\n    '''Get the"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    \n    for url_arg in url_args:\n        url = url.replace('{{{}}}'.format(url_arg), url_args[url_arg])\n    return url\n\n\ndef _get_url(config, url_args):\n    \n    url = config['url']\n    url_args = url_args if url_args else {}\n    if url_args:\n        url = _replace_url_args(url, url_args)\n    return url\n\n\ndef _get_url_args(config):\n    \n    url_args = None\n    if 'url_args' in config:\n        url_args = config['url_args']\n    return url_args\n\n\ndef _get_method(config):\n    '''Get the", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n    \n    return val is None or val == '' or val == 'None' or val == 'null'\n\ndef is_none_string_or_empty_list(val: Any) -> bool:\n    \n    return is_none_string(val) or val == []"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n    \n    return val is None or val == '' or val == 'None' or val == 'null'\n\ndef is_none_string_or_empty_list(val: Any) -> bool:\n    \n    return is_none_string(val) or val == []", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    \n    return ' '.join(sorted(('--' + action.dest) if action.dest else option_string for action, option_string in parser._option_string_actions.items()))\n\n\ndef get_all_subparsers(parser):\n    \n    if not hasattr(parser, 'choices'):\n        return []\n    return parser.choices.values()\n\n\ndef get_subparser_args(parser):\n    \n    return [parser_flags(p) for p in get_all_subparsers(parser)]\n\n\ndef get_subparser_flags(parser):\n    '''G"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \n    return ' '.join(sorted(('--' + action.dest) if action.dest else option_string for action, option_string in parser._option_string_actions.items()))\n\n\ndef get_all_subparsers(parser):\n    \n    if not hasattr(parser, 'choices'):\n        return []\n    return parser.choices.values()\n\n\ndef get_subparser_args(parser):\n    \n    return [parser_flags(p) for p in get_all_subparsers(parser)]\n\n\ndef get_subparser_flags(parser):\n    '''G", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    \n    if verbose:\n        print(\"Checking if\", path_name, \"was processed:\", end=\" \")\n    if path_name in processed:\n        if verbose:\n            print(\"Yes\")\n        return True\n    else:\n        processed.append(path_name)\n        if verbose:\n            print(\"No\")\n        return False\n\n\ndef get_file_list(path, processed, verbose):\n    \n    if verbose:\n        print(\"Getting files in\", path)\n    file_list = []\n    for path_name, directory_names, file_names in os.walk(path):\n        for file_name in file_names:\n            file_path = os.path.join(path_name, file_name)\n            if not was_"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    \n    if verbose:\n        print(\"Checking if\", path_name, \"was processed:\", end=\" \")\n    if path_name in processed:\n        if verbose:\n            print(\"Yes\")\n        return True\n    else:\n        processed.append(path_name)\n        if verbose:\n            print(\"No\")\n        return False\n\n\ndef get_file_list(path, processed, verbose):\n    \n    if verbose:\n        print(\"Getting files in\", path)\n    file_list = []\n    for path_name, directory_names, file_names in os.walk(path):\n        for file_name in file_names:\n            file_path = os.path.join(path_name, file_name)\n            if not was_", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return vertices.reshape(-1,3,3)\n\ndef vertex3tuple(vertices):\n    \n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    string = ''\n    while number:\n        number, remainder = divmod(number, len(alphabet))\n        string = alphabet[remainder] + string\n    if padding is not None and len(string) < padding:\n        string = alphabet[0] * (padding - len(string)) + string\n    return string\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    for character in string:\n        number *= len(alphabet)\n        number += alphabet.index(character)\n    return number\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    string = ''\n    while number:\n        number, remainder = divmod(number, len(alphabet))\n        string = alphabet[remainder] + string\n    if padding is not None and len(string) < padding:\n        string = alphabet[0] * (padding - len(string)) + string\n    return string\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    for character in string:\n        number *= len(alphabet)\n        number += alphabet.index(character)\n    return number\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    \n    flows = flow_params['flows']\n    for flow in flows:\n        for index, instruction in enumerate(flow['instructions']):\n            if instruction['op'] == 'replace' and instruction['register'] == register_number:\n                flow['instructions'][index]['value'] = register_value\n    return flow_params\n\ndef _replace_register_in_flow(flow, register_number, register_value):\n    \n    for index, instruction in enumerate(flow['instructions']):\n        if instruction['op'] == 'replace' and instruction['register'] == register_number:\n            flow['instructions'][index]['value'] = register_value\n    return flow\n\ndef _replace_register_in_flows(flows, register_number, register_value"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \n    flows = flow_params['flows']\n    for flow in flows:\n        for index, instruction in enumerate(flow['instructions']):\n            if instruction['op'] == 'replace' and instruction['register'] == register_number:\n                flow['instructions'][index]['value'] = register_value\n    return flow_params\n\ndef _replace_register_in_flow(flow, register_number, register_value):\n    \n    for index, instruction in enumerate(flow['instructions']):\n        if instruction['op'] == 'replace' and instruction['register'] == register_number:\n            flow['instructions'][index]['value'] = register_value\n    return flow\n\ndef _replace_register_in_flows(flows, register_number, register_value", "is_pass": false, "return_code": 1}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef remove_dots(value):\n    return value.replace(\".\", \"\")\n\n\ndef remove_whitespaces(value):\n    return value.replace(\" \", \"\")\n\n\ndef remove_special_chars(value):\n    return value.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\",\", \"\").replace(\">\", \"\").replace(\"<\", \"\")\n\n\ndef remove_double_quotes(value):\n    return value.replace(\"\\\"\", \"\")\n\n\ndef remove_single_quotes(value):\n    return value.replace(\"'\", \"\")\n\n\ndef remove_slashes(value):\n    return value.replace(\"/\", \"\")\n\n\ndef remove_"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef remove_dots(value):\n    return value.replace(\".\", \"\")\n\n\ndef remove_whitespaces(value):\n    return value.replace(\" \", \"\")\n\n\ndef remove_special_chars(value):\n    return value.replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\",\", \"\").replace(\">\", \"\").replace(\"<\", \"\")\n\n\ndef remove_double_quotes(value):\n    return value.replace(\"\\\"\", \"\")\n\n\ndef remove_single_quotes(value):\n    return value.replace(\"'\", \"\")\n\n\ndef remove_slashes(value):\n    return value.replace(\"/\", \"\")\n\n\ndef remove_", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n\n\ndef superclasses(cls):\n    \n    return cls.__mro__[:-1]\n\n\ndef instances_of(cls):\n    \n    return [x for x in gc.get_objects() if isinstance(x, cls)]\n\n\ndef all_instances_of(cls):\n    \n    return [x for x in gc.get_objects() if isinstance(x, cls)]\n\n\ndef all_instances_of_from_module(cls, module):\n    '''Return all instances"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n\n\ndef superclasses(cls):\n    \n    return cls.__mro__[:-1]\n\n\ndef instances_of(cls):\n    \n    return [x for x in gc.get_objects() if isinstance(x, cls)]\n\n\ndef all_instances_of(cls):\n    \n    return [x for x in gc.get_objects() if isinstance(x, cls)]\n\n\ndef all_instances_of_from_module(cls, module):\n    '''Return all instances", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    for character in string:\n        number *= len(alphabet)\n        number += alphabet.index(character) + 1\n    return number\n\n\ndef int_to_string(number: int, alphabet: List[str]) -> str:\n    \n    string = ''\n    while number != 0:\n        remainder = number % len(alphabet)\n        string = alphabet[remainder - 1] + string\n        number = number // len(alphabet)\n    return string\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    for character in string:\n        number *= len(alphabet)\n        number += alphabet.index(character) + 1\n    return number\n\n\ndef int_to_string(number: int, alphabet: List[str]) -> str:\n    \n    string = ''\n    while number != 0:\n        remainder = number % len(alphabet)\n        string = alphabet[remainder - 1] + string\n        number = number // len(alphabet)\n    return string\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        archive_path = Path(destination_path) / 'archive.tar.gz'\n        if not archive_path.exists():\n            r = requests.get(url, allow_redirects=True)\n            with open(archive_path, 'wb') as f:\n                f.write(r.content)\n        if not destination_path.exists():\n            destination_path.mkdir()\n        with tarfile.open(archive_path) as tar:\n            tar.extractall(str(destination_path))\n        return destination_path\n\n    def get_packages(self, root: Path) -> List[str]:\n        \n        raise NotImplementedError\n\n    def get_desc(self, package_path: Path) -> Dict[str, str"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        archive_path = Path(destination_path) / 'archive.tar.gz'\n        if not archive_path.exists():\n            r = requests.get(url, allow_redirects=True)\n            with open(archive_path, 'wb') as f:\n                f.write(r.content)\n        if not destination_path.exists():\n            destination_path.mkdir()\n        with tarfile.open(archive_path) as tar:\n            tar.extractall(str(destination_path))\n        return destination_path\n\n    def get_packages(self, root: Path) -> List[str]:\n        \n        raise NotImplementedError\n\n    def get_desc(self, package_path: Path) -> Dict[str, str", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    \n    import platform\n    return platform.system() == 'Darwin'\n\n\ndef os_is_win():\n    \n    import platform\n    return platform.system() == 'Windows'\n\n\ndef os_is_linux():\n    \n    import platform\n    return platform.system() == 'Linux'\n\n\ndef os_path_join(*args):\n    \n    import os\n    return os.path.join(*args)\n\n\ndef os_path_split(path):\n    \n    import os\n    return os.path.split(path)\n\n\ndef os_path_splitext(path):\n   "], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    \n    import platform\n    return platform.system() == 'Darwin'\n\n\ndef os_is_win():\n    \n    import platform\n    return platform.system() == 'Windows'\n\n\ndef os_is_linux():\n    \n    import platform\n    return platform.system() == 'Linux'\n\n\ndef os_path_join(*args):\n    \n    import os\n    return os.path.join(*args)\n\n\ndef os_path_split(path):\n    \n    import os\n    return os.path.split(path)\n\n\ndef os_path_splitext(path):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    \n    if item == 'template_args':\n        return 'template.*args'\n    elif item == 'template_default_args':\n        return 'template.*default.*args'\n    elif item == 'template_params':\n        return 'template.*params'\n    elif item == 'template_spec':\n        return 'template.*spec'\n    elif item == 'signature':\n        return '(type|name)'\n    elif item == 'definition':\n        return '(type|name)'\n    elif item == 'declaration':\n        return 'name'\n    elif item == 'type':\n        return '(type|name)'\n    elif item == 'name':\n        return 'name'\n    elif item == 'concept':\n        return 'concept'\n    elif item == 'base_type':\n        return 'base.*type'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    \n    if item == 'template_args':\n        return 'template.*args'\n    elif item == 'template_default_args':\n        return 'template.*default.*args'\n    elif item == 'template_params':\n        return 'template.*params'\n    elif item == 'template_spec':\n        return 'template.*spec'\n    elif item == 'signature':\n        return '(type|name)'\n    elif item == 'definition':\n        return '(type|name)'\n    elif item == 'declaration':\n        return 'name'\n    elif item == 'type':\n        return '(type|name)'\n    elif item == 'name':\n        return 'name'\n    elif item == 'concept':\n        return 'concept'\n    elif item == 'base_type':\n        return 'base.*type'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    \n    if name.startswith('\"'):\n        return name[1:-1]\n    return name\n\ndef escape_value(value):\n    \n    return value.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n\ndef encode(name, value):\n    \n    return '{}=\"{}\"'.format(name, escape_value(value))\n\ndef decode(line):\n    \n    name, _, value = line.partition('=')\n    return unquote(name), unquote(value)\n\ndef parse(text):\n    \n    return map(decode, text.splitlines())\n\ndef encode"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    \n    if name.startswith('\"'):\n        return name[1:-1]\n    return name\n\ndef escape_value(value):\n    \n    return value.replace('\\\\', '\\\\\\\\').replace('\"', '\\\\\"')\n\ndef encode(name, value):\n    \n    return '{}=\"{}\"'.format(name, escape_value(value))\n\ndef decode(line):\n    \n    name, _, value = line.partition('=')\n    return unquote(name), unquote(value)\n\ndef parse(text):\n    \n    return map(decode, text.splitlines())\n\ndef encode", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    \n    if platform == 'win32' or platform == 'cygwin':\n        if ' ' in s:\n            s = '\"' + s + '\"'\n        return split_win32(s)\n    else:\n        return split_unix(s)\n\n\ndef split_win32(s):\n    \"\"\"\n    Based on code from the ShellArgs class in Python's shlex module.\n    \"\"\"\n    assert s[0] == s[-1] == '\"'\n    s = s[1:-1]\n    words = []\n    pos = 0\n    while pos < len(s):\n        c = s[pos]\n        if c == '\\\\':\n            pos += 1\n            if pos >= len(s):\n                words.append(s)\n                break\n            else:\n                c ="], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    \n    if platform == 'win32' or platform == 'cygwin':\n        if ' ' in s:\n            s = '\"' + s + '\"'\n        return split_win32(s)\n    else:\n        return split_unix(s)\n\n\ndef split_win32(s):\n    \"\"\"\n    Based on code from the ShellArgs class in Python's shlex module.\n    \"\"\"\n    assert s[0] == s[-1] == '\"'\n    s = s[1:-1]\n    words = []\n    pos = 0\n    while pos < len(s):\n        c = s[pos]\n        if c == '\\\\':\n            pos += 1\n            if pos >= len(s):\n                words.append(s)\n                break\n            else:\n                c =", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    repo_path = PosixPath(tmp_path) / '_'.join(\n        (filename or archive_path.name).split('.')[:-1]\n    )\n    repo_path.mkdir(exist_ok=True)\n    shutil.unpack_archive(archive_path, repo_path)\n    return str(repo_path)\n\n\ndef prepare_repository_from_url(\n    url: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    repo_path = PosixPath"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    repo_path = PosixPath(tmp_path) / '_'.join(\n        (filename or archive_path.name).split('.')[:-1]\n    )\n    repo_path.mkdir(exist_ok=True)\n    shutil.unpack_archive(archive_path, repo_path)\n    return str(repo_path)\n\n\ndef prepare_repository_from_url(\n    url: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    repo_path = PosixPath", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(self, ignored):\n        \n        cmd = [\"git\", \"status\", \"-s\"]\n        git_ls_files = subprocess.run(cmd, capture_output=True, text=True)\n        git_ls_files = git_ls_files.stdout\n        git_ls_files = git_ls_files.splitlines()\n        git_ls_files = [i.strip() for i in git_ls_files]\n        git_ls_files = [i.split() for i in git_ls_files]\n        git_ls_files = [i.strip('2') for i in git_ls_files]\n        git_ls_files = [i.strip('3') for i in git_ls_files]\n        git_ls_files = [i.strip('!') for i in git_ls_files]\n        git_ls_files"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(self, ignored):\n        \n        cmd = [\"git\", \"status\", \"-s\"]\n        git_ls_files = subprocess.run(cmd, capture_output=True, text=True)\n        git_ls_files = git_ls_files.stdout\n        git_ls_files = git_ls_files.splitlines()\n        git_ls_files = [i.strip() for i in git_ls_files]\n        git_ls_files = [i.split() for i in git_ls_files]\n        git_ls_files = [i.strip('2') for i in git_ls_files]\n        git_ls_files = [i.strip('3') for i in git_ls_files]\n        git_ls_files = [i.strip('!') for i in git_ls_files]\n        git_ls_files", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected:\n            if self._is_first(collected) and not self._is_last(collected):\n                return False, left, collected\n        if not self.is_file():\n            return False, left, collected\n        if self._match_extension():\n            return True, left, collected\n        if self.is_python_file():\n            return self._match_python_file()\n        return False, left, collected"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        if collected:\n            if self._is_first(collected) and not self._is_last(collected):\n                return False, left, collected\n        if not self.is_file():\n            return False, left, collected\n        if self._match_extension():\n            return True, left, collected\n        if self.is_python_file():\n            return self._match_python_file()\n        return False, left, collected", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    time_unit = frequency[-1]\n    if time_unit == \"s\":\n        unit = \"seconds\"\n    elif time_unit == \"m\":\n        unit = \"minutes\"\n    elif time_unit == \"h\":\n        unit = \"hours\"\n    elif time_unit == \"d\":\n        unit = \"days\"\n    elif time_unit == \"w\":\n        unit = \"weeks\"\n    else:\n        return None\n    try:\n        number = float(frequency[:-1])\n    except ValueError:\n        return None\n    return datetime.timedelta(**{unit: number})\n\ndef frequency_to_seconds(frequency):\n    '''Convert a frequency"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    \n    if frequency is None or frequency == \"always\":\n        return None\n    time_unit = frequency[-1]\n    if time_unit == \"s\":\n        unit = \"seconds\"\n    elif time_unit == \"m\":\n        unit = \"minutes\"\n    elif time_unit == \"h\":\n        unit = \"hours\"\n    elif time_unit == \"d\":\n        unit = \"days\"\n    elif time_unit == \"w\":\n        unit = \"weeks\"\n    else:\n        return None\n    try:\n        number = float(frequency[:-1])\n    except ValueError:\n        return None\n    return datetime.timedelta(**{unit: number})\n\ndef frequency_to_seconds(frequency):\n    '''Convert a frequency", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    \n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n\n\ndef get_host_from_url(url):\n    \n    if '://' in url:\n        return url.split('://')[1].split('/')[0]\n    else:\n        return url.split('/')[0]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    \n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n\n\ndef get_host_from_url(url):\n    \n    if '://' in url:\n        return url.split('://')[1].split('/')[0]\n    else:\n        return url.split('/')[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    \n    def find_paths_with_globs(root, path):\n        return find_paths(root, path.replace('/', os.path.sep))\n    return find_paths_with_globs\n\ndef make_find_patterns(find_paths):\n    \n    def find_paths_with_globs(root, path):\n        return [glob.glob(root + '/' + p.replace('/', os.path.sep)) for p in find_paths(root, path)]\n    return find_paths_with_globs\n\ndef make_find_files(find_paths):\n    \n    def"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    \n    def find_paths_with_globs(root, path):\n        return find_paths(root, path.replace('/', os.path.sep))\n    return find_paths_with_globs\n\ndef make_find_patterns(find_paths):\n    \n    def find_paths_with_globs(root, path):\n        return [glob.glob(root + '/' + p.replace('/', os.path.sep)) for p in find_paths(root, path)]\n    return find_paths_with_globs\n\ndef make_find_files(find_paths):\n    \n    def", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    \n    import os\n    if os.name == 'nt':\n        return 'MSYSTEM' in os.environ\n    else:\n        return False\n\n\ndef is_windows():\n    \n    import os\n    return os.name == 'nt'\n\n\ndef is_linux():\n    \n    import os\n    return os.name == 'posix'\n\n\ndef is_mac():\n    \n    import platform\n    return platform.platform().startswith('Darwin')\n\n\ndef get_environment_name():\n    \n    if is_gitbash():\n        return 'gitbash'\n    elif is_windows():\n        return 'windows'\n    elif is_linux"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    \n    import os\n    if os.name == 'nt':\n        return 'MSYSTEM' in os.environ\n    else:\n        return False\n\n\ndef is_windows():\n    \n    import os\n    return os.name == 'nt'\n\n\ndef is_linux():\n    \n    import os\n    return os.name == 'posix'\n\n\ndef is_mac():\n    \n    import platform\n    return platform.platform().startswith('Darwin')\n\n\ndef get_environment_name():\n    \n    if is_gitbash():\n        return 'gitbash'\n    elif is_windows():\n        return 'windows'\n    elif is_linux", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    import os\n    import yaml\n    import logging\n    import tempfile\n    import shutil\n\n    log = logging.getLogger(__name__)\n\n    if os.path.exists(config_filename):\n        if overwrite:\n            log.info(\"Overwriting existing configuration file %s\", config_filename)\n        else:\n            log.info(\"Configuration file %s already exists, not overwriting\", config_filename)\n            return\n\n    tmpfd, tmpfile = tempfile.mkstemp(prefix=\"tmp-{0}\".format(os.path.split(config_filename)[-1]))\n    os.fchmod(tmpfd, mode)\n    try:\n        with os.fdopen(tmpfd, 'w') as f:\n            f.write(rendered_config)\n        shutil.move(tmp"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    import os\n    import yaml\n    import logging\n    import tempfile\n    import shutil\n\n    log = logging.getLogger(__name__)\n\n    if os.path.exists(config_filename):\n        if overwrite:\n            log.info(\"Overwriting existing configuration file %s\", config_filename)\n        else:\n            log.info(\"Configuration file %s already exists, not overwriting\", config_filename)\n            return\n\n    tmpfd, tmpfile = tempfile.mkstemp(prefix=\"tmp-{0}\".format(os.path.split(config_filename)[-1]))\n    os.fchmod(tmpfd, mode)\n    try:\n        with os.fdopen(tmpfd, 'w') as f:\n            f.write(rendered_config)\n        shutil.move(tmp", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())\n\ndef run(script, seperator=\" && \"):\n        \n        print(oneline(script, seperator))\n        os.system(oneline(script, seperator))\n\ndef print_and_run(script, seperator=\" && \"):\n        \n        print(oneline(script, seperator))\n        os.system(oneline(script, seperator))\n\ndef download(url, local, verbose=True):\n        \n        if verbose:\n            print(\"downloading %s\" % url)\n        r = requests.get(url, stream=True)\n        if r"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())\n\ndef run(script, seperator=\" && \"):\n        \n        print(oneline(script, seperator))\n        os.system(oneline(script, seperator))\n\ndef print_and_run(script, seperator=\" && \"):\n        \n        print(oneline(script, seperator))\n        os.system(oneline(script, seperator))\n\ndef download(url, local, verbose=True):\n        \n        if verbose:\n            print(\"downloading %s\" % url)\n        r = requests.get(url, stream=True)\n        if r", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    from subprocess import run, PIPE\n    from time import sleep\n    from psutil import Process\n    from os import getpid\n    import signal\n\n    pid = getpid()\n\n    def signal_handler(signum, frame):\n        process = Process(pid)\n        for child in process.children(recursive=True):\n            child.send_signal(signal.SIGTERM)\n        raise TimeoutError(\"Timeout!\")\n\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(timeout)\n    try:\n        return run(\n            [func] + list(args),\n            stdout=PIPE,\n            stderr=PIPE,\n            universal_newlines=True,\n            env=extra_env\n        )\n    finally:\n        signal.al"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    from subprocess import run, PIPE\n    from time import sleep\n    from psutil import Process\n    from os import getpid\n    import signal\n\n    pid = getpid()\n\n    def signal_handler(signum, frame):\n        process = Process(pid)\n        for child in process.children(recursive=True):\n            child.send_signal(signal.SIGTERM)\n        raise TimeoutError(\"Timeout!\")\n\n    signal.signal(signal.SIGALRM, signal_handler)\n    signal.alarm(timeout)\n    try:\n        return run(\n            [func] + list(args),\n            stdout=PIPE,\n            stderr=PIPE,\n            universal_newlines=True,\n            env=extra_env\n        )\n    finally:\n        signal.al", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    \n    import os\n\n    name = matcher['name']\n    default = matcher.get('default', None)\n\n    value = os.getenv(name, default)\n    if value is None:\n        raise Exception('Environment variable %s is not set' % name)\n    return value\n\n\ndef _resolve_list(matcher):\n    \n    values = []\n    for v in matcher:\n        if isinstance(v, dict):\n            values += [ _resolve_string(v) ]\n        elif isinstance(v, str):\n            values += [ v ]\n        else:\n            raise Exception('Invalid array item in matcher: %s' % v)\n\n    return values\n\n\ndef _resolve_dict(matcher):\n    '''"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    \n    import os\n\n    name = matcher['name']\n    default = matcher.get('default', None)\n\n    value = os.getenv(name, default)\n    if value is None:\n        raise Exception('Environment variable %s is not set' % name)\n    return value\n\n\ndef _resolve_list(matcher):\n    \n    values = []\n    for v in matcher:\n        if isinstance(v, dict):\n            values += [ _resolve_string(v) ]\n        elif isinstance(v, str):\n            values += [ v ]\n        else:\n            raise Exception('Invalid array item in matcher: %s' % v)\n\n    return values\n\n\ndef _resolve_dict(matcher):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_href = image_href.rstrip('/')\n    if image_href[-2:] == '?%d':\n       "], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    image_href = image_href.rstrip('/')\n    if image_href[-2:] == '?%d':\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    \n    return [x.rstrip(os.sep) for x in input_list]\n\n\ndef string_to_list(delimiter, string):\n    \n    return string.split(delimiter)\n\n\ndef list_to_string(delimiter, list):\n    \n    return delimiter.join(list)\n\n\ndef get_output_from_command(command):\n    \n    return subprocess.check_output(command, shell=True).decode(\"utf-8\").replace('\\r\\n', '\\n').strip()\n\n\ndef get_input_from_command(command):\n    \n    return subprocess.check_output(command, shell=True"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    \n    return [x.rstrip(os.sep) for x in input_list]\n\n\ndef string_to_list(delimiter, string):\n    \n    return string.split(delimiter)\n\n\ndef list_to_string(delimiter, list):\n    \n    return delimiter.join(list)\n\n\ndef get_output_from_command(command):\n    \n    return subprocess.check_output(command, shell=True).decode(\"utf-8\").replace('\\r\\n', '\\n').strip()\n\n\ndef get_input_from_command(command):\n    \n    return subprocess.check_output(command, shell=True", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(self, pattern, strip=True):\n        \n        if not pattern:\n            return ''\n        pattern = pattern.replace('*', '.*')\n        pattern = pattern.replace('?', '.?')\n        pattern = pattern.replace('+', '\\\\+')\n        pattern = pattern.replace('(', '\\\\(')\n        pattern = pattern.replace(')', '\\\\)')\n        pattern = pattern.replace('|', '\\\\|')\n        pattern = pattern.replace('{', '\\\\{')\n        pattern = pattern.replace('[', '\\\\[')\n        pattern = pattern.replace('}', '\\\\}')\n        pattern = pattern.replace(']', '\\\\]')\n        pattern = pattern.replace('^', '\\\\^')\n        pattern = pattern.replace('$', '\\\\$')\n        if strip:\n            pattern = pattern.strip()\n        return pattern\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(self, pattern, strip=True):\n        \n        if not pattern:\n            return ''\n        pattern = pattern.replace('*', '.*')\n        pattern = pattern.replace('?', '.?')\n        pattern = pattern.replace('+', '\\\\+')\n        pattern = pattern.replace('(', '\\\\(')\n        pattern = pattern.replace(')', '\\\\)')\n        pattern = pattern.replace('|', '\\\\|')\n        pattern = pattern.replace('{', '\\\\{')\n        pattern = pattern.replace('[', '\\\\[')\n        pattern = pattern.replace('}', '\\\\}')\n        pattern = pattern.replace(']', '\\\\]')\n        pattern = pattern.replace('^', '\\\\^')\n        pattern = pattern.replace('$', '\\\\$')\n        if strip:\n            pattern = pattern.strip()\n        return pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(self, cmd, verbose):\n        \n        if verbose:\n            print('[running command(s): {}]'.format(cmd))\n        if isinstance(cmd, str):\n            cmd = cmd.split(' ')\n        subprocess.call(cmd)\n\ndef run_command_capture_output(self, cmd, verbose):\n        \n        if verbose:\n            print('[running command(s): {}]'.format(cmd))\n        if isinstance(cmd, str):\n            cmd = cmd.split(' ')\n        return subprocess.check_output(cmd).decode()\n\ndef check_command(self, cmd, verbose):\n        \n        if verbose:\n            print('[checking command(s): {}]'.format(cmd))\n        try"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(self, cmd, verbose):\n        \n        if verbose:\n            print('[running command(s): {}]'.format(cmd))\n        if isinstance(cmd, str):\n            cmd = cmd.split(' ')\n        subprocess.call(cmd)\n\ndef run_command_capture_output(self, cmd, verbose):\n        \n        if verbose:\n            print('[running command(s): {}]'.format(cmd))\n        if isinstance(cmd, str):\n            cmd = cmd.split(' ')\n        return subprocess.check_output(cmd).decode()\n\ndef check_command(self, cmd, verbose):\n        \n        if verbose:\n            print('[checking command(s): {}]'.format(cmd))\n        try", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    \n    if target == 'localhost':\n        return True\n    elif target.count('.') == 3:\n        parts = target.split('.')\n        if len(parts) != 4:\n            return False\n        for i in parts:\n            try:\n                if int(i) > 255:\n                    return False\n            except ValueError:\n                return False\n        return True\n    else:\n        return False\n\n\ndef is_ipv6(target):\n    \n    if target.count(':') >= 2:\n        parts = target.split(':')\n        if len(parts) > 8:\n            return False\n        for i in parts:\n            try:\n                if len(i) > 4:\n                    return False\n            except Exception:"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    \n    if target == 'localhost':\n        return True\n    elif target.count('.') == 3:\n        parts = target.split('.')\n        if len(parts) != 4:\n            return False\n        for i in parts:\n            try:\n                if int(i) > 255:\n                    return False\n            except ValueError:\n                return False\n        return True\n    else:\n        return False\n\n\ndef is_ipv6(target):\n    \n    if target.count(':') >= 2:\n        parts = target.split(':')\n        if len(parts) > 8:\n            return False\n        for i in parts:\n            try:\n                if len(i) > 4:\n                    return False\n            except Exception:", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    if len(graph) == 0:\n        return roots\n    for node in graph.nodes:\n        if len(set(graph[node].keys()) - roots) == 0:\n            roots.add(node)\n            find_roots(graph, prop, roots)\n    return roots\n\n\ndef find_leafs(\n    graph: \"Graph\", prop: \"URIRef\", leafs: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if leafs is None:\n        leafs = set()\n    if len(graph) == 0:\n        return leafs\n    for node in graph.nodes:\n        if len(set(graph[node].values())"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    if len(graph) == 0:\n        return roots\n    for node in graph.nodes:\n        if len(set(graph[node].keys()) - roots) == 0:\n            roots.add(node)\n            find_roots(graph, prop, roots)\n    return roots\n\n\ndef find_leafs(\n    graph: \"Graph\", prop: \"URIRef\", leafs: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if leafs is None:\n        leafs = set()\n    if len(graph) == 0:\n        return leafs\n    for node in graph.nodes:\n        if len(set(graph[node].values())", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.encode(\"utf-8\")\n        return obj\n\n    def _dump_date(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.isoformat()\n        return obj.isoformat()\n\n    def _dump_datetime(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.isoformat()\n        return obj.isoformat()\n\n    def _dump_decimal(self, obj, dumper=None):\n        \n        if self.py2:\n           "], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.encode(\"utf-8\")\n        return obj\n\n    def _dump_date(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.isoformat()\n        return obj.isoformat()\n\n    def _dump_datetime(self, obj, dumper=None):\n        \n        if self.py2:\n            return obj.isoformat()\n        return obj.isoformat()\n\n    def _dump_decimal(self, obj, dumper=None):\n        \n        if self.py2:\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    import logging\n    import logging.handlers\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n\n    fh = logging.handlers.RotatingFileHandler(\n        logfile, maxBytes=1024*1024*10, backupCount=10\n    )\n    fh.setLevel(logging.DEBUG)\n    fh.setFormatter(formatter)\n    logger.addHandler(fh)\n\n    if debug:\n        ch = logging.StreamHandler()\n        ch.setLevel(logging.DEBUG)"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    import logging\n    import logging.handlers\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n\n    fh = logging.handlers.RotatingFileHandler(\n        logfile, maxBytes=1024*1024*10, backupCount=10\n    )\n    fh.setLevel(logging.DEBUG)\n    fh.setFormatter(formatter)\n    logger.addHandler(fh)\n\n    if debug:\n        ch = logging.StreamHandler()\n        ch.setLevel(logging.DEBUG)", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    '''Function to create an array with shape and"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    \n    return np.empty(shape, dtype=dtype)\n\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n    '''Function to create an array with shape and", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(self, x):\n        \n        return 1/(0.1 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * (x - 0.2)**2 / 0.1**2)\n\n    def compute_mse(self, pred, true):\n        \n        return np.mean(np.square(np.subtract(pred, true)))\n\n    def test_gaussian_model(self):\n        \n        data = np.random.uniform(-1, 1, 1000)\n        true = self.gaussian(data)\n        pred = self.gaussian(data)\n        mse = self.compute_mse(pred, true)\n        self.assertL"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(self, x):\n        \n        return 1/(0.1 * np.sqrt(2 * np.pi)) * np.exp(-0.5 * (x - 0.2)**2 / 0.1**2)\n\n    def compute_mse(self, pred, true):\n        \n        return np.mean(np.square(np.subtract(pred, true)))\n\n    def test_gaussian_model(self):\n        \n        data = np.random.uniform(-1, 1, 1000)\n        true = self.gaussian(data)\n        pred = self.gaussian(data)\n        mse = self.compute_mse(pred, true)\n        self.assertL", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    import os\n    from .util import merge_dicts, get_env_override\n\n    if overrides is None:\n        overrides = dict()\n    if resolve_env:\n        overrides = merge_dicts(get_env_override(), overrides)\n\n    def get_defaults():\n        return {\n            'env': os.environ,\n            'overrides': overrides,\n        }\n\n    def load_config(filename):\n        from .config import load_config_file\n        return load_config_file(filename, defaults=get_defaults())\n\n    configurations = []\n    for config_filename in config_filenames:\n        config = load_config(config_filename)\n        configurations.append(config)\n    return configurations\n\n\ndef load_configurations_from_env(env"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n    import os\n    from .util import merge_dicts, get_env_override\n\n    if overrides is None:\n        overrides = dict()\n    if resolve_env:\n        overrides = merge_dicts(get_env_override(), overrides)\n\n    def get_defaults():\n        return {\n            'env': os.environ,\n            'overrides': overrides,\n        }\n\n    def load_config(filename):\n        from .config import load_config_file\n        return load_config_file(filename, defaults=get_defaults())\n\n    configurations = []\n    for config_filename in config_filenames:\n        config = load_config(config_filename)\n        configurations.append(config)\n    return configurations\n\n\ndef load_configurations_from_env(env", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n\ndef force_bytes(obj):\n    \n    if isinstance(obj, bytes):\n        return obj\n    return force_string(obj).encode('utf-8')\n\ndef force_unicode(obj):\n    \n    if isinstance(obj, str):\n        return obj\n    return obj.decode('utf-8')\n\ndef force_bytes_string(obj):\n    \n    if isinstance(obj, str):\n        return obj."], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n\ndef force_bytes(obj):\n    \n    if isinstance(obj, bytes):\n        return obj\n    return force_string(obj).encode('utf-8')\n\ndef force_unicode(obj):\n    \n    if isinstance(obj, str):\n        return obj\n    return obj.decode('utf-8')\n\ndef force_bytes_string(obj):\n    \n    if isinstance(obj, str):\n        return obj.", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if ticks < cls.min.value:\n            raise ValueError('ticks out of range')\n        nanoseconds, ticks = divmod(ticks, 1e9)\n        microseconds, nanoseconds = divmod(nanoseconds, 1000)\n        seconds, microseconds = divmod(microseconds, 1000)\n        minutes, seconds = divmod(seconds, 60)\n        hours, minutes = divmod(minutes, 60)\n        days, hours = divmod(hours, 24)\n        days += ticks // cls._SECS_PER_DAY\n        return cls(days, hours, minutes, seconds, microseconds,\n                   nanoseconds, tz)\n\n    def __add__(self, other):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if ticks < cls.min.value:\n            raise ValueError('ticks out of range')\n        nanoseconds, ticks = divmod(ticks, 1e9)\n        microseconds, nanoseconds = divmod(nanoseconds, 1000)\n        seconds, microseconds = divmod(microseconds, 1000)\n        minutes, seconds = divmod(seconds, 60)\n        hours, minutes = divmod(minutes, 60)\n        days, hours = divmod(hours, 24)\n        days += ticks // cls._SECS_PER_DAY\n        return cls(days, hours, minutes, seconds, microseconds,\n                   nanoseconds, tz)\n\n    def __add__(self, other):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if protocol_version is None:\n            protocol_version = cls.protocol_version_supported()\n        return Bolt.protocol_handlers[protocol_version]\n\n    @classmethod\n    def protocol_handlers_for(cls, *protocol_versions):\n        '''Returns dictionary of available Bolt protocol handlers, keyed by version tuple, for one or more protocol\n        versions\n        '''\n        return {version: handler for version, handler in cls.protocol_handlers().items() if version in protocol_versions}\n\n    @classmethod\n    def get_handshake(cls):\n        \"\"\" Return theHandshake data to send to a server\n        \"\"\"\n        return cls.MAGIC_PREAMBLE + cls.protocol_version_supported()\n\n    @classmethod\n    def assert_handshake"], "level": "project_runnable", "generate_results": [{"generate_code": "@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        if protocol_version is None:\n            protocol_version = cls.protocol_version_supported()\n        return Bolt.protocol_handlers[protocol_version]\n\n    @classmethod\n    def protocol_handlers_for(cls, *protocol_versions):\n        '''Returns dictionary of available Bolt protocol handlers, keyed by version tuple, for one or more protocol\n        versions\n        '''\n        return {version: handler for version, handler in cls.protocol_handlers().items() if version in protocol_versions}\n\n    @classmethod\n    def get_handshake(cls):\n        \"\"\" Return theHandshake data to send to a server\n        \"\"\"\n        return cls.MAGIC_PREAMBLE + cls.protocol_version_supported()\n\n    @classmethod\n    def assert_handshake", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["@classmethod\n    def from_raw_values(cls, values):\n        \n        return cls(\n            [Bookmark(value) for value in values]\n            if values else\n            []\n        )\n\n    def __repr__(self):\n        return 'Bookmarks(values={})'.format(self.values)\n\n    def __eq__(self, other):\n        return self.values == other.values\n\n    def __len__(self):\n        return len(self.values)\n\n    def __getitem__(self, item):\n        return self.values[item]\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def to_raw_values(self):\n        \n        return [bookmark.value for bookmark in self.values]\n\n    def to_json(self):\n"], "level": "self_contained", "generate_results": [{"generate_code": "@classmethod\n    def from_raw_values(cls, values):\n        \n        return cls(\n            [Bookmark(value) for value in values]\n            if values else\n            []\n        )\n\n    def __repr__(self):\n        return 'Bookmarks(values={})'.format(self.values)\n\n    def __eq__(self, other):\n        return self.values == other.values\n\n    def __len__(self):\n        return len(self.values)\n\n    def __getitem__(self, item):\n        return self.values[item]\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def to_raw_values(self):\n        \n        return [bookmark.value for bookmark in self.values]\n\n    def to_json(self):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    \n    if seq is None:\n        return '', str\n    if isinstance(seq, str):\n        return seq, str\n    if bufsize is not None:\n        if isinstance(seq, file):\n            return seq, seq.type\n    if isinstance(seq, unicode):\n        return seq.encode('utf-8'), unicode\n    return seq, type(seq)\n\n\ndef _write(fp, s):\n    if isinstance(s, unicode):\n        fp.write(s.encode('utf-8'))\n    else:\n        fp.write(s)\n\n\ndef _join(seq):\n    '''\n    Join a sequence of strings"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    \n    if seq is None:\n        return '', str\n    if isinstance(seq, str):\n        return seq, str\n    if bufsize is not None:\n        if isinstance(seq, file):\n            return seq, seq.type\n    if isinstance(seq, unicode):\n        return seq.encode('utf-8'), unicode\n    return seq, type(seq)\n\n\ndef _write(fp, s):\n    if isinstance(s, unicode):\n        fp.write(s.encode('utf-8'))\n    else:\n        fp.write(s)\n\n\ndef _join(seq):\n    '''\n    Join a sequence of strings", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n        \n        if other is not None and recompute:\n            raise Exception(\"Cannot set scale and recompute at the same time!\")\n        \n        if other is None:\n            if recompute:\n                self._scale = 0.0\n                for (_, w) in self._histogram:\n                    self._scale += w\n            else:\n                return self._scale\n        else:\n            if self._scale != other:\n                for (_, w) in self._histogram:\n                    self._histogram[w] *= other / self._scale\n                self._scale = other\n\n    @scale.deleter\n    def scale(self):\n        self._scale = 0.0\n\n    def"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n        \n        if other is not None and recompute:\n            raise Exception(\"Cannot set scale and recompute at the same time!\")\n        \n        if other is None:\n            if recompute:\n                self._scale = 0.0\n                for (_, w) in self._histogram:\n                    self._scale += w\n            else:\n                return self._scale\n        else:\n            if self._scale != other:\n                for (_, w) in self._histogram:\n                    self._histogram[w] *= other / self._scale\n                self._scale = other\n\n    @scale.deleter\n    def scale(self):\n        self._scale = 0.0\n\n    def", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        self._scale = other\n\n    scale = property(get_scale, set_scale)\n\n    def get_x_scale(self):\n        \n        return self._scale[0]\n\n    def set_x_scale(self, other):\n        \n        self._scale[0] = other\n\n    x_scale = property(get_x_scale, set_x_scale)\n\n    def get_y_scale(self):\n        \n        return self._scale[1]\n\n    def set_y_scale(self, other):\n        \n        self._scale"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        self._scale = other\n\n    scale = property(get_scale, set_scale)\n\n    def get_x_scale(self):\n        \n        return self._scale[0]\n\n    def set_x_scale(self, other):\n        \n        self._scale[0] = other\n\n    x_scale = property(get_x_scale, set_x_scale)\n\n    def get_y_scale(self):\n        \n        return self._scale[1]\n\n    def set_y_scale(self, other):\n        \n        self._scale", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n    if make_value is None:\n        make_value = lambda x: x\n\n\n    if scale is not None:\n        if isinstance(scale, str):\n            scale = {'x': scale, 'y': scale}\n        else:\n            assert isinstance(scale, dict)\n            assert len(scale) == 2\n            scale = dict((k, scale[k]) for k in (\"x\", \"y\"))\n    else:\n        scale = dict.fromkeys((\"x\", \"y\"), \"linear\")\n\n    graph = hist.graph(make_value=make_value,\n                       get_coordinate=get_coordinate,\n                       field_names=field_names,\n                       scale=scale)\n\n    return graph\n\n\ndef hist_to_scatter(hist,"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n\n    if make_value is None:\n        make_value = lambda x: x\n\n\n    if scale is not None:\n        if isinstance(scale, str):\n            scale = {'x': scale, 'y': scale}\n        else:\n            assert isinstance(scale, dict)\n            assert len(scale) == 2\n            scale = dict((k, scale[k]) for k in (\"x\", \"y\"))\n    else:\n        scale = dict.fromkeys((\"x\", \"y\"), \"linear\")\n\n    graph = hist.graph(make_value=make_value,\n                       get_coordinate=get_coordinate,\n                       field_names=field_names,\n                       scale=scale)\n\n    return graph\n\n\ndef hist_to_scatter(hist,", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    iface = _adapt_iface(iface)\n    iface_type = iface.get('type')\n    iface_name = iface.get('name')\n    iface_id = iface.get('id')\n    iface_version = iface.get('version')\n    iface_max_version = iface.get('max_version')\n    iface_min_version = iface.get('min_version')\n    iface_bases = iface.get('bases')\n    iface_provides = iface.get('provides')\n    iface_requires = iface.get('requires')\n    iface_conflicts = iface.get('conflicts')\n    iface_suggests = iface.get('suggest"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    \n    iface = _adapt_iface(iface)\n    iface_type = iface.get('type')\n    iface_name = iface.get('name')\n    iface_id = iface.get('id')\n    iface_version = iface.get('version')\n    iface_max_version = iface.get('max_version')\n    iface_min_version = iface.get('min_version')\n    iface_bases = iface.get('bases')\n    iface_provides = iface.get('provides')\n    iface_requires = iface.get('requires')\n    iface_conflicts = iface.get('conflicts')\n    iface_suggests = iface.get('suggest", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    \n    return True\n\n\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return True"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    \n    return True\n\n\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return True", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n\n    ifaceName = iface.getName()\n\n    ifaceProvided = iface.getProvided()\n    ifaceRequired = iface.getRequired()\n\n\n    provided = candidate.getProvided()\n    required = candidate.getRequired()\n\n\n    if not ifaceProvided.issubset(provided):\n        return False\n\n\n    if not if"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n\n    ifaceName = iface.getName()\n\n    ifaceProvided = iface.getProvided()\n    ifaceRequired = iface.getRequired()\n\n\n    provided = candidate.getProvided()\n    required = candidate.getRequired()\n\n\n    if not ifaceProvided.issubset(provided):\n        return False\n\n\n    if not if", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    if len(bases) == 1:\n        return bases[0].__class__\n    meta = set(base.__class__ for base in bases)\n    if len(meta) == 1:\n        for base in bases:\n            if base is not None and base is not type:\n                return base.__class__\n        return type\n    meta = list(meta)\n    meta.sort()\n    if meta == [type]:\n        return type\n    if meta == [type, type]:\n        return tuple\n    if meta == [type, type, type]:\n        return dict\n    raise TypeError('Conflicting metatypes: %s' % meta)\n\n\nclass _Singleton(type):\n\n    def __new__(*args):\n        return _"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    if explicit_mc is not None:\n        return explicit_mc\n    if len(bases) == 1:\n        return bases[0].__class__\n    meta = set(base.__class__ for base in bases)\n    if len(meta) == 1:\n        for base in bases:\n            if base is not None and base is not type:\n                return base.__class__\n        return type\n    meta = list(meta)\n    meta.sort()\n    if meta == [type]:\n        return type\n    if meta == [type, type]:\n        return tuple\n    if meta == [type, type, type]:\n        return dict\n    raise TypeError('Conflicting metatypes: %s' % meta)\n\n\nclass _Singleton(type):\n\n    def __new__(*args):\n        return _", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        elif default is self.__marker:\n            raise KeyError(key)\n        else:\n            return default\n\n\ndef popitem(self):\n    '''D.popitem() -> (k, v), remove and return some (key, value) pair as a\\\n                      2-tuple; but raise KeyError if D is empty.'''\n    try:\n        k, v = next(iter(self.items()))\n    except StopIteration:\n        raise KeyError\n    else:\n        del self[k]\n        return (k, v)\n\n\ndef setdefault(self, key, default=None):\n    '''D.setdefault(k[,d]) -> D.get(k,d), also set D["], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        elif default is self.__marker:\n            raise KeyError(key)\n        else:\n            return default\n\n\ndef popitem(self):\n    '''D.popitem() -> (k, v), remove and return some (key, value) pair as a\\\n                      2-tuple; but raise KeyError if D is empty.'''\n    try:\n        k, v = next(iter(self.items()))\n    except StopIteration:\n        raise KeyError\n    else:\n        del self[k]\n        return (k, v)\n\n\ndef setdefault(self, key, default=None):\n    '''D.setdefault(k[,d]) -> D.get(k,d), also set D[", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n        \n        try:\n            return self.pop(self.ninf)\n        except KeyError:\n            return self.pop(next(iter(self)))\n\n    def pop(self, key, default=None):\n        \n        self.usekey(key)\n        return super().pop(key, default)\n\n    def popitem(self):\n        \n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError('popitem(): dictionary is empty') from None\n        else:\n            return (key, self.pop(key))\n\n    def setdefault(self, key, default=None):\n        '''If `"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        try:\n            return self.pop(self.ninf)\n        except KeyError:\n            return self.pop(next(iter(self)))\n\n    def pop(self, key, default=None):\n        \n        self.usekey(key)\n        return super().pop(key, default)\n\n    def popitem(self):\n        \n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError('popitem(): dictionary is empty') from None\n        else:\n            return (key, self.pop(key))\n\n    def setdefault(self, key, default=None):\n        '''If `", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n        \n        if self.root:\n            key, value = super(OrderedDict, self).popitem(last=False)\n            before = self.root._before\n            before._after = before._after._before = None\n            self.root = before"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self.root:\n            key, value = super(OrderedDict, self).popitem(last=False)\n            before = self.root._before\n            before._after = before._after._before = None\n            self.root = before", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n        \n        self.check_sanity()\n        if len(self) == 0:\n            raise KeyError('empty')\n        key = self.key[self.first]\n        value = self.data[self.first]\n        del self.key[self.first]\n        del self.data[self.first]\n        self.first = self.next[self.first]\n        if self.first < 0:\n            self.first = self.next[self.first]\n            if self.first < 0:\n                self.first = None\n        self.dirty.append(self.index(key))\n        return (key, value)\n\n    def update(self, other):\n        '''Update this dict from the other.\n\n        This removes any conflicts by overwriting existing keys, except that\n        if other is a"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        self.check_sanity()\n        if len(self) == 0:\n            raise KeyError('empty')\n        key = self.key[self.first]\n        value = self.data[self.first]\n        del self.key[self.first]\n        del self.data[self.first]\n        self.first = self.next[self.first]\n        if self.first < 0:\n            self.first = self.next[self.first]\n            if self.first < 0:\n                self.first = None\n        self.dirty.append(self.index(key))\n        return (key, value)\n\n    def update(self, other):\n        '''Update this dict from the other.\n\n        This removes any conflicts by overwriting existing keys, except that\n        if other is a", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n        \n        if self.root:\n            link = self._pop_root()\n            key = link.key\n            del link.key\n            del link.value\n            self._remove(link)\n            return key, self.get(key)\n        self._check_size()\n        raise KeyError('popitem(): dictionary is empty')\n\n    def _pop_root(self):\n        link = self.root\n        self.root = link.next\n        self.root.prev = None\n        self._remove(link)\n        self._transplant(link, self.root)\n        return link\n\n    def _transplant(self, u, v):\n        if u.parent is None:\n            self.root = v\n        elif u is u.parent.left:\n            u.parent.left = v\n        else:\n           "], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n        \n        if self.root:\n            link = self._pop_root()\n            key = link.key\n            del link.key\n            del link.value\n            self._remove(link)\n            return key, self.get(key)\n        self._check_size()\n        raise KeyError('popitem(): dictionary is empty')\n\n    def _pop_root(self):\n        link = self.root\n        self.root = link.next\n        self.root.prev = None\n        self._remove(link)\n        self._transplant(link, self.root)\n        return link\n\n    def _transplant(self, u, v):\n        if u.parent is None:\n            self.root = v\n        elif u is u.parent.left:\n            u.parent.left = v\n        else:\n           ", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\\\\\){self.open}(?:\\\\\\\\\\\\\\\\)*(?:\\\\\\\\)?(?P<name>\\\\w+)(?:\\\\s*){self.close}\"\n\t\t)\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\\\\\){self.open}(?:\\\\\\\\\\\\\\\\)*(?:\\\\\\\\)?\\\\s*(?P<name>\\\\w+)\\\\s*{self.close}\"\n\t\t)\n\n\tdef _create_in_regex_with_value(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\\\\\){self.open}(?:\\\\\\\\\\\\\\\\)*(?:\\\\\\\\)?(?P<name>\\\\w+)(?:\\\\s*){self.close}\"\n\t\t)\n\n\tdef _create_out_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\\\\\){self.open}(?:\\\\\\\\\\\\\\\\)*(?:\\\\\\\\)?\\\\s*(?P<name>\\\\w+)\\\\s*{self.close}\"\n\t\t)\n\n\tdef _create_in_regex_with_value(self) -> Pattern:\n\t\t\n\t\treturn re.compile(\n\t\tf\"(?<!\\\\", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting.Converter(self)\n\nclass _Converter(_converting.Converter):  # pylint: disable=abstract-method\n\t\n\n\tdef _set(self, parameter: _converting.Parameter, value: _converting.Any, context: _converting.Context) -> None:\n\t\t'''\n\t\tSet a value on a parameter.\n\t\tThe value is converted to the parameter's type.\n\t\t'''\n\t\tvalue = super()._set(parameter, value, context)\n\t\tif value is not _converting.Unset:\n\t\t\tvalue = parameter.type(value)\n\t\tparameter.set(value)\n\n@_parameters.register\nclass _Parameter(_converting.Parameter[_converting.Any]):"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting.Converter(self)\n\nclass _Converter(_converting.Converter):  # pylint: disable=abstract-method\n\t\n\n\tdef _set(self, parameter: _converting.Parameter, value: _converting.Any, context: _converting.Context) -> None:\n\t\t'''\n\t\tSet a value on a parameter.\n\t\tThe value is converted to the parameter's type.\n\t\t'''\n\t\tvalue = super()._set(parameter, value, context)\n\t\tif value is not _converting.Unset:\n\t\t\tvalue = parameter.type(value)\n\t\tparameter.set(value)\n\n@_parameters.register\nclass _Parameter(_converting.Parameter[_converting.Any]):", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        try:\n            return self._isoparser.isoparse(dt_str)\n        except ValueError:\n            self.error(dt_str)\n\n    def error(self, dt_str):\n        \n        raise ValueError('Invalid datetime: %r' % dt_str)\n\n\ndef _takes_ascii(func):\n    '''A decorator for functions that take a datetime string that takes\n    only ASCII-compatible strings as input.\n\n    This is used to raise a :exc:`UnicodeEncodeError` for non-ASCII\n    characters in the string.\n    '''\n    @functools.wraps(func)\n    def wrapper(self, dt_str):\n        \n        return"], "level": "class_runnable", "generate_results": [{"generate_code": "@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        try:\n            return self._isoparser.isoparse(dt_str)\n        except ValueError:\n            self.error(dt_str)\n\n    def error(self, dt_str):\n        \n        raise ValueError('Invalid datetime: %r' % dt_str)\n\n\ndef _takes_ascii(func):\n    '''A decorator for functions that take a datetime string that takes\n    only ASCII-compatible strings as input.\n\n    This is used to raise a :exc:`UnicodeEncodeError` for non-ASCII\n    characters in the string.\n    '''\n    @functools.wraps(func)\n    def wrapper(self, dt_str):\n        \n        return", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not timestr:\n            raise ValueError('empty string')\n\n        with self._unset_cache():\n            return super(DateTimeParser, self).parse(timestr, default,\n                                                    ignoretz, tzinfos, **kwargs)\n\n\nclass DateParser(parser.parserinfo):\n    '''Parser for dates.\n\n    This parser is based on a :class:`~datetime.datetime` parser.\n\n    :param dayfirst:\n        Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the day (``True``) or month (``False``). If\n        ``yearfirst`` is set to ``True``, this distinguishes between YDM\n        and YMD. If set to ``None``, this value is retrieved from"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not timestr:\n            raise ValueError('empty string')\n\n        with self._unset_cache():\n            return super(DateTimeParser, self).parse(timestr, default,\n                                                    ignoretz, tzinfos, **kwargs)\n\n\nclass DateParser(parser.parserinfo):\n    '''Parser for dates.\n\n    This parser is based on a :class:`~datetime.datetime` parser.\n\n    :param dayfirst:\n        Whether to interpret the first value in an ambiguous 3-integer date\n        (e.g. 01/05/09) as the day (``True``) or month (``False``). If\n        ``yearfirst`` is set to ``True``, this distinguishes between YDM\n        and YMD. If set to ``None``, this value is retrieved from", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is None:\n            raise ValueError(\"fromutc() requires a non-naive datetime\")\n        return dt + self._utcoffset(dt)\n\n    def _isdst(self, dt):\n        '''\n        Returns true if the timezone is in DST (daylight savings time) at the specified datetime.\n        '''\n        try:\n            return self._isdst_cache[dt]\n        except KeyError:\n            pass\n        tt = _to_local_timezone(dt, self).timetuple()\n        dst = (self._dst(tt, dt.fold) != 0)\n        self._is"], "level": "class_runnable", "generate_results": [{"generate_code": "@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is None:\n            raise ValueError(\"fromutc() requires a non-naive datetime\")\n        return dt + self._utcoffset(dt)\n\n    def _isdst(self, dt):\n        '''\n        Returns true if the timezone is in DST (daylight savings time) at the specified datetime.\n        '''\n        try:\n            return self._isdst_cache[dt]\n        except KeyError:\n            pass\n        tt = _to_local_timezone(dt, self).timetuple()\n        dst = (self._dst(tt, dt.fold) != 0)\n        self._is", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    \n    if tzinfo is not None:\n        return dt.replace(tzinfo=tzinfo)\n\n    if dt.tzinfo is not None:\n        return dt\n\n    return dt.replace(tzinfo=tzinfo)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    \n    if tzinfo is not None:\n        return dt.replace(tzinfo=tzinfo)\n\n    if dt.tzinfo is not None:\n        return dt\n\n    return dt.replace(tzinfo=tzinfo)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after\n\n    def set_cut_characters(self, before: str, after: str) -> None:\n        \n        self.before = before.encode('utf-8')\n        self.after = after.encode('utf-8')\n\n    def cut(self, text: bytes) -> List[bytes]:\n        \n        if not self.before and not self.after:\n            return [text]\n        if self.before == self.after:\n            raise ValueError('cut_before and cut_after must be different')\n        if not self.before:\n            return [text]\n        if not self.after:\n            return text.split(self.before)\n        return ["], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self.before = before\n        self.after = after\n\n    def set_cut_characters(self, before: str, after: str) -> None:\n        \n        self.before = before.encode('utf-8')\n        self.after = after.encode('utf-8')\n\n    def cut(self, text: bytes) -> List[bytes]:\n        \n        if not self.before and not self.after:\n            return [text]\n        if self.before == self.after:\n            raise ValueError('cut_before and cut_after must be different')\n        if not self.before:\n            return [text]\n        if not self.after:\n            return text.split(self.before)\n        return [", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    \n    if 'Authorization' in request.headers:\n        return 'diaspora'\n    if request.GET.get('_dc'):\n        return 'diaspora'\n    return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    \n    if 'Authorization' in request.headers:\n        return 'diaspora'\n    if request.GET.get('_dc'):\n        return 'diaspora'\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    \n    return request.match_header(\"Content-Type\", \"application/json\") and request.json.get(\"type\") == \"m.room.message\" and request.json.get(\"content\", {}).get(\"msgtype\") == \"m.text\"\n\ndef handle_request(request: RequestType) -> ResponseType:\n    \n    text = request.json[\"content\"][\"body\"]\n    print(text)\n    return ResponseType(\n        200,\n        {},\n        {},\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    return request.match_header(\"Content-Type\", \"application/json\") and request.json.get(\"type\") == \"m.room.message\" and request.json.get(\"content\", {}).get(\"msgtype\") == \"m.text\"\n\ndef handle_request(request: RequestType) -> ResponseType:\n    \n    text = request.json[\"content\"][\"body\"]\n    print(text)\n    return ResponseType(\n        200,\n        {},\n        {},\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')\n\n\ndef parse_dt(dt_str):\n    \n    from dateutil.parser import parse\n    return parse(dt_str)\n\n\ndef format_seconds(seconds):\n    \n    return '%02d:%02d' % divmod(seconds, 60)\n\n\ndef parse_seconds(seconds_str):\n    \n    return int(seconds_str.replace(':', ''))\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \n    return dt.strftime('%Y-%m-%dT%H:%M:%S')\n\n\ndef parse_dt(dt_str):\n    \n    from dateutil.parser import parse\n    return parse(dt_str)\n\n\ndef format_seconds(seconds):\n    \n    return '%02d:%02d' % divmod(seconds, 60)\n\n\ndef parse_seconds(seconds_str):\n    \n    return int(seconds_str.replace(':', ''))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return tags, text\n\n\ndef find_refs(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    refs = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return refs, text\n\n\ndef find_links(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    links = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return links, text\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return tags, text\n\n\ndef find_refs(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    refs = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return refs, text\n\n\ndef find_links(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    links = set()\n    text = re.sub(r'\\[([^\\]]+)]', replacer, text)\n    return links, text\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \n    from urllib.parse import urlparse\n    from urllib.parse import urlencode\n    from urllib.parse import unquote\n    from django.urls import reverse\n    from django.utils.html import escape\n    from django.utils.html import format_html\n\n    text = re.sub(r'([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)', r'<a href=\"mailto:\\1\">\\1</a>', text)\n\n    text = re.sub(r'(https?://)([a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \n    from urllib.parse import urlparse\n    from urllib.parse import urlencode\n    from urllib.parse import unquote\n    from django.urls import reverse\n    from django.utils.html import escape\n    from django.utils.html import format_html\n\n    text = re.sub(r'([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+)', r'<a href=\"mailto:\\1\">\\1</a>', text)\n\n    text = re.sub(r'(https?://)([a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n    return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    \n    return tag.isalpha()\n\n\ndef test_word(word: str) -> bool:\n    \n    return word.isalpha()\n\n\ndef test_tagged_word(tagged_word: str) -> bool:\n    \n    return test_word(tagged_word.split('/')[0])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    \n    return tag.isalpha()\n\n\ndef test_word(word: str) -> bool:\n    \n    return word.isalpha()\n\n\ndef test_tagged_word(tagged_word: str) -> bool:\n    \n    return test_word(tagged_word.split('/')[0])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \n    d = {}\n    for c in node.getchildren():\n        d[c.tag] = c\n    return d\n\ndef xml_dict_as_string(d):\n    \n    return ''.join(map(lambda n: n.toxml(), d.values()))\n\ndef xml_as_dict(xml):\n    \n    from xml.dom.minidom import parseString\n    return xml_children_as_dict(parseString(xml))\n\ndef xml_as_dict_node(xml):\n    \n    from xml.dom.minidom import parseString\n    from xml.dom import minidom\n    return xml_children_as_dict(parse"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \n    d = {}\n    for c in node.getchildren():\n        d[c.tag] = c\n    return d\n\ndef xml_dict_as_string(d):\n    \n    return ''.join(map(lambda n: n.toxml(), d.values()))\n\ndef xml_as_dict(xml):\n    \n    from xml.dom.minidom import parseString\n    return xml_children_as_dict(parseString(xml))\n\ndef xml_as_dict_node(xml):\n    \n    from xml.dom.minidom import parseString\n    from xml.dom import minidom\n    return xml_children_as_dict(parse", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        raise ValueError('sender_handle and entity_handle do not match')\n    return True\n\ndef check_sender_and_entity_handle_not_match(sender_handle, entity_handle):\n    \n    if sender_handle == entity_handle:\n        raise ValueError('sender_handle and entity_handle already match')\n    return True\n\ndef check_sender_and_entity_handle_match_or_empty(sender_handle, entity_handle):\n    \n    if sender_handle and entity_handle and sender_handle != entity_handle:\n        raise ValueError('sender_handle and entity_handle do not match')\n    return True\n\ndef check"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        raise ValueError('sender_handle and entity_handle do not match')\n    return True\n\ndef check_sender_and_entity_handle_not_match(sender_handle, entity_handle):\n    \n    if sender_handle == entity_handle:\n        raise ValueError('sender_handle and entity_handle already match')\n    return True\n\ndef check_sender_and_entity_handle_match_or_empty(sender_handle, entity_handle):\n    \n    if sender_handle and entity_handle and sender_handle != entity_handle:\n        raise ValueError('sender_handle and entity_handle do not match')\n    return True\n\ndef check", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    if document_path is None:\n        document_path = ('/nodeinfo/2.0/',\n                         '/nodeinfo/2.0/ui',\n                         '/nodeinfo/2.0/banner')\n\n    document_path = '\\n'.join(document_path)\n\n    nodeinfo = '{{\"links\":[{{\"rel\":\"{rel}\",' \\\n        + '\"href\":\"{url}{path}\"}}]}}'\n    nodeinfo = nodeinfo.format(rel='http://nodeinfo.diaspora.software/ns/'\n                                   'schema/1.0',\n                               url=url,\n                               path=document_path)\n\n    return nodeinfo\n\n\ndef get_nodeinfo_ui_document(version):\n    '''Generate a NodeInfo UI document.\n\n    :"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    if document_path is None:\n        document_path = ('/nodeinfo/2.0/',\n                         '/nodeinfo/2.0/ui',\n                         '/nodeinfo/2.0/banner')\n\n    document_path = '\\n'.join(document_path)\n\n    nodeinfo = '{{\"links\":[{{\"rel\":\"{rel}\",' \\\n        + '\"href\":\"{url}{path}\"}}]}}'\n    nodeinfo = nodeinfo.format(rel='http://nodeinfo.diaspora.software/ns/'\n                                   'schema/1.0',\n                               url=url,\n                               path=document_path)\n\n    return nodeinfo\n\n\ndef get_nodeinfo_ui_document(version):\n    '''Generate a NodeInfo UI document.\n\n    :", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    \n    from jwt.algorithms import RSAAlgorithm\n    from jwt.api_jws import PyJWS\n    import json\n\n    public_key_string = public_key.decode('utf-8')\n\n    xml_elements = doc.xpath('//*[local-name()=\"RelayState\"]')\n\n    xml_elements_string = b''\n    for element in xml_elements:\n        xml_elements_string += element.tostring()\n\n    input_string = public_key_string + xml_elements_string\n\n    encoded_input = input_string.encode('utf-8')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    \n    from jwt.algorithms import RSAAlgorithm\n    from jwt.api_jws import PyJWS\n    import json\n\n    public_key_string = public_key.decode('utf-8')\n\n    xml_elements = doc.xpath('//*[local-name()=\"RelayState\"]')\n\n    xml_elements_string = b''\n    for element in xml_elements:\n        xml_elements_string += element.tostring()\n\n    input_string = public_key_string + xml_elements_string\n\n    encoded_input = input_string.encode('utf-8')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    result = {}\n    try:\n        import json\n        result = json.loads(document)\n    except Exception:\n        from xml.dom import minidom\n        dom = minidom.parseString(document)\n        for element in dom.getElementsByTagNameNS('http://docs.oasis-open.org/ns/xri/xrd-1.0#', 'Link'):\n            if element.getAttribute('rel') != 'lr_verify':\n                continue\n            link = element.getElementsByTagNameNS('http://microformats.org/profile/hcard', 'Name')[0]\n            result['name'] = link.childNodes[0].data\n            if link.getAttribute('hreflang'):\n                result['lang'] = link.getAttribute('hreflang')\n            link = element.getElementsByTagNameNS('http://microform"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    \n    result = {}\n    try:\n        import json\n        result = json.loads(document)\n    except Exception:\n        from xml.dom import minidom\n        dom = minidom.parseString(document)\n        for element in dom.getElementsByTagNameNS('http://docs.oasis-open.org/ns/xri/xrd-1.0#', 'Link'):\n            if element.getAttribute('rel') != 'lr_verify':\n                continue\n            link = element.getElementsByTagNameNS('http://microformats.org/profile/hcard', 'Name')[0]\n            result['name'] = link.childNodes[0].data\n            if link.getAttribute('hreflang'):\n                result['lang'] = link.getAttribute('hreflang')\n            link = element.getElementsByTagNameNS('http://microform", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    return None\n\ndef get_datacite_metadata_for(handle: str) -> Optional[str]:\n    \n    return None\n\ndef get_orcid_metadata_for(handle: str) -> Optional[str]:\n    \n    return None"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    return None\n\ndef get_datacite_metadata_for(handle: str) -> Optional[str]:\n    \n    return None\n\ndef get_orcid_metadata_for(handle: str) -> Optional[str]:\n    \n    return None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    import json\n    from urllib.request import urlopen\n    from urllib.parse import urlencode\n\n    url = \"https://%s.diaspora.social/.well-known/webfinger?%s\" % (handle, urlencode({'resource': \"acct:%s\" % handle}))\n\n    response = urlopen(url)\n    data = response.read()\n\n    doc = json.loads(data.decode(\"utf-8\"))\n\n    return doc\n\n\ndef retrieve_and_parse_webfinger(handle):\n    \n    from urllib.request import urlopen\n    from urllib."], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \n    import json\n    from urllib.request import urlopen\n    from urllib.parse import urlencode\n\n    url = \"https://%s.diaspora.social/.well-known/webfinger?%s\" % (handle, urlencode({'resource': \"acct:%s\" % handle}))\n\n    response = urlopen(url)\n    data = response.read()\n\n    doc = json.loads(data.decode(\"utf-8\"))\n\n    return doc\n\n\ndef retrieve_and_parse_webfinger(handle):\n    \n    from urllib.request import urlopen\n    from urllib.", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    \n    import urllib2\n\n    response = urllib2.urlopen('http://' + host + '/.well-known/host-meta')\n\n    return response.read()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    \n    import urllib2\n\n    response = urllib2.urlopen('http://' + host + '/.well-known/host-meta')\n\n    return response.read()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    import requests\n\n    return requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n\n\ndef send_document_multipart(url, data, timeout=10, *args, **kwargs):\n    \n    import requests\n    return requests.request(\n        \"post\", url, files=data, timeout=timeout, *args, **kwargs\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    import requests\n\n    return requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n\n\ndef send_document_multipart(url, data, timeout=10, *args, **kwargs):\n    \n    import requests\n    return requests.request(\n        \"post\", url, files=data, timeout=timeout, *args, **kwargs\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    \n    if keys:\n        dic.setdefault(key, {})\n        dict_insert(dic[key], val, *keys)\n    else:\n        dic[key] = val\n\ndef dict_merge(d1, d2):\n    \n    for key in d2:\n        if key in d1 and isinstance(d1[key], dict) and isinstance(d2[key], dict):\n            dict_merge(d1[key], d2[key])\n        else:\n            d1[key] = d2[key]\n\ndef dict_clean(d):\n    \n    for k in d.keys():\n        if isinstance(d[k], dict):\n            dict_clean(d[k])\n        elif d[k] is None:"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    \n    if keys:\n        dic.setdefault(key, {})\n        dict_insert(dic[key], val, *keys)\n    else:\n        dic[key] = val\n\ndef dict_merge(d1, d2):\n    \n    for key in d2:\n        if key in d1 and isinstance(d1[key], dict) and isinstance(d2[key], dict):\n            dict_merge(d1[key], d2[key])\n        else:\n            d1[key] = d2[key]\n\ndef dict_clean(d):\n    \n    for k in d.keys():\n        if isinstance(d[k], dict):\n            dict_clean(d[k])\n        elif d[k] is None:", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    \n    file_names = []\n    for settings_dir in settings_dirs:\n        fnames = [f for f in os.listdir(settings_dir) if f.endswith(\".ini\")]\n        for fname in fnames:\n            file_names.append(spec_option.create_file_name(settings_dir, fname))\n    return file_names\n\n\nclass IniType(ComplexType):\n    \n\n    def __init__(self, spec_option):\n        super(IniType, self).__init__()\n        self._spec_option = spec_option\n        self._file_names = list_of_file_names(self._spec_option.settings_dirs, spec_option)\n        self._file_name = StringType(min_length"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    file_names = []\n    for settings_dir in settings_dirs:\n        fnames = [f for f in os.listdir(settings_dir) if f.endswith(\".ini\")]\n        for fname in fnames:\n            file_names.append(spec_option.create_file_name(settings_dir, fname))\n    return file_names\n\n\nclass IniType(ComplexType):\n    \n\n    def __init__(self, spec_option):\n        super(IniType, self).__init__()\n        self._spec_option = spec_option\n        self._file_names = list_of_file_names(self._spec_option.settings_dirs, spec_option)\n        self._file_name = StringType(min_length", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls.get_ansible_config_manager()\n\n    @classmethod\n    def get_ansible_config_manager(cls):\n        \n        if cls._ansible_config_manager is None:\n            cls._ansible_config_manager = AnsibleConfigManager()\n        return cls._ansible_config_manager\n\n    @classmethod\n    def ansible_playbook_executor(cls):\n        \n        return cls.get_ansible_playbook_executor()\n\n    @classmethod\n    def get_ansible_playbook_executor(cls):\n        \n        if"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls.get_ansible_config_manager()\n\n    @classmethod\n    def get_ansible_config_manager(cls):\n        \n        if cls._ansible_config_manager is None:\n            cls._ansible_config_manager = AnsibleConfigManager()\n        return cls._ansible_config_manager\n\n    @classmethod\n    def ansible_playbook_executor(cls):\n        \n        return cls.get_ansible_playbook_executor()\n\n    @classmethod\n    def get_ansible_playbook_executor(cls):\n        \n        if", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["@classmethod\n    def workspace_manager(cls):\n        \n        return cls._workspace_manager\n\n    @classmethod\n    def set_workspace_manager(cls, manager):\n        \n        cls._workspace_manager = manager\n\n    @classmethod\n    def workspace(cls):\n        \n        return cls._workspace\n\n    @classmethod\n    def set_workspace(cls, workspace):\n        \n        cls._workspace = workspace\n\n    @classmethod\n    def workspace_path(cls):\n        \n        return cls._workspace_path\n\n    @classmethod\n    def set_workspace_path(cls, path):\n        '''Sets the path to"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def workspace_manager(cls):\n        \n        return cls._workspace_manager\n\n    @classmethod\n    def set_workspace_manager(cls, manager):\n        \n        cls._workspace_manager = manager\n\n    @classmethod\n    def workspace(cls):\n        \n        return cls._workspace\n\n    @classmethod\n    def set_workspace(cls, workspace):\n        \n        cls._workspace = workspace\n\n    @classmethod\n    def workspace_path(cls):\n        \n        return cls._workspace_path\n\n    @classmethod\n    def set_workspace_path(cls, path):\n        '''Sets the path to", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["@classmethod\n    def plugins_manager(cls):\n        \n        if cls._plugins is None:\n            cls._plugins = PluginManager(\n                categories_filter={\n                    'ScannerPlugin': ScannerPlugin,\n                    'SensorPlugin': SensorPlugin,\n                    'CommandPlugin': CommandPlugin\n                })\n        return cls._plugins\n\n    @classmethod\n    def scan_plugins(cls):\n        \n        return cls.plugins_manager().getPluginsOfCategory('ScannerPlugin')\n\n    @classmethod\n    def sensors_plugins(cls):\n        \n        return cls.plugins_manager().getPluginsOfCategory('SensorPlugin')\n\n    @classmethod\n    def command_plugins(cls):\n        \n        return cls.plugins_"], "level": "file_runnable", "generate_results": [{"generate_code": "@classmethod\n    def plugins_manager(cls):\n        \n        if cls._plugins is None:\n            cls._plugins = PluginManager(\n                categories_filter={\n                    'ScannerPlugin': ScannerPlugin,\n                    'SensorPlugin': SensorPlugin,\n                    'CommandPlugin': CommandPlugin\n                })\n        return cls._plugins\n\n    @classmethod\n    def scan_plugins(cls):\n        \n        return cls.plugins_manager().getPluginsOfCategory('ScannerPlugin')\n\n    @classmethod\n    def sensors_plugins(cls):\n        \n        return cls.plugins_manager().getPluginsOfCategory('SensorPlugin')\n\n    @classmethod\n    def command_plugins(cls):\n        \n        return cls.plugins_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        required_fields = [\n            'name', 'version', 'title', 'description', 'type', 'tags', 'spec',\n            'created', 'creator', 'updated', 'updater'\n        ]\n        spec_object = spec_content\n        for field in required_fields:\n            if field not in spec_object:\n                return False\n        return True\n\n    @classmethod\n    def validate_from_model(cls, spec_object=None):\n        \n        required_fields = [\n            'name', 'version', 'title', 'description', 'type', 'tags', 'spec',\n            'created', 'creator', 'updated', 'updater'\n        ]\n        for field in required_fields:\n            if field not in spec_object:"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        required_fields = [\n            'name', 'version', 'title', 'description', 'type', 'tags', 'spec',\n            'created', 'creator', 'updated', 'updater'\n        ]\n        spec_object = spec_content\n        for field in required_fields:\n            if field not in spec_object:\n                return False\n        return True\n\n    @classmethod\n    def validate_from_model(cls, spec_object=None):\n        \n        required_fields = [\n            'name', 'version', 'title', 'description', 'type', 'tags', 'spec',\n            'created', 'creator', 'updated', 'updater'\n        ]\n        for field in required_fields:\n            if field not in spec_object:", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        yaml_data = cls.load_yaml(yaml_file)\n        return cls.validate_from_dict(yaml_data)\n\n    @classmethod\n    def validate_from_dict(cls, yaml_dict):\n        \n        try:\n            missing_fields = []\n            for field in cls.REQUIRED_FIELDS:\n                if not field in yaml_dict:\n                    missing_fields.append(field)\n            if len(missing_fields) > 0:\n                raise Exception(f'Missing fields in YAML file: {missing_fields}')\n            return True\n        except Exception as e:\n            print(f'Error validating YAML file: {e}')\n            return False\n\n    @classmethod"], "level": "class_runnable", "generate_results": [{"generate_code": "@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        yaml_data = cls.load_yaml(yaml_file)\n        return cls.validate_from_dict(yaml_data)\n\n    @classmethod\n    def validate_from_dict(cls, yaml_dict):\n        \n        try:\n            missing_fields = []\n            for field in cls.REQUIRED_FIELDS:\n                if not field in yaml_dict:\n                    missing_fields.append(field)\n            if len(missing_fields) > 0:\n                raise Exception(f'Missing fields in YAML file: {missing_fields}')\n            return True\n        except Exception as e:\n            print(f'Error validating YAML file: {e}')\n            return False\n\n    @classmethod", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n        \n        includes = parser_dict.get('include')\n        if not includes:\n            return\n        for include in includes:\n            if not isinstance(include, dict):\n                raise TypeError(f'The include directive must be a dict, got {include}')\n            if 'file' not in include:\n                raise ValueError('The include directive must have the \"file\" key')\n            file_name = include['file']\n            if not isinstance(file_name, str):\n                raise TypeError(f'The \"file\" key must be a str, got {file_name}')\n            if not file_name.endswith('.yaml'):\n                raise ValueError(f'The \"file\" key must end with a .yaml extension')\n            if 'group' not in include:\n                raise ValueError('The include directive must have the \"group\" key"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n        \n        includes = parser_dict.get('include')\n        if not includes:\n            return\n        for include in includes:\n            if not isinstance(include, dict):\n                raise TypeError(f'The include directive must be a dict, got {include}')\n            if 'file' not in include:\n                raise ValueError('The include directive must have the \"file\" key')\n            file_name = include['file']\n            if not isinstance(file_name, str):\n                raise TypeError(f'The \"file\" key must be a str, got {file_name}')\n            if not file_name.endswith('.yaml'):\n                raise ValueError(f'The \"file\" key must end with a .yaml extension')\n            if 'group' not in include:\n                raise ValueError('The include directive must have the \"group\" key", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n        \n        self.spec.ensure_references_resolved(self)\n        self.spec.resolve_depencencies(self)\n        self.spec.resolve_conflicts(self)\n        self.spec.resolve_dependencies(self)\n        self.spec.resolve_requirements(self)\n        self.spec.resolve_sources(self)\n        self.spec.resolve_attributes(self)\n\n    def get_spec_attributes(self):\n        \n        return self.spec.get_attributes()\n\n    def get_attribute(self, attribute):\n        \n        return self.spec.get_attribute(attribute)\n\n    def get_attribute_default(self, attribute):\n        '''Returns the default value of the"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n        \n        self.spec.ensure_references_resolved(self)\n        self.spec.resolve_depencencies(self)\n        self.spec.resolve_conflicts(self)\n        self.spec.resolve_dependencies(self)\n        self.spec.resolve_requirements(self)\n        self.spec.resolve_sources(self)\n        self.spec.resolve_attributes(self)\n\n    def get_spec_attributes(self):\n        \n        return self.spec.get_attributes()\n\n    def get_attribute(self, attribute):\n        \n        return self.spec.get_attribute(attribute)\n\n    def get_attribute_default(self, attribute):\n        '''Returns the default value of the", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n        \n        return {\n            '--no-sandbox': {\n                'help': 'Deprecated, please use --no-sandbox option.',\n                'action': 'store_true',\n                'dest': 'no_sandbox',\n            },\n            '--disable-gpu': {\n                'help': 'Deprecated, please use --disable-gpu option.',\n                'action': 'store_true',\n                'dest': 'disable_gpu',\n            },\n            '--disable-application-cache': {\n                'help': 'Deprecated, please use --disable-application-cache option.',\n                'action': 'store_true',\n                'dest': 'disable_application_cache',\n            },\n            '--disable-infobars': {\n                'help': 'Deprecated, please use --"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n        \n        return {\n            '--no-sandbox': {\n                'help': 'Deprecated, please use --no-sandbox option.',\n                'action': 'store_true',\n                'dest': 'no_sandbox',\n            },\n            '--disable-gpu': {\n                'help': 'Deprecated, please use --disable-gpu option.',\n                'action': 'store_true',\n                'dest': 'disable_gpu',\n            },\n            '--disable-application-cache': {\n                'help': 'Deprecated, please use --disable-application-cache option.',\n                'action': 'store_true',\n                'dest': 'disable_application_cache',\n            },\n            '--disable-infobars': {\n                'help': 'Deprecated, please use --", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        if cli_args.deprecated_arg:\n            self.logger.warning(self.messages.get(\n                \"arg_deprecation\").format(cli_args.deprecated_arg))"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        if cli_args.deprecated_arg:\n            self.logger.warning(self.messages.get(\n                \"arg_deprecation\").format(cli_args.deprecated_arg))", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n        \n        if (command_name == \"create_project\"):\n            return self.create_project_options()\n        elif (command_name == \"create_resource\"):\n            return self.create_resource_options()\n        elif (command_name == \"create_service\"):\n            return self.create_service_options()\n        elif (command_name == \"create_stage\"):\n            return self.create_stage_options()\n        elif (command_name == \"create_function\"):\n            return self.create_function_options()\n        elif (command_name == \"deploy\"):\n            return self.deploy_options()\n        elif (command_name == \"delete\"):\n            return self.delete_options()\n        elif (command_name == \"configure\"):\n            return self.configure_options()\n        elif (command"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n        \n        if (command_name == \"create_project\"):\n            return self.create_project_options()\n        elif (command_name == \"create_resource\"):\n            return self.create_resource_options()\n        elif (command_name == \"create_service\"):\n            return self.create_service_options()\n        elif (command_name == \"create_stage\"):\n            return self.create_stage_options()\n        elif (command_name == \"create_function\"):\n            return self.create_function_options()\n        elif (command_name == \"deploy\"):\n            return self.deploy_options()\n        elif (command_name == \"delete\"):\n            return self.delete_options()\n        elif (command_name == \"configure\"):\n            return self.configure_options()\n        elif (command", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n        \n        return self._spec_cache.get(argument_name, None)\n\n    def get_option_spec_map(self, command_name):\n        \n        return self._spec_cache\n\n    def get_option_type_map(self, command_name):\n        \n        return self._type_cache\n\n    def get_option_choices_map(self, command_name):\n        \n        return self._choices_cache\n\n    def get_option_values_map(self, command_name):\n        \n        return self._values_cache\n\n    def get_option_default_"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n        \n        return self._spec_cache.get(argument_name, None)\n\n    def get_option_spec_map(self, command_name):\n        \n        return self._spec_cache\n\n    def get_option_type_map(self, command_name):\n        \n        return self._type_cache\n\n    def get_option_choices_map(self, command_name):\n        \n        return self._choices_cache\n\n    def get_option_values_map(self, command_name):\n        \n        return self._values_cache\n\n    def get_option_default_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n        \n        return [\n            '--silent'\n        ]\n\n    def get_debug_args(self, args):\n        \n        return [\n            '--debug'\n        ]\n\n    def get_coverage_args(self, args):\n        \n        return [\n            '--coverage'\n        ]\n\n    def get_no_cache_args(self, args):\n        \n        return [\n            '--no-cache'\n        ]\n\n    def get_rootfs_args(self, args):\n        \n        return [\n            '--rootfs'\n        ]\n\n    def get_isolation_args(self, args):\n        \n        return ["], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n        \n        return [\n            '--silent'\n        ]\n\n    def get_debug_args(self, args):\n        \n        return [\n            '--debug'\n        ]\n\n    def get_coverage_args(self, args):\n        \n        return [\n            '--coverage'\n        ]\n\n    def get_no_cache_args(self, args):\n        \n        return [\n            '--no-cache'\n        ]\n\n    def get_rootfs_args(self, args):\n        \n        return [\n            '--rootfs'\n        ]\n\n    def get_isolation_args(self, args):\n        \n        return [", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n        \n        for arg in args:\n            if arg not in self.args:\n                raise RequiredArgumentError(arg)\n\n\n    def validate_args(self, args):\n        \n        for arg in args:\n            if arg not in self.valid_args:\n                raise InvalidArgumentError(arg)\n\n\n    def validate_num_args(self, num_args):\n        \n        if len(self.args) not in num_args:\n            raise InvalidNumberOfArgumentsError(len(self.args), num_args)\n\n\n    def validate_num_args_lt(self, num_args):\n        \n        if len(self.args) >="], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n        \n        for arg in args:\n            if arg not in self.args:\n                raise RequiredArgumentError(arg)\n\n\n    def validate_args(self, args):\n        \n        for arg in args:\n            if arg not in self.valid_args:\n                raise InvalidArgumentError(arg)\n\n\n    def validate_num_args(self, num_args):\n        \n        if len(self.args) not in num_args:\n            raise InvalidNumberOfArgumentsError(len(self.args), num_args)\n\n\n    def validate_num_args_lt(self, num_args):\n        \n        if len(self.args) >=", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        required_args = []\n        for option in options_spec:\n            required_when = option.get('required_when')\n            if required_when is None:\n                continue\n            arg_name = option.get('name_or_flags')[0]\n            if arg_name not in args:\n                continue\n            value = args[arg_name]\n            if not isinstance(required_when, list):\n                required_when = [required_when]\n            for req_arg in required_when:\n                req_arg_name = req_arg[0]\n                req_arg_value = req_arg[1]\n                if req_arg_name not in args:\n                    continue\n                if req_arg_value == value:\n                    required_args.append(req_arg_name)\n        return required_"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n        required_args = []\n        for option in options_spec:\n            required_when = option.get('required_when')\n            if required_when is None:\n                continue\n            arg_name = option.get('name_or_flags')[0]\n            if arg_name not in args:\n                continue\n            value = args[arg_name]\n            if not isinstance(required_when, list):\n                required_when = [required_when]\n            for req_arg in required_when:\n                req_arg_name = req_arg[0]\n                req_arg_value = req_arg[1]\n                if req_arg_name not in args:\n                    continue\n                if req_arg_value == value:\n                    required_args.append(req_arg_name)\n        return required_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n        \n\n        for arg in args:\n            if len(getattr(self, arg)) > self.max_length:\n                raise ValueError(f'Argument {arg} is too long. Max length is {self.max_length}.')\n\n    def validate_string_args(self, args):\n        \n\n        for arg in args:\n            if not isinstance(getattr(self, arg), str):\n                raise TypeError(f'Argument {arg} must be string.')\n\n    def validate_int_args(self, args):\n        \n\n        for arg in args:\n            if not isinstance(getattr(self, arg), int):\n                raise TypeError(f'Argument {arg} must be integer.')\n\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n        \n\n        for arg in args:\n            if len(getattr(self, arg)) > self.max_length:\n                raise ValueError(f'Argument {arg} is too long. Max length is {self.max_length}.')\n\n    def validate_string_args(self, args):\n        \n\n        for arg in args:\n            if not isinstance(getattr(self, arg), str):\n                raise TypeError(f'Argument {arg} must be string.')\n\n    def validate_int_args(self, args):\n        \n\n        for arg in args:\n            if not isinstance(getattr(self, arg), int):\n                raise TypeError(f'Argument {arg} must be integer.')\n\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n        \n        for arg in args:\n            if arg not in self.choices:\n                raise Exception('Invalid choice: {}'.format(arg))\n\n    def get_choices(self, args):\n        \n        if isinstance(args, list):\n            self.validate_choices_args(args)\n            return args\n        else:\n            return []\n\n    def get_fields(self, args):\n        \n        if isinstance(args, list):\n            self.validate_fields_args(args)\n            return args\n        else:\n            return []\n\n    def validate_fields_args(self, args):\n        \n        for arg in args:\n            if"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n        \n        for arg in args:\n            if arg not in self.choices:\n                raise Exception('Invalid choice: {}'.format(arg))\n\n    def get_choices(self, args):\n        \n        if isinstance(args, list):\n            self.validate_choices_args(args)\n            return args\n        else:\n            return []\n\n    def get_fields(self, args):\n        \n        if isinstance(args, list):\n            self.validate_fields_args(args)\n            return args\n        else:\n            return []\n\n    def validate_fields_args(self, args):\n        \n        for arg in args:\n            if", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n        \n\n        if not args.min_value and not args.max_value:\n            self.errors.append(\n                'Argument --min-value and --max-value cannot both be unset.')\n\n        if args.min_value and args.max_value:\n            if args.min_value > args.max_value:\n                self.errors.append(\n                    'Minimum value cannot be greater than maximum value.')\n\n    def validate_unique_args(self, args):\n        \n\n        if args.min_value or args.max_value:\n            if args.unique:\n                self."], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n        \n\n        if not args.min_value and not args.max_value:\n            self.errors.append(\n                'Argument --min-value and --max-value cannot both be unset.')\n\n        if args.min_value and args.max_value:\n            if args.min_value > args.max_value:\n                self.errors.append(\n                    'Minimum value cannot be greater than maximum value.')\n\n    def validate_unique_args(self, args):\n        \n\n        if args.min_value or args.max_value:\n            if args.unique:\n                self.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        if subcommand == 'list':\n            if option_name in spec_option:\n                return type_name + \":\" + spec_option[option_name]\n            else:\n                return type_name\n        else:\n            return type_name + \":\" + option_name"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        if subcommand == 'list':\n            if option_name in spec_option:\n                return type_name + \":\" + spec_option[option_name]\n            else:\n                return type_name\n        else:\n            return type_name + \":\" + option_name", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n        \n        if not args:\n            return args\n\n        custom_args = {}\n        nested_args = {}\n\n        for arg in args:\n            arg_name = arg.split(\"=\")[0]\n            if arg_name in self.nested_args:\n                nested_args[arg_name] = arg\n            else:\n                custom_args[arg_name] = arg\n\n        return nested_args, custom_args\n\n    def _get_nested_args(self):\n        \n        nested_args = {}\n        for arg in self.custom_args:\n            arg_name = arg.split(\"=\")[0]\n            if arg_name in self.nested_args:\n                nested_args[arg_name] = arg\n        return nested_args\n\n    def _get_custom_args"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n        \n        if not args:\n            return args\n\n        custom_args = {}\n        nested_args = {}\n\n        for arg in args:\n            arg_name = arg.split(\"=\")[0]\n            if arg_name in self.nested_args:\n                nested_args[arg_name] = arg\n            else:\n                custom_args[arg_name] = arg\n\n        return nested_args, custom_args\n\n    def _get_nested_args(self):\n        \n        nested_args = {}\n        for arg in self.custom_args:\n            arg_name = arg.split(\"=\")[0]\n            if arg_name in self.nested_args:\n                nested_args[arg_name] = arg\n        return nested_args\n\n    def _get_custom_args", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is None:\n            return vars_dict\n\n        if isinstance(extra_vars, dict):\n            vars_dict.update(extra_vars)\n        else:\n            try:\n                vars_dict.update(json.loads(extra_vars))\n            except Exception as e:\n                raise ValueError(\n                    'Failed to parse extra-vars, this could be a Python2/3 incompatibility: {0}'.format(e))\n\n        return vars_dict\n\n    @staticmethod\n    def get_galaxy_role_path():\n        '''\n        Get the path to the galaxy roles directory\n        '''\n        roles_path = '~/.ansible/roles'\n        roles_path = os.path.expanduser(roles_path)\n        roles_path = os.path."], "level": "project_runnable", "generate_results": [{"generate_code": "@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        if extra_vars is None:\n            return vars_dict\n\n        if isinstance(extra_vars, dict):\n            vars_dict.update(extra_vars)\n        else:\n            try:\n                vars_dict.update(json.loads(extra_vars))\n            except Exception as e:\n                raise ValueError(\n                    'Failed to parse extra-vars, this could be a Python2/3 incompatibility: {0}'.format(e))\n\n        return vars_dict\n\n    @staticmethod\n    def get_galaxy_role_path():\n        '''\n        Get the path to the galaxy roles directory\n        '''\n        roles_path = '~/.ansible/roles'\n        roles_path = os.path.expanduser(roles_path)\n        roles_path = os.path.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    import subprocess\n    import os\n    import sys\n    import json\n\n    verbose = verbose or ir_plugin.get_verbose()\n    extra_vars = extra_vars or {}\n    extra_vars = json.dumps(extra_vars)\n    ansible_args = ansible_args or {}\n\n    ansible_playbook_path = '/usr/bin/ansible-playbook'\n\n    ansible_cfg_path = os.path.join(ir_workspace.get_ansible_dir(), 'ansible.cfg')\n    if os.path.exists(ansible_cfg_path):\n        os.environ['ANSIBLE_"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    import subprocess\n    import os\n    import sys\n    import json\n\n    verbose = verbose or ir_plugin.get_verbose()\n    extra_vars = extra_vars or {}\n    extra_vars = json.dumps(extra_vars)\n    ansible_args = ansible_args or {}\n\n    ansible_playbook_path = '/usr/bin/ansible-playbook'\n\n    ansible_cfg_path = os.path.join(ir_workspace.get_ansible_dir(), 'ansible.cfg')\n    if os.path.exists(ansible_cfg_path):\n        os.environ['ANSIBLE_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.playbook import PlaybookCLI\n    cli = PlaybookCLI(cli_args)\n    return cli.run()\n\ndef _run_play(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.playbook import PlaybookCLI\n    cli = PlaybookCLI(cli_args)\n    return cli.run()\n\ndef _run_inventory(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.inventory import InventoryCLI\n    cli = InventoryCLI(cli_args)\n    return cli.run()\n\ndef _run_doc(cli_args, vars_dict, ir_work"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.playbook import PlaybookCLI\n    cli = PlaybookCLI(cli_args)\n    return cli.run()\n\ndef _run_play(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.playbook import PlaybookCLI\n    cli = PlaybookCLI(cli_args)\n    return cli.run()\n\ndef _run_inventory(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    from ansible.cli.inventory import InventoryCLI\n    cli = InventoryCLI(cli_args)\n    return cli.run()\n\ndef _run_doc(cli_args, vars_dict, ir_work", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        if parser_name == 'cli':\n            if values_dict.get('cert_type', False):\n                if values_dict['cert_type'] == 'custom':\n                    if values_dict.get('custom_cert_name', False):\n                        values_dict['cert_type'] = values_dict['custom_cert_name']\n                        del values_dict['custom_cert_name']\n                    else:\n                        raise CLIError('Missing parameter --custom-cert-name')\n                elif values_dict['cert_type'] == 'latest':\n                    values_dict['cert_type'] = 'latest'\n                del values_dict['custom_cert_name']\n            if values_dict.get('disable_client_cert', False):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n        \n        if parser_name == 'cli':\n            if values_dict.get('cert_type', False):\n                if values_dict['cert_type'] == 'custom':\n                    if values_dict.get('custom_cert_name', False):\n                        values_dict['cert_type'] = values_dict['custom_cert_name']\n                        del values_dict['custom_cert_name']\n                    else:\n                        raise CLIError('Missing parameter --custom-cert-name')\n                elif values_dict['cert_type'] == 'latest':\n                    values_dict['cert_type'] = 'latest'\n                del values_dict['custom_cert_name']\n            if values_dict.get('disable_client_cert', False):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = plugin_dir.spec\n    if not plugin_spec:\n        return {}\n    return {\n        'name': plugin_spec.name,\n        'description': plugin_spec.description,\n        'title': plugin_spec.title,\n        'version': plugin_spec.version,\n        'license': plugin_spec.license,\n        'url': plugin_spec.url,\n        'icon': plugin_spec.icon,\n        'authors': plugin_spec.authors,\n        'requires': plugin_spec.requires,\n        'requires_dist': plugin_spec.requires_dist,\n        'obsoletes_dist': plugin_spec.obsoletes_dist,\n    }\n\ndef get_plugin_spec_flatten_list(plugin_"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    plugin_spec = plugin_dir.spec\n    if not plugin_spec:\n        return {}\n    return {\n        'name': plugin_spec.name,\n        'description': plugin_spec.description,\n        'title': plugin_spec.title,\n        'version': plugin_spec.version,\n        'license': plugin_spec.license,\n        'url': plugin_spec.url,\n        'icon': plugin_spec.icon,\n        'authors': plugin_spec.authors,\n        'requires': plugin_spec.requires,\n        'requires_dist': plugin_spec.requires_dist,\n        'obsoletes_dist': plugin_spec.obsoletes_dist,\n    }\n\ndef get_plugin_spec_flatten_list(plugin_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n        \n        if 'AZURE_QUANTUM_CONFIG_DIR' not in os.environ:\n            os.environ['AZURE_QUANTUM_CONFIG_DIR'] = os.path.join(\n                os.path.expanduser(\"~\"), \".azure\", \"quantum\")\n\n    def get_targets(self, ws, provider_id: str = None, name: str = None):\n        \"\"\"Gets the list of target ids supported by this provider.\"\"\"\n        if provider_id is None:\n            return self.list_targets(ws)\n\n        providers = self.list_providers(ws)\n\n        if provider_id not in providers[\"providers\"]:\n            raise ValueError(f\"Provider {provider_id} not found in workspace {ws.name}.\")\n\n        targets = providers[\""], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n        \n        if 'AZURE_QUANTUM_CONFIG_DIR' not in os.environ:\n            os.environ['AZURE_QUANTUM_CONFIG_DIR'] = os.path.join(\n                os.path.expanduser(\"~\"), \".azure\", \"quantum\")\n\n    def get_targets(self, ws, provider_id: str = None, name: str = None):\n        \"\"\"Gets the list of target ids supported by this provider.\"\"\"\n        if provider_id is None:\n            return self.list_targets(ws)\n\n        providers = self.list_providers(ws)\n\n        if provider_id not in providers[\"providers\"]:\n            raise ValueError(f\"Provider {provider_id} not found in workspace {ws.name}.\")\n\n        targets = providers[\"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n        \n        spec_parser = root_subparsers.add_parser(\n            'spec', help='spec',\n            description='Extract specs from a project')\n        spec_parser.set_defaults(command=self.spec)\n        spec_parser.add_argument(\n            'path', default='.', nargs='?',\n            help='Source path to extract spec from, defaults to \".\"')\n        spec_parser.add_argument(\n            '--format', '-f', default='json',\n            help='Output format, defaults to \"json\"')\n        spec_parser.add_argument(\n            '--output', '-o', default='-',\n            help='Output location, defaults to \"-\"')\n\n    def spec(self, args):\n        '''Extracts specs from a project.\n\n        Args:"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n        \n        spec_parser = root_subparsers.add_parser(\n            'spec', help='spec',\n            description='Extract specs from a project')\n        spec_parser.set_defaults(command=self.spec)\n        spec_parser.add_argument(\n            'path', default='.', nargs='?',\n            help='Source path to extract spec from, defaults to \".\"')\n        spec_parser.add_argument(\n            '--format', '-f', default='json',\n            help='Output format, defaults to \"json\"')\n        spec_parser.add_argument(\n            '--output', '-o', default='-',\n            help='Output location, defaults to \"-\"')\n\n    def spec(self, args):\n        '''Extracts specs from a project.\n\n        Args:", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(self, path, root):\n        \n        if not path.startswith(root):\n            raise ValueError('{} does not start with {}'.format(path, root))\n        return path[len(root):]\n\n    def to_root(self, path, root):\n        \n        return root + path\n\n    def is_child(self, path, parent):\n        \n        return path.startswith(parent) and path != parent\n\n    def is_parent(self, path, child):\n        \n        return child.startswith(path) and path != child\n\n    def is_ancestor(self, ancestor, path):\n        \n       "], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(self, path, root):\n        \n        if not path.startswith(root):\n            raise ValueError('{} does not start with {}'.format(path, root))\n        return path[len(root):]\n\n    def to_root(self, path, root):\n        \n        return root + path\n\n    def is_child(self, path, parent):\n        \n        return path.startswith(parent) and path != parent\n\n    def is_parent(self, path, child):\n        \n        return child.startswith(path) and path != child\n\n    def is_ancestor(self, ancestor, path):\n        \n       ", "is_pass": false, "return_code": 1}]}
