{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "_id": "6306091073426c38ae68acac", "code": ["\ndef dict_insert(dic, val, key, *keys):\n    \n    current_dict = dic\n\n    for k in keys:\n        if k not in current_dict:\n            current_dict[k] = {}\n\n        current_dict = current_dict[k]\n\n    current_dict[key] = val\n\n    return dic\n\n\nclass ConflictResolver(object):\n    \"\"\"Resolves conflicts while merging dicts. \"\"\"\n\n    @staticmethod\n    def none_resolver(first, second, key):\n        \"\"\"this method is called when the same key is presented in both\n        dictionaries.\n        \"\"\"\n        return None\n\n    @staticmethod\n    def simple_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef dict_insert(dic, val, key, *keys):\n    \n    current_dict = dic\n\n    for k in keys:\n        if k not in current_dict:\n            current_dict[k] = {}\n\n        current_dict = current_dict[k]\n\n    current_dict[key] = val\n\n    return dic\n\n\nclass ConflictResolver(object):\n    \"\"\"Resolves conflicts while merging dicts. \"\"\"\n\n    @staticmethod\n    def none_resolver(first, second, key):\n        \"\"\"this method is called when the same key is presented in both\n        dictionaries.\n        \"\"\"\n        return None\n\n    @staticmethod\n    def simple_", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "_id": "6306091a73426c38ae68acc8", "code": ["\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return cli.ListOfFileNames(\n        \"ListOfFileNames\", settings_dirs, None, spec_option)\n\n\ndef test_list_of_file_names_values_auto_propagation():\n    \n    expected = [\"task1\", \"task2\", \"task3\"]\n    settings_dirs = [\"\", \"\", 'tests/example']\n    spec_option = {'lookup_dir': 'post_tasks'}\n\n    complex_action = list_of_file_names(settings_dirs, spec_option)\n    allowed_values = complex_action.get_allowed_values()\n\n    assert expected.sort() == allowed_values.sort()\n\n\ndef test_list_of_file_names_resolve():\n    "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef list_of_file_names(settings_dirs, spec_option):\n    \n    return cli.ListOfFileNames(\n        \"ListOfFileNames\", settings_dirs, None, spec_option)\n\n\ndef test_list_of_file_names_values_auto_propagation():\n    \n    expected = [\"task1\", \"task2\", \"task3\"]\n    settings_dirs = [\"\", \"\", 'tests/example']\n    spec_option = {'lookup_dir': 'post_tasks'}\n\n    complex_action = list_of_file_names(settings_dirs, spec_option)\n    allowed_values = complex_action.get_allowed_values()\n\n    assert expected.sort() == allowed_values.sort()\n\n\ndef test_list_of_file_names_resolve():\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "_id": "6306091b73426c38ae68acd7", "code": ["\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi!!!\")\n    CoreServices.register_service(\"workspace_manager\",\"world!!\")\n    isT=CoreServices.workspace_manager()==\"world!!\""], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\",\"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi!!!\")\n    CoreServices.register_service(\"workspace_manager\",\"world!!\")\n    isT=CoreServices.workspace_manager()==\"world!!\"", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "_id": "6306091b73426c38ae68acd9", "code": ["\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n    @classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices."], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def workspace_manager(cls):\n        \n        return cls._get_service(ServiceName.WORKSPACE_MANAGER)\n\n    @classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "_id": "6306091b73426c38ae68acda", "code": ["\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\", \"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def plugins_manager(cls):\n        \n        return cls._get_service(ServiceName.PLUGINS_MANAGER)\n\n    @classmethod\n    def ansible_config_manager(cls):\n        \n        return cls._get_service(ServiceName.ANSIBLE_CONFIG_MANAGER)\n\n    @classmethod\n    def execution_logger_manager(cls):\n        \n        return cls._get_service(ServiceName.EXECUTION_LOGGER_MANAGER)\n\nif __name__ == \"__main__\":\n    CoreServices.register_service(\"huawei\", \"service_huawei\")\n    CoreServices.register_service(\"apple\", \"apple!!!\")\n    CoreServices.register_service(\"xiaomi\", \"xiaomi", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "_id": "6306091c73426c38ae68acdc", "code": ["\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\n                \"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITH_CONFIG)\n            else:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(\n                \"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        return"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_content(cls, spec_content=None):\n        \n        spec_dict = yaml.safe_load(spec_content)\n\n        if not isinstance(spec_dict, dict):\n            raise IRValidatorException(\n                \"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        try:\n            if \"config\" in spec_dict:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITH_CONFIG)\n            else:\n                jsonschema.validate(spec_dict,\n                                    cls.SCHEMA_WITHOUT_CONFIG)\n\n        except jsonschema.exceptions.ValidationError as error:\n            raise IRValidatorException(\n                \"Spec file is empty or corrupted: {}\".format(spec_content))\n\n        return", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "_id": "6306091c73426c38ae68acdd", "code": ["\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        '''Loads & validates that a YAML file has all"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_content(cls, file_content=None):\n        \n        raise NotImplementedError\n\n\n@classmethod\n    def validate_from_file(cls, yaml_file=None):\n        '''Loads & validates that a YAML file has all", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "_id": "6306091d73426c38ae68ace5", "code": ["\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next(\n                (grp for grp in self.spec_dict.get('shared_groups', [])\n                 if grp['title'] == group),\n                None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _include_groups(self, parser_dict):\n        \n        for group in parser_dict.get('include_groups', []):\n            grp_dict = next(\n                (grp for grp in self.spec_dict.get('shared_groups', [])\n                 if grp['title'] == group),\n                None)\n            if grp_dict is None:\n                raise SpecParserException(\n                    \"Unable to include group '{}' in '{}' parser. \"\n                    \"Group was not found!\".format(\n                        group,\n                        parser_dict['name']))\n            for option in grp_dict.get('options', {}).values():\n                option['is_shared_group_option'] = True\n            parser_groups_list = parser_dict.get('groups', [])\n            parser_groups_list.append", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "_id": "6306092373426c38ae68acfa", "code": ["\ndef get_spec_defaults(self):\n        \n\n        def spec_default_getter(option):\n            '''Getter function to retrieve the default value from spec.\n\n            :param option: argument name\n            '''\n\n            default_value = SpecParser.get_env_option(option['name'])\n            if default_value is not None:\n                LOG.info(\n                    \"[environ] Loading '{0}' default value\"\n                    \" '{1}' from the environment variable\".format(\n                        option['name'], default_value))\n            elif option.get('default', None) is not None:\n                default_value = option['default']\n            elif option.get('action', None) in ['store_true']:\n                default_value = False\n            return default_value\n\n        return self._get_defaults"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_spec_defaults(self):\n        \n\n        def spec_default_getter(option):\n            '''Getter function to retrieve the default value from spec.\n\n            :param option: argument name\n            '''\n\n            default_value = SpecParser.get_env_option(option['name'])\n            if default_value is not None:\n                LOG.info(\n                    \"[environ] Loading '{0}' default value\"\n                    \" '{1}' from the environment variable\".format(\n                        option['name'], default_value))\n            elif option.get('default', None) is not None:\n                default_value = option['default']\n            elif option.get('action', None) in ['store_true']:\n                default_value = False\n            return default_value\n\n        return self._get_defaults", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "_id": "6306092973426c38ae68ad01", "code": ["\ndef get_deprecated_args(self):\n        \n\n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result\n\n\n    @staticmethod\n    def parse_env_variable_from_file(value):\n        \n\n        if isinstance(value, str):\n            t = Template(value)\n            try:\n                value = t.substitute(os.environ)\n            except KeyError as undefined_var:\n                raise exceptions.IRAnswersFileEnvVarNotDefined(undefined_var)\n        return value\n\n    def get_answers_file_args(self"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_deprecated_args(self):\n        \n\n        result = collections.defaultdict(dict)\n        for parser, option in self.spec_helper.iterate_option_specs():\n            if option.get('deprecates') is not None:\n                result[option.get('deprecates')] = option.get('name')\n\n        return result\n\n\n    @staticmethod\n    def parse_env_variable_from_file(value):\n        \n\n        if isinstance(value, str):\n            t = Template(value)\n            try:\n                value = t.substitute(os.environ)\n            except KeyError as undefined_var:\n                raise exceptions.IRAnswersFileEnvVarNotDefined(undefined_var)\n        return value\n\n    def get_answers_file_args(self", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "_id": "6306092c73426c38ae68ad02", "code": ["\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        for deprecated, deprecates in self.get_deprecated_args().items():\n            for input_args in (answer_file_args.items(), cli_args.items()):\n                for command, command_dict in input_args:\n                    if deprecated in command_dict:\n                        if deprecates in command_dict:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use '{}' instead.\".format(\n                                    command, deprecated, deprecates, deprecates))\n                        else:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use '{}' instead.\".format(\n                                    command, deprecated, deprecates, deprecates"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_arg_deprecation(self, cli_args, answer_file_args):\n        \n        for deprecated, deprecates in self.get_deprecated_args().items():\n            for input_args in (answer_file_args.items(), cli_args.items()):\n                for command, command_dict in input_args:\n                    if deprecated in command_dict:\n                        if deprecates in command_dict:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use '{}' instead.\".format(\n                                    command, deprecated, deprecates, deprecates))\n                        else:\n                            raise exceptions.IRDeprecationException(\n                                \"[{}] Argument '{}' deprecates '{}',\"\n                                \" please use '{}' instead.\".format(\n                                    command, deprecated, deprecates, deprecates", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "_id": "6306092d73426c38ae68ad04", "code": ["\ndef get_parser_option_specs(self, command_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return [dict(name=option['name'], **option) for option in options]\n\n\ndef get_option_spec(self, command_name, argument_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        '''\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_parser_option_specs(self, command_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return [dict(name=option['name'], **option) for option in options]\n\n\ndef get_option_spec(self, command_name, argument_name):\n        \n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n                     if opt['name'] == argument_name), {})\n\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        '''\n        options = self.get_parser_option_specs(command_name)\n        return next((opt for opt in options\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "_id": "6306092d73426c38ae68ad05", "code": ["\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next(\n            (opt for opt in options\n             if opt['name'] == argument_name), {})\n\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        :param option_name: The option name to analyze\n        :param args: The received arguments.\n        '''\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            res = OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get(command_name, {}):\n            res = OptionState['NOT_SET']\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_option_spec(self, command_name, argument_name):\n        \n\n        options = self.get_parser_option_specs(command_name)\n        return next(\n            (opt for opt in options\n             if opt['name'] == argument_name), {})\n\n\ndef get_option_state(self, command_name, option_name, args):\n        '''Gets the option state.\n\n        :param command_name: The command name\n        :param option_name: The option name to analyze\n        :param args: The received arguments.\n        '''\n        option_spec = self.get_option_spec(command_name, option_name)\n\n        if not option_spec:\n            res = OptionState['UNRECOGNIZED']\n\n        elif option_name not in args.get(command_name, {}):\n            res = OptionState['NOT_SET']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "_id": "6306092d73426c38ae68ad06", "code": ["\ndef get_silent_args(self, args):\n        \n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n\n\ndef get_nested_custom_and_control_args(self, args):\n    \"\"\"Split input arguments to control nested and custom.\n\n    Controls arguments: control the IR behavior. These arguments\n        will not be"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef get_silent_args(self, args):\n        \n        silent_args_names = []\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if arg_spec and 'silent' in arg_spec and \\\n                    self.spec_helper.get_option_state(\n                        parser_name,\n                        arg_name,\n                        args) == helper.OptionState['IS_SET']:\n                silent_args_names.extend(arg_spec['silent'])\n\n        return list(set(silent_args_names))\n\n\ndef get_nested_custom_and_control_args(self, args):\n    \"\"\"Split input arguments to control nested and custom.\n\n    Controls arguments: control the IR behavior. These arguments\n        will not be", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "_id": "6306092d73426c38ae68ad07", "code": ["\ndef validate_requires_args(self, args):\n        \n\n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    (option.get('required_if', False) and\n                     name not in parser_args and\n                     name not in condition_req_args) and\n                    name not in silent_args):\n                   "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_requires_args(self, args):\n        \n\n        silent_args = self.get_silent_args(args)\n\n        def validate_parser(parser_name, expected_options, parser_args):\n            \n\n            result = collections.defaultdict(list)\n            condition_req_args = self._get_conditionally_required_args(\n                parser_name, expected_options, args)\n\n            for option in expected_options:\n                name = option['name']\n\n                if (option.get('required', False) and\n                    name not in parser_args or\n                    (option.get('required_if', False) and\n                     name not in parser_args and\n                     name not in condition_req_args) and\n                    name not in silent_args):\n                   ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "_id": "6306092d73426c38ae68ad08", "code": ["\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n\n        opts_names = [option_spec['name'] for option_spec in options_spec]\n\n        for option_spec in options_spec:\n            if option_spec and 'required_when' in option_spec:\n                req_when_args = [option_spec['required_when']] \\\n                    if not type(option_spec['required_when']) is list \\\n                    else option_spec['required_when']\n\n                for req_when_arg in req_when_args:\n                    splited_args_list = req_when_arg.split()\n                    for idx, req_arg in enumerate(splited_args_list):\n                        if req_arg in opts_names:\n                            splited_args_list[idx] = \\\n                                args.get(command"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n        \n\n        opts_names = [option_spec['name'] for option_spec in options_spec]\n\n        for option_spec in options_spec:\n            if option_spec and 'required_when' in option_spec:\n                req_when_args = [option_spec['required_when']] \\\n                    if not type(option_spec['required_when']) is list \\\n                    else option_spec['required_when']\n\n                for req_when_arg in req_when_args:\n                    splited_args_list = req_when_arg.split()\n                    for idx, req_arg in enumerate(splited_args_list):\n                        if req_arg in opts_names:\n                            splited_args_list[idx] = \\\n                                args.get(command", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad09", "code": ["\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_length_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'length' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    length = spec_option['length']\n                    option_value = parser_dict[option_name]\n                    if len(option_value) > int(length):\n                        invalid_options.append((\n                            option_name,\n                            option_value,\n                            length\n                        ))\n        if", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0a", "code": ["\ndef validate_choices_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'choices' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    choices = spec_option['choices']\n                    option_value = parser_dict[option_name]\n                    if option_value not in choices:\n                        invalid_options.append((option_name, option_value, choices))\n        if invalid_options:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_choices_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in self.spec_helper.get_parser_option_specs(parser_name):\n                if 'choices' not in spec_option:\n                    continue\n                option_name = spec_option['name']\n                if option_name in parser_dict:\n                    choices = spec_option['choices']\n                    option_value = parser_dict[option_name]\n                    if option_value not in choices:\n                        invalid_options.append((option_name, option_value, choices))\n        if invalid_options:", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "_id": "6306092e73426c38ae68ad0b", "code": ["\ndef validate_min_max_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option\n                        for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    option_value = parser_dict[option_name]\n                    min_value = spec_option.get('minimum')\n                    max_value = spec_option.get('maximum')\n                    if min_value <= option_value <= max_value:\n                        continue\n                    else:\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_min_max_args(self, args):\n        \n        invalid_options = []\n        for parser_name, parser_dict in args.items():\n            for spec_option in \\\n                    self.spec_helper.get_parser_option_specs(parser_name):\n                if all([key not in spec_option\n                        for key in ('maximum', 'minimum')]):\n                    continue\n                option_name = spec_option['name']\n\n                if option_name in parser_dict:\n                    option_value = parser_dict[option_name]\n                    min_value = spec_option.get('minimum')\n                    max_value = spec_option.get('maximum')\n                    if min_value <= option_value <= max_value:\n                        continue\n                    else:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "_id": "6306092e73426c38ae68ad0d", "code": ["\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_action = COMPLEX_TYPES.get(\n            type_name, None)\n        if complex_action is None:\n            raise exceptions.SpecParserException(\n                \"Unknown complex type: {}\".format(type_name))\n        return complex_action(\n            option_name,\n            (self.vars, self.defaults, self.plugin_path),\n            subcommand,\n            spec_option)\n\n\ndef parse_args(self, arg_parser, args=None):\n        \"\"\"Parses all the arguments (cli, answers file)\n\n        :return: None, if ``--generate-answers-file`` in arg_arg_parser\n        :return: (dict, dict):\n            * command arguments dict (arguments to control the IR logic)\n            * nested arguments dict (arguments to pass to the"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n        \n        complex_action = COMPLEX_TYPES.get(\n            type_name, None)\n        if complex_action is None:\n            raise exceptions.SpecParserException(\n                \"Unknown complex type: {}\".format(type_name))\n        return complex_action(\n            option_name,\n            (self.vars, self.defaults, self.plugin_path),\n            subcommand,\n            spec_option)\n\n\ndef parse_args(self, arg_parser, args=None):\n        \"\"\"Parses all the arguments (cli, answers file)\n\n        :return: None, if ``--generate-answers-file`` in arg_arg_parser\n        :return: (dict, dict):\n            * command arguments dict (arguments to control the IR logic)\n            * nested arguments dict (arguments to pass to the", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "_id": "6306092e73426c38ae68ad0f", "code": ["\ndef get_nested_custom_and_control_args(self, args):\n        \n        nested = {}\n        control_args = {}\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None),\n                    arg_spec.get('type', None) in\n                    [ctype_name for ctype_name, klass in\n                     COMPLEX_TYPES.items() if klass.is_nested]\n                   ]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested:\n                    LOG.warning(\n                        \"Duplicated nested argument found:'{}'. \"\n                        \"Ignoring the second value.\".format(arg_name))\n                else:\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nested_custom_and_control_args(self, args):\n        \n        nested = {}\n        control_args = {}\n        for (parser_name, parser_dict, arg_name, arg_value,\n             arg_spec) in self._iterate_received_arguments(args):\n            if all([arg_spec, arg_spec.get('type', None),\n                    arg_spec.get('type', None) in\n                    [ctype_name for ctype_name, klass in\n                     COMPLEX_TYPES.items() if klass.is_nested]\n                   ]) or ('is_shared_group_option' not in arg_spec):\n                if arg_name in nested:\n                    LOG.warning(\n                        \"Duplicated nested argument found:'{}'. \"\n                        \"Ignoring the second value.\".format(arg_name))\n                else:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "_id": "6306092e73426c38ae68ad11", "code": ["\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        for extra_var in extra_vars or []:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:], 'r') as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n                dict_utils.dict_merge(vars_dict, loaded_yml, conflict_resolver=dict_utils.ConflictResolver.unique_append_list_resolver)\n            else:\n                if '=' not in extra_var:\n                    raise exceptions.IRExtraVarsException(extra_var)\n                key, value = extra_var.split('=', 1)\n                if value.startswith('@'):\n                    with open(value[1:], 'r') as f_obj:\n                        loaded_yml = yaml.safe"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def merge_extra_vars(vars_dict, extra_vars=None):\n        \n        for extra_var in extra_vars or []:\n            if extra_var.startswith('@'):\n                with open(extra_var[1:], 'r') as f_obj:\n                    loaded_yml = yaml.safe_load(f_obj)\n                dict_utils.dict_merge(vars_dict, loaded_yml, conflict_resolver=dict_utils.ConflictResolver.unique_append_list_resolver)\n            else:\n                if '=' not in extra_var:\n                    raise exceptions.IRExtraVarsException(extra_var)\n                key, value = extra_var.split('=', 1)\n                if value.startswith('@'):\n                    with open(value[1:], 'r') as f_obj:\n                        loaded_yml = yaml.safe", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "_id": "6306092f73426c38ae68ad13", "code": ["\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    ansible_args = ansible_args or []\n    LOG.debug(\"Additional ansible args: {}\".format(ansible_args))\n\n    from ansible.utils.display import Display\n    display = Display(verbosity=verbose)\n    import __main__ as main\n    setattr(main, \"display\", display)\n\n    pass\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    '''Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list  of command line arguments\n    :param ir_workspace: An Infrared Workspace object represents the active\n     workspace"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \n    ansible_args = ansible_args or []\n    LOG.debug(\"Additional ansible args: {}\".format(ansible_args))\n\n    from ansible.utils.display import Display\n    display = Display(verbosity=verbose)\n    import __main__ as main\n    setattr(main, \"display\", display)\n\n    pass\n\n\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    '''Runs ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list  of command line arguments\n    :param ir_workspace: An Infrared Workspace object represents the active\n     workspace", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "_id": "6306093273426c38ae68ad15", "code": ["\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    pass\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    \n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "_id": "63060ada73426c38ae68ad31", "code": ["\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n\n\ndef _validate_arg_deprecation(self, parser_name, parser_dict,\n                              arg_name, arg_value, arg_spec):\n    '''\n        :param parser_name: The command name, e.g. main, virsh, ospd, etc\n        :param parser_dict: The dict of with arguments\n        :param arg_name"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _convert_non_cli_args(self, parser_name, values_dict):\n        \n        for opt_name, opt_value in values_dict.items():\n            file_option_spec = self.spec_helper.get_option_spec(\n                parser_name, opt_name)\n            if file_option_spec.get('type', None) in ['int', ] or \\\n                file_option_spec.get('action', None) in ['count', ]:\n                values_dict[opt_name] = int(opt_value)\n\n\ndef _validate_arg_deprecation(self, parser_name, parser_dict,\n                              arg_name, arg_value, arg_spec):\n    '''\n        :param parser_name: The command name, e.g. main, virsh, ospd, etc\n        :param parser_dict: The dict of with arguments\n        :param arg_name", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "_id": "63060b1a73426c38ae68ad3e", "code": ["\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        dir=plugin_dir,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return plugin_spec_"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef get_plugin_spec_flatten_dict(plugin_dir):\n    \n    with open(os.path.join(plugin_dir, PLUGIN_SPEC)) as fp:\n        spec_yaml = yaml.safe_load(fp)\n\n    plugin_name = list(spec_yaml['subparsers'].keys())[0]\n\n    plugin_description = spec_yaml['description'] \\\n        if \"description\" in spec_yaml \\\n        else spec_yaml['subparsers'][plugin_name]['description']\n\n    plugin_type = spec_yaml[\"config\"][\"plugin_type\"] \\\n        if \"config\" in spec_yaml \\\n        else spec_yaml[\"plugin_type\"]\n\n    plugin_spec_dict = dict(\n        dir=plugin_dir,\n        description=plugin_description,\n        type=plugin_type\n    )\n\n    return plugin_spec_", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "_id": "63060b1b73426c38ae68ad42", "code": ["\ndef inject_config(self):\n        \n        if 'ANSIBLE_CONFIG' not in os.environ:\n            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\nclass AnsibleConfigManager(object):\n    \n\n    def __init__(self, name):\n        \n        self.name = name\n        self.ansible_config_path = os.path.expanduser(\n            '~/.ansible.cfg'\n        )\n\n    def get_config(self):\n        \n        config = configparser.RawConfigParser()\n        config.read(self.ansible_config_path)\n        return config\n\n    def set_config(self, config):\n        \n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef inject_config(self):\n        \n        if 'ANSIBLE_CONFIG' not in os.environ:\n            os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n\nclass AnsibleConfigManager(object):\n    \n\n    def __init__(self, name):\n        \n        self.name = name\n        self.ansible_config_path = os.path.expanduser(\n            '~/.ansible.cfg'\n        )\n\n    def get_config(self):\n        \n        config = configparser.RawConfigParser()\n        config.read(self.ansible_config_path)\n        return config\n\n    def set_config(self, config):\n        \n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "_id": "63060b1b73426c38ae68ad43", "code": ["\ndef extend_cli(self, root_subparsers):\n        \n        pass\n\ndef spec_handler(self, parser, args):\n        '''The main method for the spec.\n\n        This method will be called by the spec managers once the subcommand\n        with the spec name is called from cli.\n        :param parser: argparse object\n        :param args: dict, input arguments as parsed by the parser.\n        :return: exit code to be propagated out.\n        '''\n        pass\n\ndef extend_cli(self, root_subparsers):\n        \n        pass\n\ndef spec_handler(self, parser, args):\n        '''The main method for the spec.\n\n        This method will be called by the spec managers once the subcommand\n        with the spec name is called from cli.\n        :param parser: argparse object"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef extend_cli(self, root_subparsers):\n        \n        pass\n\ndef spec_handler(self, parser, args):\n        '''The main method for the spec.\n\n        This method will be called by the spec managers once the subcommand\n        with the spec name is called from cli.\n        :param parser: argparse object\n        :param args: dict, input arguments as parsed by the parser.\n        :return: exit code to be propagated out.\n        '''\n        pass\n\ndef extend_cli(self, root_subparsers):\n        \n        pass\n\ndef spec_handler(self, parser, args):\n        '''The main method for the spec.\n\n        This method will be called by the spec managers once the subcommand\n        with the spec name is called from cli.\n        :param parser: argparse object", "is_pass": false, "return_code": 1}]}
{"file_path": "rows/utils/__init__.py", "project": "turicas/rows", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "_id": "62ece4982e6aefcf4aabbd6b", "code": ["\ndef subclasses(cls):\n    \n    all_subclasses = [\n        s for c in cls.__subclasses__() for s in subclasses(c)\n    ]\n    return all_subclasses\n\n\ndef get_version(cls):\n    \n    if not hasattr(cls, \"_version\"):\n        try:\n            process = subprocess.Popen(\n                cls.version_command,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True,\n            )\n            stdout, stderr = process.communicate()\n            result = REGEXP_VERSION.findall(stdout.splitlines()[0])\n        except FileNotFoundError:\n            cls._version = None\n        else:\n            cls._version = result["], "level": "self_contained", "generate_results": [{"generate_code": "\ndef subclasses(cls):\n    \n    all_subclasses = [\n        s for c in cls.__subclasses__() for s in subclasses(c)\n    ]\n    return all_subclasses\n\n\ndef get_version(cls):\n    \n    if not hasattr(cls, \"_version\"):\n        try:\n            process = subprocess.Popen(\n                cls.version_command,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                text=True,\n            )\n            stdout, stderr = process.communicate()\n            result = REGEXP_VERSION.findall(stdout.splitlines()[0])\n        except FileNotFoundError:\n            cls._version = None\n        else:\n            cls._version = result[", "is_pass": false, "return_code": 1}]}
{"file_path": "lib/matplotlib/testing/__init__.py", "project": "rougier/matplotlib", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "_id": "62ece4992e6aefcf4aabbd7d", "code": ["\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    env = os.environ.copy()\n    env['MPLBACKEND'] = 'Agg'\n    env['MPL_TEST_ESCAPE_HATCH'] = 'True'\n    if extra_env is not None:\n        env.update(extra_env)\n    ret = subprocess.run(\n        [sys.executable, '-u', '-W', 'ignore', '-c',\n         'from {} import {} as test_func; test_func()'.format(\n             func.__module__, func.__name__)],\n        env=env, *args,\n        input=None, text=True, check=True,\n        timeout=timeout, stdout=subprocess."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \n    env = os.environ.copy()\n    env['MPLBACKEND'] = 'Agg'\n    env['MPL_TEST_ESCAPE_HATCH'] = 'True'\n    if extra_env is not None:\n        env.update(extra_env)\n    ret = subprocess.run(\n        [sys.executable, '-u', '-W', 'ignore', '-c',\n         'from {} import {} as test_func; test_func()'.format(\n             func.__module__, func.__name__)],\n        env=env, *args,\n        input=None, text=True, check=True,\n        timeout=timeout, stdout=subprocess.", "is_pass": false, "return_code": 1}]}
{"file_path": "rdflib/util.py", "project": "mwatts15/rdflib", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "_id": "62ece4992e6aefcf4aabbd85", "code": ["\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    new_roots = set()\n    for root in roots:\n        new_roots |= graph.transitive_objects(root, prop)\n    roots |= new_roots\n    if new_roots:\n        return find_roots(graph, prop, roots)\n    return roots\n\n\ndef find_leaves(\n    graph: \"Graph\", prop: \"URIRef\", leaves: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if leaves is None:\n        leaves = set()\n    new_leaves = set()\n    for leave in leaves:\n        new_leaves |= graph.transitive_subjects(prop, leave)\n    leaves |="], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if roots is None:\n        roots = set()\n    new_roots = set()\n    for root in roots:\n        new_roots |= graph.transitive_objects(root, prop)\n    roots |= new_roots\n    if new_roots:\n        return find_roots(graph, prop, roots)\n    return roots\n\n\ndef find_leaves(\n    graph: \"Graph\", prop: \"URIRef\", leaves: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    \n    if leaves is None:\n        leaves = set()\n    new_leaves = set()\n    for leave in leaves:\n        new_leaves |= graph.transitive_subjects(prop, leave)\n    leaves |=", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/systeminfo.py", "project": "cloudmesh/cloudmesh-common", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "_id": "62ece4982e6aefcf4aabbd70", "code": ["\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \n    try:\n        return platform.system() == \"Linux\" and \"raspbian\" not in readfile(\n            '/etc/os-release')\n    except:\n        return False\n\n\ndef os_is_pi():\n    \n    try:\n        return platform.system() == \"Linux\" and \"raspbian\" in readfile(\n            '/etc/os-release')\n    except:\n        return False\n\n\ndef os_is_linux_like():\n    '''Check"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef os_is_mac():\n    \n    return platform.system() == \"Darwin\"\n\n\ndef os_is_windows():\n    \n    return platform.system() == \"Windows\"\n\n\ndef os_is_linux():\n    \n    try:\n        return platform.system() == \"Linux\" and \"raspbian\" not in readfile(\n            '/etc/os-release')\n    except:\n        return False\n\n\ndef os_is_pi():\n    \n    try:\n        return platform.system() == \"Linux\" and \"raspbian\" in readfile(\n            '/etc/os-release')\n    except:\n        return False\n\n\ndef os_is_linux_like():\n    '''Check", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/shlex.py", "project": "cloudmesh/cloudmesh-common", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "_id": "62ece4982e6aefcf4aabbd73", "code": ["\ndef split(s, platform='this'):\n    \n    if platform == 'win32' or platform == 'cygwin':\n        return split_command_line(s)\n    else:\n        return split_posix(s)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef split(s, platform='this'):\n    \n    if platform == 'win32' or platform == 'cygwin':\n        return split_command_line(s)\n    else:\n        return split_posix(s)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "_id": "62ece4992e6aefcf4aabbd78", "code": ["\ndef is_local(host):\n    \n    if host == 'localhost':\n        return True\n    elif host == '127.0.0.1':\n        return True\n    elif host == '::1':\n        return True\n    else:\n        return False\n\n\ndef is_public(host):\n    \n    if host in ['localhost', '127.0.0.1', '::1']:\n        return False\n    else:\n        return True\n\n\ndef is_private(host):\n    \n    if host in ['localhost', '127.0.0.1', '::1']:\n        return False\n    else:\n        return True\n\n\ndef"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_local(host):\n    \n    if host == 'localhost':\n        return True\n    elif host == '127.0.0.1':\n        return True\n    elif host == '::1':\n        return True\n    else:\n        return False\n\n\ndef is_public(host):\n    \n    if host in ['localhost', '127.0.0.1', '::1']:\n        return False\n    else:\n        return True\n\n\ndef is_private(host):\n    \n    if host in ['localhost', '127.0.0.1', '::1']:\n        return False\n    else:\n        return True\n\n\ndef", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/util.py", "project": "cloudmesh/cloudmesh-common", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "_id": "62ece4992e6aefcf4aabbd7a", "code": ["\ndef is_gitbash():\n    \n    return \"GIT_PYTHON_REFRESH\" in os.environ\n\n\ndef is_powershell():\n    \n    return \"MSYSTEM\" in os.environ\n\n\ndef is_cygwin():\n    \n    return \"MSYSTEM\" in os.environ\n\n\ndef is_linux():\n    \n    return sys.platform.startswith('linux')\n\n\ndef is_mac():\n    \n    return sys.platform.startswith('darwin')\n\n\ndef is_windows():\n    \n    return sys.platform.startswith('"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef is_gitbash():\n    \n    return \"GIT_PYTHON_REFRESH\" in os.environ\n\n\ndef is_powershell():\n    \n    return \"MSYSTEM\" in os.environ\n\n\ndef is_cygwin():\n    \n    return \"MSYSTEM\" in os.environ\n\n\ndef is_linux():\n    \n    return sys.platform.startswith('linux')\n\n\ndef is_mac():\n    \n    return sys.platform.startswith('darwin')\n\n\ndef is_windows():\n    \n    return sys.platform.startswith('", "is_pass": false, "return_code": 1}]}
{"file_path": "cloudmesh/common/Shell.py", "project": "cloudmesh/cloudmesh-common", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "_id": "62ece4992e6aefcf4aabbd7c", "code": ["\ndef oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())\n\n\ndef findreplace(filename, old, new):\n    for line in fileinput.input(filename, inplace=True):\n        print(line.replace(old, new), end='')\n\n\ndef readfile(filename):\n    \"\"\"\n    Reads a file into a string\n    :param filename: The filename\n    :return: The string content\n    \"\"\"\n    with open(filename, 'r') as f:\n        content = f.read()\n    return content\n\n\ndef writefile(filename, content):\n    \"\"\"\n    writes a file\n    :param filename: the filename\n    :param content:  the content\n    :return:\n    \"\"\"\n    with open(filename, 'w') as outfile:\n        outfile.write(content)\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef oneline(script, seperator=\" && \"):\n        \n        return seperator.join(script.splitlines())\n\n\ndef findreplace(filename, old, new):\n    for line in fileinput.input(filename, inplace=True):\n        print(line.replace(old, new), end='')\n\n\ndef readfile(filename):\n    \"\"\"\n    Reads a file into a string\n    :param filename: The filename\n    :return: The string content\n    \"\"\"\n    with open(filename, 'r') as f:\n        content = f.read()\n    return content\n\n\ndef writefile(filename, content):\n    \"\"\"\n    writes a file\n    :param filename: the filename\n    :param content:  the content\n    :return:\n    \"\"\"\n    with open(filename, 'w') as outfile:\n        outfile.write(content)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "release_dashboard/templatetags/rd_extras.py", "project": "sipwise/repoapi", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "_id": "62ece4982e6aefcf4aabbd6a", "code": ["\ndef replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef replace_slash(value, arg):\n    \n    return value.replace(\"/\", arg)\n\n\ndef replace_dash(value, arg):\n    \n    return value.replace(\"-\", arg)\n\n\ndef replace_colon(value, arg):\n    \n    return value.replace(\":\", arg)\n\n\ndef remove_slash(value):\n    \n    return value.replace(\"/\", \"\")\n\n\ndef remove_colon(value):\n    \n    return value.replace(\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef replace_dots(value, arg):\n    \n    return value.replace(\".\", arg)\n\n\ndef replace_slash(value, arg):\n    \n    return value.replace(\"/\", arg)\n\n\ndef replace_dash(value, arg):\n    \n    return value.replace(\"-\", arg)\n\n\ndef replace_colon(value, arg):\n    \n    return value.replace(\":\", arg)\n\n\ndef remove_slash(value):\n    \n    return value.replace(\"/\", \"\")\n\n\ndef remove_colon(value):\n    \n    return value.replace(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "docopt/__init__.py", "project": "bazaar-projects/docopt-ng", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "_id": "62ece4982e6aefcf4aabbd76", "code": ["\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        collected = [] if collected is None else collected\n        increment: Any | None = None\n        pos, match = self.single_match(left)\n        if match is None or pos is None:\n            return False, left, collected\n        left_ = left[:pos] + left[(pos + 1) :]\n        same_name = [a for a in collected if a.name == self.name]\n        if type(self.value) == int and len(same_name) > 0:\n            if isinstance(same_name[0].value, int):\n                same_name[0].value += 1\n            return True, left_, collected\n        if type(self.value) == int and not same_name:\n            match.value = 1\n            return True, left_, collected + [match]\n\n'''\n   "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match(\n        self, left: list[LeafPattern], collected: list[Pattern] = None\n    ) -> tuple[bool, list[LeafPattern], list[Pattern]]:\n        \n        collected = [] if collected is None else collected\n        increment: Any | None = None\n        pos, match = self.single_match(left)\n        if match is None or pos is None:\n            return False, left, collected\n        left_ = left[:pos] + left[(pos + 1) :]\n        same_name = [a for a in collected if a.name == self.name]\n        if type(self.value) == int and len(same_name) > 0:\n            if isinstance(same_name[0].value, int):\n                same_name[0].value += 1\n            return True, left_, collected\n        if type(self.value) == int and not same_name:\n            match.value = 1\n            return True, left_, collected + [match]\n\n'''\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "gopad/rest.py", "project": "gopad/gopad-python", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "_id": "62ece4992e6aefcf4aabbd84", "code": ["\ndef is_ipv4(target):\n    \n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n\ndef is_ipv6(target):\n    \n    try:\n        socket.inet_pton(socket.AF_INET6, target)\n        return True\n    except socket.error:\n        return False\n\ndef is_ipv4_or_ipv6(target):\n    \n    return is_ipv4(target) or is_ipv6(target)\n\ndef is_ip(target):\n    \n    return is_ipv4(target) or is_ipv6(target)\n\ndef is_ip"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef is_ipv4(target):\n    \n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n\ndef is_ipv6(target):\n    \n    try:\n        socket.inet_pton(socket.AF_INET6, target)\n        return True\n    except socket.error:\n        return False\n\ndef is_ipv4_or_ipv6(target):\n    \n    return is_ipv4(target) or is_ipv6(target)\n\ndef is_ip(target):\n    \n    return is_ipv4(target) or is_ipv6(target)\n\ndef is_ip", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "_id": "62b43427903eeb48555d3ea5", "code": ["\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\n\tdef convert_many(\n\t\t\tself,\n\t\t\tsql: str,\n\t\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[str, List[List[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\n\tdef formatmany(\n\t\t\tself,\n\t\t\tsql: SqlStr,\n\t\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\n\tdef convert_many(\n\t\t\tself,\n\t\t\tsql: str,\n\t\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[str, List[List[Any]]]:\n\t\t\n\t\traise NotImplementedError(\"{} must implement convert().\".format(self.__class__.__qualname__))\n\n\n\tdef formatmany(\n\t\t\tself,\n\t\t\tsql: SqlStr,\n\t\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "_id": "62b43428903eeb48555d3eaa", "code": ["\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{!r} is not a sequence or mapping.\".format(first_params))\n\n\t\tqmark_sql = self._converter.convert(sql)\n\t\tqmark_many_params = [self._converter.convert_many(qmark_sql, params) for params in iter_params]\n\n\t\treturn qmark_sql, qmark_many_params\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n\t\t\n\n\t\titer_params = iter(many_params)\n\t\tfirst_params = next(iter_params)\n\n\t\tif is_sequence(first_params):\n\t\t\tpass\n\t\telif isinstance(first_params, Mapping):\n\t\t\tfirst_params = self._mapping_as_sequence(first_params)  # noqa\n\t\telse:\n\t\t\traise TypeError(\"many_params[0]:{!r} is not a sequence or mapping.\".format(first_params))\n\n\t\tqmark_sql = self._converter.convert(sql)\n\t\tqmark_many_params = [self._converter.convert_many(qmark_sql, params) for params in iter_params]\n\n\t\treturn qmark_sql, qmark_many_params\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "_id": "62b43425903eeb48555d3ea1", "code": ["\ndef _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in-style parameter regular expression')\n\n\ndef __create_strip_comment_regexes(\n\t\tself,\n\t\tstrip_comments: Optional[Sequence[Union[str, Tuple[str, str]]]],\n) -> List[Pattern]:\n\t\t\n\t\treturn [re.compile(r'comment regex') for _ in range(len(strip_comments))]\n\n\ndef _create_converter(\n\t\tself,\n\t\tin_style: Union[str, _styles.Style],\n\t\tout_style: str,\n\t\tescape_char: Optional[str],\n\t\tstrip_comments: Optional[Sequence[Union[str, Tuple[str, str]]]] = None,\n) -> 'Converter':\n\t\t'''\n\t"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_in_regex(self) -> Pattern:\n\t\t\n\t\treturn re.compile(r'in-style parameter regular expression')\n\n\ndef __create_strip_comment_regexes(\n\t\tself,\n\t\tstrip_comments: Optional[Sequence[Union[str, Tuple[str, str]]]],\n) -> List[Pattern]:\n\t\t\n\t\treturn [re.compile(r'comment regex') for _ in range(len(strip_comments))]\n\n\ndef _create_converter(\n\t\tself,\n\t\tin_style: Union[str, _styles.Style],\n\t\tout_style: str,\n\t\tescape_char: Optional[str],\n\t\tstrip_comments: Optional[Sequence[Union[str, Tuple[str, str]]]] = None,\n) -> 'Converter':\n\t\t'''\n\t", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "_id": "62b43426903eeb48555d3ea2", "code": ["\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()\n\ndef __create_in_regex(\n\t\tself,\n\t\tescape_char: str,\n\t\tin_obj: _styles.Style,\n\t\tout_obj: _styles.Style,\n) -> re.Pattern:\n\t\t\n\t\tregex_parts = []\n\t\t\n\t\tif (\n\t\t\t\tescape_char\n\t\t\t\tand out_obj.escape_char == '%'\n\t\t\t\tand in_obj.escape_char != '%'\n\t\t):\n\t\t\tregex_parts.append(escape_char)\n\t\t\n\t\tregex_parts.append('((?:\\\\\\\\.|[^\\\\\\\\])*)')\n\t\t\n\t\tif (\n\t\t\t\tescape_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _create_converter(self) -> _converting._Converter:\n\t\t\n\t\treturn _converting._Converter()\n\ndef __create_in_regex(\n\t\tself,\n\t\tescape_char: str,\n\t\tin_obj: _styles.Style,\n\t\tout_obj: _styles.Style,\n) -> re.Pattern:\n\t\t\n\t\tregex_parts = []\n\t\t\n\t\tif (\n\t\t\t\tescape_char\n\t\t\t\tand out_obj.escape_char == '%'\n\t\t\t\tand in_obj.escape_char != '%'\n\t\t):\n\t\t\tregex_parts.append(escape_char)\n\t\t\n\t\tregex_parts.append('((?:\\\\\\\\.|[^\\\\\\\\])*)')\n\t\t\n\t\tif (\n\t\t\t\tescape_", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["\ndef cached(cache, key=hashkey, lock=None):\n    \n    if lock is None:\n        def decorator(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    pass  # key not found\n                result = func(*args, **kwargs)\n                try:\n                    cache[k] = result\n                except ValueError:\n                    pass  # value too large\n                return result\n            return wrapper\n    else:\n        @functools.wraps(func)\n        def decorator(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                with lock:\n                    try:\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef cached(cache, key=hashkey, lock=None):\n    \n    if lock is None:\n        def decorator(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                try:\n                    return cache[k]\n                except KeyError:\n                    pass  # key not found\n                result = func(*args, **kwargs)\n                try:\n                    cache[k] = result\n                except ValueError:\n                    pass  # value too large\n                return result\n            return wrapper\n    else:\n        @functools.wraps(func)\n        def decorator(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                k = key(*args, **kwargs)\n                with lock:\n                    try:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "_id": "62b8d24048ba5a41d1c3f49f", "code": ["\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundTTLCache(ttl, timer), typed)\n    elif callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(ttl_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info()."], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundTTLCache(ttl, timer), typed)\n    elif callable(maxsize):\n        return _cache(TTLCache(128, ttl, timer), typed)(maxsize)\n    else:\n        return _cache(TTLCache(maxsize, ttl, timer), typed)\n\nif __name__ == \"__main__\":\n    isT = True\n    try:\n        DDDD = staticmethod(ttl_cache)\n        cached = DDDD(10, False)(lambda n: n)\n        res1 = cached.cache_parameters()[\"maxsize\"] == 10 and cached.cache_parameters()[\"typed\"] == False\n        res2 = cached.cache_info().hits == 0 and cached.cache_info().", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "_id": "62b8d23b48ba5a41d1c3f49a", "code": ["\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(R"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef mru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(maxsize), typed)\n\n\ndef rr_cache(maxsize=128, choice=random.choice, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(RRCache(128, choice), typed)(maxsize)\n    else:\n        return _cache(R", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "_id": "62b8d23948ba5a41d1c3f498", "code": ["\ndef lru_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n\n\ndef mru_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(max"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lru_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(maxsize), typed)\n\n\ndef mru_cache(maxsize=128, typed=False):\n    \n\n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(MRUCache(128), typed)(maxsize)\n    else:\n        return _cache(MRUCache(max", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "_id": "62b8d23748ba5a41d1c3f496", "code": ["\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)\n\n\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache("], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef lfu_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LFUCache(128), typed)(maxsize)\n    else:\n        return _cache(LFUCache(maxsize), typed)\n\n\ndef lru_cache(maxsize=128, typed=False):\n    \n    if maxsize is None:\n        return _cache(_UnboundCache(), typed)\n    elif callable(maxsize):\n        return _cache(LRUCache(128), typed)(maxsize)\n    else:\n        return _cache(LRUCache(", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "_id": "62b8d22f48ba5a41d1c3f488", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\n\ndef popitem(self):\n    \n    try:\n        key = next(iter(self.__order))\n    except StopIteration:\n        raise KeyError('%s is empty' % type(self).__name__) from None\n    else:\n        return (key, self.pop(key))\n\n\n\ndef popitem(self):\n    \n    try"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\n\ndef popitem(self):\n    \n    try:\n        key = next(iter(self.__order))\n    except StopIteration:\n        raise KeyError('%s is empty' % type(self).__name__) from None\n    else:\n        return (key, self.pop(key))\n\n\n\ndef popitem(self):\n    \n    try", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "_id": "62b8d22a48ba5a41d1c3f47e", "code": ["\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            value = self[key]\n        else:\n            self[key] = default\n            value = default\n        return value\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            value = self[key]\n        else:\n            self[key] = default\n            value = default\n        return value\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "_id": "62b8d22948ba5a41d1c3f47c", "code": ["\ndef get(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            return default\n\ndef pop(self, key, default=__marker):\n        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised.\n        '''\n        if key in self:\n            value = self[key]\n            del self[key]\n            return value\n        elif default is __marker:\n            raise KeyError(key)\n        else:\n            return default\n\n\n    def setdefault(self, key, default=None):\n        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'\n        if key in self:\n            return self["], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get(self, key, default=None):\n        \n        try:\n            return self[key]\n        except KeyError:\n            return default\n\ndef pop(self, key, default=__marker):\n        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised.\n        '''\n        if key in self:\n            value = self[key]\n            del self[key]\n            return value\n        elif default is __marker:\n            raise KeyError(key)\n        else:\n            return default\n\n\n    def setdefault(self, key, default=None):\n        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'\n        if key in self:\n            return self[", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "_id": "62b8d22548ba5a41d1c3f472", "code": ["\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n                result = c[k] = method(self, *args, **kwargs)\n                return result\n        return decorator\n    return decorator\n\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef cachedmethod(cache, key=hashkey, lock=None):\n    \n    def decorator(method):\n        if lock is None:\n            def wrapper(self, *args, **kwargs):\n                c = cache(self)\n                if c is None:\n                    return method(self, *args, **kwargs)\n                k = key(*args, **kwargs)\n                try:\n                    return c[k]\n                except KeyError:\n                    pass  # key not found\n                result = c[k] = method(self, *args, **kwargs)\n                return result\n        return decorator\n    return decorator\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "_id": "62b8d22a48ba5a41d1c3f47d", "code": ["\ndef pop(self, key, default=__marker):\n        \n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n\ndef __repr__(self, _repr_running=None):\n        \n        if not _repr_running: _repr_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop(self, key, default=__marker):\n        \n        \n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n\n\ndef setdefault(self, key, default=None):\n        \n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n\n\ndef __repr__(self, _repr_running=None):\n        \n        if not _repr_running: _repr_", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "_id": "62b8d23748ba5a41d1c3f497", "code": ["\ndef popitem(self):\n        \n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            (key, _), = self.__counter.most_common(1)\n        except ValueError:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "_id": "62b8d23a48ba5a41d1c3f499", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem_passk_validte(self):\n    \n    with self.__timer as time:\n        self.expire(time)\n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem_passk(self):\n    '''Remove and return the `(key,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem_passk_validte(self):\n    \n    with self.__timer as time:\n        self.expire(time)\n        try:\n            key = next(iter(self.__links))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\ndef popitem_passk(self):\n    '''Remove and return the `(key,", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "_id": "62b8d23c48ba5a41d1c3f49b", "code": ["\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\n\n\n\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        try:\n            key = next(iter(self.__order))\n        except StopIteration:\n            raise KeyError('%s is empty' % type(self).__name__) from None\n        else:\n            return (key, self.pop(key))\n\n\n\n\n\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "_id": "62b8d23e48ba5a41d1c3f49e", "code": ["\ndef popitem(self):\n        \n        with self._timer as time:\n            self.expire(time)\n            try:\n                key = next(iter(self._links))\n            except StopIteration:\n                raise KeyError('%s is empty' % type(self).__name__) from None\n            else:\n                return (key, self.pop(key))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef popitem(self):\n        \n        with self._timer as time:\n            self.expire(time)\n            try:\n                key = next(iter(self._links))\n            except StopIteration:\n                raise KeyError('%s is empty' % type(self).__name__) from None\n            else:\n                return (key, self.pop(key))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/unit/mock/yaml_helper.py", "project": "ansible-security/ansible_collections.ibm.qradar", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "_id": "62ece4992e6aefcf4aabbd86", "code": ["\ndef _dump_string(self, obj, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)\n\ndef _dump_stream(self, obj, stream, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\ndef _loader(self, stream):\n        '''Vault related tests will want to override this.\n        Vault cases should setup a AnsibleLoader that has the vault password.'''\n        return AnsibleLoader(stream)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _dump_string(self, obj, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, Dumper=dumper)\n        else:\n            return yaml.dump(obj, Dumper=dumper, encoding=None)\n\ndef _dump_stream(self, obj, stream, dumper=None):\n        \n        if PY3:\n            return yaml.dump(obj, stream, Dumper=dumper)\n        else:\n            return yaml.dump(obj, stream, Dumper=dumper, encoding=None)\n\ndef _loader(self, stream):\n        '''Vault related tests will want to override this.\n        Vault cases should setup a AnsibleLoader that has the vault password.'''\n        return AnsibleLoader(stream)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "apphelpers/loggers.py", "project": "scrolltech/apphelpers", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "_id": "62ece4992e6aefcf4aabbd87", "code": ["\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n\n    from loguru import logger\n    import os\n    import sys\n\n    log_fmt = '[%(asctime)s] %(levelname)s::%(module)s:%(lineno)d ' \\\n              '[%(process)d] %(message)s'\n    logger.add(sys.stderr, format=log_fmt, level='INFO')\n    logger.add(logfile, format=log_fmt, level='DEBUG')\n\n    return logger\n\n\ndef build_db_logger(name='db', logfile='db.log', debug=True):\n    \n\n    from loguru import logger\n    import os\n    import sys\n\n    log_fmt = '[%(asctime)s] %(levelname)s::%(module)s:%"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef build_app_logger(name='app', logfile='app.log', debug=True):\n    \n\n    from loguru import logger\n    import os\n    import sys\n\n    log_fmt = '[%(asctime)s] %(levelname)s::%(module)s:%(lineno)d ' \\\n              '[%(process)d] %(message)s'\n    logger.add(sys.stderr, format=log_fmt, level='INFO')\n    logger.add(logfile, format=log_fmt, level='DEBUG')\n\n    return logger\n\n\ndef build_db_logger(name='db', logfile='db.log', debug=True):\n    \n\n    from loguru import logger\n    import os\n    import sys\n\n    log_fmt = '[%(asctime)s] %(levelname)s::%(module)s:%", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "_id": "62b46740d2f69a53b466171a", "code": ["\ndef pretty(self, indent=0, debug=False):\n        \n        debug_details = ''\n        if debug:\n            debug_details += f'<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>'\n        return f\"{' '*indent}{self.__class__.__name__}({debug_details}{repr(self.obj)})\"\nclass _TRUE(Function):\n    \n    def __init__(self):\n        super(_TRUE, self).__init__()\n    \n    def __hash__(self):\n        return hash(True)\n    def __eq__(self, other):\n        return self is other or other is True or isinstance(other, _TRUE)\n    def __str__(self"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pretty(self, indent=0, debug=False):\n        \n        debug_details = ''\n        if debug:\n            debug_details += f'<isliteral={self.isliteral!r}, iscanonical={self.iscanonical!r}>'\n        return f\"{' '*indent}{self.__class__.__name__}({debug_details}{repr(self.obj)})\"\nclass _TRUE(Function):\n    \n    def __init__(self):\n        super(_TRUE, self).__init__()\n    \n    def __hash__(self):\n        return hash(True)\n    def __eq__(self, other):\n        return self is other or other is True or isinstance(other, _TRUE)\n    def __str__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "_id": "62b46746d2f69a53b4661722", "code": ["\ndef absorb(self, args):\n        \n        args = list(args)\n        if not args:\n            args = list(self.args)\n        i = 0\n        while i < len(args):\n            absorber = args[i]\n            j = 0\n            while j < len(args):\n                if j == i:\n                    j += 1\n                    continue\n                target = args[j]\n                if not isinstance(target, self.dual):\n                    j += 1\n                    continue\n                if isinstance(absorber, self):\n                    if isinstance(target, absorber):\n                        args.pop(i)\n                        args.pop(j - 1)\n                        args.append(absorber.absorb(args))\n                        break\n"], "level": "class_runnable", "generate_results": []}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "_id": "62b45df05108cfac7f2109ce", "code": ["\ndef validate(self, path):\n        \n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error(\n                'E003e',\n                path=path)\n            return False\n        namastes = find_namastes(0, pyfs=self.obj_fs)\n        if len(namastes) > 1:\n            self.log.error(\n                'E049',\n                num_namastes=len(nam"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, path):\n        \n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error(\n                'E003e',\n                path=path)\n            return False\n        namastes = find_namastes(0, pyfs=self.obj_fs)\n        if len(namastes) > 1:\n            self.log.error(\n                'E049',\n                num_namastes=len(nam", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "_id": "62b45df15108cfac7f2109dc", "code": ["\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\n\ndef __str__(self):\n        \n        return self.status_str()\n\n\ndef validate(self, path):\n        '''Validate OCFL object at path, or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\n\ndef __str__(self):\n        \n        return self.status_str()\n\n\ndef validate(self, path):\n        '''Validate OCFL object at path, or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "_id": "62b45df15108cfac7f2109dd", "code": ["\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\n\ndef __str__(self):\n        \n        return self.status_str()\n\n\ndef validate(self, path):\n        '''Validate OCFL object at path or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef status_str(self, prefix=''):\n        \n        return self.log.status_str(prefix=prefix)\n\n\ndef __str__(self):\n        \n        return self.status_str()\n\n\ndef validate(self, path):\n        '''Validate OCFL object at path or pyfs root.\n\n        Returns True if valid (warnings permitted), False otherwise.\n        '''\n        self.initialize()\n        try:\n            if isinstance(path, str):\n                self.obj_fs = open_fs(path)\n            else:\n                self.obj_fs = path\n                path = self.obj_fs.desc('')\n        except fs.errors.CreateFailed:\n            self.log.error('E003e', path=path)\n            return False", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "_id": "62b45e135108cfac7f2109f4", "code": ["\ndef is_valid(self, identifier):\n  \n  return True\n\ndef encode(self, identifier):\n  \n  return quote_plus(identifier)\n\ndef decode(self, identifier):\n  \n  return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n  \n  raise Exception(\"No yet implemented\")\n\ndef relative_path_to_identifier(self, path):\n  \n  raise Exception(\"No yet implemented\")\n\ndef path_to_identifier(self, path, root=None):\n  \n  if root is not None:\n    path = self.strip_root(path, root)\n  raise Exception(\""], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_valid(self, identifier):\n  \n  return True\n\ndef encode(self, identifier):\n  \n  return quote_plus(identifier)\n\ndef decode(self, identifier):\n  \n  return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n  \n  raise Exception(\"No yet implemented\")\n\ndef relative_path_to_identifier(self, path):\n  \n  raise Exception(\"No yet implemented\")\n\ndef path_to_identifier(self, path, root=None):\n  \n  if root is not None:\n    path = self.strip_root(path, root)\n  raise Exception(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "_id": "62b45e145108cfac7f210a07", "code": ["\ndef validate(self, inventory, extract_spec_version=False):\n        \n        if extract_spec_version:\n            if 'type' in inventory:\n                spec_version = inventory['type']\n            else:\n                spec_version = self.spec_version\n        else:\n            spec_version = self.spec_version\n\n\n\n\n    def validate_manifest(self, manifest):\n        \"\"\"Validate manifest block in inventory.\n\n        Returns:\n          * manifest_files - a mapping from file to digest for each file in\n              the manifest\n          * manifest_files_correct_format - a simple list of the manifest file\n              path that passed initial checks. They need to be checked for valid\n              version directories later, when we know what version directories\n              are valid\n          * unnormalized_digests - a set of the original"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate(self, inventory, extract_spec_version=False):\n        \n        if extract_spec_version:\n            if 'type' in inventory:\n                spec_version = inventory['type']\n            else:\n                spec_version = self.spec_version\n        else:\n            spec_version = self.spec_version\n\n\n\n\n    def validate_manifest(self, manifest):\n        \"\"\"Validate manifest block in inventory.\n\n        Returns:\n          * manifest_files - a mapping from file to digest for each file in\n              the manifest\n          * manifest_files_correct_format - a simple list of the manifest file\n              path that passed initial checks. They need to be checked for valid\n              version directories later, when we know what version directories\n              are valid\n          * unnormalized_digests - a set of the original", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "_id": "62b45e145108cfac7f210a09", "code": ["\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        digests_not_in_manifest = set()\n        for digest in digests_used:\n            if digest not in manifest_files:\n                digests_not_in_manifest.add(digest)\n        if len(digests_not_in_manifest) > 0:\n            self.error(\"E026a\", digests=\", \".join(sorted(digests_not_in_manifest)))\n\n    def digest_regex(self):\n        \n        try:\n            return digest_regex(self.digest_algorithm)\n        except ValueError:\n            if not self.lax_digests:\n                self.error('E026a', digest=self.digest_algorithm)\n        return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef check_digests_present_and_used(self, manifest_files, digests_used):\n        \n        digests_not_in_manifest = set()\n        for digest in digests_used:\n            if digest not in manifest_files:\n                digests_not_in_manifest.add(digest)\n        if len(digests_not_in_manifest) > 0:\n            self.error(\"E026a\", digests=\", \".join(sorted(digests_not_in_manifest)))\n\n    def digest_regex(self):\n        \n        try:\n            return digest_regex(self.digest_algorithm)\n        except ValueError:\n            if not self.lax_digests:\n                self.error('E026a', digest=self.digest_algorithm)\n        return", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "_id": "62b45e165108cfac7f210a16", "code": ["\ndef validate_as_prior_version(self, prior):\n        \n        if not set(prior.all_versions) < set(self.all_versions):\n            self.error('E066a', prior_head=prior.head)\n        else:\n            if not self.content_paths < prior.content_paths:\n                self.error('E066b', prior_head=prior.head)\n            if not self.content_directories < prior.content_directories:\n                self.error('E066b', prior_head=prior.head)"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_as_prior_version(self, prior):\n        \n        if not set(prior.all_versions) < set(self.all_versions):\n            self.error('E066a', prior_head=prior.head)\n        else:\n            if not self.content_paths < prior.content_paths:\n                self.error('E066b', prior_head=prior.head)\n            if not self.content_directories < prior.content_directories:\n                self.error('E066b', prior_head=prior.head)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "_id": "62b45e165108cfac7f210a17", "code": ["\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\n\nclass InventoryValidator():\n    \"\"\"Class for OCFL Inventory Validator.\"\"\"\n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \"\"\"Initialize OCFL Inventory Validator.\"\"\"\n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory = None\n        self.id = None\n        self.digest_algorithm = 'sha512'"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef get_logical_path_map(inventory, version):\n    \n    logical_path_map = {}\n    for state in inventory:\n        logical_path = f\"{state}/{version}\"\n        logical_path_map[state] = logical_path\n    return logical_path_map\n\n\nclass InventoryValidator():\n    \"\"\"Class for OCFL Inventory Validator.\"\"\"\n\n    def __init__(self, log=None, where='???',\n                 lax_digests=False, spec_version='1.0'):\n        \"\"\"Initialize OCFL Inventory Validator.\"\"\"\n        self.log = ValidationLogger() if log is None else log\n        self.where = where\n        self.spec_version = spec_version\n        self.inventory = None\n        self.id = None\n        self.digest_algorithm = 'sha512'", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "_id": "62b45e175108cfac7f210a19", "code": ["\ndef validate_fixity(self, fixity, manifest_files):\n        \n        if self.spec_version in ['1.0']:\n            return\n        if self.spec_version in ['1.1']:\n            return\n        if self.spec_version in ['1.2']:\n            return\n\n        \n\ndef validate_fixity(self, fixity, manifest_files):\n        \n        if self.spec_version in ['1.0']:\n            return\n        if self.spec_version in ['1.1']:\n            return\n        if self.spec_version in ['"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_fixity(self, fixity, manifest_files):\n        \n        if self.spec_version in ['1.0']:\n            return\n        if self.spec_version in ['1.1']:\n            return\n        if self.spec_version in ['1.2']:\n            return\n\n        \n\ndef validate_fixity(self, fixity, manifest_files):\n        \n        if self.spec_version in ['1.0']:\n            return\n        if self.spec_version in ['1.1']:\n            return\n        if self.spec_version in ['", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "_id": "62b45e945108cfac7f210a4a", "code": ["\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        self.num_objects = 0\n        self.good_objects = 0\n        self.validate_root()\n        if validate_objects:\n            for path in sorted(self.root_fs.walk.files(filter=['.json'])):\n                if any(fnmatch.fnmatch(path, '*/.*/.*') for p in self.ignore_paths):\n                    continue\n                self.num_objects += 1\n                obj_dir = os.path.dirname(path)\n                try:\n                    self.validate_object(obj_dir, check_digests=check_digests)\n                    self.good_objects += 1\n                except ValidationException:\n                    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n        \n        self.num_objects = 0\n        self.good_objects = 0\n        self.validate_root()\n        if validate_objects:\n            for path in sorted(self.root_fs.walk.files(filter=['.json'])):\n                if any(fnmatch.fnmatch(path, '*/.*/.*') for p in self.ignore_paths):\n                    continue\n                self.num_objects += 1\n                obj_dir = os.path.dirname(path)\n                try:\n                    self.validate_object(obj_dir, check_digests=check_digests)\n                    self.good_objects += 1\n                except ValidationException:\n                    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "_id": "62b45e515108cfac7f210a3c", "code": ["\ndef initialize(self):\n        \n        return storage_root\n\n\ndef check_root_structure(self):\n    '''Check the OCFL storage root structure.\n\n    Assumed that self.root_fs filesystem is available. Raises\n    StoreException if there is an error.\n    '''\n    namastes = find_namastes(0, pyfs=self.root_fs)\n    if len(namastes) == 0:\n        raise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n    if len(namastes) > 1:\n        raise StoreException(\"Storage root %s has more than one"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef initialize(self):\n        \n        return storage_root\n\n\ndef check_root_structure(self):\n    '''Check the OCFL storage root structure.\n\n    Assumed that self.root_fs filesystem is available. Raises\n    StoreException if there is an error.\n    '''\n    namastes = find_namastes(0, pyfs=self.root_fs)\n    if len(namastes) == 0:\n        raise StoreException(\"Storage root %s lacks required 0= declaration file\" % (self.root))\n    if len(namastes) > 1:\n        raise StoreException(\"Storage root %s has more than one", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "_id": "62b45e2eb89c9fd354170232", "code": ["\ndef next_version(version):\n    \n    version_list = version.split('.')\n    last_index = len(version_list) - 1\n    last_num = int(version_list[last_index])\n    last_num += 1\n    version_list[last_index] = str(last_num)\n    return '.'.join(version_list)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef next_version(version):\n    \n    version_list = version.split('.')\n    last_index = len(version_list) - 1\n    last_num = int(version_list[last_index])\n    last_num += 1\n    version_list[last_index] = str(last_num)\n    return '.'.join(version_list)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "_id": "62b45e23e0d4551b0392c90a", "code": ["\ndef validate_version_inventories(self, version_dirs):\n        \n        for version in version_dirs:\n            if not version_has_inventory(version):\n                return False\n\n        check_content_digests(version)\n\n        return True\n\n\n    def validate_content(self, inventory, version_dirs, prior_manifest_digests, prior_fixity_digests):\n        '''Validate file presence and content against inventory.\n\n        The root inventory in `inventory` is assumed to be valid and safe to use\n        for construction of file paths etc..\n        '''\n        files_seen = set()\n        for version_dir in version_dirs:\n            try:"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef validate_version_inventories(self, version_dirs):\n        \n        for version in version_dirs:\n            if not version_has_inventory(version):\n                return False\n\n        check_content_digests(version)\n\n        return True\n\n\n    def validate_content(self, inventory, version_dirs, prior_manifest_digests, prior_fixity_digests):\n        '''Validate file presence and content against inventory.\n\n        The root inventory in `inventory` is assumed to be valid and safe to use\n        for construction of file paths etc..\n        '''\n        files_seen = set()\n        for version_dir in version_dirs:\n            try:", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "_id": "62b45e21e0d4551b0392c8ed", "code": ["\ndef find_path_type(path):\n    \n    if os.path.isdir(path):\n        return \"root\"\n    if not os.path.isfile(path):\n        return \"file\"\n    try:\n        if len(open_fs(path, create=False).listdir()) == 0:\n            return \"empty file\"\n        return \"inventory\"\n    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):\n        return \"file that isn't an inventory\"\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef find_path_type(path):\n    \n    if os.path.isdir(path):\n        return \"root\"\n    if not os.path.isfile(path):\n        return \"file\"\n    try:\n        if len(open_fs(path, create=False).listdir()) == 0:\n            return \"empty file\"\n        return \"inventory\"\n    except (fs.opener.errors.OpenerError, fs.errors.CreateFailed):\n        return \"file that isn't an inventory\"\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "_id": "62ece4982e6aefcf4aabbd64", "code": ["\ndef strip_root(self, path, root):\n        \n        root = root.rstrip(os.sep)  # ditch any trailing path separator\n        if os.path.commonprefix((path, root)) == root:\n            return os.path.relpath(path, start=root)\n        raise Exception(\"Path %s is not in root %s\" % (path, root))\n\ndef is_valid(self, identifier):\n        return True\n\ndef encode(self, identifier):\n        \n        return quote_plus(identifier)\n\ndef decode(self, identifier):\n        \n        return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n        \n        return os.path.join(self.root,"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef strip_root(self, path, root):\n        \n        root = root.rstrip(os.sep)  # ditch any trailing path separator\n        if os.path.commonprefix((path, root)) == root:\n            return os.path.relpath(path, start=root)\n        raise Exception(\"Path %s is not in root %s\" % (path, root))\n\ndef is_valid(self, identifier):\n        return True\n\ndef encode(self, identifier):\n        \n        return quote_plus(identifier)\n\ndef decode(self, identifier):\n        \n        return unquote_plus(identifier)\n\ndef identifier_to_path(self, identifier):\n        \n        return os.path.join(self.root,", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "_id": "6306292052e177c0ba469f09", "code": ["\ndef identify_request(request: RequestType):\n    \n    return False\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType):\n    \n    return False\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "_id": "6306292152e177c0ba469f0d", "code": ["\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef identify_request(request: RequestType) -> bool:\n    \n    try:\n        data = json.loads(decode_if_bytes(request.body))\n        if \"events\" in data:\n            return True\n    except Exception:\n        pass\n    return False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "_id": "6306292252e177c0ba469f11", "code": ["\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime(\n        '%Y-%m-%dT%H:%M:%SZ'\n    )\n\n\ndef struct_to_xml(node, struct):\n    '''\n    Turn a list of dicts into XML nodes with tag names taken from the dict\n    keys and element text taken from dict values. This is a list of dicts\n    so that the XML nodes can be ordered in the XML output.\n    '''\n    for obj in struct:\n        for k, v in obj.items():\n            etree.SubElement(node, k).text = v\n\n\ndef get_full_xml_representation(entity, private_key):\n    \"\"\"Get full XML representation of an entity.\n\n    This contains the <XML><post>..</post></XML>"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef format_dt(dt):\n    \n    return ensure_timezone(dt).astimezone(tzutc()).strftime(\n        '%Y-%m-%dT%H:%M:%SZ'\n    )\n\n\ndef struct_to_xml(node, struct):\n    '''\n    Turn a list of dicts into XML nodes with tag names taken from the dict\n    keys and element text taken from dict values. This is a list of dicts\n    so that the XML nodes can be ordered in the XML output.\n    '''\n    for obj in struct:\n        for k, v in obj.items():\n            etree.SubElement(node, k).text = v\n\n\ndef get_full_xml_representation(entity, private_key):\n    \"\"\"Get full XML representation of an entity.\n\n    This contains the <XML><post>..</post></XML>", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "_id": "6306292352e177c0ba469f1d", "code": ["\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n    \n    \n    if replacer:\n        pass\n    return tags, replaced_text\n\n\ndef get_path_from_url(url: str) -> str:\n    \n    parsed = urlparse(url)\n    return parsed.path\n\n\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n    \n    def link_attributes(attrs, new=False):\n        \n        href_key = (None"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    \n    tags = set()\n    replaced_text = text\n    \n    \n    if replacer:\n        pass\n    return tags, replaced_text\n\n\ndef get_path_from_url(url: str) -> str:\n    \n    parsed = urlparse(url)\n    return parsed.path\n\n\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n    \n    def link_attributes(attrs, new=False):\n        \n        href_key = (None", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "_id": "6306292352e177c0ba469f1e", "code": ["\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, 'href')\n        if attrs.get(href_key).startswith('/'):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs\n\n    pattern = r'(https?://[^\\s]+)'\n\n    text = re.sub(pattern, r'<a href=\"\\1\">\\1</a>', text)\n\n    return text\n\n\ndef test_tag"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef process_text_links(text):\n    \n    link_callbacks = [callbacks.nofollow, callbacks.target_blank]\n\n    def link_attributes(attrs, new=False):\n        \n        href_key = (None, 'href')\n        if attrs.get(href_key).startswith('/'):\n            return attrs\n\n        for callback in link_callbacks:\n            attrs = callback(attrs, new)\n        return attrs\n\n    pattern = r'(https?://[^\\s]+)'\n\n    text = re.sub(pattern, r'<a href=\"\\1\">\\1</a>', text)\n\n    return text\n\n\ndef test_tag", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "_id": "6306292652e177c0ba469f34", "code": ["\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')\n\n\ndef fetch_document(url=None, host=None, path=\"/\", timeout=10, raise_ssl_errors=True, extra_headers=None, cache=True, **kwargs):\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef fetch_content_type(url: str) -> Optional[str]:\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when fetching url %s\", ex, url)\n    else:\n        return response.headers.get('Content-Type')\n\n\ndef fetch_document(url=None, host=None, path=\"/\", timeout=10, raise_ssl_errors=True, extra_headers=None, cache=True, **kwargs):\n    \n    try:\n        response = session.head(url, headers={'user-agent': USER_AGENT}, timeout=10)\n    except RequestException as ex:\n        logger.warning(\"fetch_content_type - %s when", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "_id": "6306292a52e177c0ba469f41", "code": ["\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\n\ndef validate_handle(handle):\n    '''Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\n\ndef with_slash(url):\n    '''\n    Add a slash at the end of a url if it doesn't exist.\n    '''\n    if url.endswith('/'):\n        return url\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef test_tag(tag: str) -> bool:\n    \n    if not tag:\n        return False\n    for char in ILLEGAL_TAG_CHARS:\n        if char in tag:\n            return False\n    return True\n\n\ndef validate_handle(handle):\n    '''Very basic handle validation as per\n    https://diaspora.github.io/diaspora_federation/federation/types.html#diaspora-id\n    '''\n    return re.match(r\"[a-z0-9\\-_.]+@[^@/]+\\.[^@/]+\", handle, flags=re.IGNORECASE) is not None\n\n\ndef with_slash(url):\n    '''\n    Add a slash at the end of a url if it doesn't exist.\n    '''\n    if url.endswith('/'):\n        return url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "_id": "6306298b52e177c0ba469fdc", "code": ["\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child)\n    return result\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        raise InvalidSignatureError(\"sender_handle and entity_handle don't match! sender_handle: %s, entity_handle: %s\" %\n                                    (sender_handle, entity_handle))\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef xml_children_as_dict(node):\n    \n    result = {}\n    for child in node:\n        if child.tag not in result:\n            result[child.tag] = []\n        result[child.tag].append(child)\n    return result\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        raise InvalidSignatureError(\"sender_handle and entity_handle don't match! sender_handle: %s, entity_handle: %s\" %\n                                    (sender_handle, entity_handle))\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "_id": "6306299052e177c0ba469fe8", "code": ["\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    if sender_handle != entity_handle:\n        logger.warning(\"sender_handle and entity_handle don't match, aborting! sender_handle: %s, entity_handle: %s\",\n                       sender_handle, entity_handle)\n        return False\n    return True\n\n\ndef check_sender_and_entity_handle_match(sender_handle, entity_handle):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "_id": "630629b952e177c0ba46a043", "code": ["\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        'links': [\n            {\n                'rel': 'http://nodeinfo.diaspora.software/ns/schema/1.0',\n                'href': '{url}{path}'.format(\n                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH\n                )\n            }\n        ]\n    }\n\n\ndef get_nodeinfo_well_known_document2(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n\n\ndef get_nodeinfo_well_known_document3(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n\n\ndef get_nodeinfo_well_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_nodeinfo_well_known_document(url, document_path=None):\n    \n    return {\n        'links': [\n            {\n                'rel': 'http://nodeinfo.diaspora.software/ns/schema/1.0',\n                'href': '{url}{path}'.format(\n                    url=url, path=document_path or NODEINFO_DOCUMENT_PATH\n                )\n            }\n        ]\n    }\n\n\ndef get_nodeinfo_well_known_document2(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n\n\ndef get_nodeinfo_well_known_document3(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n\n\ndef get_nodeinfo_well_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "_id": "630629d052e177c0ba46a0a1", "code": ["\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef verify_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef verify_signature(public_key, doc, signature):\n    '''Verify the signed XML elements to"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef verify_relayable_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef verify_signature(public_key, doc, signature):\n    \n    hashed_doc = hash(doc)\n    \n    is_valid = verify_signature(public_key, hashed_doc, signature)\n    \n    return is_valid\n\ndef verify_signature(public_key, doc, signature):\n    '''Verify the signed XML elements to", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "_id": "630629e052e177c0ba46a0c4", "code": ["\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        'hcard_url': None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc['links']:\n            if link['rel'] == 'http://microformats.org/profile/hcard':\n                webfinger['hcard_url'] = link['href']\n                break\n        else:\n            logger.warning('parse_diaspora_webfinger: found JSON webfinger but it has no hcard href')\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n            try:\n                webfinger['hcard_url'] = xrd.links['http://"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_diaspora_webfinger(document: str) -> Dict:\n    \n    webfinger = {\n        'hcard_url': None,\n    }\n    try:\n        doc = json.loads(document)\n        for link in doc['links']:\n            if link['rel'] == 'http://microformats.org/profile/hcard':\n                webfinger['hcard_url'] = link['href']\n                break\n        else:\n            logger.warning('parse_diaspora_webfinger: found JSON webfinger but it has no hcard href')\n            raise ValueError\n    except Exception:\n        try:\n            xrd = XRD.parse_xrd(document)\n            try:\n                webfinger['hcard_url'] = xrd.links['http://", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "_id": "630629e152e177c0ba46a0d1", "code": ["\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    try:\n        host = handle.split(\"@\")[1]\n    except (AttributeError, IndexError):\n        logger.warning(\"retrieve_webfinger_document: invalid handle given: %s\", handle)\n        return None\n    document, code, exception = fetch_document(\n        host=host, path=\"/.well-known/webfinger?resource=acct:%s\" % quote(handle),\n    )\n    if exception:\n        logger.debug(\"retrieve_webfinger_document: failed to fetch webfinger document: %s, %s\", code, exception)\n    return document\n\nif __name__ == \"__main__\":\n    isT=True\n    ist1=fetch_content_type(\"https://www.csdn.net/\")==\"text/html; charset=utf-8\" or"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    try:\n        host = handle.split(\"@\")[1]\n    except (AttributeError, IndexError):\n        logger.warning(\"retrieve_webfinger_document: invalid handle given: %s\", handle)\n        return None\n    document, code, exception = fetch_document(\n        host=host, path=\"/.well-known/webfinger?resource=acct:%s\" % quote(handle),\n    )\n    if exception:\n        logger.debug(\"retrieve_webfinger_document: failed to fetch webfinger document: %s, %s\", code, exception)\n    return document\n\nif __name__ == \"__main__\":\n    isT=True\n    ist1=fetch_content_type(\"https://www.csdn.net/\")==\"text/html; charset=utf-8\" or", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "_id": "630629e152e177c0ba46a0d2", "code": ["\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    document = try_retrieve_webfinger_document(handle)\n    if document:\n        return parse_diaspora_webfinger(document)\n    host = handle.split('@')[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace('{uri}', quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef retrieve_and_parse_diaspora_webfinger(handle):\n    \n    document = try_retrieve_webfinger_document(handle)\n    if document:\n        return parse_diaspora_webfinger(document)\n    host = handle.split('@')[1]\n    hostmeta = retrieve_diaspora_host_meta(host)\n    if not hostmeta:\n        return None\n    url = hostmeta.find_link(rels=\"lrdd\").template.replace('{uri}', quote(handle))\n    document, code, exception = fetch_document(url)\n    if exception:\n        return None\n    return parse_diaspora_webfinger(document)\n\n\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "_id": "630629e252e177c0ba46a0d6", "code": ["\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path='/.well-known/host-meta')\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef retrieve_diaspora_host_meta(host):\n    \n    document, code, exception = fetch_document(host=host, path='/.well-known/host-meta')\n    if exception:\n        return None\n    xrd = XRD.parse_xrd(document)\n    return xrd\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "_id": "630629e752e177c0ba46a0fb", "code": ["\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n    })\n    return _send_document(url, data, timeout=timeout, method=method, headers=headers, *args, **kwargs)\n\n\ndef _send_document(url, data, timeout=10, method=\"post\", headers=None, *args, **kwargs):\n    \n    if not headers:\n        headers = {}\n    if not method:\n        method = \"post\"\n    if not isinstance(url, six.string_types):\n        raise ValueError(\""], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    logger.debug(\"send_document: url=%s, data=%s, timeout=%s, method=%s\", url, data, timeout, method)\n    if not method:\n        method = \"post\"\n    headers = CaseInsensitiveDict({\n        'User-Agent': USER_AGENT,\n    })\n    return _send_document(url, data, timeout=timeout, method=method, headers=headers, *args, **kwargs)\n\n\ndef _send_document(url, data, timeout=10, method=\"post\", headers=None, *args, **kwargs):\n    \n    if not headers:\n        headers = {}\n    if not method:\n        method = \"post\"\n    if not isinstance(url, six.string_types):\n        raise ValueError(\"", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "_id": "62b87d24d292efb640a55670", "code": ["\ndef get_versions():\n    \n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n\n    try:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_versions():\n    \n\n    cfg = get_config()\n    verbose = cfg.verbose\n\n\n    try:", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "_id": "62b87d24d292efb640a5566f", "code": ["\ndef render(pieces, style):\n    \n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef render(pieces, style):\n    \n    if pieces[\"error\"]:\n        return {\n            \"version\": \"unknown\",\n            \"full-revisionid\": pieces.get(\"long\"),\n            \"dirty\": None,\n            \"error\": pieces[\"error\"],\n            \"date\": None,\n        }\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post\":", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "_id": "62b87d24d292efb640a5566d", "code": ["\ndef plus_or_dot(pieces):\n    \n    if \"+\" in rendered:\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef plus_or_dot(pieces):\n    \n    if \"+\" in rendered:\n        return \".\"\n    return \"+\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62b87d23d292efb640a5566b", "code": ["\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            if verbose:\n                print(f\"Running command: {dispcmd}\")\n            process = subprocess.Popen([command] + args,\n                                       stdout=subprocess.PIPE,\n                                      "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    assert isinstance(commands, list)\n    process = None\n\n    popen_kwargs = {}\n    if sys.platform == \"win32\":\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n        popen_kwargs[\"startupinfo\"] = startupinfo\n\n    for command in commands:\n        try:\n            dispcmd = str([command] + args)\n            if verbose:\n                print(f\"Running command: {dispcmd}\")\n            process = subprocess.Popen([command] + args,\n                                       stdout=subprocess.PIPE,\n                                      ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "_id": "62b87d23d292efb640a55668", "code": ["\ndef get_config():\n    \n    LONG_VERSION_PY: Dict[str, str] = {}\n    HANDLERS: Dict[str, Dict[str, Callable]] = {}\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg\n\n\ndef git_get_version(cfg):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef get_config():\n    \n    LONG_VERSION_PY: Dict[str, str] = {}\n    HANDLERS: Dict[str, Dict[str, Callable]] = {}\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/prestoplot/_version.py\"\n    cfg.verbose = False\n    return cfg\n\n\ndef git_get_version(cfg):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "_id": "62b87d23d292efb640a55667", "code": ["\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n\n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \n\n\n "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef register_vcs_handler(vcs, method):\n  \n\n  def decorate(f):\n    \n\n    if vcs not in HANDLERS:\n      HANDLERS[vcs] = {}\n    HANDLERS[vcs][method] = f\n    return f\n\n  return decorate\n\n\ndef run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n  \n\n\n ", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "_id": "62b8c517e0d34b282c18122e", "code": ["\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if isinstance(e, Exception):\n            e = e.__class__\n        if isinstance(e, type):\n            if issubclass(e, Exception):\n                e = e('')\n            else:\n                e = Exception(e)\n        if isinstance(e, BaseException):\n            return cls.extostr_ex(e, max_level, max_path_level)\n        return cls.extostr_obj(e, max_level, max_path_level)\n\n    @classmethod\n    def extostr_ex(cls, e, max_level=30, max_path_level=5):\n        \n        if isinstance(e, Exception):\n            e = e.__class__\n        if isinstance(e, type):\n            if issubclass"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def extostr(cls, e, max_level=30, max_path_level=5):\n        \n        if isinstance(e, Exception):\n            e = e.__class__\n        if isinstance(e, type):\n            if issubclass(e, Exception):\n                e = e('')\n            else:\n                e = Exception(e)\n        if isinstance(e, BaseException):\n            return cls.extostr_ex(e, max_level, max_path_level)\n        return cls.extostr_obj(e, max_level, max_path_level)\n\n    @classmethod\n    def extostr_ex(cls, e, max_level=30, max_path_level=5):\n        \n        if isinstance(e, Exception):\n            e = e.__class__\n        if isinstance(e, type):\n            if issubclass", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "_id": "62b8bbbfe0d34b282c181210", "code": ["\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        with codecs.open(file_name, \"a+\", encoding, \"strict\", -1) as rd:\n            return rd.write(text_buffer)\n\n    @staticmethod\n    def is_file_exist(filename):\n        \n        return os.path.exists(filename)\n\n    @staticmethod\n    def is_file_empty(filename):\n        \n        return os.path.getsize(filename) == 0\n\n    @staticmethod\n    def is_file_empty_or_none(filename):\n        \n        if"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n        \n        with codecs.open(file_name, \"a+\", encoding, \"strict\", -1) as rd:\n            return rd.write(text_buffer)\n\n    @staticmethod\n    def is_file_exist(filename):\n        \n        return os.path.exists(filename)\n\n    @staticmethod\n    def is_file_empty(filename):\n        \n        return os.path.getsize(filename) == 0\n\n    @staticmethod\n    def is_file_empty_or_none(filename):\n        \n        if", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "_id": "62b8bbbfe0d34b282c18120f", "code": ["\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        \n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer : file_name not exist, file_name=%s\", file_name)\n            return None\n        \n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n        \n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n\n@staticmethod\ndef is_file_exist(file_name"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def file_to_textbuffer(file_name, encoding):\n        \n        \n        if not FileUtility.is_file_exist(file_name):\n            logger.warning(\"file_to_textbuffer : file_name not exist, file_name=%s\", file_name)\n            return None\n        \n        rd = None\n        try:\n            rd = codecs.open(file_name, \"r\", encoding, \"strict\", -1)\n        \n            return rd.read()\n        except IOError as e:\n            logger.warning(\"file_to_textbuffer : IOError, ex=%s\", SolBase.extostr(e))\n            return None\n\n\n@staticmethod\ndef is_file_exist(file_name", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "_id": "62b8bbbce0d34b282c18120d", "code": ["\n@staticmethod\n    def is_file_exist(file_name):\n        \n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n        return os.path.isfile(file_name)\n    @staticmethod\n    def is_dir_exist(dir_name):\n        \n        if dir_name is None:\n            logger.warning(\"is_dir_exist : dir_name is None\")\n            return False\n        elif not isinstance(dir_name, str):\n            logger.warning(\"is_dir_"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@staticmethod\n    def is_file_exist(file_name):\n        \n        if file_name is None:\n            logger.warning(\"is_file_exist : file_name is None\")\n            return False\n        elif not isinstance(file_name, str):\n            logger.warning(\"is_file_exist : file_name not a text_type, className=%s\", SolBase.get_classname(file_name))\n            return False\n        return os.path.isfile(file_name)\n    @staticmethod\n    def is_dir_exist(dir_name):\n        \n        if dir_name is None:\n            logger.warning(\"is_dir_exist : dir_name is None\")\n            return False\n        elif not isinstance(dir_name, str):\n            logger.warning(\"is_dir_", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "_id": "62b8b99de0d34b282c1811f8", "code": ["\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n\n    @classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        '''Global initialization, to call asap.\n        Apply gevent stuff & default logging configuration.'''\n        cls._voodoo_initialized = False\n        cls._master_process = True\n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n\n        if _master_process:\n            if not _voodoo_initialized:\n                if init_logging:\n                    cls._logging_init()\n                if aggressive:\n                    cls._voodoo_init_aggressive()\n                else:\n                    cls._voodoo_init_passive()\n               "], "level": "plib_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def _reset_logging(cls):\n        \n        cls._logging_initialized = False\n\n    @classmethod\n    def voodoo_init(cls, aggressive=True, init_logging=True):\n        '''Global initialization, to call asap.\n        Apply gevent stuff & default logging configuration.'''\n        cls._voodoo_initialized = False\n        cls._master_process = True\n        cls._logging_initialized = False\n        cls._voodoo_initialized = False\n\n        if _master_process:\n            if not _voodoo_initialized:\n                if init_logging:\n                    cls._logging_init()\n                if aggressive:\n                    cls._voodoo_init_aggressive()\n                else:\n                    cls._voodoo_init_passive()\n               ", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "_id": "62b8b59feb7e40a82d2d1291", "code": ["\ndef _getTargetClass(self):\n        \n        raise NotImplementedError\n\ndef _getFallbackClass(self):\n        \n        raise NotImplementedError\n\ndef test_optimizations(self):\n    used = self._getTargetClass()\n    fallback = self._getFallbackClass()\n\n    if _should_attempt_c_optimizations():\n        self.assertIsNot(used, fallback)\n    else:\n        self.assertIs(used, fallback)\n\ndef _getTargetClass(self):\n    '''Define this to return the implementation in use, without the 'Py' or 'Fallback' suffix"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _getTargetClass(self):\n        \n        raise NotImplementedError\n\ndef _getFallbackClass(self):\n        \n        raise NotImplementedError\n\ndef test_optimizations(self):\n    used = self._getTargetClass()\n    fallback = self._getFallbackClass()\n\n    if _should_attempt_c_optimizations():\n        self.assertIsNot(used, fallback)\n    else:\n        self.assertIs(used, fallback)\n\ndef _getTargetClass(self):\n    '''Define this to return the implementation in use, without the 'Py' or 'Fallback' suffix", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "_id": "62b8b590eb7e40a82d2d1275", "code": ["\ndef _legacy_mergeOrderings(orderings):\n    \n    seen = set()\n    result = []\n    for ordering in orderings:\n        for o in ordering:\n            if o not in seen:\n                seen.add(o)\n                result.append(o)\n    return result\n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n        result[i:i] = ob.__bases__\n    return result\n\ndef _legacy_mergeOrderings(orderings):\n    '''"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _legacy_mergeOrderings(orderings):\n    \n    seen = set()\n    result = []\n    for ordering in orderings:\n        for o in ordering:\n            if o not in seen:\n                seen.add(o)\n                result.append(o)\n    return result\n\ndef _legacy_flatten(begin):\n    result = [begin]\n    i = 0\n    for ob in iter(result):\n        i += 1\n        result[i:i] = ob.__bases__\n    return result\n\ndef _legacy_mergeOrderings(orderings):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "_id": "62b8b58deb7e40a82d2d1269", "code": ["\ndef directlyProvidedBy(object):\n \n return getattr(object, '__provides__', None)\n\ndef classProvides(cls, *interfaces):\n '''Declare interfaces provided directly by a class\n\n    This function is called in a class definition.\n\n    The arguments are one or more interfaces or interface specifications\n    (`~zope.interface.interfaces.IDeclaration` objects).\n\n    The given interfaces (including the interfaces in the specifications)\n    are used to create the class's direct-object interface specification.\n    An error will be raised if the module class has an direct interface\n    specification. In other words, it is an error to call this function more\n    than once in a class definition.\n\n    Note that the given interfaces have nothing to do with the interfaces\n    provided by the class's `~zope.interface.interfaces.implementedBy`"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef directlyProvidedBy(object):\n \n return getattr(object, '__provides__', None)\n\ndef classProvides(cls, *interfaces):\n '''Declare interfaces provided directly by a class\n\n    This function is called in a class definition.\n\n    The arguments are one or more interfaces or interface specifications\n    (`~zope.interface.interfaces.IDeclaration` objects).\n\n    The given interfaces (including the interfaces in the specifications)\n    are used to create the class's direct-object interface specification.\n    An error will be raised if the module class has an direct interface\n    specification. In other words, it is an error to call this function more\n    than once in a class definition.\n\n    Note that the given interfaces have nothing to do with the interfaces\n    provided by the class's `~zope.interface.interfaces.implementedBy`", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "_id": "62b8b559eb7e40a82d2d11f8", "code": ["\ndef minimalBases(classes):\n    \n\n    if not __python3: # pragma: no cover\n        classes = [c for c in classes if c is not ClassType]\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\n\nclass Metameta(type):\n    pass\n\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\n\nclass A(object):\n    def __init__(self):\n        aaa=1\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef minimalBases(classes):\n    \n\n    if not __python3: # pragma: no cover\n        classes = [c for c in classes if c is not ClassType]\n    candidates = []\n\n    for m in classes:\n        for n in classes:\n            if issubclass(n,m) and m is not n:\n                break\n        else:\n            if m in candidates:\n                candidates.remove(m)    # ensure that we're later in the list\n            candidates.append(m)\n\n    return candidates\n\n\nclass Metameta(type):\n    pass\n\n\nclass Meta(type):\n    __metaclass__ = Metameta\n\n\nclass A(object):\n    def __init__(self):\n        aaa=1\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "_id": "62b8b4b9eb7e40a82d2d1134", "code": ["\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n  return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n  r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n  return r\n\n raise KeyError(name)\n\n__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\ndef direct(self, name):\n return self.__attrs.get(name)\n\ndef queryDescriptionFor(self, name, default=None):\n return self.get("], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef namesAndDescriptions(self, all=False):\n \n if not all:\n  return self.__attrs.items()\n\n r = {}\n for base in self.__bases__[::-1]:\n  r.update(dict(base.namesAndDescriptions(all)))\n\n r.update(self.__attrs)\n\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self.get(name)\n if r is not None:\n  return r\n\n raise KeyError(name)\n\n__getitem__ = getDescriptionFor\n\ndef __contains__(self, name):\n return self.get(name) is not None\n\ndef direct(self, name):\n return self.__attrs.get(name)\n\ndef queryDescriptionFor(self, name, default=None):\n return self.get(", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "_id": "62b8b416eb7e40a82d2d1129", "code": ["\ndef names(self, all=False):\n \n if not all:\n     return self.__attrs.keys()\n r = self.__attrs.copy()\n for base in self.__bases__:\n     r.update(dict.fromkeys(base.names(all)))\n return r.keys()\n\ndef namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin\n \n if not all:\n     return self.__attrs.items()\n r = {}\n for base in self.__bases__[::-1]:\n     r.update(dict(base.namesAndDescriptions(all)))\n r.update(self.__attrs)\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self."], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef names(self, all=False):\n \n if not all:\n     return self.__attrs.keys()\n r = self.__attrs.copy()\n for base in self.__bases__:\n     r.update(dict.fromkeys(base.names(all)))\n return r.keys()\n\ndef namesAndDescriptions(self, all=False): # pylint:disable=redefined-builtin\n \n if not all:\n     return self.__attrs.items()\n r = {}\n for base in self.__bases__[::-1]:\n     r.update(dict(base.namesAndDescriptions(all)))\n r.update(self.__attrs)\n return r.items()\n\ndef getDescriptionFor(self, name):\n \n r = self.", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "_id": "62b8b3d6eb7e40a82d2d111c", "code": ["\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _normalizeargs(sequence, output=None):\n    \n    if output is None:\n        output = []\n\n    cls = sequence.__class__\n    if InterfaceClass in cls.__mro__ or Implements in cls.__mro__:\n        output.append(sequence)\n    else:\n        for v in sequence:\n            _normalizeargs(v, output)\n\n    return output", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "_id": "62b8b3d5eb7e40a82d2d1110", "code": ["\ndef _c_optimizations_available():\n    \n    _c_optimizations_required_passk_validte2.passk_validte()\n    return _c_optimizations_required_passk_validte2.c_opt\n\n\ndef _c_optimizations_ignored():\n    \n    _c_optimizations_required_passk_validte2.passk_validte()\n    return _c_optimizations_required_passk_validte2.c"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_available():\n    \n    _c_optimizations_required_passk_validte2.passk_validte()\n    return _c_optimizations_required_passk_validte2.c_opt\n\n\ndef _c_optimizations_ignored():\n    \n    _c_optimizations_required_passk_validte2.passk_validte()\n    return _c_optimizations_required_passk_validte2.c", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110f", "code": ["\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    '''Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation\n    and"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _should_attempt_c_optimizations():\n    \n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _c_optimizations_ignored()\n\n\ndef _use_c_impl(py_impl, name=None, globs=None):\n    '''Decorator. Given an object implemented in Python, with a name like\n    ``Foo``, import the corresponding C implementation from\n    ``zope.interface._zope_interface_coptimizations`` with the name\n    ``Foo`` and use it instead.\n\n    If the ``PURE_PYTHON`` environment variable is set to any value\n    other than ``\"0\"``, or we're on PyPy, ignore the C implementation\n    and", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "_id": "62b8b3d4eb7e40a82d2d110e", "code": ["\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\n_c_optimizations_required = lambda: _c_optimizations_available()\n\n\ndef _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we should attempt to use the C optimizations.\n\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n    \"\"\"\n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_ignored():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env != \"0\"\n\n\n_c_optimizations_required = lambda: _c_optimizations_available()\n\n\ndef _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we should attempt to use the C optimizations.\n\n    This takes into account whether we're on PyPy and the value of the\n    ``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.\n    \"\"\"\n    is_pypy = hasattr(sys, 'pypy_version_info')\n\n    if _c_optimizations_required():\n        return True\n    if is_pypy:\n        return False\n    return not _", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "_id": "62b8b3d4eb7e40a82d2d110d", "code": ["\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c\n\ndef _c_optimizations_available():\n    \"\"\"\n    Return the C optimization module, if available, otherwise\n    a false value.\n\n    If the optimizations are required but not available, this\n    raises the ImportError.\n\n    This does not say whether they should be used or not.\n    \"\"\"\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\ndef _c_"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _c_optimizations_required():\n    \n    pure_env = os.environ.get('PURE_PYTHON')\n    require_c = pure_env == \"0\"\n    return require_c\n\ndef _c_optimizations_available():\n    \"\"\"\n    Return the C optimization module, if available, otherwise\n    a false value.\n\n    If the optimizations are required but not available, this\n    raises the ImportError.\n\n    This does not say whether they should be used or not.\n    \"\"\"\n    catch = () if _c_optimizations_required() else (ImportError,)\n    try:\n        from zope.interface import _zope_interface_coptimizations as c_opt\n        return c_opt\n    except catch: # pragma: no cover (only Jython doesn't build extensions)\n        return False\n\ndef _c_", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1136", "code": ["\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if not tentative:\n        assert iface.providedBy(candidate)\n\n    errors = []\n\n    for name in iface:\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing attribute: {name}\")\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f\"Attribute {name} is not callable\")\n\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing method: {name}\")\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f\"Attribute {name} is not call"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _verify(iface, candidate, tentative=False, vtype=None):\n    \n    if not tentative:\n        assert iface.providedBy(candidate)\n\n    errors = []\n\n    for name in iface:\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing attribute: {name}\")\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f\"Attribute {name} is not callable\")\n\n    for name, method in iface.namesAndDescriptions():\n        if not hasattr(candidate, name):\n            errors.append(f\"Missing method: {name}\")\n        else:\n            attr = getattr(candidate, name)\n            if not callable(attr):\n                errors.append(f\"Attribute {name} is not call", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "_id": "62b8b4baeb7e40a82d2d1137", "code": ["\ndef verifyObject(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyObject(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "_id": "62b8b4c1eb7e40a82d2d1139", "code": ["\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='c')\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\ndef verify(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\nverify.__doc__ = _verify.__doc__\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef verifyClass(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='c')\n\ndef verifyObject(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\ndef verify(iface, candidate, tentative=False):\n    \n    return _verify(iface, candidate, tentative, vtype='o')\n\nverify.__doc__ = _verify.__doc__\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "_id": "62b8b559eb7e40a82d2d11f6", "code": ["\ndef determineMetaclass(bases, explicit_mc=None):\n    \n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n    if len(meta) == 1:\n        return meta[0]\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n    if not candidates:  # pragma: no cover\n        assert not __python3\n        return ClassType\n    elif len(candidates) > 1:\n        raise TypeError('Incompatible"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef determineMetaclass(bases, explicit_mc=None):\n    \n    meta = [getattr(b, '__class__', type(b)) for b in bases]\n    if explicit_mc is not None:\n        meta.append(explicit_mc)\n    if len(meta) == 1:\n        return meta[0]\n    candidates = minimalBases(meta)  # minimal set of metaclasses\n    if not candidates:  # pragma: no cover\n        assert not __python3\n        return ClassType\n    elif len(candidates) > 1:\n        raise TypeError('Incompatible", "is_pass": false, "return_code": 1}]}
{"file_path": "o2sclpy/utils.py", "project": "awsteiner/o2sclpy", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "_id": "62ece4992e6aefcf4aabbd8b", "code": ["\ndef force_string(obj):\n    \n    if isinstance(obj, numpy.bytes_) or isinstance(obj, bytes) == True:\n        return obj.decode('utf-8')\n    return obj\n\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef force_string(obj):\n    \n    if isinstance(obj, numpy.bytes_) or isinstance(obj, bytes) == True:\n        return obj.decode('utf-8')\n    return obj\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "rdiffweb/core/librdiff.py", "project": "ikus060/rdiffweb", "name": "unquote", "docstring": "Remove quote from the given name.", "_id": "62ece4982e6aefcf4aabbd72", "code": ["\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            raise ValueError(\"Invalid encoding for quote '%s'\" % match.group())\n\n    try:\n        return name.decode('utf-8')\n    except UnicodeDecodeError:\n        pass\n\n    return QUOTE_TOKEN."], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef unquote(name):\n    \n    assert isinstance(name, bytes)\n\n    def unquoted_char(match):\n        \n        if len(match.group()) != 4:\n            return match.group\n        try:\n            return bytes([int(match.group()[1:])])\n        except ValueError:\n            raise ValueError(\"Invalid encoding for quote '%s'\" % match.group())\n\n    try:\n        return name.decode('utf-8')\n    except UnicodeDecodeError:\n        pass\n\n    return QUOTE_TOKEN.", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd68", "code": ["\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    output = ''\n    alpha_len = len(alphabet)\n    while number:\n        number, digit = divmod(number, alpha_len)\n        output += alphabet[digit]\n    if padding:\n        remainder = max(padding - len(output), 0)\n        output = output + alphabet[0] * remainder\n    return output\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        number = number * alpha_len + alphabet.index(char)\n    return number\n\n\ndef random_string(length: int, alphabet: List[str]) -> str:\n    '''Generate a random string of"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    output = ''\n    alpha_len = len(alphabet)\n    while number:\n        number, digit = divmod(number, alpha_len)\n        output += alphabet[digit]\n    if padding:\n        remainder = max(padding - len(output), 0)\n        output = output + alphabet[0] * remainder\n    return output\n\n\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    number = 0\n    alpha_len = len(alphabet)\n    for char in string:\n        number = number * alpha_len + alphabet.index(char)\n    return number\n\n\ndef random_string(length: int, alphabet: List[str]) -> str:\n    '''Generate a random string of", "is_pass": false, "return_code": 1}]}
{"file_path": "shortuuid/main.py", "project": "skorokithakis/shortuuid", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "_id": "62ece4982e6aefcf4aabbd6d", "code": ["\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    alpha_len = len(alphabet)\n    number = 0\n    for char in string:\n        number = number * alpha_len + alphabet.index(char)\n    return number\n\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    output = ''\n    alpha_len = len(alphabet)\n    while number:\n        number, digit = divmod(number, alpha_len)\n        output += alphabet[digit]\n    if padding:\n        remainder = max(padding - len(output), 0)\n        output = output + alphabet[0] * remainder\n    return output[::-1]\n\ndef generate_id(alphabet: List[str], length: int"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef string_to_int(string: str, alphabet: List[str]) -> int:\n    \n    alpha_len = len(alphabet)\n    number = 0\n    for char in string:\n        number = number * alpha_len + alphabet.index(char)\n    return number\n\ndef int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \n    output = ''\n    alpha_len = len(alphabet)\n    while number:\n        number, digit = divmod(number, alpha_len)\n        output += alphabet[digit]\n    if padding:\n        remainder = max(padding - len(output), 0)\n        output = output + alphabet[0] * remainder\n    return output[::-1]\n\ndef generate_id(alphabet: List[str], length: int", "is_pass": false, "return_code": 1}]}
{"file_path": "contrib/planb-swiftsync.py", "project": "ossobv/planb", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "_id": "62ece4982e6aefcf4aabbd61", "code": ["\ndef _dictsum(dicts):\n    \n    return dict(sum((d.items() for d in dicts), []))\n\n\ndef _dictsum_keys(dicts):\n    \n    return set(sum((d.keys() for d in dicts), []))\n\n\ndef _dictsum_values(dicts):\n    \n    return set(sum((d.values() for d in dicts), []))\n\n\ndef _dictdiff(dict1, dict2):\n    \n    return {\n        k: v for k, v in dict1.items()\n        if (k not in dict2 or dict2[k] != v)}\n\n\ndef _"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _dictsum(dicts):\n    \n    return dict(sum((d.items() for d in dicts), []))\n\n\ndef _dictsum_keys(dicts):\n    \n    return set(sum((d.keys() for d in dicts), []))\n\n\ndef _dictsum_values(dicts):\n    \n    return set(sum((d.values() for d in dicts), []))\n\n\ndef _dictdiff(dict1, dict2):\n    \n    return {\n        k: v for k, v in dict1.items()\n        if (k not in dict2 or dict2[k] != v)}\n\n\ndef _", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "_id": "62b463153879012d19481498", "code": ["\ndef files_list(path):\n    \n    return os.listdir(path)\n\n\ndef xml_files_list(path):\n    \n    return (f for f in os.listdir(path) if f.endswith(\".xml\"))\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    \n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\n\ndef write_file(path, source, mode=\"w\"):\n    \n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list(path):\n    \n    return os.listdir(path)\n\n\ndef xml_files_list(path):\n    \n    return (f for f in os.listdir(path) if f.endswith(\".xml\"))\n\n\ndef read_file(path, encoding=\"utf-8\", mode=\"r\"):\n    \n    with open(path, mode=mode, encoding=encoding) as f:\n        text = f.read()\n    return text\n\n\ndef write_file(path, source, mode=\"w\"):\n    \n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\n    logger.debug(\"Gravando", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "_id": "62b463153879012d1948149a", "code": ["\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    docs = {}\n    for xml in xmls:\n        basename = os.path.basename(xml)\n        prefix, ext = os.path.splitext(basename)\n\n        docs.setdefault(prefix, Package(source, prefix))\n    return docs\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    docs = {}\n    for xml in xmls:\n        basename = os.path.basename(xml)\n        prefix, ext = os.path.splitext(basename)\n\n        docs.setdefault(prefix, Package(source, prefix))\n    return docs\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "_id": "62b463153879012d1948149b", "code": ["\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n    if basename.startswith(prefix + \".\"):\n        return True\n    return False\n\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n    if basename.startswith(prefix + \".\"):\n        return True\n    return False\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "_id": "62b463153879012d1948149c", "code": ["\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item\n        for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef select_filenames_by_prefix(prefix, files):\n    \n    return [\n        item\n        for item in files\n        if match_file_by_prefix(prefix, item)\n    ]\n\n\ndef match_file_by_prefix(prefix, file_path):\n    \n    basename = os.path.basename(file_path)\n    if basename.startswith(prefix + \"-\"):\n        return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "_id": "62b463153879012d1948149d", "code": ["\ndef _explore_folder(folder):\n    \n    if file_utils.is_folder(folder):\n        data = _group_files_by_xml_filename(\n            folder,\n            file_utils.xml_files_list(folder),\n            file_utils.files_list(folder),\n        )\n        return data\n\n\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_folder(folder):\n    \n    if file_utils.is_folder(folder):\n        data = _group_files_by_xml_filename(\n            folder,\n            file_utils.xml_files_list(folder),\n            file_utils.files_list(folder),\n        )\n        return data\n\n\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "_id": "62b463153879012d1948149f", "code": ["\ndef _eval_file(prefix, file_path):\n    \n\n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith(\".xml\"):\n        return\n\n    filename = os.path.basename(file_path)\n\n\ndef match_file_by_prefix(prefix, filename):\n    \n    filename = os.path.basename(filename)\n    return re.match(f\"{prefix}.*\", filename)\n\n\ndef _explore_zipfile(prefix, file_path, zip_file):\n    '''\n    Identifica os tipos de arquivos presentes em um arquivo zip.\n    '''\n\n    if not match_file"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _eval_file(prefix, file_path):\n    \n\n    if not match_file_by_prefix(prefix, file_path):\n        return\n    if file_path.endswith(\".xml\"):\n        return\n\n    filename = os.path.basename(file_path)\n\n\ndef match_file_by_prefix(prefix, filename):\n    \n    filename = os.path.basename(filename)\n    return re.match(f\"{prefix}.*\", filename)\n\n\ndef _explore_zipfile(prefix, file_path, zip_file):\n    '''\n    Identifica os tipos de arquivos presentes em um arquivo zip.\n    '''\n\n    if not match_file", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "_id": "62b463153879012d194814a1", "code": ["\ndef add_rendition(self, lang, file_path):\n        \n        self._renditions[lang] = self.file_path(file_path)\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n    self._xml = value\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_rendition(self, lang, file_path):\n        \n        self._renditions[lang] = self.file_path(file_path)\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._xml)\n\n@xml.setter\ndef xml(self, value):\n    self._xml = value\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "_id": "62b463163879012d194814a2", "code": ["\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = self.file_path(file_path)\n\ndef get_asset(self, basename):\n    try:\n        return self._assets[basename]\n    except KeyError:\n        return\n\ndef add_rendition(self, lang, file_path):\n    \"\"\"{\n        \"original\": \"artigo02.pdf\",\n        \"en\": \"artigo02-en.pdf\",\n    }\"\"\"\n    self._renditions[lang] = file_path\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef add_asset(self, basename, file_path):\n        \n        self._assets[basename] = self.file_path(file_path)\n\ndef get_asset(self, basename):\n    try:\n        return self._assets[basename]\n    except KeyError:\n        return\n\ndef add_rendition(self, lang, file_path):\n    \"\"\"{\n        \"original\": \"artigo02.pdf\",\n        \"en\": \"artigo02-en.pdf\",\n    }\"\"\"\n    self._renditions[lang] = file_path\n\ndef get_rendition(self, lang):\n    try:\n        return self._renditions[lang]\n    except KeyError:\n        return\n\n@property\ndef source(self):\n    return self._source\n\n@property\ndef xml(self):\n    return self.file_path(self._", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "_id": "62b463163879012d194814a4", "code": ["\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _explore_zipfile(zip_path):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_utils.xml_files_list_from_zipfile(zip_path),\n                file_utils.files_list_from_zipfile(zip_path),\n            )\n            return data\n\n\ndef _group_files_by_xml_filename(source, xmls, files):\n    \n    if file_utils.is_zipfile(zip_path):\n        with ZipFile(zip_path, 'r'):\n            data = _group_files_by_xml_filename(\n                zip_path,\n                file_", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "_id": "62b463163879012d194814a6", "code": ["\ndef files_list_from_zipfile(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef xml_files_list_from_zipfile(zip_path):\n    \n    return (f for f in files_list_from_zipfile(zip_path) if f.endswith(\".xml\"))\n\n\ndef files_list_from_zipfile_passk_validte(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef xml_files_list_from_zipfile_passk_validte(zip_path):\n    \n    return ("], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef files_list_from_zipfile(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef xml_files_list_from_zipfile(zip_path):\n    \n    return (f for f in files_list_from_zipfile(zip_path) if f.endswith(\".xml\"))\n\n\ndef files_list_from_zipfile_passk_validte(zip_path):\n    \n    with ZipFile(zip_path) as zf:\n        return zf.namelist()\n\n\ndef xml_files_list_from_zipfile_passk_validte(zip_path):\n    \n    return (", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "_id": "62b4631b3879012d194814dd", "code": ["\ndef fix_namespace_prefix_w(content):\n    \n\n    content = content.replace(\"w:st=\", \"w-st=\")\n    content = content.replace(\"w:title=\", \"w-title=\")\n    content = content.replace(\"w:w=\", \"w-w=\")\n    content = content.replace(\"w:b=\", \"w-b=\")\n    content = content.replace(\"w:i=\", \"w-i=\")\n    content = content.replace(\"w:sup=\", \"w-sup=\")\n    content = content.replace(\"w:p=\", \"w-p=\")\n    content = content.replace(\"w:jc=\", \"w-jc=\")\n    content = content.replace(\"w:lvl=\", \"w-lvl=\")\n    content = content.replace(\"w:t=\", \"w-t"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef fix_namespace_prefix_w(content):\n    \n\n    content = content.replace(\"w:st=\", \"w-st=\")\n    content = content.replace(\"w:title=\", \"w-title=\")\n    content = content.replace(\"w:w=\", \"w-w=\")\n    content = content.replace(\"w:b=\", \"w-b=\")\n    content = content.replace(\"w:i=\", \"w-i=\")\n    content = content.replace(\"w:sup=\", \"w-sup=\")\n    content = content.replace(\"w:p=\", \"w-p=\")\n    content = content.replace(\"w:jc=\", \"w-jc=\")\n    content = content.replace(\"w:lvl=\", \"w-lvl=\")\n    content = content.replace(\"w:t=\", \"w-t", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "_id": "62b463283879012d1948153d", "code": ["\ndef match_pubdate(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        result = node.xpath(xpath)\n        if result:\n            return result[0]\n    return None\n\ndef get_citation_ids(node):\n    '''Returns a dictionary with the values for the keys:\n       'year', 'month', 'day'\n    '''\n    ids = {}\n    for pub_id in node.xpath('.//pub-id'):\n        ids[pub_id.attrib['pub-id-type']] = pub_id.text\n    return ids\n\nclass ArticleCitations:\n\n    def __init__(self, xmltree):\n        self.xmltree = xmltree\n\n    @property\n    def article_citations(self):\n        _citations = []\n        for node in self.xmltree.xpath(\"./back/ref"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef match_pubdate(node, pubdate_xpaths):\n    \n    for xpath in pubdate_xpaths:\n        result = node.xpath(xpath)\n        if result:\n            return result[0]\n    return None\n\ndef get_citation_ids(node):\n    '''Returns a dictionary with the values for the keys:\n       'year', 'month', 'day'\n    '''\n    ids = {}\n    for pub_id in node.xpath('.//pub-id'):\n        ids[pub_id.attrib['pub-id-type']] = pub_id.text\n    return ids\n\nclass ArticleCitations:\n\n    def __init__(self, xmltree):\n        self.xmltree = xmltree\n\n    @property\n    def article_citations(self):\n        _citations = []\n        for node in self.xmltree.xpath(\"./back/ref", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "_id": "62b463303879012d19481579", "code": ["\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n    from packtools.sps.models import ArticleMetaIssue\n\n    number = issue.get('number')\n    sup = issue.get('sup')\n    return number, sup\n\n\ndef _extract_number_and_supplment_from_issue_element_passk_validte0(issue):\n    \n    from packtools.sps.models import ArticleMetaIssue\n\n    number = issue.get('number')\n    sup = issue.get('sup')\n    return number, sup\n\n\ndef _extract_number_and_supplment_from_issue_element_passk_validte1(issue):\n    \n    number = issue.get"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _extract_number_and_supplment_from_issue_element(issue):\n    \n    from packtools.sps.models import ArticleMetaIssue\n\n    number = issue.get('number')\n    sup = issue.get('sup')\n    return number, sup\n\n\ndef _extract_number_and_supplment_from_issue_element_passk_validte0(issue):\n    \n    from packtools.sps.models import ArticleMetaIssue\n\n    number = issue.get('number')\n    sup = issue.get('sup')\n    return number, sup\n\n\ndef _extract_number_and_supplment_from_issue_element_passk_validte1(issue):\n    \n    number = issue.get", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "_id": "62ece4982e6aefcf4aabbd60", "code": ["\ndef size_to_bytes(size: str) -> int:\n    \n    if size.isnumeric():\n        return int(size)\n    if size.endswith('M'):\n        return int(size[:-1]) * 1024 * 1024\n    if size.endswith('G'):\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    if size.endswith('K'):\n        return int(size[:-1]) * 1024\n    raise ValueError(f'Invalid size: {size}')\n\n\ndef bytes_to_size(size: int) -> str:\n    \n    if size < 1024:\n        return f'{size}B'\n    if size < 1024 * 1024:"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef size_to_bytes(size: str) -> int:\n    \n    if size.isnumeric():\n        return int(size)\n    if size.endswith('M'):\n        return int(size[:-1]) * 1024 * 1024\n    if size.endswith('G'):\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    if size.endswith('K'):\n        return int(size[:-1]) * 1024\n    raise ValueError(f'Invalid size: {size}')\n\n\ndef bytes_to_size(size: int) -> str:\n    \n    if size < 1024:\n        return f'{size}B'\n    if size < 1024 * 1024:", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/lister.py", "project": "SoftwareHeritage/swh-lister", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "_id": "62ece4982e6aefcf4aabbd6f", "code": ["\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        logger.debug(\"Downloading %s\", url)\n        response = self.http_request(url)\n        with tarfile.open(fileobj=BytesIO(response.content)) as tar:\n            tar.extractall(destination_path)\n            return destination_path\n\ndef get_desc_file(self, filename: Path) -> Path:\n        \n        with tarfile.open(filename) as tar:\n            tar.extractall()\n            return self.repo_path / tar.getnames()[0]\n\ndef get_package_name(self, desc_file: Path) -> str:\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_repo_archive(self, url: str, destination_path: Path) -> Path:\n        \n        logger.debug(\"Downloading %s\", url)\n        response = self.http_request(url)\n        with tarfile.open(fileobj=BytesIO(response.content)) as tar:\n            tar.extractall(destination_path)\n            return destination_path\n\ndef get_desc_file(self, filename: Path) -> Path:\n        \n        with tarfile.open(filename) as tar:\n            tar.extractall()\n            return self.repo_path / tar.getnames()[0]\n\ndef get_package_name(self, desc_file: Path) -> str:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "swh/lister/arch/tests/__init__.py", "project": "SoftwareHeritage/swh-lister", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "_id": "62ece4982e6aefcf4aabbd74", "code": ["\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if not os.path.isfile(archive_path):\n        raise RuntimeError(f\"{archive_path} does not exist\")\n\n    if archive_path.endswith('.tar.gz'):\n        archive_name = os.path.basename(archive_path).replace('.tar.gz', '')\n    elif archive_path.endswith('.tar'):\n        archive_name = os.path.basename(archive_path).replace('.tar', '')\n    else:\n        raise RuntimeError(\n            f\"{archive_path} is not a tarball, it is neither a .tar nor a .tar.gz\"\n        )\n\n    if not os.path.exists(tmp_path"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    \n    if not os.path.isfile(archive_path):\n        raise RuntimeError(f\"{archive_path} does not exist\")\n\n    if archive_path.endswith('.tar.gz'):\n        archive_name = os.path.basename(archive_path).replace('.tar.gz', '')\n    elif archive_path.endswith('.tar'):\n        archive_name = os.path.basename(archive_path).replace('.tar', '')\n    else:\n        raise RuntimeError(\n            f\"{archive_path} is not a tarball, it is neither a .tar nor a .tar.gz\"\n        )\n\n    if not os.path.exists(tmp_path", "is_pass": false, "return_code": 1}]}
{"file_path": "neutron_lib/agent/common/utils.py", "project": "openstack/neutron-lib", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "_id": "62ece4982e6aefcf4aabbd69", "code": ["\ndef _replace_register(flow_params, register_number, register_value):\n    \n    for flow in flow_params:\n        match = flow['match']\n        if 'reg%d' % register_number in match:\n            flow['match']['reg%d' % register_number] = register_value\n    return flow_params\n\n\ndef replace_src_by_vm_mac(flow_params, vm_mac):\n    return _replace_register(flow_params, 1, vm_mac)\n\n\ndef replace_dst_by_tap_mac(flow_params, tap_mac):\n    return _replace_register(flow_params, 2, tap_mac)\n\n\ndef replace_src_by_tap_mac(flow_params, tap_mac):\n    return _replace_register(flow_params, 3, tap_mac)\n\n\ndef replace_dst_by_vm"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_register(flow_params, register_number, register_value):\n    \n    for flow in flow_params:\n        match = flow['match']\n        if 'reg%d' % register_number in match:\n            flow['match']['reg%d' % register_number] = register_value\n    return flow_params\n\n\ndef replace_src_by_vm_mac(flow_params, vm_mac):\n    return _replace_register(flow_params, 1, vm_mac)\n\n\ndef replace_dst_by_tap_mac(flow_params, tap_mac):\n    return _replace_register(flow_params, 2, tap_mac)\n\n\ndef replace_src_by_tap_mac(flow_params, tap_mac):\n    return _replace_register(flow_params, 3, tap_mac)\n\n\ndef replace_dst_by_vm", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "_id": "62e60f43d76274f8a4026e28", "code": ["\ndef hydrate_time(nanoseconds, tz=None):\n    \n    seconds, nanoseconds = divmod(nanoseconds, 1000000000)\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n    else:\n        return t.replace(tzinfo=FixedOffset(tz))\n\n\ndef hydrate_date(ordinal):\n    \n    return Date.from_ordinal(ordinal + 719163)\n\n\ndef hydrate_datetime(seconds, nanoseconds, tz=None):\n    '''Hydrator for `DateTime` and `LocalDateTime`"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef hydrate_time(nanoseconds, tz=None):\n    \n    seconds, nanoseconds = divmod(nanoseconds, 1000000000)\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    t = Time(hours, minutes, seconds, nanoseconds)\n    if tz is None:\n        return t\n    else:\n        return t.replace(tzinfo=FixedOffset(tz))\n\n\ndef hydrate_date(ordinal):\n    \n    return Date.from_ordinal(ordinal + 719163)\n\n\ndef hydrate_datetime(seconds, nanoseconds, tz=None):\n    '''Hydrator for `DateTime` and `LocalDateTime`", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "_id": "62e60f3bd76274f8a4026e10", "code": ["\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\nif np is not None:\n    _NUMPY_DURATION_UNITS = {\n        \"Y\": \"years\",\n        \"M\": \"months\","], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\ndef dehydrate_timedelta(value):\n    \n    months = 0\n    days = value.days\n    seconds = value.seconds\n    nanoseconds = 1000 * value.microseconds\n    return Structure(b\"E\", months, days, seconds, nanoseconds)\n\n\nif np is not None:\n    _NUMPY_DURATION_UNITS = {\n        \"Y\": \"years\",\n        \"M\": \"months\",", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "_id": "62e60f37d76274f8a4026dfd", "code": ["\ndef dehydrate_time(value):\n    \n    return Structure(b\"T\", value.hour, value.minute, value.second, value.nanosecond)\n\n\ndef dehydrate_date(value):\n    \n    return Structure(b\"D\", value.year, value.month, value.day)\n\n\ndef dehydrate_datetime(value):\n    \n    return Structure(b\"d\", value.year, value.month, value.day, value.hour, value.minute, value.second, value.microsecond)\n\n\ndef dehydrate_timedelta(value):\n    \n    return Structure(b\"E\", 0,"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_time(value):\n    \n    return Structure(b\"T\", value.hour, value.minute, value.second, value.nanosecond)\n\n\ndef dehydrate_date(value):\n    \n    return Structure(b\"D\", value.year, value.month, value.day)\n\n\ndef dehydrate_datetime(value):\n    \n    return Structure(b\"d\", value.year, value.month, value.day, value.hour, value.minute, value.second, value.microsecond)\n\n\ndef dehydrate_timedelta(value):\n    \n    return Structure(b\"E\", 0,", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "_id": "62e60f33d76274f8a4026de9", "code": ["\ndef dehydrate_point(value):\n    \n    dim = len(value)\n    if dim == 2:\n        return Structure(b\"X\", value.srid, *value)\n    elif dim == 3:\n        return Structure(b\"Y\", value.srid, *value)\n    else:\n        raise ValueError('Cannot dehydrate Point with %d dimensions' % dim)\n\n\n__all__ = ['dehydrate_point']\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef dehydrate_point(value):\n    \n    dim = len(value)\n    if dim == 2:\n        return Structure(b\"X\", value.srid, *value)\n    elif dim == 3:\n        return Structure(b\"Y\", value.srid, *value)\n    else:\n        raise ValueError('Cannot dehydrate Point with %d dimensions' % dim)\n\n\n__all__ = ['dehydrate_point']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "_id": "62e60ed4d76274f8a4026da0", "code": ["\ndef keys(self):\n        \n        return self.__keys[:]\n\n    @property\n    def data(self):\n        \"\"\" Return the keys and values of this record as a dictionary,\n            with the key names as the keys.\n        \"\"\"\n        return self.items()\n\n    def items(self):\n        \"\"\" Return the fields of the record as a list of key and value tuples\n        \"\"\"\n        return [(self.__keys[i], self._super_getitem_single(i))\n                for i in range(len(self))]\n\n    def values(self):\n        \"\"\" Return the values of the record as a list of values\n        \"\"\"\n        return [self._super_getitem_single(i)\n                for i in range(len(self))]\n\n    def __iter__(self):\n        return iter(self.__keys)\n\n    def __len__(self"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef keys(self):\n        \n        return self.__keys[:]\n\n    @property\n    def data(self):\n        \"\"\" Return the keys and values of this record as a dictionary,\n            with the key names as the keys.\n        \"\"\"\n        return self.items()\n\n    def items(self):\n        \"\"\" Return the fields of the record as a list of key and value tuples\n        \"\"\"\n        return [(self.__keys[i], self._super_getitem_single(i))\n                for i in range(len(self))]\n\n    def values(self):\n        \"\"\" Return the values of the record as a list of values\n        \"\"\"\n        return [self._super_getitem_single(i)\n                for i in range(len(self))]\n\n    def __iter__(self):\n        return iter(self.__keys)\n\n    def __len__(self", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60ecfd76274f8a4026d6a", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        from neo4j.conf import bolt_protocol_handlers\n        if protocol_version is None:\n            return bolt_protocol_handlers\n        if protocol_version in bolt_protocol_handlers:\n            return {protocol_version: bolt_protocol_handlers[protocol_version]}\n        return {}\n\n    @classmethod\n    def version_list(cls, versions, limit=4):\n        \n        from neo4j.conf import MAX_BOLT_VERSION\n        from neo4j.conf import MIN_BOLT_VERSION\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n        from neo4j.conf import bolt_protocol_handlers\n        if protocol_version is None:\n            return bolt_protocol_handlers\n        if protocol_version in bolt_protocol_handlers:\n            return {protocol_version: bolt_protocol_handlers[protocol_version]}\n        return {}\n\n    @classmethod\n    def version_list(cls, versions, limit=4):\n        \n        from neo4j.conf import MAX_BOLT_VERSION\n        from neo4j.conf import MIN_BOLT_VERSION\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "_id": "62e60e49d76274f8a4026d25", "code": ["\ndef unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            \n            result = func(*args, **kwargs)\n            \n            return result\n        wrapper.metadata = metadata\n        wrapper.timeout = timeout\n        return wrapper\n    return decorator\n\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef unit_of_work(metadata=None, timeout=None):\n    \n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            \n            result = func(*args, **kwargs)\n            \n            return result\n        wrapper.metadata = metadata\n        wrapper.timeout = timeout\n        return wrapper\n    return decorator\n\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "_id": "62e60e05d76274f8a4026cfd", "code": ["\ndef index(self, key):\n        \n        return self.indexmap[key]\n\ndef value(self, key=0, default=None):\n    '''Obtain a single value from the record by index or key. If no\n       index or key is specified, the first value is returned. If the\n       specified item does not exist, the default value is returned.'''\n    try:\n        if isinstance(key, str):\n            return self.values[self.indexmap[key]]\n        elif isinstance(key, int):\n            return self.values[key]\n        else:\n            raise TypeError(key)\n    except (KeyError, IndexError):\n        return default\n\ndef append(self, item):\n    \n    self.values.append(item)\n    self.indexmap[item] = len(self.values) -"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef index(self, key):\n        \n        return self.indexmap[key]\n\ndef value(self, key=0, default=None):\n    '''Obtain a single value from the record by index or key. If no\n       index or key is specified, the first value is returned. If the\n       specified item does not exist, the default value is returned.'''\n    try:\n        if isinstance(key, str):\n            return self.values[self.indexmap[key]]\n        elif isinstance(key, int):\n            return self.values[key]\n        else:\n            raise TypeError(key)\n    except (KeyError, IndexError):\n        return default\n\ndef append(self, item):\n    \n    self.values.append(item)\n    self.indexmap[item] = len(self.values) -", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "_id": "62e60da4d76274f8a4026cf1", "code": ["\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None)\n                else:\n                    d.append(self[i])\n            return d\n        return list(self.__values)\n\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None)\n                else:\n                    d.append(self[i])\n            return d\n        return list(self.__values)\n\ndef values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d.append(None", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "_id": "62e60b10d76274f8a4026ccd", "code": ["\ndef data(self, *keys):\n        \n        if keys:\n            d = {}\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d[key] = None\n                else:\n                    d[self.__keys[i]] = self._super_getitem_single(i)\n            return d\n        return dict(self.items())\n\ndef data_keys(self, *keys):\n        \n        return list(self.__keys)\n\ndef data_values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef data(self, *keys):\n        \n        if keys:\n            d = {}\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:\n                    d[key] = None\n                else:\n                    d[self.__keys[i]] = self._super_getitem_single(i)\n            return d\n        return dict(self.items())\n\ndef data_keys(self, *keys):\n        \n        return list(self.__keys)\n\ndef data_values(self, *keys):\n        \n        if keys:\n            d = []\n            for key in keys:\n                try:\n                    i = self.index(key)\n                except KeyError:", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "_id": "62e6087bd76274f8a4026bfa", "code": ["\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1\n\nif __name__ == \"__main__\":\n    isT=True\n    try:\n        unpack1 = UnpackableBuffer()\n        res1=unpack1.pop_u16()\n        unpack2 = UnpackableBuffer([1, 2, 3, 4, 5, 6, 2, 1])\n        res2=unpack2.pop_u16()\n        res3 = unpack2.pop_u16()\n        res4 = unpack2.pop_u16()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef pop_u16(self):\n        \n        if self.used >= 2:\n            value = 0x100 * self.data[self.used - 2] + self.data[self.used - 1]\n            self.used -= 2\n            return value\n        else:\n            return -1\n\nif __name__ == \"__main__\":\n    isT=True\n    try:\n        unpack1 = UnpackableBuffer()\n        res1=unpack1.pop_u16()\n        unpack2 = UnpackableBuffer([1, 2, 3, 4, 5, 6, 2, 1])\n        res2=unpack2.pop_u16()\n        res3 = unpack2.pop_u16()\n        res4 = unpack2.pop_u16()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "_id": "62e6087ad76274f8a4026bf2", "code": ["\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.append(\n            b'\\x2F',\n            (n, qid),\n            dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks,\n            **handlers\n        )\n\ndef pull(self, n=-1, qid=-1, dehydration_hooks=None, hydration_hooks=None,\n              **handlers):\n    \n    self.append(\n        b'\\x3F',\n        (n, qid),\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        **handlers\n    )\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n        \n        self.append(\n            b'\\x2F',\n            (n, qid),\n            dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks,\n            **handlers\n        )\n\ndef pull(self, n=-1, qid=-1, dehydration_hooks=None, hydration_hooks=None,\n              **handlers):\n    \n    self.append(\n        b'\\x3F',\n        (n, qid),\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        **handlers\n    )\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "_id": "62e60879d76274f8a4026bec", "code": ["\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode and mode not in (\"READ\", \"WRITE\"):\n            raise ValueError(\n                \"Transaction mode must be either READ or WRITE\")\n        if db and mode == \"READ\":\n            raise ValueError(\"Database selection is not supported in READ mode\")\n        if bookmarks is None:\n            bookmarks = []\n        if metadata is None:\n            metadata = {}\n        else:\n            metadata = metadata.copy()\n        if imp_user:\n            metadata[\"impersonating\"] = imp_user\n        try:\n            if metadata == NEO4J_DIRECTIVE_KEY and metadata == {}:\n                del metadata[NEO4J_DIRECTIVE_KEY]\n        except TypeError:"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n        \n        if mode and mode not in (\"READ\", \"WRITE\"):\n            raise ValueError(\n                \"Transaction mode must be either READ or WRITE\")\n        if db and mode == \"READ\":\n            raise ValueError(\"Database selection is not supported in READ mode\")\n        if bookmarks is None:\n            bookmarks = []\n        if metadata is None:\n            metadata = {}\n        else:\n            metadata = metadata.copy()\n        if imp_user:\n            metadata[\"impersonating\"] = imp_user\n        try:\n            if metadata == NEO4J_DIRECTIVE_KEY and metadata == {}:\n                del metadata[NEO4J_DIRECTIVE_KEY]\n        except TypeError:", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "_id": "62e60723d76274f8a4026b75", "code": ["\ndef round_half_to_even(n):\n    \n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        up = int(n + 0.5)\n        down = int(n - 0.5)\n        return up if up % 2 == 0 else down\n    else:\n        return int(round(n))\n\n\ndef nano_div(x, y):\n    \"\"\"\n    >>> nano_div(-0.7, 0.2)\n    -3.5\n    \"\"\"\n    return float(1000000000 * x) / int(1000000000 * y)\n\n\ndef nano_divmod(x, y):\n    \"\"\"\n    >>> divmod(0.7, "], "level": "self_contained", "generate_results": [{"generate_code": "\ndef round_half_to_even(n):\n    \n    ten_n = 10 * n\n    if ten_n == int(ten_n) and ten_n % 10 == 5:\n        up = int(n + 0.5)\n        down = int(n - 0.5)\n        return up if up % 2 == 0 else down\n    else:\n        return int(round(n))\n\n\ndef nano_div(x, y):\n    \"\"\"\n    >>> nano_div(-0.7, 0.2)\n    -3.5\n    \"\"\"\n    return float(1000000000 * x) / int(1000000000 * y)\n\n\ndef nano_divmod(x, y):\n    \"\"\"\n    >>> divmod(0.7, ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "_id": "62e60707d76274f8a4026b69", "code": ["\ndef point_type(name, fields, srid_map):\n    \n\n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {'srid': property(srid)}\n\n    for index, subclass_field in enumerate(fields):\n\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except IndexError:\n                raise AttributeError(f)\n\n        for field_alias in {subclass_field, \"xyz\"[index]}:\n            attributes[field_alias] = property(accessor)\n\n    return type(name, (object,), attributes)\n\n\nif t.TYPE_CHECKING:\n    class CartesianPoint(Point):\n        ...\nelse:\n    Cartesian"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef point_type(name, fields, srid_map):\n    \n\n    def srid(self):\n        try:\n            return srid_map[len(self)]\n        except KeyError:\n            return None\n\n    attributes = {'srid': property(srid)}\n\n    for index, subclass_field in enumerate(fields):\n\n        def accessor(self, i=index, f=subclass_field):\n            try:\n                return self[i]\n            except IndexError:\n                raise AttributeError(f)\n\n        for field_alias in {subclass_field, \"xyz\"[index]}:\n            attributes[field_alias] = property(accessor)\n\n    return type(name, (object,), attributes)\n\n\nif t.TYPE_CHECKING:\n    class CartesianPoint(Point):\n        ...\nelse:\n    Cartesian", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "_id": "62e5dc9ed76274f8a4026b5b", "code": ["\ndef deprecated(message):\n    \n    from warnings import warn\n\n    def _make_warning_decorator(message, warn):\n        def deprecated_decorator(func):\n            @t.wraps(func)\n            def deprecated_func(*args, **kwargs):\n                warn(message, category=DeprecationWarning, stacklevel=2)\n                return func(*args, **kwargs)\n            return deprecated_func\n        return deprecated_decorator\n\n    return _make_warning_decorator(message, warn)\n\n\ndef deprecated_property(message):\n    \n    from warnings import warn\n\n    def deprecated_decorator(func):\n        from functools import wraps\n\n        @property\n        @wraps(func)\n        def deprecated_func(*args, **kwargs):\n            warn(message, category"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deprecated(message):\n    \n    from warnings import warn\n\n    def _make_warning_decorator(message, warn):\n        def deprecated_decorator(func):\n            @t.wraps(func)\n            def deprecated_func(*args, **kwargs):\n                warn(message, category=DeprecationWarning, stacklevel=2)\n                return func(*args, **kwargs)\n            return deprecated_func\n        return deprecated_decorator\n\n    return _make_warning_decorator(message, warn)\n\n\ndef deprecated_property(message):\n    \n    from warnings import warn\n\n    def deprecated_decorator(func):\n        from functools import wraps\n\n        @property\n        @wraps(func)\n        def deprecated_func(*args, **kwargs):\n            warn(message, category", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "_id": "62e60723d76274f8a4026b76", "code": ["\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if not (0 <= ticks < 86400000000000):\n            raise ValueError(\n                'ticks out of range (0 <= ticks < 86400000000000): %r' % ticks)\n        nanoseconds = ticks % 1000000000\n        seconds = ticks // 1000000000\n        minutes, seconds = divmod(seconds, 60)\n        hours, minutes = divmod(minutes, 60)\n        return cls(hours, minutes, seconds, nanoseconds, tz)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def from_ticks(cls, ticks, tz=None):\n        \n        if not (0 <= ticks < 86400000000000):\n            raise ValueError(\n                'ticks out of range (0 <= ticks < 86400000000000): %r' % ticks)\n        nanoseconds = ticks % 1000000000\n        seconds = ticks // 1000000000\n        minutes, seconds = divmod(seconds, 60)\n        hours, minutes = divmod(minutes, 60)\n        return cls(hours, minutes, seconds, nanoseconds, tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "_id": "62e60873d76274f8a4026bd8", "code": ["\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n        from ._bolt3 import AsyncBolt3\n        from ._bolt4 import (\n            AsyncBolt4x1,\n            AsyncBolt4x2,\n            AsyncBolt4x3,\n            AsyncBolt4x4,\n        )\n        from ._bolt5 import (\n            AsyncBolt5x0,\n            AsyncBolt5x1,\n        )\n        from ._bolt6 import (\n            AsyncBolt6x0,\n        )\n        from ._bolt7 import (\n            AsyncBolt7x0,\n        )\n        from ._bolt8 import (\n            AsyncBolt8x0,\n        )\n\n        handlers = {\n            Version(3, 0): Async"], "level": "project_runnable", "generate_results": [{"generate_code": "\n@classmethod\n    def protocol_handlers(cls, protocol_version=None):\n        \n\n        from ._bolt3 import AsyncBolt3\n        from ._bolt4 import (\n            AsyncBolt4x1,\n            AsyncBolt4x2,\n            AsyncBolt4x3,\n            AsyncBolt4x4,\n        )\n        from ._bolt5 import (\n            AsyncBolt5x0,\n            AsyncBolt5x1,\n        )\n        from ._bolt6 import (\n            AsyncBolt6x0,\n        )\n        from ._bolt7 import (\n            AsyncBolt7x0,\n        )\n        from ._bolt8 import (\n            AsyncBolt8x0,\n        )\n\n        handlers = {\n            Version(3, 0): Async", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "_id": "62e60e3bd76274f8a4026d1a", "code": ["\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmark_metadata = {}\n                if '@' in value:\n                    bookmark, metadata = value.split('@')\n                    bookmark_metadata['metadata'] = metadata\n                else:\n                    bookmark = value\n                bookmarks.append(Bookmark(bookmark, bookmark_metadata))\n            except ValueError:\n                raise ValueError(\"Invalid bookmark: {}\".format(value))\n        obj.values = tuple(bookmarks)\n        return obj\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\n@classmethod\n    def from_raw_values(cls, values):\n        \n        obj = cls()\n        bookmarks = []\n        for value in values:\n            if not isinstance(value, str):\n                raise TypeError(\"Raw bookmark values must be str. Found {}\".format(type(value)))\n            try:\n                bookmark_metadata = {}\n                if '@' in value:\n                    bookmark, metadata = value.split('@')\n                    bookmark_metadata['metadata'] = metadata\n                else:\n                    bookmark = value\n                bookmarks.append(Bookmark(bookmark, bookmark_metadata))\n            except ValueError:\n                raise ValueError(\"Invalid bookmark: {}\".format(value))\n        obj.values = tuple(bookmarks)\n        return obj\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "_id": "62b45b396decaeff903e1001", "code": ["\ndef amend_bzparams(self, params, bug_ids):\n        \n        params['bug_ids'] = bug_ids\n        return params\n\ndef get_bugs(self, date=\"today\", bug_ids=[], chunk_size=None):\n        \n        bugs = self.get_data()\n        params = self.get_bz_params(date)\n        self.amend_bzparams(params, bug_ids)\n        self.query_url = utils.get_bz_search_url(params)\n\n        if isinstance(self, Nag):\n            self.query_params: dict = params\n        old_CHUNK_SIZE = Bugzilla.BUGZILLA_CHUNK_SIZE\n        try:\n            if chunk_size:\n                Bugzilla.BUGZILLA_CHUNK_"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef amend_bzparams(self, params, bug_ids):\n        \n        params['bug_ids'] = bug_ids\n        return params\n\ndef get_bugs(self, date=\"today\", bug_ids=[], chunk_size=None):\n        \n        bugs = self.get_data()\n        params = self.get_bz_params(date)\n        self.amend_bzparams(params, bug_ids)\n        self.query_url = utils.get_bz_search_url(params)\n\n        if isinstance(self, Nag):\n            self.query_params: dict = params\n        old_CHUNK_SIZE = Bugzilla.BUGZILLA_CHUNK_SIZE\n        try:\n            if chunk_size:\n                Bugzilla.BUGZILLA_CHUNK_", "is_pass": false, "return_code": 1}]}
{"file_path": "eppy/geometry/surface.py", "project": "santoshphilip/eppy", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "_id": "62ece4982e6aefcf4aabbd67", "code": ["\ndef vertex3tuple(vertices):\n    \n    result = []\n    for i in range(len(vertices)):\n        try:\n            pta = vertices[i]\n            ptb = vertices[i + 1]\n            ptc = vertices[i + 2]\n        except IndexError:\n            pta = vertices[-1]\n            ptb = vertices[0]\n            ptc = vertices[1]\n        result.append((pta, ptb, ptc))\n    return result"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef vertex3tuple(vertices):\n    \n    result = []\n    for i in range(len(vertices)):\n        try:\n            pta = vertices[i]\n            ptb = vertices[i + 1]\n            ptc = vertices[i + 2]\n        except IndexError:\n            pta = vertices[-1]\n            ptb = vertices[0]\n            ptc = vertices[1]\n        result.append((pta, ptb, ptc))\n    return result", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "_id": "62b86aa3b4d922cb0e688d36", "code": ["\ndef _validate_labels(labels):\n    \n\n    if not isinstance(labels, dict):\n        return False\n\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n\n    return True\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _validate_labels(labels):\n    \n\n    if not isinstance(labels, dict):\n        return False\n\n    for key, value in labels.items():\n        if not validate_key(key) or not validate_value(value):\n            return False\n\n    return True\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "_id": "62b86a9eb4d922cb0e688d25", "code": ["\ndef _get_resource_name_regex():\n    \n    global _resource_name_regex, _resource_name_pattern\n\n    if _resource_name_regex:\n        return _resource_name_regex\n\n    max_name_size = 253  # reduced by 2 for the regex\n    min_name_size = 0  # reduced by 1 for the regex\n    base_alphanumeric_pattern = \"\\\\w|(\\\\w[\\\\w\\\\-_.:]{{{min_length},{length}}}\\\\w)\"\n\n    resource_name_pattern = base_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _get_resource_name_regex():\n    \n    global _resource_name_regex, _resource_name_pattern\n\n    if _resource_name_regex:\n        return _resource_name_regex\n\n    max_name_size = 253  # reduced by 2 for the regex\n    min_name_size = 0  # reduced by 1 for the regex\n    base_alphanumeric_pattern = \"\\\\w|(\\\\w[\\\\w\\\\-_.:]{{{min_length},{length}}}\\\\w)\"\n\n    resource_name_pattern = base_", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf8", "code": ["\ndef validate_value(value):\n    \n    validate_label_value(value)\n\n\ndef validate_key(key):\n    \n    validate_label_key(key)\n\n\ndef validate_label_value(value):\n    \n    if not _label_value_pattern.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value!r} does not match\"\n            f\" the regex {_label_value_pattern!r}.\"\n        )\n\n\ndef validate_label_key(key):\n    \n    if not _label_key_pattern.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_value(value):\n    \n    validate_label_value(value)\n\n\ndef validate_key(key):\n    \n    validate_label_key(key)\n\n\ndef validate_label_value(value):\n    \n    if not _label_value_pattern.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value!r} does not match\"\n            f\" the regex {_label_value_pattern!r}.\"\n        )\n\n\ndef validate_label_key(key):\n    \n    if not _label_key_pattern.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "_id": "62b86a4fb4d922cb0e688cf7", "code": ["\ndef validate_key(key):\n    \n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not match the regex {_label_key_pattern!r}.\"\n        )\n\n\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value!r} does not match the regex {_label_value_pattern!r}.\"\n        )\n\n\ndef _validate_labels(labels):\n    '''Check that keys and values in the given labels match against their corresponding\n    regular expressions.'''\n    key_regex,"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef validate_key(key):\n    \n    key_regex, _ = _get_labels_regex()\n    if not key_regex.fullmatch(key):\n        raise ValidationError(\n            f\"Label key {key!r} does not match the regex {_label_key_pattern!r}.\"\n        )\n\n\ndef validate_value(value):\n    \n    _, value_regex = _get_labels_regex()\n    if not value_regex.fullmatch(value):\n        raise ValidationError(\n            f\"Label value {value!r} does not match the regex {_label_value_pattern!r}.\"\n        )\n\n\ndef _validate_labels(labels):\n    '''Check that keys and values in the given labels match against their corresponding\n    regular expressions.'''\n    key_regex,", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "_id": "62b86a01b4d922cb0e688ccc", "code": ["\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    \n    '''\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resources\n        first_level (bool, optional): If True, indicates that the dictionary represents the whole observer schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values by ``None``.\n    \n    '''\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(value)\n        elif isinstance(value, list):\n            new_dict[key"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \n    \n    '''\n\n    Args:\n        manifest_dict (dict): Partial Kubernetes resources\n        first_level (bool, optional): If True, indicates that the dictionary represents the whole observer schema of a Kubernetes resource\n\n    Returns:\n        dict: Generated partial observer_schema\n\n    This function creates a new dictionary from ``manifest_dict`` and replaces all non-list and non-dict values by ``None``.\n    \n    '''\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(value)\n        elif isinstance(value, list):\n            new_dict[key", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869ebb4d922cb0e688cc6", "code": ["\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            return\n\n        if isinstance(val, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n\n        elif val == \"ignore\":\n            continue\n\n        else:\n            camel_key = camel_to_snake_case(val)\n            last_applied_manifest[idx] = response[idx][camel_key]\n\n\ndef update_last_applied_manifest_dict_from_resp(\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema[:-1]):\n\n        if idx >= len(response):\n            return\n\n        if isinstance(val, list):\n            update_last_applied_manifest_list_from_resp(\n                last_applied_manifest[idx], val, response[idx]\n            )\n\n        elif val == \"ignore\":\n            continue\n\n        else:\n            camel_key = camel_to_snake_case(val)\n            last_applied_manifest[idx] = response[idx][camel_key]\n\n\ndef update_last_applied_manifest_dict_from_resp(\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "_id": "62b869eab4d922cb0e688cc5", "code": ["\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema[:-1]):\n        if idx >= len(response):\n            return\n        if val not in response[idx]:\n            last_applied_manifest[idx][val] = None\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \n    for idx, val in enumerate(observer_schema[:-1]):\n        if idx >= len(response):\n            return\n        if val not in response[idx]:\n            last_applied_manifest[idx][val] = None\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "_id": "62b869eab4d922cb0e688cbf", "code": ["\ndef generate_default_observer_schema(app):\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef generate_default_observer_schema(app):\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "_id": "62b86707b4d922cb0e688c2a", "code": ["\ndef on(self, hook):\n        \n        def decorator(func):\n            self.registry[hook].append(func)\n            return func\n        return decorator\n\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef on(self, hook):\n        \n        def decorator(func):\n            self.registry[hook].append(func)\n            return func\n        return decorator\n\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "_id": "62b86729b4d922cb0e688c2f", "code": ["\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    return {\n        \"tls\": {\n            \"enabled\": False,\n            \"cert\": \"cert_path\",\n            \"key\": \"key_path\",\n            \"client_ca\": \"client_ca_path\",\n        },\n        \"authentication\": {\n            \"allow_anonymous\": True,\n            \"strategy\": {\n                \"keystone\": {\"enabled\": False, \"endpoint\": \"http://localhost\"},\n                \"keycloak\": {\n                    \"enabled\": False,\n                    \"endpoint\": \"no_endpoint\",\n                    \"realm\": \"krake\",\n                },\n                \"static\": {\"enabled\": True, \"name\": user},\n            },\n            \"cors_origin\": \"http://example.com\",\n        },\n        \"authorization\": \"always-allow\",\n        \"etcd\": {"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    \n    return {\n        \"tls\": {\n            \"enabled\": False,\n            \"cert\": \"cert_path\",\n            \"key\": \"key_path\",\n            \"client_ca\": \"client_ca_path\",\n        },\n        \"authentication\": {\n            \"allow_anonymous\": True,\n            \"strategy\": {\n                \"keystone\": {\"enabled\": False, \"endpoint\": \"http://localhost\"},\n                \"keycloak\": {\n                    \"enabled\": False,\n                    \"endpoint\": \"no_endpoint\",\n                    \"realm\": \"krake\",\n                },\n                \"static\": {\"enabled\": True, \"name\": user},\n            },\n            \"cors_origin\": \"http://example.com\",\n        },\n        \"authorization\": \"always-allow\",\n        \"etcd\": {", "is_pass": false, "return_code": 1}]}
{"file_path": "infoblox_client/utils.py", "project": "infobloxopen/infoblox-client", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "_id": "62ece4982e6aefcf4aabbd5f", "code": ["\ndef paging(response, max_results):\n    \n    if max_results == None:\n        max_results = len(response)\n    if max_results > len(response):\n        max_results = len(response)\n\n    for i in range(0, max_results):\n        yield response[i:i+1]\n\ndef netaddr_ip_version(addr):\n    ip = netaddr.IPAddress(addr)\n    return ip.version\n\ndef safe_json_load(data):\n    try:\n        return jsonutils.loads(data)\n    except ValueError:\n        LOG.warning(\"Could not decode reply into json: %s\", data)\n\ndef try_value_to_bool(value, strict_mode"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef paging(response, max_results):\n    \n    if max_results == None:\n        max_results = len(response)\n    if max_results > len(response):\n        max_results = len(response)\n\n    for i in range(0, max_results):\n        yield response[i:i+1]\n\ndef netaddr_ip_version(addr):\n    ip = netaddr.IPAddress(addr)\n    return ip.version\n\ndef safe_json_load(data):\n    try:\n        return jsonutils.loads(data)\n    except ValueError:\n        LOG.warning(\"Could not decode reply into json: %s\", data)\n\ndef try_value_to_bool(value, strict_mode", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d2", "code": ["\ndef _fromutc(self, dt):\n        \n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() result\")\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _fromutc(self, dt):\n        \n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() result\")\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "_id": "62b8982f755ee91dce50a241", "code": ["\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef normalized(self):\n        \n        days = int(self.days)\n\n        hours_f = round(self.hours + 24 * (self.days - days), 11)\n        hours = int(hours_f)\n\n        minutes_f = round(self.minutes + 60 * (hours_f - hours), 10)\n        minutes = int(minutes_f)\n\n        seconds_f = round(self.seconds + 60 * (minutes_f - minutes), 8)\n        seconds = int(seconds_f)\n\n        microseconds = round(self.microseconds + 1e6 * (seconds_f - seconds))\n\n        return", "is_pass": true, "return_code": 0}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "_id": "62b89640755ee91dce50a114", "code": ["\ndef tzname_in_python2(namefunc):\n    \n\n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n\n    return wrapper\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef tzname_in_python2(namefunc):\n    \n\n    def wrapper(*args, **kwargs):\n        result = namefunc(*args, **kwargs)\n        if isinstance(result, unicode):\n            result = result.encode('utf-8')\n        return result\n\n    return wrapper\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "_id": "62b8966c755ee91dce50a154", "code": ["\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        if dt_str[-1] == 'Z':\n            dt_str = dt_str[:-1] + '+00:00'\n        return super().isoparse(dt_str)\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_takes_ascii\n    def isoparse(self, dt_str):\n        \n        if dt_str[-1] == 'Z':\n            dt_str = dt_str[:-1] + '+00:00'\n        return super().isoparse(dt_str)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "_id": "62b896de755ee91dce50a183", "code": ["\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError('must be string, not %s' % type(timestr).__name__)\n        if default is None:\n            default = datetime.datetime.now()\n        elif not isinstance(default, datetime.datetime):\n            raise TypeError('default must be a datetime, not %s'\n                            % type(default).__name__)\n        res = self._parse(timestr, **kwargs)\n        if res is None:\n            raise ValueError('unknown string format: {}'.format(timestr))\n        repl = {}\n        for attr in ('year', 'month', 'day', 'hour', 'minute', 'second',\n                     'microsecond'):\n            val = getattr(res, attr)\n            if val is not None:\n                repl[attr"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n        \n        if not isinstance(timestr, str):\n            raise TypeError('must be string, not %s' % type(timestr).__name__)\n        if default is None:\n            default = datetime.datetime.now()\n        elif not isinstance(default, datetime.datetime):\n            raise TypeError('default must be a datetime, not %s'\n                            % type(default).__name__)\n        res = self._parse(timestr, **kwargs)\n        if res is None:\n            raise ValueError('unknown string format: {}'.format(timestr))\n        repl = {}\n        for attr in ('year', 'month', 'day', 'hour', 'minute', 'second',\n                     'microsecond'):\n            val = getattr(res, attr)\n            if val is not None:\n                repl[attr", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "_id": "62b8a4a4755ee91dce50a3d3", "code": ["\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n\n        if _fold is None:\n            _fold = self._has_ambiguous_wall(dt, dt_wall)\n\n        return enfold(dt_wall, fold=_fold)\n\n\nclass tzrange(_tzinfo):\n    '''\n    This is a fixed-offset timezone.\n\n    This implementation does not implement the DST logic found in the\n    ``tzinfo.tzrange()`` method.\n    '''\n\n    def __init__(self, offset):\n        '''\n        Construct a fixed-offset timezone.\n\n        :param offset:\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\n@_validate_fromutc_inputs\n    def fromutc(self, dt):\n        \n        dt_wall = self._fromutc(dt)\n\n        _fold = self._fold_status(dt, dt_wall)\n\n        if _fold is None:\n            _fold = self._has_ambiguous_wall(dt, dt_wall)\n\n        return enfold(dt_wall, fold=_fold)\n\n\nclass tzrange(_tzinfo):\n    '''\n    This is a fixed-offset timezone.\n\n    This implementation does not implement the DST logic found in the\n    ``tzinfo.tzrange()`` method.\n    '''\n\n    def __init__(self, offset):\n        '''\n        Construct a fixed-offset timezone.\n\n        :param offset:\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "_id": "62b8a7b2755ee91dce50a4a7", "code": ["\ndef default_tzinfo(dt, tzinfo):\n    \n\n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\n\n\nclass tzlocal(tzfile):\n    \"\"\"\n    tzinfo class for the local timezone.\n\n    tzinfo.localize(datetime.now()) will return the local timezone.\n    If the dateutime is not naive, a ValueError is raised.\n\n    In order for this to work tzlocal needs to know the\n    time zone name of the current system. This is usually\n    available as the TZ environment variable but in some\n    cases (such as a chroot) it may not be.\n\n    If you"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef default_tzinfo(dt, tzinfo):\n    \n\n    if dt.tzinfo is not None:\n        return dt\n    else:\n        return dt.replace(tzinfo=tzinfo)\n\n\n\nclass tzlocal(tzfile):\n    \"\"\"\n    tzinfo class for the local timezone.\n\n    tzinfo.localize(datetime.now()) will return the local timezone.\n    If the dateutime is not naive, a ValueError is raised.\n\n    In order for this to work tzlocal needs to know the\n    time zone name of the current system. This is usually\n    available as the TZ environment variable but in some\n    cases (such as a chroot) it may not be.\n\n    If you", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/api/api_utils.py", "project": "openstack/cinder", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "_id": "62ece4982e6aefcf4aabbd63", "code": ["\ndef is_none_string(val: Any) -> bool:\n    \n    if isinstance(val, str):\n        return val.lower() == 'none'\n    return False\n\n\ndef convert_version_to_int(version: str) -> int:\n    ver_list = version.split('.')\n    if len(ver_list) <= 2:\n        ver_list.append('0')\n    return int(ver_list[0]) * 10000 + int(ver_list[1]) * 100 + int(ver_list[2])\n\n\ndef convert_int_to_version(version: int) -> str:\n    ver_list = []\n    _version = version\n    for _ in range(3):\n        ver_list.append(str(_version % 100))\n        _version = _version // 100\n    ver_"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_none_string(val: Any) -> bool:\n    \n    if isinstance(val, str):\n        return val.lower() == 'none'\n    return False\n\n\ndef convert_version_to_int(version: str) -> int:\n    ver_list = version.split('.')\n    if len(ver_list) <= 2:\n        ver_list.append('0')\n    return int(ver_list[0]) * 10000 + int(ver_list[1]) * 100 + int(ver_list[2])\n\n\ndef convert_int_to_version(version: int) -> str:\n    ver_list = []\n    _version = version\n    for _ in range(3):\n        ver_list.append(str(_version % 100))\n        _version = _version // 100\n    ver_", "is_pass": false, "return_code": 1}]}
{"file_path": "cinder/image/glance.py", "project": "openstack/cinder", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "_id": "62ece4992e6aefcf4aabbd7f", "code": ["\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    o = urllib.parse.urlparse(image_href)\n    image_ref = o.path\n    if o.query:\n        params = urllib.parse.parse_qs(o.query)\n        if 'glance_host' in params:\n            image_ref = '%s?%s' % (image_ref, o.query)\n --------------------------------------------------\n    from cinder.utils import get_root_helper\n --------------------------------------------------\n    return image_ref, o.netloc, utils.get_bool_from_api_params('%s?%s'\n                                                               % (image_ref,\n                                                                  o.query),\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    \n    o = urllib.parse.urlparse(image_href)\n    image_ref = o.path\n    if o.query:\n        params = urllib.parse.parse_qs(o.query)\n        if 'glance_host' in params:\n            image_ref = '%s?%s' % (image_ref, o.query)\n --------------------------------------------------\n    from cinder.utils import get_root_helper\n --------------------------------------------------\n    return image_ref, o.netloc, utils.get_bool_from_api_params('%s?%s'\n                                                               % (image_ref,\n                                                                  o.query),\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "_id": "62e4fc3c85ea98643089041e", "code": ["\ndef _inline_r_setup(code: str) -> str:\n    \n    return textwrap.dedent(f'''\n    options(\n        stringsAsFactors = FALSE,\n        warn = -1\n    )\n    ''')\n\n\n\n\ndef _inline_r_setup_passk_validte(code: str) -> str:\n    \n    return text"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _inline_r_setup(code: str) -> str:\n    \n    return textwrap.dedent(f'''\n    options(\n        stringsAsFactors = FALSE,\n        warn = -1\n    )\n    ''')\n\n\n\n\ndef _inline_r_setup_passk_validte(code: str) -> str:\n    \n    return text", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "_id": "62e4fbda85ea986430890405", "code": ["\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    cmd_fn = cmd_output_p if color else cmd_output_b\n    retcode = 0\n    stdout = b''\n\n    try:\n        cmd = parse_shebang.normalize_cmd(cmd)\n    except parse_shebang.ExecutableNotFoundError as e:\n        return e.to_output()[:2]\n\n    if (\n            sys.platform == 'win32' and\n            cmd[0].lower().endswith(('.bat', '.cmd'))\n    ):  # pragma: win32 cover\n       "], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any,\n) -> tuple[int, bytes]:\n    \n    cmd_fn = cmd_output_p if color else cmd_output_b\n    retcode = 0\n    stdout = b''\n\n    try:\n        cmd = parse_shebang.normalize_cmd(cmd)\n    except parse_shebang.ExecutableNotFoundError as e:\n        return e.to_output()[:2]\n\n    if (\n            sys.platform == 'win32' and\n            cmd[0].lower().endswith(('.bat', '.cmd'))\n    ):  # pragma: win32 cover\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "_id": "62e4fbda85ea986430890403", "code": ["\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str, ...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_con"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    fixed_random = random.Random()\n    fixed_random.seed(FIXED_RANDOM_SEED, version=1)\n\n    seq = list(seq)\n    fixed_random.shuffle(seq)\n    return seq\n\n\ndef run_xargs(\n        cmd: tuple[str, ...],\n        file_args: Sequence[str],\n        *,\n        require_serial: bool,\n        color: bool,\n) -> tuple[int, bytes]:\n    if require_serial:\n        jobs = 1\n    else:\n        file_args = _shuffled(file_args)\n        jobs = target_con", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "_id": "62e4fb6585ea98643089032b", "code": ["\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))\n\n\ndef check_min_version(version: str) -> None:\n    if parse_version(version) > parse_version(C.VERSION):\n        raise cfgv.ValidationError(\n            f'pre-commit version {version} is required but version '\n            f'{C.VERSION} is installed.  '\n            f'Perhaps run `pip install --upgrade pre-commit`.',\n        )\n\n\ndef transform_stage(stage: str) -> str:\n    return _STAGES.get(stage, stage)\n\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef parse_version(s: str) -> tuple[int, ...]:\n    \n    return tuple(int(p) for p in s.split('.'))\n\n\ndef check_min_version(version: str) -> None:\n    if parse_version(version) > parse_version(C.VERSION):\n        raise cfgv.ValidationError(\n            f'pre-commit version {version} is required but version '\n            f'{C.VERSION} is installed.  '\n            f'Perhaps run `pip install --upgrade pre-commit`.',\n        )\n\n\ndef transform_stage(stage: str) -> str:\n    return _STAGES.get(stage, stage)\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "_id": "62e4fb4d85ea9864308902e7", "code": ["\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0])\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0])\n\n    return (exe,) + cmd[1:]\n\ndef is_shebang_file(filename):\n    if not os.path.exists(filename) and is_meta(filename):\n        return True\n\n    with open(filename, 'rb') as f:\n        return is_shebang(f.readline())\n\ndef is_shebang(line):\n    return line.startswith(b'#!')\n\ndef is_exe(fpath):\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    exe = normexe(cmd[0])\n\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n\n    exe = normexe(cmd[0])\n\n    return (exe,) + cmd[1:]\n\ndef is_shebang_file(filename):\n    if not os.path.exists(filename) and is_meta(filename):\n        return True\n\n    with open(filename, 'rb') as f:\n        return is_shebang(f.readline())\n\ndef is_shebang(line):\n    return line.startswith(b'#!')\n\ndef is_exe(fpath):\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "concert/tests/unit/devices/test_monochromator.py", "project": "ufo-kit/concert", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "_id": "62ece4992e6aefcf4aabbd89", "code": ["\ndef gaussian(self, x):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\ndef gaussian2(self, x, y):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\ndef gaussian3(self, x, y, z):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\nclass TestPositioner:\n    @pytest.mark.asyncio\n    async def test_get_position(self, positioner: Position"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef gaussian(self, x):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\ndef gaussian2(self, x, y):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\ndef gaussian3(self, x, y, z):\n        \n        return np.exp(-(x - 0.2)**2 / (2 * 0.1**2))\n\n\nclass TestPositioner:\n    @pytest.mark.asyncio\n    async def test_get_position(self, positioner: Position", "is_pass": false, "return_code": 1}]}
{"file_path": "shconfparser/search.py", "project": "kirankotari/shconfparser", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "_id": "62ece4992e6aefcf4aabbd82", "code": ["\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n            if type(pattern) != str:\n                raise TypeError('pattern must be a string or regex pattern')\n            else:\n                if strip:\n                    pattern = pattern.strip()\n                return re.compile(pattern)\n\n\ndef get_lines_from_file(self, path):\n        \n        with open(path) as f:\n            return [line.strip() for line in f.readlines()]\n\n\ndef search_in_table(self, pattern, table):\n        \n        for line in table:\n            for key in line.keys():\n                m = re.search"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef get_pattern(self, pattern, strip=True):\n        \n        try:\n            if type(pattern) == re.Pattern:\n                return pattern\n        except AttributeError:\n            if type(pattern) != str:\n                raise TypeError('pattern must be a string or regex pattern')\n            else:\n                if strip:\n                    pattern = pattern.strip()\n                return re.compile(pattern)\n\n\ndef get_lines_from_file(self, path):\n        \n        with open(path) as f:\n            return [line.strip() for line in f.readlines()]\n\n\ndef search_in_table(self, pattern, table):\n        \n        for line in table:\n            for key in line.keys():\n                m = re.search", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b4567ed7d32e5b55cc83d9", "code": ["\ndef deep_merge_nodes(nodes):\n    \n    '''\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. If\n    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last\n    of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n    '''\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. If\n    there are colliding keys with non-MappingNode values (e.g., integers or strings), the last\n    of the values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n                MappingNode(tag='tag:yaml.org,2002:map', value=[\n                    (\n                        ScalarNode(tag='tag:yaml.org,2002:str', value='keep", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b4567ad7d32e5b55cc83af", "code": ["\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser()\n    parser.add_argument('-c', '--config', dest='config_paths', default=[], help='Configuration filenames or directories, defaults to: {}'.format(' '.join([DEFAULT_SOURCE_CONFIG_FILENAME, DEFAULT_DESTINATION_CONFIG_FILENAME])),)\n    parser.add_argument('-s', '--source-config', dest='source_config_filename', default=DEFAULT_SOURCE_CONFIG_FILENAME, help='Configuration filename, default: {}'.format(DEFAULT_SOURCE_CONFIG_FILENAME),)\n    parser.add_argument('-d', '--destination-config', dest='destination_config_filename', default=DEFAULT_DESTINATION_CONFIG_FILENAME, help='Destination configuration filename, default: {}'.format(DEFAULT_DESTINATION_CONFIG"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    parser = ArgumentParser()\n    parser.add_argument('-c', '--config', dest='config_paths', default=[], help='Configuration filenames or directories, defaults to: {}'.format(' '.join([DEFAULT_SOURCE_CONFIG_FILENAME, DEFAULT_DESTINATION_CONFIG_FILENAME])),)\n    parser.add_argument('-s', '--source-config', dest='source_config_filename', default=DEFAULT_SOURCE_CONFIG_FILENAME, help='Configuration filename, default: {}'.format(DEFAULT_SOURCE_CONFIG_FILENAME),)\n    parser.add_argument('-d', '--destination-config', dest='destination_config_filename', default=DEFAULT_DESTINATION_CONFIG_FILENAME, help='Destination configuration filename, default: {}'.format(DEFAULT_DESTINATION_CONFIG", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b45679d7d32e5b55cc83a9", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions = ' '.join(subparsers.choices.keys())\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    top_level_parser, subparsers = arguments.make_parsers()\n    global_flags = parser_flags(top_level_parser)\n    actions = ' '.join(subparsers.choices.keys())\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b45665d7d32e5b55cc8365", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(unparsed_arguments, subparsers.choices)\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes flag has been replaced with exclude_patterns in configuration.'\n        )\n    if (\n        ('list' in arguments and 'rinfo' in arguments and arguments['list'].json)\n        or ('list' in arguments and 'info' in arguments and arguments['list'].json)\n        or ('rinfo' in arguments and 'info' in arguments and arguments['rinfo'].json)\n    ):\n        raise ValueError('With the --json flag, multiple actions"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(unparsed_arguments, subparsers.choices)\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n    if arguments['global'].excludes_filename:\n        raise ValueError(\n            'The --excludes flag has been replaced with exclude_patterns in configuration.'\n        )\n    if (\n        ('list' in arguments and 'rinfo' in arguments and arguments['list'].json)\n        or ('list' in arguments and 'info' in arguments and arguments['list'].json)\n        or ('rinfo' in arguments and 'info' in arguments and arguments['rinfo'].json)\n    ):\n        raise ValueError('With the --json flag, multiple actions", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b45665d7d32e5b55cc8364", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        alias_to_subparser_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n\n        alias_to_subparser_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b45665d7d32e5b55cc8363", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "_id": "62ece4982e6aefcf4aabbd66", "code": ["\ndef was_processed(processed, path_name, verbose):\n    \n    if verbose:\n        print(\"Processing: \", path_name)\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n\ndef test(ide, platform_type):\n    \"\"\" Filter for supported platforms\n\n    Args:\n        ide: IDETypes\n        platform_type: PlatformTypes\n    Returns:\n        True if supported, False if not\n    \"\"\"\n\n    return True\n\nclass Project(object):\n    \"\"\"\n\ndef test(ide, platform_type):\n    \"\"\" Filter for supported platforms\n\n    Args:\n        ide: IDETypes\n        platform_type: PlatformTypes\n    Returns:\n        True if supported, False if not\n    \"\"\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef was_processed(processed, path_name, verbose):\n    \n    if verbose:\n        print(\"Processing: \", path_name)\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    return False\n\ndef test(ide, platform_type):\n    \"\"\" Filter for supported platforms\n\n    Args:\n        ide: IDETypes\n        platform_type: PlatformTypes\n    Returns:\n        True if supported, False if not\n    \"\"\"\n\n    return True\n\nclass Project(object):\n    \"\"\"\n\ndef test(ide, platform_type):\n    \"\"\" Filter for supported platforms\n\n    Args:\n        ide: IDETypes\n        platform_type: PlatformTypes\n    Returns:\n        True if supported, False if not\n    \"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "_id": "62ece4982e6aefcf4aabbd71", "code": ["\ndef regex_dict(item):\n    \n    if item.startswith('/') and item.endswith('/'):\n        return item\n    if item.startswith('^') and item.endswith('$'):\n        return item\n    return re.escape(item)\n\n\ndef regex_match(item, key):\n    \n    if item.startswith('/') and item.endswith('/'):\n        regex_string = item[1:-1]\n        return re.match(regex_string, key)\n    if item.startswith('^') and item.endswith('$'):\n        regex_string = item[1:-1"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef regex_dict(item):\n    \n    if item.startswith('/') and item.endswith('/'):\n        return item\n    if item.startswith('^') and item.endswith('$'):\n        return item\n    return re.escape(item)\n\n\ndef regex_match(item, key):\n    \n    if item.startswith('/') and item.endswith('/'):\n        regex_string = item[1:-1]\n        return re.match(regex_string, key)\n    if item.startswith('^') and item.endswith('$'):\n        regex_string = item[1:-1", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/util.py", "project": "burgerbecky/makeprojects", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "_id": "62ece4992e6aefcf4aabbd80", "code": ["\ndef remove_ending_os_sep(input_list):\n    \n    if isinstance(input_list, str):\n        input_list = [input_list]\n\n    output_list = copy.copy(input_list)\n\n    for index, item in enumerate(output_list):\n        output_list[index] = item.rstrip(os.sep)\n\n    return output_list\n\n\ndef was_processed(processed_list, item, add_if_new=True):\n    \n    if not isinstance(item, str):\n        raise TypeError(\"The argument 'item' must be a string.\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef remove_ending_os_sep(input_list):\n    \n    if isinstance(input_list, str):\n        input_list = [input_list]\n\n    output_list = copy.copy(input_list)\n\n    for index, item in enumerate(output_list):\n        output_list[index] = item.rstrip(os.sep)\n\n    return output_list\n\n\ndef was_processed(processed_list, item, add_if_new=True):\n    \n    if not isinstance(item, str):\n        raise TypeError(\"The argument 'item' must be a string.\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "makeprojects/core.py", "project": "burgerbecky/makeprojects", "name": "run_command", "docstring": "Call the given command(s).", "_id": "62ece4992e6aefcf4aabbd83", "code": ["\ndef run_command(self, cmd, verbose):\n        \n\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                stderr=subprocess.STDOUT)\n\n        stdout_data, _ = proc.communicate()\n\n        if proc.returncode != 0:\n            if verbose:\n                print('Command %s failed with return code %d' %\n                      (cmd, proc.returncode))\n                print(stdout_data)\n            return proc.returncode\n\n        if verbose:\n            sys.stdout.write(stdout_data.decode('utf-8'))\n\n        return proc.returncode\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef run_command(self, cmd, verbose):\n        \n\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                stderr=subprocess.STDOUT)\n\n        stdout_data, _ = proc.communicate()\n\n        if proc.returncode != 0:\n            if verbose:\n                print('Command %s failed with return code %d' %\n                      (cmd, proc.returncode))\n                print(stdout_data)\n            return proc.returncode\n\n        if verbose:\n            sys.stdout.write(stdout_data.decode('utf-8'))\n\n        return proc.returncode\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "_id": "6305f9991d275c6667163c50", "code": ["\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n            b\"[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]))\"\n        )\n\ndef split_parts(self, data: bytes) -> None:\n    assert self._cutter is not None\n    for statement in self._cutter.finditer(data):\n        if statement.group(0):\n            self.parts.append(statement.group(0))\n            self.reducible.append(True)\n\ndef handle_args(self, args: argparse.Namespace) -> None:\n    self.set_cut_chars(args.cut_before,"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef set_cut_chars(self, before: bytes, after: bytes) -> None:\n        \n        self._cutter = re.compile(\n            b\"[\"\n            + before\n            + b\"]?\"\n            + b\"[^\"\n            + before\n            + after\n            + b\"]*\"\n            + b\"(?:[\"\n            + after\n            + b\"]|$|(?=[\"\n            + before\n            + b\"]))\"\n        )\n\ndef split_parts(self, data: bytes) -> None:\n    assert self._cutter is not None\n    for statement in self._cutter.finditer(data):\n        if statement.group(0):\n            self.parts.append(statement.group(0))\n            self.reducible.append(True)\n\ndef handle_args(self, args: argparse.Namespace) -> None:\n    self.set_cut_chars(args.cut_before,", "is_pass": false, "return_code": 1}]}
{"file_path": "radiospectra/spectrogram.py", "project": "sunpy/radiospectra", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "_id": "62ece4992e6aefcf4aabbd88", "code": ["\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.ones(shape, dtype=dtype)\n\ndef make_xarray(shape, dtype=np.dtype(\"float32\")):\n        \n        data = make_array(shape, dtype=dtype)\n        return xr.DataArray(data)\n\ndef make_xarray_with_coords(shape, coords, dtype=np.dtype(\"float32\")):\n        \n        data = make_array(shape, dtype=dtype)\n        return xr.DataArray(data, coords=coords)\n\ndef make_xarray_with_coords_and_data(coords, data, dtype=np.dtype(\"float32"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef make_array(shape, dtype=np.dtype(\"float32\")):\n        \n        return np.ones(shape, dtype=dtype)\n\ndef make_xarray(shape, dtype=np.dtype(\"float32\")):\n        \n        data = make_array(shape, dtype=dtype)\n        return xr.DataArray(data)\n\ndef make_xarray_with_coords(shape, coords, dtype=np.dtype(\"float32\")):\n        \n        data = make_array(shape, dtype=dtype)\n        return xr.DataArray(data, coords=coords)\n\ndef make_xarray_with_coords_and_data(coords, data, dtype=np.dtype(\"float32", "is_pass": false, "return_code": 1}]}
{"file_path": "src/flashbake/plugins/ignored.py", "project": "commandline/flashbake", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "_id": "62ece4982e6aefcf4aabbd75", "code": ["\ndef addignored(self, ignored):\n        \n        import os\n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True,\n                              text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\ndef test_addignored():\n    \"\"\"Check the correctness of addignored\n    \"\"\"\n    assert addignored(\"./\") == \" ocfl/__pycache__/\"\n\nif __name__ == \""], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef addignored(self, ignored):\n        \n        import os\n        os.chdir(\"/home/travis/builds/repos/zimeon---ocfl-py\")\n        fldr = subprocess.run([\"git\", \"-C\", ignored, \"status\", \"-s\", \"--ignored\"], capture_output=True,\n                              text=True).stdout.strip(\"\\n\")\n        x = fldr.splitlines()\n        sub = \"!\"\n        g = ([s for s in x if sub in s])\n        i = [elem.replace(sub, '') for elem in g]\n        t = \", \".join(i)\n        return t\n\ndef test_addignored():\n    \"\"\"Check the correctness of addignored\n    \"\"\"\n    assert addignored(\"./\") == \" ocfl/__pycache__/\"\n\nif __name__ == \"", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "_id": "62b87b989a0c4fa8b80b35ee", "code": ["\ndef reset(self):\n        \n        if self._make_bins is not None:\n            self.bins = self._make_bins()\n        elif self._initial_bins is not None:\n            self.bins = copy.deepcopy(self._initial_bins)\n        else:\n            self.bins = []\n        self.n_bins = len(self.bins)\n        self.bin_width = self.bin_widths()\n        self.bin_centers = self.bin_centers()\n        self.bin_edges = self.bin_edges()\n        self._set_bin_counts_to_zero()\n        self.bin_counts = np.zeros(self.n_bins)\n        self.bin_scales = np.zeros(self.n_bins)\n       "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef reset(self):\n        \n        if self._make_bins is not None:\n            self.bins = self._make_bins()\n        elif self._initial_bins is not None:\n            self.bins = copy.deepcopy(self._initial_bins)\n        else:\n            self.bins = []\n        self.n_bins = len(self.bins)\n        self.bin_width = self.bin_widths()\n        self.bin_centers = self.bin_centers()\n        self.bin_edges = self.bin_edges()\n        self._set_bin_counts_to_zero()\n        self.bin_counts = np.zeros(self.n_bins)\n        self.bin_scales = np.zeros(self.n_bins)\n       ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "_id": "62b87b859a0c4fa8b80b35d7", "code": ["\ndef to_csv(self, separator=\",\", header=None):\n        \n        if header is None:\n            header = self.columns\n        return separator.join(header) + \"\\n\" + separator.join([str(getattr(self, column)) for column in header])\n\n\ndef from_csv(cls, line, separator=\",\", header=None):\n    \n    if header is None:\n        header=line.split(separator)\n    return cls(**dict(zip(header, line.split(separator))))\n\n\ndef to_csv_file(self, filename, separator=\",\", header=None):\n    \n    with open(filename, \"w\") as csv_file:\n        csv_file.write(self.to_csv(separator, header))\n\n\ndef from_csv_file(cls, filename, separator=\",\", header=None):\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef to_csv(self, separator=\",\", header=None):\n        \n        if header is None:\n            header = self.columns\n        return separator.join(header) + \"\\n\" + separator.join([str(getattr(self, column)) for column in header])\n\n\ndef from_csv(cls, line, separator=\",\", header=None):\n    \n    if header is None:\n        header=line.split(separator)\n    return cls(**dict(zip(header, line.split(separator))))\n\n\ndef to_csv_file(self, filename, separator=\",\", header=None):\n    \n    with open(filename, \"w\") as csv_file:\n        csv_file.write(self.to_csv(separator, header))\n\n\ndef from_csv_file(cls, filename, separator=\",\", header=None):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "_id": "62b87b839a0c4fa8b80b35cb", "code": ["\ndef _get_err_indices(self, coord_name):\n        \n        if self._err_indices is None:\n            raise LenaAttributeError(\n                \"{} has no error indices, set them first.\".format(self)\n            )\n        try:\n            return self._err_indices[coord_name]\n        except KeyError:\n            raise LenaValueError(\n                \"{} has no {} coordinate.\".format(self, coord_name)\n            )\n\n\ndef _get_scale(self):\n    \n    if self._scale is None:\n        raise LenaAttributeError(\n            \"{} has no scale, set it first.\".format(self)\n        )\n    return self._scale\n\n\ndef _set_scale(self, new_scale):\n    \n    if self._scale is"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _get_err_indices(self, coord_name):\n        \n        if self._err_indices is None:\n            raise LenaAttributeError(\n                \"{} has no error indices, set them first.\".format(self)\n            )\n        try:\n            return self._err_indices[coord_name]\n        except KeyError:\n            raise LenaValueError(\n                \"{} has no {} coordinate.\".format(self, coord_name)\n            )\n\n\ndef _get_scale(self):\n    \n    if self._scale is None:\n        raise LenaAttributeError(\n            \"{} has no scale, set it first.\".format(self)\n        )\n    return self._scale\n\n\ndef _set_scale(self, new_scale):\n    \n    if self._scale is", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["\ndef _update_context(self, context):\n        \n        graph_context = {\n            \"dim\": self.dim,\n            \"nbins\": self.nbins,\n            \"ranges\": self.ranges\n        }\n        lena.context.update_recursively(context, {\"histogram\": graph_context})\n\n\ndef _update_context(self, context):\n    \"\"\"Update *context* with the properties of this histogram.\n\n    *context.histogram* is updated with \"dim\", \"nbins\"\n    and \"ranges\" with values for this histogram.\n    If this histogram has a computed scale, it is also added\n    to the context.\n\n    Called on \"destruction\" of the histogram structure (for example,\n    in :class:`.ToCSV`). See graph._update_context for more details.\n    \"\"\"\n\n   "], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef _update_context(self, context):\n        \n        graph_context = {\n            \"dim\": self.dim,\n            \"nbins\": self.nbins,\n            \"ranges\": self.ranges\n        }\n        lena.context.update_recursively(context, {\"histogram\": graph_context})\n\n\ndef _update_context(self, context):\n    \"\"\"Update *context* with the properties of this histogram.\n\n    *context.histogram* is updated with \"dim\", \"nbins\"\n    and \"ranges\" with values for this histogram.\n    If this histogram has a computed scale, it is also added\n    to the context.\n\n    Called on \"destruction\" of the histogram structure (for example,\n    in :class:`.ToCSV`). See graph._update_context for more details.\n    \"\"\"\n\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "_id": "62b87b4f9a0c4fa8b80b3580", "code": ["\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [\n            edges[coord][i+1] - edges[coord][i]\n            for coord, i in enumerate(ind)\n        ]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol * bin_content\n        total += cell_integral\n    return total\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef integral(bins, edges):\n    \n    total = 0\n    for ind, bin_content in iter_bins(bins):\n        bin_lengths = [\n            edges[coord][i+1] - edges[coord][i]\n            for coord, i in enumerate(ind)\n        ]\n        vol = _reduce(operator.mul, bin_lengths, 1)\n        cell_integral = vol * bin_content\n        total += cell_integral\n    return total\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "_id": "62b87b199a0c4fa8b80b354e", "code": ["\ndef is_fill_request_seq(seq):\n    \n    from lena.core import Source\n    if isinstance(seq, Source):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_fill_request_el(obj):\n    ''':func:`is_fill_request_el` returns True for objects that have\n    *run* and *fill* methods.\n    '''\n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef is_fill_request_seq(seq):\n    \n    from lena.core import Source\n    if isinstance(seq, Source):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        is_fcseq = any(map(is_fill_request_el, seq))\n    if is_fill_request_el(seq):\n        is_fcseq = True\n    return is_fcseq\n\n\ndef is_fill_request_el(obj):\n    ''':func:`is_fill_request_el` returns True for objects that have\n    *run* and *fill* methods.\n    '''\n    return hasattr(obj, 'fill') and hasattr(obj, 'request')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "_id": "62b87b099a0c4fa8b80b3538", "code": ["\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request') \\\n        and callable(obj.fill) and callable(obj.request)\n\n\ndef is_fill_request_seq(seq):\n    \"\"\"Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    \"\"\"\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, '__iter__'):\n        for i in seq:\n            if is_fill_request_el(i):\n                is_fcseq = True\n                break\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    '''"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_request_el(obj):\n    \n    return hasattr(obj, 'fill') and hasattr(obj, 'request') \\\n        and callable(obj.fill) and callable(obj.request)\n\n\ndef is_fill_request_seq(seq):\n    \"\"\"Test whether *seq* can be converted to a FillRequestSeq.\n\n    True only if it is a FillRequest element\n    or contains at least one such,\n    and it is not a Source sequence.\n    \"\"\"\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, '__iter__'):\n        for i in seq:\n            if is_fill_request_el(i):\n                is_fcseq = True\n                break\n    return is_fcseq\n\n\ndef is_run_el(obj):\n    '''", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "_id": "62b87af99a0c4fa8b80b3524", "code": ["\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)\n\n\ndef is_source(seq):\n    '''Sequence is a Source, if and only if its type is Source.\n\n    Otherwise lambdas would be counted as Source,\n    but they must be converted to Sequences.\n    Moreover: this makes Source elements explicit and visible in code.\n    '''\n    from . import source\n    return isinstance(seq, source.Source)\n\n\ndef is_fill_compute_el(obj):\n    \n    return (hasattr(obj, \"fill\")\n            and hasattr(obj, \"compute\")\n            and callable(obj.fill)\n            and callable(obj.compute))\n\n\ndef is_fill_compute_seq(seq):\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_run_el(obj):\n    \n    return hasattr(obj, \"run\") and callable(obj.run)\n\n\ndef is_source(seq):\n    '''Sequence is a Source, if and only if its type is Source.\n\n    Otherwise lambdas would be counted as Source,\n    but they must be converted to Sequences.\n    Moreover: this makes Source elements explicit and visible in code.\n    '''\n    from . import source\n    return isinstance(seq, source.Source)\n\n\ndef is_fill_compute_el(obj):\n    \n    return (hasattr(obj, \"fill\")\n            and hasattr(obj, \"compute\")\n            and callable(obj.fill)\n            and callable(obj.compute))\n\n\ndef is_fill_compute_seq(seq):\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "_id": "62b87af69a0c4fa8b80b351a", "code": ["\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"compute\") \\\n                and callable(obj.fill) and callable(obj.compute)\n\n\ndef is_fill_compute_seq(seq):\n    '''Test whether *seq* can be converted to a FillComputeSeq.\n\n    True only if it is a FillCompute element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        for el in seq:\n            if is_fill_compute_el(el):\n                is_fcseq = True\n                break\n        return is_fcseq\n\n\ndef is_run_el(obj):"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef is_fill_compute_el(obj):\n    \n    return hasattr(obj, \"fill\") and hasattr(obj, \"compute\") \\\n                and callable(obj.fill) and callable(obj.compute)\n\n\ndef is_fill_compute_seq(seq):\n    '''Test whether *seq* can be converted to a FillComputeSeq.\n\n    True only if it is a FillCompute element\n    or contains at least one such,\n    and it is not a Source sequence.\n    '''\n    if is_source(seq):\n        return False\n    is_fcseq = False\n    if hasattr(seq, \"__iter__\"):\n        for el in seq:\n            if is_fill_compute_el(el):\n                is_fcseq = True\n                break\n        return is_fcseq\n\n\ndef is_run_el(obj):", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "_id": "62b87af19a0c4fa8b80b34f7", "code": ["\ndef difference(d1, d2, level=-1):\n    \n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        return d1\n    if d1 == d2:\n        return {}\n    for key in d1:\n        if key in d2:\n            subd = str(d1[key])\n            last_val = str(d2[key])\n            try:\n                subd = str(subdict)\n            except Exception:\n                return False\n            else:\n                return subd == last_val\n        else:\n            return d1\n\n"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef difference(d1, d2, level=-1):\n    \n    if not isinstance(d1, dict) or not isinstance(d2, dict):\n        return d1\n    if d1 == d2:\n        return {}\n    for key in d1:\n        if key in d2:\n            subd = str(d1[key])\n            last_val = str(d2[key])\n            try:\n                subd = str(subdict)\n            except Exception:\n                return False\n            else:\n                return subd == last_val\n        else:\n            return d1\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "_id": "62b87af09a0c4fa8b80b34f1", "code": ["\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        ind = indices[-1]\n        if ind < 0:\n            return\n\n        try:\n            subarr[ind] += weight\n        except IndexError:\n            return\n\n\ndef compute(self):\n    \n    yield (self._hist, self._cur_context)\n\n\ndef reset(self):\n    '''Reset the histogram.\n\n    Current context is reset"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef fill(self, coord, weight=1):\n        \n        indices = hf.get_bin_on_value(coord, self.edges)\n        subarr = self.bins\n        for ind in indices[:-1]:\n            if ind < 0:\n                return\n            try:\n                subarr = subarr[ind]\n            except IndexError:\n                return\n        ind = indices[-1]\n        if ind < 0:\n            return\n\n        try:\n            subarr[ind] += weight\n        except IndexError:\n            return\n\n\ndef compute(self):\n    \n    yield (self._hist, self._cur_context)\n\n\ndef reset(self):\n    '''Reset the histogram.\n\n    Current context is reset", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "_id": "62b87b199a0c4fa8b80b354c", "code": ["\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = None\n    sequence_type = \"\"\n    if isinstance(seq, source.Source):\n        sequence = seq\n        sequence_type = \"source\"\n    elif isinstance(seq, fill_compute_seq.FillComputeSeq):\n        sequence = seq\n        sequence_type = \"fill_compute\"\n    elif isinstance(seq, fill_request_seq.FillRequestSeq):\n        sequence = seq\n        sequence_type = \"fill_request\"\n    elif isinstance(seq, sequence.Sequence):\n        sequence = seq\n        sequence_type = \"sequence\"\n    elif hasattr(seq, '__iter__'):\n        sequence = list(seq)\n        sequence_type = \"list\"\n    else:\n        sequence = [seq]\n        sequence_type = \"list\"\n    return sequence, sequence_type\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef _get_seq_with_type(seq, bufsize=None):\n    \n    sequence = None\n    sequence_type = \"\"\n    if isinstance(seq, source.Source):\n        sequence = seq\n        sequence_type = \"source\"\n    elif isinstance(seq, fill_compute_seq.FillComputeSeq):\n        sequence = seq\n        sequence_type = \"fill_compute\"\n    elif isinstance(seq, fill_request_seq.FillRequestSeq):\n        sequence = seq\n        sequence_type = \"fill_request\"\n    elif isinstance(seq, sequence.Sequence):\n        sequence = seq\n        sequence_type = \"sequence\"\n    elif hasattr(seq, '__iter__'):\n        sequence = list(seq)\n        sequence_type = \"list\"\n    else:\n        sequence = [seq]\n        sequence_type = \"list\"\n    return sequence, sequence_type\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "_id": "62b87b4f9a0c4fa8b80b3581", "code": ["\ndef scale(self, other=None, recompute=False):\n        \n        if other is None:\n            if self._scale is None or recompute:\n                self._scale = hf.integral(\n                    *hf.unify_1_md(self.bins, self.edges)\n                )\n            return self._scale\n        if self._filled:\n            raise LenaHistScaleError(\n                \"Can't scale a filled histogram. \"\n                \"Use reset to empty the histogram first.\"\n            )"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None, recompute=False):\n        \n        if other is None:\n            if self._scale is None or recompute:\n                self._scale = hf.integral(\n                    *hf.unify_1_md(self.bins, self.edges)\n                )\n            return self._scale\n        if self._filled:\n            raise LenaHistScaleError(\n                \"Can't scale a filled histogram. \"\n                \"Use reset to empty the histogram first.\"\n            )", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "_id": "62b87b519a0c4fa8b80b3583", "code": ["\ndef scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        if not other:\n            raise LenaValueError('scale must be non-zero')\n        self._scale = other\n\n"], "level": "class_runnable", "generate_results": [{"generate_code": "\ndef scale(self, other=None):\n        \n        if other is None:\n            return self._scale\n        if not other:\n            raise LenaValueError('scale must be non-zero')\n        self._scale = other\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "_id": "62b87b869a0c4fa8b80b35e1", "code": ["\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = Graph(scale=scale)\n    for bin_ in hist:\n        if make_value is None:\n            value = bin_\n        else:\n            value = make_value(bin_)\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph\n\n"], "level": "project_runnable", "generate_results": [{"generate_code": "\ndef hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \n    graph = Graph(scale=scale)\n    for bin_ in hist:\n        if make_value is None:\n            value = bin_\n        else:\n            value = make_value(bin_)\n        if get_coordinate == \"left\":\n            coordinate = bin_.left\n        elif get_coordinate == \"right\":\n            coordinate = bin_.right\n        elif get_coordinate == \"middle\":\n            coordinate = bin_.middle\n        else:\n            raise ValueError(\"Invalid get_coordinate value\")\n        graph.add_point(**{field_names[0]: coordinate, field_names[1]: value})\n    return graph\n\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "_id": "62b438ba66fea644fe22cca2", "code": ["\ndef deep_merge_nodes(nodes):\n    \n\n    '''\n    [\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n        ...\n    ]\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. The\n    purpose of merging like this is to support, for instance, merging one borgmatic configuration\n    file into another for reuse, such that a configuration option with sub-options does not\n    completely replace the corresponding option in a merged file.\n\n    If there are colliding keys with scalar values (e.g., integers or strings), the last of the\n    values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,20"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef deep_merge_nodes(nodes):\n    \n\n    '''\n    [\n        (\n            ruamel.yaml.nodes.ScalarNode as a key,\n            ruamel.yaml.nodes.MappingNode or other Node as a value,\n        ),\n        ...\n    ]\n\n    ... deep merge any node values corresponding to duplicate keys and return the result. The\n    purpose of merging like this is to support, for instance, merging one borgmatic configuration\n    file into another for reuse, such that a configuration option with sub-options does not\n    completely replace the corresponding option in a merged file.\n\n    If there are colliding keys with scalar values (e.g., integers or strings), the last of the\n    values wins.\n\n    For instance, given node values of:\n\n        [\n            (\n                ScalarNode(tag='tag:yaml.org,20", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "_id": "62b438b666fea644fe22cc78", "code": ["\ndef parse_arguments(*arguments):\n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    \n    return parser, subparsers\n\n\ndef parse_arguments_for_actions(*arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as a dict mapping from action name (or \"global\") to an argparse.Namespace instance.\n    \n    Raise ValueError if the arguments cannot be parsed.\n    Raise SystemExit with an error code of 0 if \"--help\" was requested.\n    '''\n    parser, subparsers = parse_arguments(*arguments)\n    arguments, remaining_action_arguments = parser.parse_known_args(args=arguments)\n    return arguments, remaining_action_arguments\n\n\nif __name__ == '__main__':\n   "], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*arguments):\n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    \n    return parser, subparsers\n\n\ndef parse_arguments_for_actions(*arguments):\n    '''\n    Given command-line arguments with which this script was invoked, parse the arguments and return\n    them as a dict mapping from action name (or \"global\") to an argparse.Namespace instance.\n    \n    Raise ValueError if the arguments cannot be parsed.\n    Raise SystemExit with an error code of 0 if \"--help\" was requested.\n    '''\n    parser, subparsers = parse_arguments(*arguments)\n    arguments, remaining_action_arguments = parser.parse_known_args(args=arguments)\n    return arguments, remaining_action_arguments\n\n\nif __name__ == '__main__':\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62b438b666fea644fe22cc72", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "_id": "62b438b566fea644fe22cc70", "code": ["\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-completion 2> /dev/null)\"',\n            '    local test_this_script=\"$(cat /dev/null 2> /dev/null)\"',\n            '    local test_installed_script=\"$(cat /dev/null 2"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef bash_completion():\n    \n    (\n        unused_global_parser,\n        action_parsers,\n        global_plus_action_parser,\n    ) = borgmatic.commands.arguments.make_parsers()\n    global_flags = parser_flags(global_plus_action_parser)\n\n    return '\\n'.join(\n        (\n            'check_version() {',\n            '    local this_script=\"$(cat \"$BASH_SOURCE\" 2> /dev/null)\"',\n            '    local installed_script=\"$(borgmatic --bash-completion 2> /dev/null)\"',\n            '    local test_this_script=\"$(cat /dev/null 2> /dev/null)\"',\n            '    local test_installed_script=\"$(cat /dev/null 2", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "_id": "62b438a266fea644fe22cc2e", "code": ["\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError('The --excludes option has been replaced with exclude_patterns in configuration')\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_arguments(*unparsed_arguments):\n    \n    top_level_parser, subparsers = make_parsers()\n    arguments, remaining_arguments = parse_subparser_arguments(\n        unparsed_arguments, subparsers.choices\n    )\n    arguments['global'] = top_level_parser.parse_args(remaining_arguments)\n\n    if arguments['global'].excludes_filename:\n        raise ValueError('The --excludes option has been replaced with exclude_patterns in configuration')\n\n    if 'init' in arguments and arguments['global'].dry_run:\n        raise ValueError('The init action cannot be used with the --dry-run option')\n\n    if (\n        'list' in arguments\n        and 'info' in arguments\n        and arguments['list'].json\n        and arguments['info'].json\n    ):\n        raise ValueError('With the", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "_id": "62b438a266fea644fe22cc2d", "code": ["\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n        args_to_parse = remaining_"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef parse_subparser_arguments(unparsed_arguments, subparsers):\n    \n    arguments = collections.OrderedDict()\n    remaining_arguments = list(unparsed_arguments)\n    alias_to_subparser_name = {\n        alias: subparser_name\n        for subparser_name, aliases in SUBPARSER_ALIASES.items()\n        for alias in aliases\n    }\n\n    if 'borg' in unparsed_arguments:\n        subparsers = {'borg': subparsers['borg']}\n\n    for subparser_name, subparser in subparsers.items():\n        if subparser_name not in remaining_arguments:\n            continue\n        args_to_parse = remaining_", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "_id": "62b438a266fea644fe22cc2c", "code": ["\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument"], "level": "file_runnable", "generate_results": [{"generate_code": "\ndef make_parsers():\n    \n    config_paths = collect.get_default_config_paths(expand_home=True)\n    unexpanded_config_paths = collect.get_default_config_paths(expand_home=False)\n\n    global_parser = ArgumentParser(add_help=False)\n    global_parser.register('action', 'extend', Extend_action)\n    global_group = global_parser.add_argument_group('global arguments')\n\n    global_group.add_argument(\n        '-c',\n        '--config',\n        nargs='*',\n        dest='config_paths',\n        default=config_paths,\n        help='Configuration filenames or directories, defaults to: {}'.format(\n            ' '.join(unexpanded_config_paths)\n        ),\n    )\n    global_group.add_argument", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "_id": "62ece4982e6aefcf4aabbd65", "code": ["\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef parser_flags(parser):\n    \n    return ' '.join(option for action in parser._actions for option in action.option_strings)\n\n", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/borg/check.py", "project": "witten/borgmatic", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "_id": "62ece4982e6aefcf4aabbd77", "code": ["\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == 'always':\n        return None\n    return datetime.timedelta(**{frequency[-1]: int(frequency[:-1])})\n\n\ndef convert_to_datetime(date):\n    \n    if isinstance(date, datetime.datetime):\n        return date\n    return datetime.datetime.strptime(date, '%Y-%m-%d')\n\n\ndef get_borg_version(logger):\n    \n    try:\n        process = subprocess.run(\n            ['borg', '--version'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef parse_frequency(frequency):\n    \n    if frequency is None or frequency == 'always':\n        return None\n    return datetime.timedelta(**{frequency[-1]: int(frequency[:-1])})\n\n\ndef convert_to_datetime(date):\n    \n    if isinstance(date, datetime.datetime):\n        return date\n    return datetime.datetime.strptime(date, '%Y-%m-%d')\n\n\ndef get_borg_version(logger):\n    \n    try:\n        process = subprocess.run(\n            ['borg', '--version'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/borg/list.py", "project": "witten/borgmatic", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "_id": "62ece4992e6aefcf4aabbd79", "code": ["\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-!+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )\n\n\ndef capture_archive_listing(\n    repository_path,\n    archive_name,\n    remote_path=None,\n    destination_path=None,\n    strip_components=None,\n    progress=False,\n    extract_to_stdout=False,\n):\n    '''\n    Given a dry-run flag, a local or remote repository path, an archive name, zero or more paths to\n    restore from the archive, the local Borg version string, an arg"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef make_find_paths(find_paths):\n    \n    if not find_paths:\n        return ()\n\n    return tuple(\n        find_path\n        if re.compile(r'([-!+RrPp] )|(\\w\\w:)').match(find_path)\n        else f'sh:**/*{find_path}*/**'\n        for find_path in find_paths\n    )\n\n\ndef capture_archive_listing(\n    repository_path,\n    archive_name,\n    remote_path=None,\n    destination_path=None,\n    strip_components=None,\n    progress=False,\n    extract_to_stdout=False,\n):\n    '''\n    Given a dry-run flag, a local or remote repository path, an archive name, zero or more paths to\n    restore from the archive, the local Borg version string, an arg", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/generate.py", "project": "witten/borgmatic", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "_id": "62ece4992e6aefcf4aabbd7b", "code": ["\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.')\n\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n\n    os.chmod(config_filename, mode)\n\n\ndef generate_configuration(config_path, repository_path):\n    '''\n    Generate borgmatic configuration into a file at the config path, and update the defaults so as\n    to work for testing (including injecting the given repository path and tacking on an encryption\n    passphrase).\n    '''\n    subprocess.check_call(f'borgmatic config generate --destination {config_path}'.split(' '))\n   "], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    \n    if not overwrite and os.path.exists(config_filename):\n        raise FileExistsError(f'{config_filename} already exists. Aborting. Use --overwrite to replace the file.')\n\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n\n    os.chmod(config_filename, mode)\n\n\ndef generate_configuration(config_path, repository_path):\n    '''\n    Generate borgmatic configuration into a file at the config path, and update the defaults so as\n    to work for testing (including injecting the given repository path and tacking on an encryption\n    passphrase).\n    '''\n    subprocess.check_call(f'borgmatic config generate --destination {config_path}'.split(' '))\n   ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/override.py", "project": "witten/borgmatic", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "_id": "62ece4992e6aefcf4aabbd7e", "code": ["\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    \n    if isinstance(item, str):\n        return _VARIABLE_PATTERN.sub(_resolve_string, item)\n    if isinstance(item, list):\n        for i, subitem in"], "level": "slib_runnable", "generate_results": [{"generate_code": "\ndef _resolve_string(matcher):\n    \n    if matcher.group('escape') is not None:\n        return matcher.group('variable')\n\n    name, default = matcher.group('name'), matcher.group('default')\n    out = os.getenv(name, default=default)\n\n    if out is None:\n        raise ValueError(f'Cannot find variable {name} in environment')\n\n    return out\n\n\ndef resolve_env_variables(item):\n    \n    if isinstance(item, str):\n        return _VARIABLE_PATTERN.sub(_resolve_string, item)\n    if isinstance(item, list):\n        for i, subitem in", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/borgmatic.py", "project": "witten/borgmatic", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "_id": "62ece4992e6aefcf4aabbd8a", "code": ["\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n\n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [logging.makeLogRecord(\n                dict(\n                    levelno=logging.DEBUG,\n                    levelname='DEBUG',\n                    msg=f'{config_filename}: Loading configuration file',\n                )\n            )]\n        )\n        try:\n            configs[config_filename], parse_logs = validate.parse_configuration(\n                config_filename, validate.schema_filename(), overrides, resolve_env\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs.extend(\n                [\n                   "], "level": "plib_runnable", "generate_results": [{"generate_code": "\ndef load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \n\n    configs = collections.OrderedDict()\n    logs = []\n\n    for config_filename in config_filenames:\n        logs.extend(\n            [logging.makeLogRecord(\n                dict(\n                    levelno=logging.DEBUG,\n                    levelname='DEBUG',\n                    msg=f'{config_filename}: Loading configuration file',\n                )\n            )]\n        )\n        try:\n            configs[config_filename], parse_logs = validate.parse_configuration(\n                config_filename, validate.schema_filename(), overrides, resolve_env\n            )\n            logs.extend(parse_logs)\n        except PermissionError:\n            logs.extend(\n                [\n                   ", "is_pass": false, "return_code": 1}]}
{"file_path": "pyseed/apibase.py", "project": "SEED-platform/py-seed", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "_id": "62ece4982e6aefcf4aabbd62", "code": ["\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url\n\n\nclass SEEDBaseClient(JSONAPI):\n    '''Interact with SEED API.\n\n    Raises a SEEDError on an API Error. No further logging or error\n    handling is done. This the responsibility of the caller.\n\n    This should never be used directly, instead inherit from\n    one of the SEED Read or ReadWrite classes with mixins.\n\n    endpoint refers to the endpoint name. This allows you to call an\n    endpoint without having to know the full url.\n\n    Endpoint names are set in config, and can be accessed as self.endpoints.\n\n    '''\n\n    def __init__(self,\n                 base_"], "level": "self_contained", "generate_results": [{"generate_code": "\ndef _replace_url_args(url, url_args):\n    \n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace(f\"/{key}/\", f\"/{value}/\")\n    return url\n\n\nclass SEEDBaseClient(JSONAPI):\n    '''Interact with SEED API.\n\n    Raises a SEEDError on an API Error. No further logging or error\n    handling is done. This the responsibility of the caller.\n\n    This should never be used directly, instead inherit from\n    one of the SEED Read or ReadWrite classes with mixins.\n\n    endpoint refers to the endpoint name. This allows you to call an\n    endpoint without having to know the full url.\n\n    Endpoint names are set in config, and can be accessed as self.endpoints.\n\n    '''\n\n    def __init__(self,\n                 base_", "is_pass": false, "return_code": 1}]}
